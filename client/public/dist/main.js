!function(e){var t={};function i(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(a,n,function(t){return e[t]}.bind(null,n));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=13)}([function(e,t,i){"use strict";var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a};Object.defineProperty(t,"__esModule",{value:!0});var n=i(22);t.createWindow=n.createWindow,t.createShapeRoundBorder=n.createShapeRoundBorder,t.createRoundButton=n.createRoundButton;var o=i(23);function r(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];e[t].apply(e,i)}t.draw=r,t.createLaserBullet=function(e){if(!e.ctx)return new Error("no context");"player"==e.objectOwner&&"blaster"==e.type&&o.weapon1(e,r),"enemy"==e.objectOwner&&"blaster"==e.type&&o.weapon1(e,r),"enemy"==e.objectOwner&&"beam"==e.type&&o.weapon1(e,r)},t.createImage=function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];r.apply(void 0,a([e,"drawImage",t],i))},t.clearField=function(e,t,i){r(e,"clearRect",0,0,t,i)}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(0),o=i(5),r=a(i(4));t.placeEnemyes=function(e){n.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},t.moveEnemyes=function(e,t){void 0===t&&(t=0),this.x-=this.speed,this.y-=t},t.loadEnemyes=function(){this.img=new Image,this.img.src=this.shipTexture},t.shoot=function(e,t){if(t.gameInitData.gamePause||!this.isShoot)return!1;for(var i=this.guns,a=function(i){if(1>t.gameRandomizer(i.fireRepead)){var a=new e(n.x,n.y+(i.firePosition?i.firePosition:t.gameRandomizer(n.height)),i.name,i.color,"enemy",i.speed+n.speed,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);a.img.src=a.texture,a.img.onload=function(){t.gameInitData.allGameBullets=t.gameInitData.allGameBullets.concat(a)}}},n=this,o=0,r=i;o<r.length;o++){a(r[o])}},t.enemyAnimation=function(e){void 0===e&&(e=!0),this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&e&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},t.enemyDamageAnimation=function(){if(this.numberOfVerticalItems>1){var e=this.originalHealthPoint/this.numberOfVerticalItems,t=new Array(this.numberOfVerticalItems).fill(null);t=t.map((function(t,i){return e*(i+1)})).sort((function(e,t){return e-t})).reverse();for(var i=0;i<t.length;i++){if(this.healthPoint<t[i]&&this.healthPoint>t[i+1]&&t[i+1]){this.sy=this.sHeight*i;break}t[i+1]||(this.sy=this.sHeight*(this.numberOfVerticalItems-1))}}},t.takeDamage=function(e,t,i){if(this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"enemy"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint"))return o.explosionFire(this,i,t,r.SideObject),this.objectPresent=!1;if(this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"enemy"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"enemy"==t.objectOwner)a.call(this,null,i),this.enemyDamageAnimation(),this.healthPoint<=0&&(this.objectPresent=!1,o.explosionFire(this,i,t,r.SideObject),this.isBoss&&(i.gameInitData.levelChange=!0));else{if(!this.hasOwnProperty("healthPoint")||"player"!=this.objectOwner||"enemy"!=t.objectOwner)return!1;this.collisionAllow&&a.call(this,i.getLevelUserData(),i)}function a(t,i){if(this.healthPoint-=e,this.healthPoint<=0)return t&&t.life>0?(t.sourse.playerObject.numberOflife-=1,t.sourse.playerObject.numberOflife<=0&&(i.gameOverWindow(),i.gameInitData.gameOver=!0,setTimeout((function(){i.backToStartScreen(r.PlayerShip)}),3e3)),this.healthPoint=t.sourse.playerObject.maxHealth,!1):(i.collectPoints(this.pointsPerUnit),this.objectPresent=!1)}},t.hitDetection=function(e,t,i){for(var a=null,n=0,o=t;n<o.length;n++){var r=o[n],s=e.getObjectPosition.call(e),l=Math.max(s.x,r.x),c=Math.max(s.y,r.y),h=Math.min(s.x+(e.width||s.width),r.x+r.width)-l,u=Math.min(s.y+(e.height||s.height),r.y+r.height)-c;if("collision"==(a=!(Math.sign(h)<0||Math.sign(u)<0)&&"collision")){e.takeDamage&&r.takeDamage&&(e.takeDamage(r.damage?r.damage:0,r,i),r.takeDamage(e.damage?e.damage:0,e,i));break}}return"collision"==a&&e}},function(e,t,i){"use strict";var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a};Object.defineProperty(t,"__esModule",{value:!0});var n=i(0);t.initField=function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error("Error");for(var a=0,n=i;a<n.length;a++){var o=n[a];o=Object.assign(o,{width:e-4,height:t-4})}},t.setGameFields=function(){this.initField(),this.createContext(),this.initPlayerShip()},t.warpEffect=function(){var e=this.getScreenSize(),t=this.gameInitData.ctx,i=this.gameInitData.warpObjects;if(this.getSecondMeasure((function(e){var t=!(this.gameInitData.timeToEressLevel>=0);this.gameInitData.timeToEressLevel>=0&&!t&&(this.gameInitData.timeToEressLevel-=1);this.gameInitData.timeToEressLevel<0&&!t&&this.changeLevelProcedure()}),{timeToEressLevel:this.gameInitData.timeToEressLevel,ctx:t,screenSiz:this.getScreenSize()}),this.gameInitData.warpObjects=i.length<350?this.gameInitData.warpObjects.concat({x:e.width,y:this.gameRandomizer(e.height),height:this.gameRandomizer(20,10),width:10,speed:this.gameRandomizer(10,5),background:this.getRandomColor()}):this.gameInitData.warpObjects,i.length>0)for(var a=0,o=i;a<o.length;a++){var r=o[a];r.x-=r.x>0?r.speed:0,r.width=i.length<150?r.width-r.speed:i.length>150&&i.length<350?r.width+r.speed:r.width-r.speed,t.fillStyle=r.background,n.draw(t,"fillRect",r.x,r.y,r.width,r.height),t.fill()}},t.levelInit=function(e,t,i){var a=this.showLevelData().levelBackgroundElements;i.gameInitData.backScreenPause=!1;for(var n=0,o=a;n<o.length;n++){var r=o[n],s=new e(r.levelMap,r.speed,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null,r.extraMap?r.extraMap:null,r.timeToExtraMapSeconds?r.timeToExtraMapSeconds:null,r.timeToExtraMapMinutes?r.timeToExtraMapMinutes:null);i.gameInitData.mapBackgroundObjects=i.gameInitData.mapBackgroundObjects.concat(s),s.img.src=__dirname+s.backgroundTexture}},t.createContext=function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},t.getScreenSize=function(){return{width:this.gameInitData.screen.width,height:this.gameInitData.screen.height}},t.changeLevelProcedure=function(){var e=this.showGameInfo();this.changeLevel(e.gameData.currentLevel+1)<=e.gameData.levelData.allLevels?this.nextLevelDataReload(e):this.gameInitData.gameWin=!0},t.levelTimer=function(){var e=this.getLevelUserData();if(e.sourse.levelData.bosPresents)e.sourse.levelData.levelDetails.levelSeconds=null,e.sourse.levelData.levelDetails.levelMinutes=null;else{e.sourse.levelData.levelDetails;this.gameInitData.levelChange||this.getSecondMeasure((function(e){e.levelSeconds<=0&&(0==e.levelMinutes&&0==e.levelSeconds&&(e.levelSeconds=0,this.gameInitData.levelChange=!0),e.levelMinutes=e.levelMinutes>0?e.levelMinutes-1:0);e.levelSeconds=e.levelSeconds>0?e.levelSeconds-1:this.gameInitData.levelChange?0:59}),e.sourse.levelData.levelDetails)}},t.getSecondMeasure=function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];var n=1e3/this.gameInitData.intervalCount;if(this.gameInitData.gemeExtraSeconds%n==0)return this.gameInitData.gemeExtraSeconds=0,e?e.call.apply(e,a([this],t)):n},t.gameSecondsIncrease=function(){this.gameInitData.gemeExtraSeconds+=1},t.getLevelUserData=function(){var e=this.gameInitData.gameData,t=e.levelData.levelDetails;return{sourse:e,currentLevel:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,life:e.playerObject.numberOflife,minutes:t.levelMinutes,seconds:t.levelSeconds}},t.deleteBullet=function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},t.deleteObjects=function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},t.delateSideObject=function(e){if(!e.objectPresent||e.x<0-e.width){var t=this.gameInitData.allGameSideObjects.indexOf(e);this.gameInitData.allGameSideObjects.splice(t,1)}},t.collectPoints=function(e){this.gameInitData.gameData.currentPoint+=e},t.getObjectPosition=function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},t.getRandomColor=function(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e},t.preloadImage=function(e){var t=document.querySelector("#preloader");function i(e,t,i){"skinName"!=e&&"texture"!=e&&"levelMap"!=e||t&&(i.src=__dirname+t)}!function e(a){if(!a)return;for(var n=0,o=Object.entries(a);n<o.length;n++){var r=o[n],s=r[0],l=r[1];"object"==typeof a[s]&&e(a[s]),i(s,l,t)}}(e)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=function(e,t){e(t=t||this)},t.getUIObjectPosition=function(){return{x:this.propertyes.x,y:this.propertyes.y,width:this.propertyes.width,height:this.propertyes.height}}},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(25)),a(i(36)),a(i(37)),a(i(40)),a(i(41)),a(i(42))},function(e,t,i){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,i=1,a=arguments.length;i<a;i++)for(var n in t=arguments[i])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.explosionFire=function(e,t,i,r){return n(this,void 0,void 0,(function(){var n,s,l,c,h,u;return o(this,(function(o){switch(o.label){case 0:return n=i.x+i.width/2,s=e.x+e.width/2,l=Math.max(n,s)-Math.min(n,s),i.x>e.x?l:l/2,c={x:e.x-e.explosion.width/2,y:e.bulletType?e.y-e.explosion.width/2:e.y,sx:0,sy:0,objectOwner:"explosion",sWidth:e.explosion.imageWidth/e.explosion.numberOfItems,sHeight:e.explosion.imageHeight,width:2*e.explosion.width,height:2*e.explosion.width,animationSteps:e.explosion.animationSteps,target:i.objectOwner,numberOfItems:e.explosion.imageWidth/e.explosion.numberOfItems,texture:e.explosion.texture,speed:i.speed/2,picturesWidth:e.explosion.imageWidth},(h=new r(a({},c))).img.onload=function(){t.gameInitData.allGameSideObjects=t.gameInitData.allGameSideObjects.concat(h)},u=h.img,[4,h.texture];case 1:return u.src=o.sent(),[2]}}))}))},t.fireAnimationEnded=function(e){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.objectPresent=!1,this.sx=0)),this.sx>=this.picturesWidth&&(this.animationState=!1)},t.mapObjectMove=function(){this.x-=this.speed?this.speed:3},t.mapRanomObjectSpawn=function(e,t,i){this.getSecondMeasure((function(e,t,i){var n=this,o=this.showGameInfo().gameData.levelData;if(this.gameRandomizer(o.objectProbability)<o.objectMinTimeSpawn){var r=this.getScreenSize(),s=e[this.gameRandomizer(e.length)],l="bottom"==s.spawnDetails.position&&"string"==typeof s.spawnDetails.position?r.height-this.gameRandomizer(s.height):"top"==s.spawnDetails.position&&"string"==typeof s.spawnDetails.position?this.gameRandomizer(s.height):"string"==typeof s.spawnDetails.position?this.gameRandomizer(r.height):s.spawnDetails.position,c={x:r.width,y:l,sx:0,sy:0,objectOwner:s.objectOwner,sWidth:s.imageWidth/s.numberOfItems,sHeight:s.imageHeight,width:s.width,height:s.height,animationSteps:s.animationSteps,target:null,numberOfItems:s.numberOfItems,texture:s.skinName,speed:s.speed,picturesWidth:s.imageWidth,healthPoint:s.healthPoint,damage:s.damage,isBackground:s.isBackground,explosion:s.explosionAnimation,pointsPerUnit:s.pointsPerUnit},h=new t(a({},c));h.img.src=h.texture,h.img.onload=function(){n.gameInitData.allGameSideObjects=n.gameInitData.allGameSideObjects.concat(h)}}}),e,t,i)}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(20),r=i(2),s=i(24).remote;function l(e){return a(this,void 0,void 0,(function(){var t,i,a,s,l,c;return n(this,(function(n){switch(n.label){case 0:return t={host:"http://localhost:3000/",picturesDirection:__dirname+"/public/images/",levelData:{method:"GET",url:"api/level-data"},levelObjects:{method:"GET",url:"api/level-objects"},gameSetings:{method:"GET",url:"api/game-settings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,o.getData({url:t.host+t.levelData.url,method:t.levelData.method,data:null,headers:{maplevel:e.level}})];case 1:return i=n.sent(),[4,o.getData({url:t.host+t.levelObjects.url,method:t.levelObjects.method,data:null,headers:{mapObject:i.levelOBjects}})];case 2:return a=n.sent(),[4,o.getData({url:t.host+t.gameSetings.url,method:t.gameSetings.method,data:null,headers:null})];case 3:return s=n.sent(),[4,o.getData({url:t.host+t.userShip.url,method:t.userShip.method,data:null,headers:{usership:e.shipConfiguration}})];case 4:return l=n.sent(),[4,o.getData({url:t.host+t.enemylData.url,method:t.enemylData.method,data:null,headers:{"ship-type-number":i.enemyType}})];case 5:return c=n.sent(),r.preloadImage(c),r.preloadImage(i),r.preloadImage(a),[2,{levelData:i,levelObjects:a,gameSetings:s,userData:l,enemyData:c}]}}))}))}function c(e){return a(this,void 0,void 0,(function(){var t,i,a,o,r,s,c,h,u,d,m;return n(this,(function(n){switch(n.label){case 0:return t=document.querySelector("#gamefield"),i=document.querySelector("#gameObjectsfield"),a=document.querySelector("#gameUifield"),1,r=5,[4,l({level:o=5,shipConfiguration:1})];case 1:return s=n.sent(),c=s.levelData,h=s.levelObjects,u=s.gameSetings,d=s.userData,m=s.enemyData,[2,{data:{ctx:null,gameField:t||null,gameActionField:i||null,gameUIField:a||null,gameData:{currentLevel:o,currentPoint:0,playerObject:new e(d,0,300,r,100,100,d.size.width,d.size.height,d.damage),levelData:c,levelObjects:h,gameSetings:u,enemyData:m,controllers:null},screen:{width:window.innerWidth,height:window.innerHeight},intervalCount:20,enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],warpObjects:[],timeToEressLevel:6,levelChange:!1,gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameStatus:!1,gameOver:!1,gameWin:!1,gemeExtraSeconds:0}}]}}))}))}t.serverRequest=l,t.gameDataInit=c,t.gameEngine=function(e){return a(this,void 0,void 0,(function(){return n(this,(function(e){return[2]}))}))},t.gameStart=function(){this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!0},t.backToStartScreen=function(e){return a(this,void 0,void 0,(function(){var t,i,a,o,r,s;return n(this,(function(n){switch(n.label){case 0:return[4,c(e)];case 1:for(t=n.sent(),i=0,a=Object.entries(t.data);i<a.length;i++)o=a[i],r=o[0],null!==(s=o[1])&&(this.gameInitData[r]=s);return this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!1,[2]}}))}))},t.exitTheGame=function(){s.getCurrentWindow().close()}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=a(i(4)),o=a(i(26));t.initPlayerShip=function(e){var t=this;if(this.ctx){var i=this.data.texture,a=e.showGameInfo().imageDirrection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=a+i}},t.movePlayerShip=function(){this.img&&this.ctx&&this.img&&o.createImage(this.ctx,this.img,this.x,this.y,this.width,this.height)},t.shipControl=function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(a){if(e.gameInitData.gamePause)return!1;i.down.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(i){if(e.gameInitData.gamePause)return!1;if("CANVAS"===i.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var a=i.clientX-i.target.offsetLeft,n=i.clientY-i.target.offsetTop;t.xFinal=(a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed))-t.width/2,t.yFinal=(n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed))-t.height/2}})),document.addEventListener("click",(function(i){if(e.gameInitData.gamePause)return!1;for(var a=function(i){var a=new n.BulletConstruct(t.x,t.y+i.firePosition,i.name,i.color,"player",i.speed+t.xAdj,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);a.img.src=a.texture,a.img.onload=function(){e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(a)}},o=0,r=t.data.guns;o<r.length;o++){a(r[o])}}))},t.setContext=function(e){this.ctx=e},t.placeShip=function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.xAdj=this.x>this.xFinal?0:e,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.moveShip=function(e){var t=e.xPos,i=void 0===t?0:t,a=e.yPos,n=void 0===a?0:a;this.x+=i,this.y+=n}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uiImage=function(e){var t=e.propertyes;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},t.uiText=function(e){var t=e.propertyes;t.ctx.measureText(e.text).width,t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)},t.uiRepeatImage=function(e){var t=e.propertyes,i=t.ctx.createPattern(t.background,"repeat-x");t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.rect(t.x,t.y,t.width,t.height),t.ctx.fillStyle=i,t.ctx.fill()}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(6);t.nextLevelDataReload=function(e){return a(this,void 0,void 0,(function(){function t(e){for(var a=0,n=Object.entries(e);a<n.length;a++){var o=n[a],r=o[0],s=o[1];"object"!=typeof e[r]||null==s||e[r].length||t(e[r]),i.call(this,r,e)}}function i(e,t){for(var i=0,a=Object.entries(l);i<a.length;i++){var n=a[i],o=n[0],r=n[1];o==e&&null!=r&&(this.gameInitData[o]=r)}}var a,r,s,l;return n(this,(function(i){switch(i.label){case 0:return a=e.gameData.currentLevel,[4,o.serverRequest({level:a,shipConfiguration:1})];case 1:return r=i.sent(),l={gameData:{currentLevel:a,currentPoint:(s=this).gameInitData.gameData.currentPoint,playerObject:s.gameInitData.gameData.playerObject,levelData:r.levelData,levelObjects:r.levelObjects,gameSetings:s.gameInitData.gameData.gameSetings,enemyData:r.enemyData,controllers:s.gameInitData.gameData.controllers},enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameOver:!1,gemeExtraSeconds:0},setTimeout((function(){s.gameInitData.warpObjects=[],s.gameInitData.timeToEressLevel=6,s.gameInitData.levelChange=!1}),5e3),t.call(this,this.gameInitData),[2]}}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.enemyShipLogicVertical=function(e,t){var i=Math.max(e.x,this.x),a=Math.min(e.x,this.x),n=Math.max(e.y-this.height/2,this.y),o=Math.min(e.y-this.height/2,this.y),r=i-a,s=n-o;if(this.isMove&&this.behavior)switch(this.behavior){case"patrool":if(!this.direction){var l=t.gameRandomizer(2,1);this.direction=1==l?"up":"down"}(function(e){var t=e.getScreenSize(),i=Math.max(this.y,this.yFinal)-Math.min(this.y,this.yFinal);switch(this.direction){case"up":this.yFinal=0,this.y-this.height<this.yFinal&&(this.direction="down");break;case"down":this.yFinal=t.height,this.y+this.height>this.yFinal&&(this.direction="up");break;default:this.yFinal=t.height/2}this.enemyVerticalMoveCalculation(i)}).call(this,t);break;case"find":c.call(this);break;case"attack":(function(e,t,i){this.yFinal=i.y-this.height/2,t<100&&this.enemyVerticalMoveCalculation(e)}).call(this,s,r,e);break;case"comeEndFind":c.call(this),function(){var e=t.getScreenSize();this.x<e.width-2*this.width&&(this.speed=0)}.call(this);break;default:c.call(this)}function c(){if(this.spotDistance>r||this.spotDistance>s)return this.yFinal=e.y-this.height/2,this.enemyVerticalMoveCalculation(s),!0}},t.enemyVerticalMoveCalculation=function(e){var t=e/this.verticalSpeed;t=(t=Math.sign(t)>0?t:-1*t)>this.verticalSpeed?this.verticalSpeed:t,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.spawnEnemyLogic=function(e){var t=this.gameInitData.gameData,i=t.levelData,a=t.enemyData,n=this.getLevelUserData(),o=n.sourse.levelData.bosPresents?n.sourse.levelData.bosPresents:null;if(this.gameInitData.gameData.levelChange||o){if(0==this.gameInitData.allGameEnemies.length){var r=this.createNewEnemy(a[0],e);r.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}}else(function(){if(this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var t=this.gameRandomizer(i.enemyMaxNumber);t<i.enemyMaxNumber;t++){var n=a[this.gameRandomizer(a.length)],o=this.createNewEnemy(n,e);o.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(o)}}).call(this)},t.createNewEnemy=function(e,t){var i=this.gameInitData.screen.width+300,a=this.gameRandomizer(this.gameInitData.screen.height-200,100);if(e.details){var n=e.details,o=n.behavior?n.behavior[this.gameRandomizer(n.behavior.length)]:null;return new t({x:i,y:a,sx:n.sx,sy:n.sy,sWidth:n.imageWidth/n.numberOfItems,sHeight:n.imageHeight,picturesWidth:n.imageWidth,numberOfItems:n.numberOfItems,width:n.width,height:n.height,shipTexture:n.skinName,speed:n.speed,status:n.status,name:n.name,bulletTypeNumber:n.bulletType,rapidFire:n.rapidFire,pointsPerUnit:n.pointsPerUnit,healthPoint:n.healthPoint,animationSteps:n.animationSteps,damage:n.damage,objectOwner:n.objectOwner,guns:n.guns?n.guns:[],explosion:n.explosionAnimation,numberOfVerticalItems:n.numberOfVerticalItems,isMove:n.isMove,isShoot:n.isShoot,spotDistance:n.spotDistance,behavior:o,verticalSpeed:n.verticalSpeed?n.verticalSpeed:null,isBoss:!!n.isBoss&&n.isBoss})}},t.gameRandomizer=function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(0);t.updateMap=function(){this.x-=this.backgroundSpeed,Math.sign(this.backgroundSpeed)>0&&this.x+this.screenData.width<0?this.x=this.screenData.width:Math.sign(this.backgroundSpeed)<0&&this.x>this.screenData.width&&(this.x=0-this.screenData.width),a.createImage(this.ctx,this.img,this.x,0,this.screenData.width+2,this.screenData.height)},t.changePartOfTexture=function(e,t){var i=e.getLevelUserData(),a=e.getScreenSize();if(i.minutes<=this.timeToExtraMapMinutes&&i.seconds<=this.timeToExtraMapSeconds&&this.extraMap&&this.x>=a.width-200){var n=e.showGameInfo();this.img.src=n.imageDirrection+this.extraMap}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(0);t.createBullets=function(e){a.createLaserBullet({source:this,objectOwner:this.objectOwner,ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5,type:this.type,img:this.img,sx:this.sx,sy:this.sy,sWidth:this.sWidth,sHeight:this.sHeight})},t.initBullets=function(){},t.moveBullets=function(e,t){switch(this.type){case"blaster":i.call(this);break;case"beam":(function(){t.getScreenSize();this.x>0?this.width+=this.bulletSpeed:this.width>0&&(this.x=0,this.width-=this.bulletSpeed)}).call(this),i.call(this);break;default:i.call(this)}function i(){"player"==this.objectOwner?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0}),i(14);i(18);var r=o(i(19)),s=o(i(4)),l=i(0),c=i(44);!function(){a(this,void 0,void 0,(function(){function e(){return a(this,void 0,void 0,(function(){var e,i,a,r,u,m,g,p,f,y,b,v;return n(this,(function(n){if(o.gameInitData.ctxUIField&&l.clearField(o.gameInitData.ctxUIField,o.gameInitData.screen.width,o.gameInitData.screen.height),o.gameInitData.ctxActionField&&!o.gameInitData.gamePause&&l.clearField(o.gameInitData.ctxActionField,o.gameInitData.screen.width,o.gameInitData.screen.height),o.gameInitData.backScreenPause&&o.levelInit(s.GameBackground,o.gameInitData.ctx,o),!o.gameInitData.gamePause&&o.gameInitData.gameStatus&&o.gameInitData.gameStatus){if(o.gameInitData.levelChange||o.spawnEnemyLogic(s.EnemyObject),o.gameInitData.allGameBullets.length>0)for(e=0,i=o.gameInitData.allGameBullets;e<i.length;e++)(a=i[e]).moveBullets(h,o),a.createBullets(o),o.deleteBullet(a),o.hitDetection(a,o.gameInitData.allGameEnemies,o),o.hitDetection(h,[a],o),o.hitDetection(a,o.gameInitData.allGameSideObjects,o);if(o.gameInitData.allGameEnemies.length>0)for(r=0,u=o.gameInitData.allGameEnemies;r<u.length;r++)(m=u[r]).placeEnemyes(o),m.moveEnemyes(),m.enemyShipLogicVertical({x:h.x,y:h.y},o),m.enemyAnimation(!0),m.shoot(s.BulletConstruct,o),o.deleteObjects(m),o.hitDetection(h,[m],o);if(o.gameInitData.gameOver||(h.placeShip(),h.movePlayerShip()),o.gameInitData.allGameSideObjects.length>0)for(g=0,p=o.gameInitData.allGameSideObjects;g<p.length;g++)(f=p[g]).placeEnemyes(o),"explosion"==f.objectOwner?f.fireAnimationEnded(o.gameInitData.allGameSideObjects):("enemy"!=f.objectOwner&&"collide"!=f.objectOwner||o.hitDetection(h,[f],o),f.enemyAnimation()),f.mapObjectMove(),o.delateSideObject(f);o.gameInitData.gameData.levelObjects&&o.mapRanomObjectSpawn(o.gameInitData.gameData.levelObjects,s.SideObject,o.gameInitData.allGameSideObjects),o.gameSecondsIncrease(),o.levelTimer()}if(!(o.gameInitData.backScreenPause&&o.gameInitData.gamePause&&o.gameInitData.gameStatus||o.gameInitData.gamePause&&o.gameInitData.gameStatus)){for(o.gameInitData.ctx&&l.clearField(o.gameInitData.ctx,o.gameInitData.screen.width,o.gameInitData.screen.height),y=0,b=o.gameInitData.mapBackgroundObjects;y<b.length;y++)(v=b[y]).updateMap(),v.changePartOfTexture(o,o.gameInitData.mapBackgroundObjects);o.gameInitData.levelChange&&o.warpEffect()}return o.gameInitData.gameStatus||o.showStartWindow(),o.gameInitData.gameStatus&&o.showGameStats(),o.gameInitData.gamePause&&o.gameInitData.gameStatus&&o.showPauseWindow(),o.gameInitData.gameUiPause&&o.gameInitData.gameStatus&&(o.showMenuWindow(),o.showPauseWindow()),o.gameInitData.gameOver&&o.gameOverWindow(),!o.gameInitData.gameWin||o.gameInitData.gameUiPause||o.gameInitData.gamePause||o.gameWinWindow(),c.hideShowMenu(t,d.menu,o.gameInitData.gameWin,o.gameInitData.gameStatus,o.gameInitData.gameUiPause),[2]}))}))}var t,i,o,h,u,d;return n(this,(function(a){switch(a.label){case 0:return document.querySelector("#wrapper"),t=document.querySelector("#main-menu"),[4,r.gameDataInit(s.PlayerShip)];case 1:return i=a.sent(),[4,new s.Game(i.data)];case 2:return o=a.sent(),h=o.gameInitData.gameData.playerObject,setInterval(e,o.gameInitData.intervalCount),o.uiController(),o.setGameFields(),o.getScreenSize(),u=o.returnContext(),h.ctx=u.gameActionField,h.initPlayerShip(o),h.shipControl(o),(d=c.appMenu(o,c.dialogWindow)).menu.init(),[2]}}))}))}()},function(e,t,i){var a=i(15),n=i(16);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var o={insert:"head",singleton:!1},r=(a(n,o),n.locals?n.locals:{});e.exports=r},function(e,t,i){"use strict";var a,n=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function s(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},a=[],n=0;n<e.length;n++){var o=e[n],l=t.base?o[0]+t.base:o[0],c=i[l]||0,h="".concat(l," ").concat(c);i[l]=c+1;var u=s(h),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(r[u].references++,r[u].updater(d)):r.push({identifier:h,updater:f(d,t),references:1}),a.push(h)}return a}function c(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var n=i.nc;n&&(a.nonce=n)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,i,a){var n=i?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var o=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,i){var a=i.css,n=i.media,o=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),o&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var g=null,p=0;function f(e,t){var i,a,n;if(t.singleton){var o=p++;i=g||(g=c(t)),a=d.bind(null,i,o,!1),n=d.bind(null,i,o,!0)}else i=c(t),a=m.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<i.length;a++){var n=s(i[a]);r[n].references--}for(var o=l(e,t),c=0;c<i.length;c++){var h=s(i[c]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}i=o}}}},function(e,t,i){(t=i(17)(!1)).push([e.i,"body{font-family:'Roboto';color:#fff;background:#333;margin:0;padding:0;-khtml-user-select:none;user-select:none}body #preloader{visibility:hidden;width:0px;height:0px}.static-wrapper{display:flex;position:absolute;top:0;width:100vw}.static-wrapper asside{z-index:10}.static-wrapper asside .main-menu{top:10px}.static-wrapper asside .main-menu ul{display:block;top:105px;position:relative;text-transform:uppercase}.static-wrapper asside .main-menu ul li{padding:10px;list-style:none}.static-wrapper asside .main-menu ul a{color:#ffc800;text-decoration:none;font-size:25px}.static-wrapper asside .main-menu ul a:active{color:red}.content-wrapper{width:100%;max-height:100vh;overflow-y:hidden}.content-wrapper .menu-pages-wrapper{background:#847079;margin-top:-20px;height:100vh;padding:20px}.dialog-box{position:absolute;margin:0 auto;padding:10px;min-width:100%;min-height:100vh;position:fixed;left:0}.dialog-box .dialog-wrapper{display:flex;height:100vh;justify-content:center;align-items:center}.dialog-box .dialog-wrapper .dialog-window{background:#340054;padding:20px;min-width:300px;min-height:80px;border-radius:5px}.dialog-box .dialog-wrapper .dialog-window div{padding:10px}.dialog-box .dialog-wrapper .dialog-window .dialog-btn-area{display:flex;justify-content:space-evenly}.dialog-box .dialog-wrapper .dialog-window .dialog-btn-area button.accept-btn{background:#4B99AE;border-radius:5px;border:0px;width:calc(100% / 3);padding:10px}.dialog-box .dialog-wrapper .dialog-window .dialog-btn-area button.reject-btn{background:#945E75;border-radius:5px;border:0px;width:calc(100% / 3);padding:10px}#wrapper section{z-index:5;top:0}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}.hide-menu{visibility:hidden}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var n=(r=a,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(o).concat([n]).join("\n")}var r,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,a){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(a)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(n[r]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);a&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports=require("path")},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(6)),a(i(9))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(21);t.getData=function(e){var t=e.url,i=e.method,a=e.data,n=e.headers,o=Object.assign({"Content-Type":"application/json"},n||!1);return fetch(t,{method:i,mode:"cors",headers:o,body:a?JSON.stringify(a):null}).then((function(e){return e.json()})).then((function(e){return e}))},t.getLocalData=function(e){var t=e.fileName;if(!t)throw Error("no local files");a.readFile(__dirname+"/public/data/"+t,(function(e,t){if(e)throw Error(e);var i=JSON.parse(t);return console.log(i),i}))}},function(e,t){e.exports=require("fs")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createWindow=function(e,t){var i=this.getScreenSize();i.width,i.height,e.fillRect(t.x,t.y,t.width,t.height)},t.createShapeRoundBorder=function(e){var t=e.propertyes;if(t.ctx.fillStyle=t.background,t.gradient){var i=t.ctx.createLinearGradient(t.topX,t.topY,t.bottomX,t.bottomY);i.addColorStop(0,t.background),i.addColorStop(1,t.backGroundFinal),t.ctx.fillStyle=i}t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.stroke()),t.ctx.closePath(),t.ctx.fill()},t.createRoundButton=function(e){var t=e.propertyes,i=t.ctx.measureText(e.text).width/3.2,a=t.textProperty.leftPadding+i+t.textProperty.rightPadding;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+a-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+a,t.y,t.x+a,t.y+t.radius),t.ctx.lineTo(t.x+a,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+a,t.y+t.height,t.x+a-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill(),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.lineWidth=t.borderRadius,t.ctx.stroke()),t.ctx.font=e.fontSize,t.ctx.fillStyle=t.textProperty.textColor,t.ctx.shadowColor=t.textProperty.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillText(e.text,t.x+t.textProperty.leftPadding,t.y+t.height/2+t.textProperty.topPadding)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.weapon1=function(e,t){t(e.ctx,"drawImage",e.img,e.sx,e.sy,e.sWidth,e.sHeight,e.x,e.y,e.width+10,e.height+10)},t.weapon1backward=function(e,t){t(e.ctx,"drawImage",e.img,0,0,e.width,e.height,e.x,e.y,e.width+10,e.height+10)}},function(e,t){e.exports=require("electron")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(10),n=i(1),o=i(9),r=i(2),s=i(7),l=i(29),c=i(6),h=i(5),u=function(){function e(e){this.gameInitData=e}return e.prototype.changeLevel=function(e){return this.gameInitData.gameData.currentLevel=e,this.gameInitData.gameData.currentLevel},e.prototype.showGameInfo=function(){return{levelToChange:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint,gameData:this.gameInitData.gameData,imageDirrection:__dirname+"/public/images/"}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();t.Game=u,u.prototype.createContext=r.createContext,u.prototype.initField=r.initField,u.prototype.levelInit=r.levelInit,u.prototype.setGameFields=r.setGameFields,u.prototype.warpEffect=r.warpEffect,u.prototype.getScreenSize=r.getScreenSize,u.prototype.getLevelUserData=r.getLevelUserData,u.prototype.levelTimer=r.levelTimer,u.prototype.getSecondMeasure=r.getSecondMeasure,u.prototype.gameSecondsIncrease=r.gameSecondsIncrease,u.prototype.initPlayerShip=s.initPlayerShip,u.prototype.deleteBullet=r.deleteBullet,u.prototype.deleteObjects=r.deleteObjects,u.prototype.delateSideObject=r.delateSideObject,u.prototype.hitDetection=n.hitDetection,u.prototype.collectPoints=r.collectPoints,u.prototype.spawnEnemyLogic=a.spawnEnemyLogic,u.prototype.createNewEnemy=a.createNewEnemy,u.prototype.gameRandomizer=a.gameRandomizer,u.prototype.uiController=l.uiController,u.prototype.gameUiPause=l.gameUiPause,u.prototype.gameUiMenu=l.gameUiMenu,u.prototype.showMenuWindow=l.showMenuWindow,u.prototype.showUiPopupWindow=l.showUiPopupWindow,u.prototype.showStartWindow=l.showStartWindow,u.prototype.showPauseWindow=l.showPauseWindow,u.prototype.gameOverWindow=l.gameOverWindow,u.prototype.gameWinWindow=l.gameWinWindow,u.prototype.showGameStats=l.showGameStats,u.prototype.initUiElements=l.initUiElements,u.prototype.gameStart=c.gameStart,u.prototype.backToStartScreen=c.backToStartScreen,u.prototype.exitTheGame=c.exitTheGame,u.prototype.nextLevelDataReload=o.nextLevelDataReload,u.prototype.changeLevelProcedure=r.changeLevelProcedure,u.prototype.getRandomColor=r.getRandomColor,u.prototype.mapRanomObjectSpawn=h.mapRanomObjectSpawn},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(0)),a(i(8)),a(i(27))},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(8)),a(i(28))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.warpElement=function(){var e=null.createLinearGradient(0,0,170,0);e.addColorStop("0","magenta"),e.addColorStop("0.5","blue"),e.addColorStop("1.0","red")}},function(e,t,i){"use strict";var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a};Object.defineProperty(t,"__esModule",{value:!0});var n=i(0),o=i(30),r=i(31),s=i(32),l=i(33),c=i(34),h=i(35),u=i(8),d=i(1);t.gameUiPause=function(){!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},t.gameUiMenu=function(e){this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,this.gameInitData.gamePause=!e},t.uiController=function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,i=this;document.addEventListener("keydown",(function(a){t.escape.some((function(e){return a.keyCode==e}))&&i.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return a.keyCode==e}))&&i.gameUiPause()})),document.addEventListener("click",(function(t){var a=e.getLevelUserData();if("CANVAS"===t.target.tagName){var n=t.clientX-t.target.offsetLeft,s=t.clientY-t.target.offsetTop,l=null,c=e.gameInitData.ctxUIField,u=e.getScreenSize();e.gameInitData.gameStatus||(l=o.gameLoadMenu(null,c,u.width,u.height,null),m.call(e,l)),e.gameInitData.gameUiPause&&(l=r.gameSettingsMenu(null,c,u.width,u.height),m.call(e,l)),e.gameInitData.gameWin&&(l=h.gameWinScreen(null,c,u.width,u.height,null,a),m.call(e,l))}function m(e){for(var t in e){if(d.hitDetection(e[t],[].concat({x:n,y:s,width:10,height:10,name:"cursor"}),this)&&e[t].action){e[t].action.call(this,i);break}}}}))},t.showUiPopupWindow=function(){n.createWindow.call(this)},t.showStartWindow=function(){var e=[n.createRoundButton,u.uiImage,u.uiText,u.uiText];this.initUiElements(e,o.gameLoadMenu)},t.showMenuWindow=function(){var e=[n.createShapeRoundBorder,n.createRoundButton,u.uiText];this.initUiElements(e,r.gameSettingsMenu)},t.showPauseWindow=function(){var e=[u.uiText];this.initUiElements(e,s.gamePause)},t.showGameStats=function(){var e=this.getLevelUserData(),t=[u.uiImage,u.uiText,u.uiText,u.uiText];this.initUiElements(t,l.gameInformationScreen,e)},t.gameOverWindow=function(){var e=[u.uiText,u.uiText,u.uiText];this.initUiElements(e,c.gameOverScreen)},t.gameWinWindow=function(){var e=this.getLevelUserData(),t=[u.uiText,u.uiText,u.uiText,n.createRoundButton,n.createRoundButton,n.createRoundButton];this.initUiElements(t,h.gameWinScreen,e)},t.initUiElements=function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];for(var o=this.gameInitData.ctxUIField,r=this.getScreenSize(),s=this.showGameInfo().imageDirrection,l=t.apply(void 0,a([null,o,r.width,r.height,s],i)),c=0;c<l.length;c++)l[c].hasOwnProperty("loadPicture")&&l[c].loadPicture(),l[c].init(e[c])}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gameLoadMenu=function(e,t,i,n,o){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-165,y:n/2+150,background:"rgba(255, 255, 255, 1)",isBorder:!0,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 0)",textProperty:{textColor:"#251536",topPadding:10,rightPadding:40,bottomPadding:10,leftPadding:40},radius:45},action:function(){this.gameStart()},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,shadowColor:"rgba(37, 21, 54, 1)",propertyes:{ctx:t,width:150,height:150,sWidth:1024,sHeight:1024,x:i/2-75,y:90,background:new Image,borderColor:!1,shadowColor:"rgba(37, 21, 54, 1)",radius:null},loadPicture:function(){this.propertyes.background.src=o+"misc/logo-1024x1024.png"},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:-290,height:0,x:i/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:0,x:i/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(89, 0, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),o=a(i(4));t.gameSettingsMenu=function(e,t,i,a){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:i,height:400,x:0,y:100,gradient:!0,backGroundFinal:"#8C31A3",topX:0,topY:0,bottomX:i,bottomY:100,background:"#6628A7",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(0, 0, 0, 1)",radius:5},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"go to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:200,height:50,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 0)",textProperty:{textColor:"#251536",topPadding:7,rightPadding:50,bottomPadding:10,leftPadding:20},radius:15},action:function(){this.backToStartScreen.call(this,o.PlayerShip)},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 0)",propertyes:{ctx:t,width:-45,height:0,x:i/2,y:150,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gamePause=function(e,t,i,n,o){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"60px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:n/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gameInformationScreen=function(e,t,i,n,o,r){return[{name:"lifePoint",text:"",number:r.life,step:[r.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,shadowColor:"rgba(0, 0, 0, 1)",radius:null},loadPicture:function(){this.propertyes.background.src=o+"misc/ruby.png"},init:function(e,t){t=t||this;for(var i=Array(r.life).fill(0).map((function(e,t){return 30*t})),a=0;a<this.number;a++)this.propertyes.x=0==a?30:0+i[a]+(0!=a?30:0),e(t)},getObjectPosition:a.getUIObjectPosition},{name:"level",text:"Current Level "+r.currentLevel+"/"+r.allLevels+" ",description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",propertyes:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Time to end f level",text:r.minutes||r.seconds?"Time to level end "+(r.minutes-10>=0?"":0)+r.minutes+":"+(r.seconds-10>=0?"":0)+r.seconds:"Boss level",description:"Game part the name",clicked:!1,fontSize:"light 16px Roboto",propertyes:{ctx:t,width:50,height:0,x:i-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game points",text:r.points,description:"Game part the name",clicked:!1,fontSize:"light 18px Roboto",propertyes:{ctx:t,width:-50,height:0,x:i/2,y:50,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gameOverScreen=function(e,t,i,n,o){return e||[{name:"Pause text",text:"Game Over",description:"text for game over window",fontSize:"110px Arial",clicked:!1,propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:n/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),o=a(i(4));t.gameWinScreen=function(e,t,i,a,r,s){return e||[{name:"screen title",text:"YOU WIN ",description:"text for game over window",fontSize:" bold 120px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2-a/4,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"screen text",text:"Congratulation ",description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"score",text:"You score is "+s.points,description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"Save results",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:300,height:50,x:i/2+i/3,y:a/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"go to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:200,height:50,x:20,y:a/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){this.backToStartScreen.call(this,o.PlayerShip)},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(2),n=i(11),o=function(e,t,i,a,n,o,r,s){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=a,this.x=n?0:i.width,this.y=0,this.img=new Image,this.extraMap=o,this.timeToEressLevel=4,this.warpObjects=[],this.timeToExtraMapSeconds=r,this.timeToExtraMapMinutes=s};t.GameBackground=o,o.prototype.updateMap=n.updateMap,o.prototype.warpEffect=a.warpEffect,o.prototype.changePartOfTexture=n.changePartOfTexture},function(e,t,i){"use strict";var a=this&&this.__rest||function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i};Object.defineProperty(t,"__esModule",{value:!0});var n=i(10),o=i(1),r=i(38),s=function(e){var t=a(e,[]);this.id=(new Date).getTime(),this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.picturesWidth=t.picturesWidth,this.numberOfItems=t.numberOfItems,this.width=t.width,this.height=t.height,this.shipTexture=__dirname+t.shipTexture,this.speed=t.speed,this.status=t.status,this.name=t.name,this.bulletTypeNumber=t.bulletTypeNumber,this.rapidFire=t.rapidFire,this.pointsPerUnit=t.pointsPerUnit,this.healthPoint=t.healthPoint,this.animationSteps=t.animationSteps,this.damage=t.damage,this.guns=t.guns,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=t.objectOwner,this.guns=t.guns,this.explosion=t.explosion,this.numberOfVerticalItems=t.numberOfVerticalItems,this.originalHealthPoint=t.healthPoint,this.isMove=t.isMove,this.isShoot=t.isShoot,this.verticalSpeed=t.verticalSpeed?t.verticalSpeed:Math.floor(Math.random()*t.speed+1),this.spotDistance=t.isBoss?t.spotDistance:Math.floor(Math.random()*t.spotDistance),this.yFinal=0,this.xFinal=0,this.behavior=t.behavior,this.direction=null,this.isBoss=t.isBoss};t.EnemyObject=s,s.prototype.placeEnemyes=o.placeEnemyes,s.prototype.moveEnemyes=o.moveEnemyes,s.prototype.loadEnemyes=o.loadEnemyes,s.prototype.shoot=o.shoot,s.prototype.enemyAnimation=o.enemyAnimation,s.prototype.getObjectPosition=r.getObjectPosition,s.prototype.enemyDamageAnimation=o.enemyDamageAnimation,s.prototype.enemyShipLogicVertical=n.enemyShipLogicVertical,s.prototype.enemyVerticalMoveCalculation=n.enemyVerticalMoveCalculation,s.prototype.takeDamage=o.takeDamage},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(5)),a(i(7)),a(i(2)),a(i(12)),a(i(11)),a(i(39))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.noData="There is no data",t.noObject="There is no Object"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(7),n=i(2),o=i(1),r=function(e,t,i,a,n,o,r,s,l){void 0===n&&(n=100),void 0===o&&(o=100),this.data=e,this.points=t,this.numberOflife=a,this.healthPoint=i+e.armor,this.maxHealth=i+e.armor,this.x=n-r/2,this.y=o-s/2,this.xFinal=n,this.yFinal=o,this.collisionAllow=!0,this.objectOwner="player",this.width=r,this.height=s,this.xAdj=0,this.speed=e.speed,this.explosion=e.explosion,this.damage=l};t.PlayerShip=r,r.prototype.initPlayerShip=a.initPlayerShip,r.prototype.movePlayerShip=a.movePlayerShip,r.prototype.shipControl=a.shipControl,r.prototype.moveShip=a.moveShip,r.prototype.placeShip=a.placeShip,r.prototype.setContext=a.setContext,r.prototype.getObjectPosition=n.getObjectPosition,r.prototype.takeDamage=o.takeDamage},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(12),n=i(2),o=i(1),r=function(e,t,i,a,n,o,r,s,l,c,h,u,d,m,g,p){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=a,this.objectOwner=n,this.bulletSpeed=o,this.width=r,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0,this.type=c,this.img=new Image,this.texture=__dirname+h,this.sx=u,this.sy=d,this.sWidth=m,this.sHeight=g,this.explosion=p};t.BulletConstruct=r,r.prototype.createBullets=a.createBullets,r.prototype.initBullets=a.initBullets,r.prototype.moveBullets=a.moveBullets,r.prototype.getObjectPosition=n.getObjectPosition,r.prototype.takeDamage=o.takeDamage},function(e,t,i){"use strict";var a=this&&this.__rest||function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i},n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=n(i(43)),r=i(5),s=i(1),l=function(e){var t=a(e,[]);this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.width=t.width,this.height=t.height,this.img=new Image,this.texture=__dirname+t.texture,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.target=t.target,this.animationState=!0,this.detectFrame=0,this.objectPresent=!0,this.speed=t.speed,this.picturesWidth=t.picturesWidth,this.damage=t.damage?t.damage:null,this.objectOwner=t.objectOwner?t.objectOwner:null,this.healthPoint=t.healthPoint?t.healthPoint:null,this.isBackground=t.isBackground?t.isBackground:null,this.explosion=t.explosion?t.explosion:null,this.pointsPerUnit=t.pointsPerUnit?t.pointsPerUnit:0};t.SideObject=l,l.prototype.enemyAnimation=o.enemyAnimation,l.prototype.placeEnemyes=o.placeEnemyes,l.prototype.fireAnimationEnded=r.fireAnimationEnded,l.prototype.takeDamage=s.takeDamage,l.prototype.mapObjectMove=r.mapObjectMove,l.prototype.enemyDamageAnimation=s.enemyDamageAnimation},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(1))},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=i(45),r=i(20);function s(e){e.style.display="block"}function l(e){e.style.display="none"}t.appMenu=function(e,t){var i={menu:{constants:{sectionTemplate:".section-template",contentContainer:"#wrapper",sideMenuWrapper:"#main-menu"},importSectionsToDOM:function(){var e=document.querySelectorAll('link[rel="import"]');Array.prototype.forEach.call(e,(function(e){var t=e.import.querySelector(i.menu.constants.sectionTemplate),a=document.importNode(t.content,!0);document.querySelector(i.menu.constants.contentContainer).appendChild(a)}))},setMenuOnClickEvent:function(){var a=document.querySelector("#dialog-box");document.body.addEventListener("click",(function(e){if(e.target)switch(e.target&&e.target.dataset.section&&(i.menu.hideAllSections(),i.menu.showSection(e)),e.target.dataset.buttonId){case"exit":!function(e){"none"==e.style.display?s(e):l(e)}(a);break;case"close":i.menu.hideAllSections()}})),t(a,"Exit the game?",e.exitTheGame)},showSection:function(e){return a(this,void 0,void 0,(function(){var t;return n(this,(function(i){switch(i.label){case 0:return t=e.target.dataset.section,s(document.querySelector("#"+t)),Array.prototype.slice.call(document.querySelectorAll("#"+t+" section")),[4,o.pageBuilder({target:"#about-section-content",data:r.getLocalData({fileName:"about-page.json"})})];case 1:return i.sent(),[2]}}))}))},hideAllSections:function(){for(var e=0,t=Array.prototype.slice.call(document.querySelectorAll(this.constants.contentContainer+" section"));e<t.length;e++){l(t[e])}},init:function(){this.importSectionsToDOM(),this.setMenuOnClickEvent(),this.hideAllSections()}}};return i},t.hideShowMenu=function(e,t,i,a,n){!a||n?e.classList.remove("hide-menu"):(e.classList.add("hide-menu"),t.hideAllSections())},t.dialogWindow=function(e,t,i){s(e),document.querySelector("#dialog-body").innerHTML=t,e.addEventListener("click",(function(t){switch(t.target.dataset.buttonId){case"ok":i(t);break;case"cancel":l(e)}}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pageBuilder=function(e){var t=e.target,i=e.data;if(t&&!i){var a=document.querySelector(t);console.log(a,i,__dirname)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,