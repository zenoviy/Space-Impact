!function(e){var t={};function i(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(a,n,function(t){return e[t]}.bind(null,n));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=14)}([function(e,t,i){"use strict";var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,n++)a[n]=r[o];return a};Object.defineProperty(t,"__esModule",{value:!0});var n=i(22);t.createWindow=n.createWindow,t.createShapeRoundBorder=n.createShapeRoundBorder,t.createRoundButton=n.createRoundButton;var r=i(23);function o(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];e[t].apply(e,i)}t.draw=o,t.createLaserBullet=function(e){if(!e.ctx)return new Error("no context");"player"==e.objectOwner&&"blaster"==e.type&&r.weapon1(e,o),"enemy"==e.objectOwner&&"blaster"==e.type&&r.weapon1(e,o),"enemy"==e.objectOwner&&"beam"==e.type&&r.weapon1(e,o)},t.createImage=function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];o.apply(void 0,a([e,"drawImage",t],i))},t.clearField=function(e,t,i){o(e,"clearRect",0,0,t,i)}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(0),r=i(5),o=a(i(4));t.placeEnemyes=function(e){n.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},t.moveEnemyes=function(e,t){void 0===t&&(t=0),this.x-=this.speed,this.y-=t},t.loadEnemyes=function(){this.img=new Image,this.img.src=this.shipTexture},t.shoot=function(e,t){if(t.gameInitData.gamePause||!this.isShoot)return!1;for(var i=this.guns,a=function(i){if(1>t.gameRandomizer(i.fireRepead)){var a=new e(n.x,n.y+(i.firePosition?i.firePosition:t.gameRandomizer(n.height)),i.name,i.color,"enemy",i.speed+n.speed,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);a.img.src=a.texture,a.img.onload=function(){t.gameInitData.allGameBullets=t.gameInitData.allGameBullets.concat(a)}}},n=this,r=0,o=i;r<o.length;r++){a(o[r])}},t.enemyAnimation=function(e){void 0===e&&(e=!0),this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&e&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},t.enemyDamageAnimation=function(){if(this.numberOfVerticalItems>1){var e=this.originalHealthPoint/this.numberOfVerticalItems,t=new Array(this.numberOfVerticalItems).fill(null);t=t.map((function(t,i){return e*(i+1)})).sort((function(e,t){return e-t})).reverse();for(var i=0;i<t.length;i++){if(this.healthPoint<t[i]&&this.healthPoint>t[i+1]&&t[i+1]){this.sy=this.sHeight*i;break}t[i+1]||(this.sy=this.sHeight*(this.numberOfVerticalItems-1))}}},t.takeDamage=function(e,t,i){if(this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"enemy"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint"))return r.explosionFire(this,i,t,o.SideObject),this.objectPresent=!1;if(this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"enemy"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"enemy"==t.objectOwner)a.call(this,null,i),this.enemyDamageAnimation(),this.healthPoint<=0&&(this.objectPresent=!1,r.explosionFire(this,i,t,o.SideObject),this.isBoss&&(i.gameInitData.levelChange=!0));else{if(!this.hasOwnProperty("healthPoint")||"player"!=this.objectOwner||"enemy"!=t.objectOwner)return!1;this.collisionAllow&&a.call(this,i.getLevelUserData(),i)}function a(t,i){if(this.healthPoint-=e,this.healthPoint<=0)return t&&t.life>0?(t.sourse.playerObject.numberOflife-=1,t.sourse.playerObject.numberOflife<=0&&(i.gameOverWindow(),i.gameInitData.gameOver=!0,setTimeout((function(){i.backToStartScreen(o.PlayerShip)}),3e3)),this.healthPoint=t.sourse.playerObject.maxHealth,!1):(i.collectPoints(this.pointsPerUnit),this.objectPresent=!1)}},t.hitDetection=function(e,t,i){for(var a=null,n=0,r=t;n<r.length;n++){var o=r[n],s=e.getObjectPosition.call(e),l=Math.max(s.x,o.x),c=Math.max(s.y,o.y),u=Math.min(s.x+(e.width||s.width),o.x+o.width)-l,h=Math.min(s.y+(e.height||s.height),o.y+o.height)-c;if("collision"==(a=!(Math.sign(u)<0||Math.sign(h)<0)&&"collision")){e.takeDamage&&o.takeDamage&&(e.takeDamage(o.damage?o.damage:0,o,i),o.takeDamage(e.damage?e.damage:0,e,i));break}}return"collision"==a&&e}},function(e,t,i){"use strict";var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,n++)a[n]=r[o];return a};Object.defineProperty(t,"__esModule",{value:!0});var n=i(0);t.initField=function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error("Error");for(var a=0,n=i;a<n.length;a++){var r=n[a];r=Object.assign(r,{width:e-4,height:t-4})}},t.setGameFields=function(){this.initField(),this.createContext(),this.initPlayerShip()},t.warpEffect=function(){var e=this.getScreenSize(),t=this.gameInitData.ctx,i=this.gameInitData.warpObjects;if(this.getSecondMeasure((function(e){var t=!(this.gameInitData.timeToEressLevel>=0);this.gameInitData.timeToEressLevel>=0&&!t&&(this.gameInitData.timeToEressLevel-=1);this.gameInitData.timeToEressLevel<0&&!t&&this.changeLevelProcedure()}),{timeToEressLevel:this.gameInitData.timeToEressLevel,ctx:t,screenSiz:this.getScreenSize()}),this.gameInitData.warpObjects=i.length<350?this.gameInitData.warpObjects.concat({x:e.width,y:this.gameRandomizer(e.height),height:this.gameRandomizer(20,10),width:10,speed:this.gameRandomizer(10,5),background:this.getRandomColor()}):this.gameInitData.warpObjects,i.length>0)for(var a=0,r=i;a<r.length;a++){var o=r[a];o.x-=o.x>0?o.speed:0,o.width=i.length<150?o.width-o.speed:i.length>150&&i.length<350?o.width+o.speed:o.width-o.speed,t.fillStyle=o.background,n.draw(t,"fillRect",o.x,o.y,o.width,o.height),t.fill()}},t.levelInit=function(e,t,i){var a=this.showLevelData().levelBackgroundElements;i.gameInitData.backScreenPause=!1;for(var n=0,r=a;n<r.length;n++){var o=r[n],s=new e(o.levelMap,o.speed,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null,o.extraMap?o.extraMap:null,o.timeToExtraMapSeconds?o.timeToExtraMapSeconds:null,o.timeToExtraMapMinutes?o.timeToExtraMapMinutes:null);i.gameInitData.mapBackgroundObjects=i.gameInitData.mapBackgroundObjects.concat(s),s.img.src=__dirname+s.backgroundTexture}},t.createContext=function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},t.getScreenSize=function(){return{width:this.gameInitData.screen.width,height:this.gameInitData.screen.height}},t.changeLevelProcedure=function(){var e=this.showGameInfo();this.changeLevel(e.gameData.currentLevel+1)<=e.gameData.levelData.allLevels?this.nextLevelDataReload(e):this.gameInitData.gameWin=!0},t.levelTimer=function(){var e=this.getLevelUserData();if(e.sourse.levelData.bosPresents)e.sourse.levelData.levelDetails.levelSeconds=null,e.sourse.levelData.levelDetails.levelMinutes=null;else{e.sourse.levelData.levelDetails;this.gameInitData.levelChange||this.getSecondMeasure((function(e){e.levelSeconds<=0&&(0==e.levelMinutes&&0==e.levelSeconds&&(e.levelSeconds=0,this.gameInitData.levelChange=!0),e.levelMinutes=e.levelMinutes>0?e.levelMinutes-1:0);e.levelSeconds=e.levelSeconds>0?e.levelSeconds-1:this.gameInitData.levelChange?0:59}),e.sourse.levelData.levelDetails)}},t.getSecondMeasure=function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];var n=1e3/this.gameInitData.intervalCount;if(this.gameInitData.gemeExtraSeconds%n==0)return this.gameInitData.gemeExtraSeconds=0,e?e.call.apply(e,a([this],t)):n},t.gameSecondsIncrease=function(){this.gameInitData.gemeExtraSeconds+=1},t.getLevelUserData=function(){var e=this.gameInitData.gameData,t=e.levelData.levelDetails;return{sourse:e,currentLevel:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,life:e.playerObject.numberOflife,minutes:t.levelMinutes,seconds:t.levelSeconds}},t.deleteBullet=function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},t.deleteObjects=function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},t.delateSideObject=function(e){if(!e.objectPresent||e.x<0-e.width){var t=this.gameInitData.allGameSideObjects.indexOf(e);this.gameInitData.allGameSideObjects.splice(t,1)}},t.collectPoints=function(e){this.gameInitData.gameData.currentPoint+=e},t.getObjectPosition=function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},t.getRandomColor=function(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e},t.preloadImage=function(e){var t=document.querySelector("#preloader");function i(e,t,i){"skinName"!=e&&"texture"!=e&&"levelMap"!=e||t&&(i.src=__dirname+t)}!function e(a){if(!a)return;for(var n=0,r=Object.entries(a);n<r.length;n++){var o=r[n],s=o[0],l=o[1];"object"==typeof a[s]&&e(a[s]),i(s,l,t)}}(e)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=function(e,t){e(t=t||this)},t.getUIObjectPosition=function(){return{x:this.propertyes.x,y:this.propertyes.y,width:this.propertyes.width,height:this.propertyes.height}}},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(25)),a(i(36)),a(i(37)),a(i(40)),a(i(41)),a(i(42))},function(e,t,i){"use strict";var a=this&&this.__assign||function(){return(a=Object.assign||function(e){for(var t,i=1,a=arguments.length;i<a;i++)for(var n in t=arguments[i])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function o(e){try{l(a.next(e))}catch(e){r(e)}}function s(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((a=a.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var i,a,n,r,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,a&&(n=2&r[0]?a.return:r[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,r[1])).done)return n;switch(a=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){o.label=r[1];break}if(6===r[0]&&o.label<n[1]){o.label=n[1],n=r;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(r);break}n[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.explosionFire=function(e,t,i,o){return n(this,void 0,void 0,(function(){var n,s,l,c,u,h;return r(this,(function(r){switch(r.label){case 0:return n=i.x+i.width/2,s=e.x+e.width/2,l=Math.max(n,s)-Math.min(n,s),i.x>e.x?l:l/2,c={x:e.x-e.explosion.width/2,y:e.bulletType?e.y-e.explosion.width/2:e.y,sx:0,sy:0,objectOwner:"explosion",sWidth:e.explosion.imageWidth/e.explosion.numberOfItems,sHeight:e.explosion.imageHeight,width:2*e.explosion.width,height:2*e.explosion.width,animationSteps:e.explosion.animationSteps,target:i.objectOwner,numberOfItems:e.explosion.imageWidth/e.explosion.numberOfItems,texture:e.explosion.texture,speed:i.speed/2,picturesWidth:e.explosion.imageWidth},(u=new o(a({},c))).img.onload=function(){t.gameInitData.allGameSideObjects=t.gameInitData.allGameSideObjects.concat(u)},h=u.img,[4,u.texture];case 1:return h.src=r.sent(),[2]}}))}))},t.fireAnimationEnded=function(e){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.objectPresent=!1,this.sx=0)),this.sx>=this.picturesWidth&&(this.animationState=!1)},t.mapObjectMove=function(){this.x-=this.speed?this.speed:3},t.mapRanomObjectSpawn=function(e,t,i){this.getSecondMeasure((function(e,t,i){var n=this,r=this.showGameInfo().gameData.levelData;if(this.gameRandomizer(r.objectProbability)<r.objectMinTimeSpawn){var o=this.getScreenSize(),s=e[this.gameRandomizer(e.length)],l="bottom"==s.spawnDetails.position&&"string"==typeof s.spawnDetails.position?o.height-this.gameRandomizer(s.height):"top"==s.spawnDetails.position&&"string"==typeof s.spawnDetails.position?this.gameRandomizer(s.height):"string"==typeof s.spawnDetails.position?this.gameRandomizer(o.height):s.spawnDetails.position,c={x:o.width,y:l,sx:0,sy:0,objectOwner:s.objectOwner,sWidth:s.imageWidth/s.numberOfItems,sHeight:s.imageHeight,width:s.width,height:s.height,animationSteps:s.animationSteps,target:null,numberOfItems:s.numberOfItems,texture:s.skinName,speed:s.speed,picturesWidth:s.imageWidth,healthPoint:s.healthPoint,damage:s.damage,isBackground:s.isBackground,explosion:s.explosionAnimation,pointsPerUnit:s.pointsPerUnit},u=new t(a({},c));u.img.src=u.texture,u.img.onload=function(){n.gameInitData.allGameSideObjects=n.gameInitData.allGameSideObjects.concat(u)}}}),e,t,i)}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function o(e){try{l(a.next(e))}catch(e){r(e)}}function s(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,r,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,a&&(n=2&r[0]?a.return:r[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,r[1])).done)return n;switch(a=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){o.label=r[1];break}if(6===r[0]&&o.label<n[1]){o.label=n[1],n=r;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(r);break}n[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(9),o=i(2),s=i(24).remote;function l(e){return a(this,void 0,void 0,(function(){var t,i,a,s,l,c;return n(this,(function(n){switch(n.label){case 0:return t={host:"http://localhost:3000/",picturesDirection:__dirname+"/public/images/",levelData:{method:"GET",url:"api/level-data"},levelObjects:{method:"GET",url:"api/level-objects"},gameSetings:{method:"GET",url:"api/game-settings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,r.getData({url:t.host+t.levelData.url,method:t.levelData.method,data:null,headers:{maplevel:e.level}})];case 1:return i=n.sent(),[4,r.getData({url:t.host+t.levelObjects.url,method:t.levelObjects.method,data:null,headers:{mapObject:i.levelOBjects}})];case 2:return a=n.sent(),[4,r.getData({url:t.host+t.gameSetings.url,method:t.gameSetings.method,data:null,headers:null})];case 3:return s=n.sent(),[4,r.getData({url:t.host+t.userShip.url,method:t.userShip.method,data:null,headers:{usership:e.shipConfiguration}})];case 4:return l=n.sent(),[4,r.getData({url:t.host+t.enemylData.url,method:t.enemylData.method,data:null,headers:{"ship-type-number":i.enemyType}})];case 5:return c=n.sent(),o.preloadImage(c),o.preloadImage(i),o.preloadImage(a),[2,{levelData:i,levelObjects:a,gameSetings:s,userData:l,enemyData:c}]}}))}))}function c(e){return a(this,void 0,void 0,(function(){var t,i,a,r,o,s,c,u,h,d,m;return n(this,(function(n){switch(n.label){case 0:return t=document.querySelector("#gamefield"),i=document.querySelector("#gameObjectsfield"),a=document.querySelector("#gameUifield"),1,o=5,[4,l({level:r=5,shipConfiguration:1})];case 1:return s=n.sent(),c=s.levelData,u=s.levelObjects,h=s.gameSetings,d=s.userData,m=s.enemyData,[2,{data:{ctx:null,gameField:t||null,gameActionField:i||null,gameUIField:a||null,gameData:{currentLevel:r,currentPoint:0,playerObject:new e(d,0,300,o,100,100,d.size.width,d.size.height,d.damage),levelData:c,levelObjects:u,gameSetings:h,enemyData:m,controllers:null},screen:{width:window.innerWidth,height:window.innerHeight},intervalCount:20,enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],warpObjects:[],timeToEressLevel:6,levelChange:!1,gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameStatus:!1,gameOver:!1,gameWin:!1,gemeExtraSeconds:0}}]}}))}))}t.serverRequest=l,t.gameDataInit=c,t.gameEngine=function(e){return a(this,void 0,void 0,(function(){return n(this,(function(e){return[2]}))}))},t.gameStart=function(){this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!0},t.backToStartScreen=function(e){return a(this,void 0,void 0,(function(){var t,i,a,r,o,s;return n(this,(function(n){switch(n.label){case 0:return[4,c(e)];case 1:for(t=n.sent(),i=0,a=Object.entries(t.data);i<a.length;i++)r=a[i],o=r[0],null!==(s=r[1])&&(this.gameInitData[o]=s);return this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!1,[2]}}))}))},t.exitTheGame=function(){s.getCurrentWindow().close()}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=a(i(4)),r=a(i(26));t.initPlayerShip=function(e){var t=this;if(this.ctx){var i=this.data.texture,a=e.showGameInfo().imageDirrection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=a+i}},t.movePlayerShip=function(){this.img&&this.ctx&&this.img&&r.createImage(this.ctx,this.img,this.x,this.y,this.width,this.height)},t.shipControl=function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(a){if(e.gameInitData.gamePause)return!1;i.down.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(i){if(e.gameInitData.gamePause)return!1;if("CANVAS"===i.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var a=i.clientX-i.target.offsetLeft,n=i.clientY-i.target.offsetTop;t.xFinal=(a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed))-t.width/2,t.yFinal=(n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed))-t.height/2}})),document.addEventListener("click",(function(i){if(e.gameInitData.gamePause)return!1;for(var a=function(i){var a=new n.BulletConstruct(t.x,t.y+i.firePosition,i.name,i.color,"player",i.speed+t.xAdj,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);a.img.src=a.texture,a.img.onload=function(){e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(a)}},r=0,o=t.data.guns;r<o.length;r++){a(o[r])}}))},t.setContext=function(e){this.ctx=e},t.placeShip=function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.xAdj=this.x>this.xFinal?0:e,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.moveShip=function(e){var t=e.xPos,i=void 0===t?0:t,a=e.yPos,n=void 0===a?0:a;this.x+=i,this.y+=n}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uiImage=function(e){var t=e.propertyes;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},t.uiText=function(e){var t=e.propertyes;t.ctx.measureText(e.text).width,t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)},t.uiRepeatImage=function(e){var t=e.propertyes,i=t.ctx.createPattern(t.background,"repeat-x");t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.rect(t.x,t.y,t.width,t.height),t.ctx.fillStyle=i,t.ctx.fill()}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function o(e){try{l(a.next(e))}catch(e){r(e)}}function s(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,r,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,a&&(n=2&r[0]?a.return:r[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,r[1])).done)return n;switch(a=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){o.label=r[1];break}if(6===r[0]&&o.label<n[1]){o.label=n[1],n=r;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(r);break}n[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(21);t.getData=function(e){var t=e.url,i=e.method,a=e.data,n=e.headers,r=Object.assign({"Content-Type":"application/json"},n||!1);return fetch(t,{method:i,mode:"cors",headers:r,body:a?JSON.stringify(a):null}).then((function(e){return e.json()})).then((function(e){return e}))},t.getLocalData=function(e){var t=e.fileName;return a(this,void 0,void 0,(function(){return n(this,(function(e){if(!t)throw Error("no local files");return[2,new Promise((function(e,i){r.readFile(__dirname+"/public/data/"+t,(function(t,a){if(t)throw Error(t);var n=JSON.parse(a);n?e(n):i("got some poblem here")}))}))]}))}))}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function o(e){try{l(a.next(e))}catch(e){r(e)}}function s(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,r,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,a&&(n=2&r[0]?a.return:r[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,r[1])).done)return n;switch(a=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){o.label=r[1];break}if(6===r[0]&&o.label<n[1]){o.label=n[1],n=r;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(r);break}n[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(6);t.nextLevelDataReload=function(e){return a(this,void 0,void 0,(function(){function t(e){for(var a=0,n=Object.entries(e);a<n.length;a++){var r=n[a],o=r[0],s=r[1];"object"!=typeof e[o]||null==s||e[o].length||t(e[o]),i.call(this,o,e)}}function i(e,t){for(var i=0,a=Object.entries(l);i<a.length;i++){var n=a[i],r=n[0],o=n[1];r==e&&null!=o&&(this.gameInitData[r]=o)}}var a,o,s,l;return n(this,(function(i){switch(i.label){case 0:return a=e.gameData.currentLevel,[4,r.serverRequest({level:a,shipConfiguration:1})];case 1:return o=i.sent(),l={gameData:{currentLevel:a,currentPoint:(s=this).gameInitData.gameData.currentPoint,playerObject:s.gameInitData.gameData.playerObject,levelData:o.levelData,levelObjects:o.levelObjects,gameSetings:s.gameInitData.gameData.gameSetings,enemyData:o.enemyData,controllers:s.gameInitData.gameData.controllers},enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameOver:!1,gemeExtraSeconds:0},setTimeout((function(){s.gameInitData.warpObjects=[],s.gameInitData.timeToEressLevel=6,s.gameInitData.levelChange=!1}),5e3),t.call(this,this.gameInitData),[2]}}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.enemyShipLogicVertical=function(e,t){var i=Math.max(e.x,this.x),a=Math.min(e.x,this.x),n=Math.max(e.y-this.height/2,this.y),r=Math.min(e.y-this.height/2,this.y),o=i-a,s=n-r;if(this.isMove&&this.behavior)switch(this.behavior){case"patrool":if(!this.direction){var l=t.gameRandomizer(2,1);this.direction=1==l?"up":"down"}(function(e){var t=e.getScreenSize(),i=Math.max(this.y,this.yFinal)-Math.min(this.y,this.yFinal);switch(this.direction){case"up":this.yFinal=0,this.y-this.height<this.yFinal&&(this.direction="down");break;case"down":this.yFinal=t.height,this.y+this.height>this.yFinal&&(this.direction="up");break;default:this.yFinal=t.height/2}this.enemyVerticalMoveCalculation(i)}).call(this,t);break;case"find":c.call(this);break;case"attack":(function(e,t,i){this.yFinal=i.y-this.height/2,t<100&&this.enemyVerticalMoveCalculation(e)}).call(this,s,o,e);break;case"comeEndFind":c.call(this),function(){var e=t.getScreenSize();this.x<e.width-2*this.width&&(this.speed=0)}.call(this);break;default:c.call(this)}function c(){if(this.spotDistance>o||this.spotDistance>s)return this.yFinal=e.y-this.height/2,this.enemyVerticalMoveCalculation(s),!0}},t.enemyVerticalMoveCalculation=function(e){var t=e/this.verticalSpeed;t=(t=Math.sign(t)>0?t:-1*t)>this.verticalSpeed?this.verticalSpeed:t,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.spawnEnemyLogic=function(e){var t=this.gameInitData.gameData,i=t.levelData,a=t.enemyData,n=this.getLevelUserData(),r=n.sourse.levelData.bosPresents?n.sourse.levelData.bosPresents:null;if(this.gameInitData.gameData.levelChange||r){if(0==this.gameInitData.allGameEnemies.length){var o=this.createNewEnemy(a[0],e);o.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(o)}}else(function(){if(this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var t=this.gameRandomizer(i.enemyMaxNumber);t<i.enemyMaxNumber;t++){var n=a[this.gameRandomizer(a.length)],r=this.createNewEnemy(n,e);r.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}}).call(this)},t.createNewEnemy=function(e,t){var i=this.gameInitData.screen.width+300,a=this.gameRandomizer(this.gameInitData.screen.height-200,100);if(e.details){var n=e.details,r=n.behavior?n.behavior[this.gameRandomizer(n.behavior.length)]:null;return new t({x:i,y:a,sx:n.sx,sy:n.sy,sWidth:n.imageWidth/n.numberOfItems,sHeight:n.imageHeight,picturesWidth:n.imageWidth,numberOfItems:n.numberOfItems,width:n.width,height:n.height,shipTexture:n.skinName,speed:n.speed,status:n.status,name:n.name,bulletTypeNumber:n.bulletType,rapidFire:n.rapidFire,pointsPerUnit:n.pointsPerUnit,healthPoint:n.healthPoint,animationSteps:n.animationSteps,damage:n.damage,objectOwner:n.objectOwner,guns:n.guns?n.guns:[],explosion:n.explosionAnimation,numberOfVerticalItems:n.numberOfVerticalItems,isMove:n.isMove,isShoot:n.isShoot,spotDistance:n.spotDistance,behavior:r,verticalSpeed:n.verticalSpeed?n.verticalSpeed:null,isBoss:!!n.isBoss&&n.isBoss})}},t.gameRandomizer=function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(0);t.updateMap=function(){this.x-=this.backgroundSpeed,Math.sign(this.backgroundSpeed)>0&&this.x+this.screenData.width<0?this.x=this.screenData.width:Math.sign(this.backgroundSpeed)<0&&this.x>this.screenData.width&&(this.x=0-this.screenData.width),a.createImage(this.ctx,this.img,this.x,0,this.screenData.width+2,this.screenData.height)},t.changePartOfTexture=function(e,t){var i=e.getLevelUserData(),a=e.getScreenSize();if(i.minutes<=this.timeToExtraMapMinutes&&i.seconds<=this.timeToExtraMapSeconds&&this.extraMap&&this.x>=a.width-200){var n=e.showGameInfo();this.img.src=n.imageDirrection+this.extraMap}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(0);t.createBullets=function(e){a.createLaserBullet({source:this,objectOwner:this.objectOwner,ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5,type:this.type,img:this.img,sx:this.sx,sy:this.sy,sWidth:this.sWidth,sHeight:this.sHeight})},t.initBullets=function(){},t.moveBullets=function(e,t){switch(this.type){case"blaster":i.call(this);break;case"beam":(function(){t.getScreenSize();this.x>0?this.width+=this.bulletSpeed:this.width>0&&(this.x=0,this.width-=this.bulletSpeed)}).call(this),i.call(this);break;default:i.call(this)}function i(){"player"==this.objectOwner?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function o(e){try{l(a.next(e))}catch(e){r(e)}}function s(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,r,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,a&&(n=2&r[0]?a.return:r[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,r[1])).done)return n;switch(a=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){o.label=r[1];break}if(6===r[0]&&o.label<n[1]){o.label=n[1],n=r;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(r);break}n[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0}),i(15);i(19);var o=r(i(20)),s=r(i(4)),l=i(0),c=i(44);!function(){a(this,void 0,void 0,(function(){function e(){return a(this,void 0,void 0,(function(){var e,i,a,o,h,m,g,p,f,b,y,v;return n(this,(function(n){if(r.gameInitData.ctxUIField&&l.clearField(r.gameInitData.ctxUIField,r.gameInitData.screen.width,r.gameInitData.screen.height),r.gameInitData.ctxActionField&&!r.gameInitData.gamePause&&l.clearField(r.gameInitData.ctxActionField,r.gameInitData.screen.width,r.gameInitData.screen.height),r.gameInitData.backScreenPause&&r.levelInit(s.GameBackground,r.gameInitData.ctx,r),!r.gameInitData.gamePause&&r.gameInitData.gameStatus&&r.gameInitData.gameStatus){if(r.gameInitData.levelChange||r.spawnEnemyLogic(s.EnemyObject),r.gameInitData.allGameBullets.length>0)for(e=0,i=r.gameInitData.allGameBullets;e<i.length;e++)(a=i[e]).moveBullets(u,r),a.createBullets(r),r.deleteBullet(a),r.hitDetection(a,r.gameInitData.allGameEnemies,r),r.hitDetection(u,[a],r),r.hitDetection(a,r.gameInitData.allGameSideObjects,r);if(r.gameInitData.allGameEnemies.length>0)for(o=0,h=r.gameInitData.allGameEnemies;o<h.length;o++)(m=h[o]).placeEnemyes(r),m.moveEnemyes(),m.enemyShipLogicVertical({x:u.x,y:u.y},r),m.enemyAnimation(!0),m.shoot(s.BulletConstruct,r),r.deleteObjects(m),r.hitDetection(u,[m],r);if(r.gameInitData.gameOver||(u.placeShip(),u.movePlayerShip()),r.gameInitData.allGameSideObjects.length>0)for(g=0,p=r.gameInitData.allGameSideObjects;g<p.length;g++)(f=p[g]).placeEnemyes(r),"explosion"==f.objectOwner?f.fireAnimationEnded(r.gameInitData.allGameSideObjects):("enemy"!=f.objectOwner&&"collide"!=f.objectOwner||r.hitDetection(u,[f],r),f.enemyAnimation()),f.mapObjectMove(),r.delateSideObject(f);r.gameInitData.gameData.levelObjects&&r.mapRanomObjectSpawn(r.gameInitData.gameData.levelObjects,s.SideObject,r.gameInitData.allGameSideObjects),r.gameSecondsIncrease(),r.levelTimer()}if(!(r.gameInitData.backScreenPause&&r.gameInitData.gamePause&&r.gameInitData.gameStatus||r.gameInitData.gamePause&&r.gameInitData.gameStatus)){for(r.gameInitData.ctx&&l.clearField(r.gameInitData.ctx,r.gameInitData.screen.width,r.gameInitData.screen.height),b=0,y=r.gameInitData.mapBackgroundObjects;b<y.length;b++)(v=y[b]).updateMap(),v.changePartOfTexture(r,r.gameInitData.mapBackgroundObjects);r.gameInitData.levelChange&&r.warpEffect()}return r.gameInitData.gameStatus||r.showStartWindow(),r.gameInitData.gameStatus&&r.showGameStats(),r.gameInitData.gamePause&&r.gameInitData.gameStatus&&r.showPauseWindow(),r.gameInitData.gameUiPause&&r.gameInitData.gameStatus&&(r.showMenuWindow(),r.showPauseWindow()),r.gameInitData.gameOver&&r.gameOverWindow(),!r.gameInitData.gameWin||r.gameInitData.gameUiPause||r.gameInitData.gamePause||r.gameWinWindow(),c.hideShowMenu(t,d.menu,r.gameInitData.gameWin,r.gameInitData.gameStatus,r.gameInitData.gameUiPause),[2]}))}))}var t,i,r,u,h,d;return n(this,(function(a){switch(a.label){case 0:return document.querySelector("#wrapper"),t=document.querySelector("#main-menu"),[4,o.gameDataInit(s.PlayerShip)];case 1:return i=a.sent(),[4,new s.Game(i.data)];case 2:return r=a.sent(),u=r.gameInitData.gameData.playerObject,setInterval(e,r.gameInitData.intervalCount),r.uiController(),r.setGameFields(),r.getScreenSize(),h=r.returnContext(),u.ctx=h.gameActionField,u.initPlayerShip(r),u.shipControl(r),(d=c.appMenu(r,c.dialogWindow)).menu.init(),[2]}}))}))}()},function(e,t,i){var a=i(16),n=i(17);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var r={insert:"head",singleton:!1},o=(a(n,r),n.locals?n.locals:{});e.exports=o},function(e,t,i){"use strict";var a,n=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},r=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),o=[];function s(e){for(var t=-1,i=0;i<o.length;i++)if(o[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},a=[],n=0;n<e.length;n++){var r=e[n],l=t.base?r[0]+t.base:r[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var h=s(u),d={css:r[1],media:r[2],sourceMap:r[3]};-1!==h?(o[h].references++,o[h].updater(d)):o.push({identifier:u,updater:f(d,t),references:1}),a.push(u)}return a}function c(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var n=i.nc;n&&(a.nonce=n)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,i,a){var n=i?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=h(t,n);else{var r=document.createTextNode(n),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function m(e,t,i){var a=i.css,n=i.media,r=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),r&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var g=null,p=0;function f(e,t){var i,a,n;if(t.singleton){var r=p++;i=g||(g=c(t)),a=d.bind(null,i,r,!1),n=d.bind(null,i,r,!0)}else i=c(t),a=m.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<i.length;a++){var n=s(i[a]);o[n].references--}for(var r=l(e,t),c=0;c<i.length;c++){var u=s(i[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}i=r}}}},function(e,t,i){(t=i(18)(!1)).push([e.i,".btn-main{padding:10px;border:0px;border-radius:5px}.selected-items{background:#161325}.btn-main{padding:10px;border:0px;border-radius:5px}.selected-items{background:#161325}body{font-family:'Roboto';color:#fff;background:#333;margin:0;padding:0;-khtml-user-select:none;user-select:none}body #preloader{visibility:hidden;width:0px;height:0px}.static-wrapper{display:flex;position:absolute;top:0;width:100vw}.static-wrapper asside.menu-backgroud{background:#2f2231}.static-wrapper asside{z-index:10}.static-wrapper asside .main-menu{top:10px}.static-wrapper asside .main-menu ul{display:block;top:105px;position:relative;text-transform:uppercase}.static-wrapper asside .main-menu ul li{padding:10px;list-style:none}.static-wrapper asside .main-menu ul a{color:#ffc800;text-decoration:none;font-size:25px}.static-wrapper asside .main-menu ul a:active{color:red}.content-wrapper{width:100%;max-height:100vh;overflow-y:scroll}.content-wrapper .menu-pages-wrapper{background:#161325;margin-top:-20px;min-height:100vh;padding:20px}.content-wrapper::-webkit-scrollbar{width:12px}.content-wrapper::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,0);border-radius:10px}.content-wrapper::-webkit-scrollbar-thumb{border-radius:10px;background:rgba(71,6,83,0.8);-webkit-box-shadow:inset 0 0 6px #000}.content-wrapper::-webkit-scrollbar-thumb:window-inactive{background:rgba(255,0,0,0.1)}.dialog-box{position:absolute;margin:0 auto;padding:10px;min-width:100%;min-height:100vh;position:fixed;left:0}.dialog-box .dialog-wrapper{display:flex;height:100vh;justify-content:center;align-items:center}.dialog-box .dialog-wrapper .dialog-window{background:#340054;padding:20px;min-width:300px;min-height:80px;border-radius:5px}.dialog-box .dialog-wrapper .dialog-window div{padding:10px}.dialog-box .dialog-wrapper .dialog-window .dialog-btn-area{display:flex;justify-content:space-evenly}.dialog-box .dialog-wrapper .dialog-window .dialog-btn-area button.accept-btn{background:#4bae60;width:calc(100% / 3)}.dialog-box .dialog-wrapper .dialog-window .dialog-btn-area button.reject-btn{background:#b9004f;width:calc(100% / 3)}#wrapper section{z-index:5;top:0}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}.hide-menu{display:none}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var n=(o=a,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(r).concat([n]).join("\n")}var o,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,a){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(a)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(n[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);a&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports=require("path")},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(6)),a(i(10))},function(e,t){e.exports=require("fs")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createWindow=function(e,t){var i=this.getScreenSize();i.width,i.height,e.fillRect(t.x,t.y,t.width,t.height)},t.createShapeRoundBorder=function(e){var t=e.propertyes;if(t.ctx.fillStyle=t.background,t.gradient){var i=t.ctx.createLinearGradient(t.topX,t.topY,t.bottomX,t.bottomY);i.addColorStop(0,t.background),i.addColorStop(1,t.backGroundFinal),t.ctx.fillStyle=i}t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.stroke()),t.ctx.closePath(),t.ctx.fill()},t.createRoundButton=function(e){var t=e.propertyes,i=t.ctx.measureText(e.text).width/3.2,a=t.textProperty.leftPadding+i+t.textProperty.rightPadding;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+a-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+a,t.y,t.x+a,t.y+t.radius),t.ctx.lineTo(t.x+a,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+a,t.y+t.height,t.x+a-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill(),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.lineWidth=t.borderRadius,t.ctx.stroke()),t.ctx.font=e.fontSize,t.ctx.fillStyle=t.textProperty.textColor,t.ctx.shadowColor=t.textProperty.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillText(e.text,t.x+t.textProperty.leftPadding,t.y+t.height/2+t.textProperty.topPadding)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.weapon1=function(e,t){t(e.ctx,"drawImage",e.img,e.sx,e.sy,e.sWidth,e.sHeight,e.x,e.y,e.width+10,e.height+10)},t.weapon1backward=function(e,t){t(e.ctx,"drawImage",e.img,0,0,e.width,e.height,e.x,e.y,e.width+10,e.height+10)}},function(e,t){e.exports=require("electron")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(11),n=i(1),r=i(10),o=i(2),s=i(7),l=i(29),c=i(6),u=i(5),h=function(){function e(e){this.gameInitData=e}return e.prototype.changeLevel=function(e){return this.gameInitData.gameData.currentLevel=e,this.gameInitData.gameData.currentLevel},e.prototype.showGameInfo=function(){return{levelToChange:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint,gameData:this.gameInitData.gameData,imageDirrection:__dirname+"/public/images/"}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();t.Game=h,h.prototype.createContext=o.createContext,h.prototype.initField=o.initField,h.prototype.levelInit=o.levelInit,h.prototype.setGameFields=o.setGameFields,h.prototype.warpEffect=o.warpEffect,h.prototype.getScreenSize=o.getScreenSize,h.prototype.getLevelUserData=o.getLevelUserData,h.prototype.levelTimer=o.levelTimer,h.prototype.getSecondMeasure=o.getSecondMeasure,h.prototype.gameSecondsIncrease=o.gameSecondsIncrease,h.prototype.initPlayerShip=s.initPlayerShip,h.prototype.deleteBullet=o.deleteBullet,h.prototype.deleteObjects=o.deleteObjects,h.prototype.delateSideObject=o.delateSideObject,h.prototype.hitDetection=n.hitDetection,h.prototype.collectPoints=o.collectPoints,h.prototype.spawnEnemyLogic=a.spawnEnemyLogic,h.prototype.createNewEnemy=a.createNewEnemy,h.prototype.gameRandomizer=a.gameRandomizer,h.prototype.uiController=l.uiController,h.prototype.gameUiPause=l.gameUiPause,h.prototype.gameUiMenu=l.gameUiMenu,h.prototype.showMenuWindow=l.showMenuWindow,h.prototype.showUiPopupWindow=l.showUiPopupWindow,h.prototype.showStartWindow=l.showStartWindow,h.prototype.showPauseWindow=l.showPauseWindow,h.prototype.gameOverWindow=l.gameOverWindow,h.prototype.gameWinWindow=l.gameWinWindow,h.prototype.showGameStats=l.showGameStats,h.prototype.initUiElements=l.initUiElements,h.prototype.gameStart=c.gameStart,h.prototype.backToStartScreen=c.backToStartScreen,h.prototype.exitTheGame=c.exitTheGame,h.prototype.nextLevelDataReload=r.nextLevelDataReload,h.prototype.changeLevelProcedure=o.changeLevelProcedure,h.prototype.getRandomColor=o.getRandomColor,h.prototype.mapRanomObjectSpawn=u.mapRanomObjectSpawn},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(0)),a(i(8)),a(i(27))},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(8)),a(i(28))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.warpElement=function(){var e=null.createLinearGradient(0,0,170,0);e.addColorStop("0","magenta"),e.addColorStop("0.5","blue"),e.addColorStop("1.0","red")}},function(e,t,i){"use strict";var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,n++)a[n]=r[o];return a};Object.defineProperty(t,"__esModule",{value:!0});var n=i(0),r=i(30),o=i(31),s=i(32),l=i(33),c=i(34),u=i(35),h=i(8),d=i(1);t.gameUiPause=function(){!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},t.gameUiMenu=function(e){this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,this.gameInitData.gamePause=!e},t.uiController=function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,i=this;document.addEventListener("keydown",(function(a){t.escape.some((function(e){return a.keyCode==e}))&&i.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return a.keyCode==e}))&&i.gameUiPause()})),document.addEventListener("click",(function(t){var a=e.getLevelUserData();if("CANVAS"===t.target.tagName){var n=t.clientX-t.target.offsetLeft,s=t.clientY-t.target.offsetTop,l=null,c=e.gameInitData.ctxUIField,h=e.getScreenSize();e.gameInitData.gameStatus||(l=r.gameLoadMenu(null,c,h.width,h.height,null),m.call(e,l)),e.gameInitData.gameUiPause&&(l=o.gameSettingsMenu(null,c,h.width,h.height),m.call(e,l)),e.gameInitData.gameWin&&(l=u.gameWinScreen(null,c,h.width,h.height,null,a),m.call(e,l))}function m(e){for(var t in e){if(d.hitDetection(e[t],[].concat({x:n,y:s,width:10,height:10,name:"cursor"}),this)&&e[t].action){e[t].action.call(this,i);break}}}}))},t.showUiPopupWindow=function(){n.createWindow.call(this)},t.showStartWindow=function(){var e=[n.createRoundButton,h.uiImage,h.uiText,h.uiText];this.initUiElements(e,r.gameLoadMenu)},t.showMenuWindow=function(){var e=[n.createShapeRoundBorder,n.createRoundButton,h.uiText];this.initUiElements(e,o.gameSettingsMenu)},t.showPauseWindow=function(){var e=[h.uiText];this.initUiElements(e,s.gamePause)},t.showGameStats=function(){var e=this.getLevelUserData(),t=[h.uiImage,h.uiText,h.uiText,h.uiText];this.initUiElements(t,l.gameInformationScreen,e)},t.gameOverWindow=function(){var e=[h.uiText,h.uiText,h.uiText];this.initUiElements(e,c.gameOverScreen)},t.gameWinWindow=function(){var e=this.getLevelUserData(),t=[h.uiText,h.uiText,h.uiText,n.createRoundButton,n.createRoundButton,n.createRoundButton];this.initUiElements(t,u.gameWinScreen,e)},t.initUiElements=function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];for(var r=this.gameInitData.ctxUIField,o=this.getScreenSize(),s=this.showGameInfo().imageDirrection,l=t.apply(void 0,a([null,r,o.width,o.height,s],i)),c=0;c<l.length;c++)l[c].hasOwnProperty("loadPicture")&&l[c].loadPicture(),l[c].init(e[c])}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gameLoadMenu=function(e,t,i,n,r){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-165,y:n/2+150,background:"rgba(255, 255, 255, 1)",isBorder:!0,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 0)",textProperty:{textColor:"#251536",topPadding:10,rightPadding:40,bottomPadding:10,leftPadding:40},radius:45},action:function(){this.gameStart()},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,shadowColor:"rgba(37, 21, 54, 1)",propertyes:{ctx:t,width:150,height:150,sWidth:1024,sHeight:1024,x:i/2-75,y:90,background:new Image,borderColor:!1,shadowColor:"rgba(37, 21, 54, 1)",radius:null},loadPicture:function(){this.propertyes.background.src=r+"misc/logo-1024x1024.png"},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:-290,height:0,x:i/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:0,x:i/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(89, 0, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),r=a(i(4)),o=i(44);t.gameSettingsMenu=function(e,t,i,a){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:i,height:400,x:0,y:100,gradient:!0,backGroundFinal:"#8C31A3",topX:0,topY:0,bottomX:i,bottomY:100,background:"#6628A7",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(0, 0, 0, 1)",radius:5},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"go to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:200,height:50,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 0)",textProperty:{textColor:"#251536",topPadding:7,rightPadding:50,bottomPadding:10,leftPadding:20},radius:15},action:function(){o.dialogWindow({textData:"restart the game?",rejectText:"cancel",acceptText:"restart"},this.backToStartScreen,null,this,r.PlayerShip)},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 0)",propertyes:{ctx:t,width:-45,height:0,x:i/2,y:150,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gamePause=function(e,t,i,n,r){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"60px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:n/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gameInformationScreen=function(e,t,i,n,r,o){return[{name:"lifePoint",text:"",number:o.life,step:[o.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,shadowColor:"rgba(0, 0, 0, 1)",radius:null},loadPicture:function(){this.propertyes.background.src=r+"misc/ruby.png"},init:function(e,t){t=t||this;for(var i=Array(o.life).fill(0).map((function(e,t){return 30*t})),a=0;a<this.number;a++)this.propertyes.x=0==a?30:0+i[a]+(0!=a?30:0),e(t)},getObjectPosition:a.getUIObjectPosition},{name:"level",text:"Current Level "+o.currentLevel+"/"+o.allLevels+" ",description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",propertyes:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Time to end f level",text:o.minutes||o.seconds?"Time to level end "+(o.minutes-10>=0?"":0)+o.minutes+":"+(o.seconds-10>=0?"":0)+o.seconds:"Boss level",description:"Game part the name",clicked:!1,fontSize:"light 16px Roboto",propertyes:{ctx:t,width:50,height:0,x:i-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game points",text:o.points,description:"Game part the name",clicked:!1,fontSize:"light 18px Roboto",propertyes:{ctx:t,width:-50,height:0,x:i/2,y:50,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(3);t.gameOverScreen=function(e,t,i,n,r){return e||[{name:"Pause text",text:"Game Over",description:"text for game over window",fontSize:"110px Arial",clicked:!1,propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:n/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";var a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(3),r=a(i(4)),o=i(44);t.gameWinScreen=function(e,t,i,a,s,l){return e||[{name:"screen title",text:"YOU WIN ",description:"text for game over window",fontSize:" bold 120px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2-a/4,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"screen text",text:"Congratulation ",description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"score",text:"You score is "+l.points,description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"Save results",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:300,height:50,x:i/2+i/3,y:a/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"go to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:200,height:50,x:20,y:a/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){o.dialogWindow({textData:"restart the game?",rejectText:"cancel",acceptText:"restart"},this.backToStartScreen,null,this,r.PlayerShip),this.gameUiMenu(this.gameInitData.gameUiPause)},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(2),n=i(12),r=function(e,t,i,a,n,r,o,s){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=a,this.x=n?0:i.width,this.y=0,this.img=new Image,this.extraMap=r,this.timeToEressLevel=4,this.warpObjects=[],this.timeToExtraMapSeconds=o,this.timeToExtraMapMinutes=s};t.GameBackground=r,r.prototype.updateMap=n.updateMap,r.prototype.warpEffect=a.warpEffect,r.prototype.changePartOfTexture=n.changePartOfTexture},function(e,t,i){"use strict";var a=this&&this.__rest||function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i};Object.defineProperty(t,"__esModule",{value:!0});var n=i(11),r=i(1),o=i(38),s=function(e){var t=a(e,[]);this.id=(new Date).getTime(),this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.picturesWidth=t.picturesWidth,this.numberOfItems=t.numberOfItems,this.width=t.width,this.height=t.height,this.shipTexture=__dirname+t.shipTexture,this.speed=t.speed,this.status=t.status,this.name=t.name,this.bulletTypeNumber=t.bulletTypeNumber,this.rapidFire=t.rapidFire,this.pointsPerUnit=t.pointsPerUnit,this.healthPoint=t.healthPoint,this.animationSteps=t.animationSteps,this.damage=t.damage,this.guns=t.guns,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=t.objectOwner,this.guns=t.guns,this.explosion=t.explosion,this.numberOfVerticalItems=t.numberOfVerticalItems,this.originalHealthPoint=t.healthPoint,this.isMove=t.isMove,this.isShoot=t.isShoot,this.verticalSpeed=t.verticalSpeed?t.verticalSpeed:Math.floor(Math.random()*t.speed+1),this.spotDistance=t.isBoss?t.spotDistance:Math.floor(Math.random()*t.spotDistance),this.yFinal=0,this.xFinal=0,this.behavior=t.behavior,this.direction=null,this.isBoss=t.isBoss};t.EnemyObject=s,s.prototype.placeEnemyes=r.placeEnemyes,s.prototype.moveEnemyes=r.moveEnemyes,s.prototype.loadEnemyes=r.loadEnemyes,s.prototype.shoot=r.shoot,s.prototype.enemyAnimation=r.enemyAnimation,s.prototype.getObjectPosition=o.getObjectPosition,s.prototype.enemyDamageAnimation=r.enemyDamageAnimation,s.prototype.enemyShipLogicVertical=n.enemyShipLogicVertical,s.prototype.enemyVerticalMoveCalculation=n.enemyVerticalMoveCalculation,s.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";function a(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),a(i(5)),a(i(7)),a(i(2)),a(i(13)),a(i(12)),a(i(39))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.noData="There is no data",t.noObject="There is no Object"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(7),n=i(2),r=i(1),o=function(e,t,i,a,n,r,o,s,l){void 0===n&&(n=100),void 0===r&&(r=100),this.data=e,this.points=t,this.numberOflife=a,this.healthPoint=i+e.armor,this.maxHealth=i+e.armor,this.x=n-o/2,this.y=r-s/2,this.xFinal=n,this.yFinal=r,this.collisionAllow=!0,this.objectOwner="player",this.width=o,this.height=s,this.xAdj=0,this.speed=e.speed,this.explosion=e.explosion,this.damage=l};t.PlayerShip=o,o.prototype.initPlayerShip=a.initPlayerShip,o.prototype.movePlayerShip=a.movePlayerShip,o.prototype.shipControl=a.shipControl,o.prototype.moveShip=a.moveShip,o.prototype.placeShip=a.placeShip,o.prototype.setContext=a.setContext,o.prototype.getObjectPosition=n.getObjectPosition,o.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(13),n=i(2),r=i(1),o=function(e,t,i,a,n,r,o,s,l,c,u,h,d,m,g,p){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=a,this.objectOwner=n,this.bulletSpeed=r,this.width=o,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0,this.type=c,this.img=new Image,this.texture=__dirname+u,this.sx=h,this.sy=d,this.sWidth=m,this.sHeight=g,this.explosion=p};t.BulletConstruct=o,o.prototype.createBullets=a.createBullets,o.prototype.initBullets=a.initBullets,o.prototype.moveBullets=a.moveBullets,o.prototype.getObjectPosition=n.getObjectPosition,o.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";var a=this&&this.__rest||function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i},n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r=n(i(43)),o=i(5),s=i(1),l=function(e){var t=a(e,[]);this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.width=t.width,this.height=t.height,this.img=new Image,this.texture=__dirname+t.texture,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.target=t.target,this.animationState=!0,this.detectFrame=0,this.objectPresent=!0,this.speed=t.speed,this.picturesWidth=t.picturesWidth,this.damage=t.damage?t.damage:null,this.objectOwner=t.objectOwner?t.objectOwner:null,this.healthPoint=t.healthPoint?t.healthPoint:null,this.isBackground=t.isBackground?t.isBackground:null,this.explosion=t.explosion?t.explosion:null,this.pointsPerUnit=t.pointsPerUnit?t.pointsPerUnit:0};t.SideObject=l,l.prototype.enemyAnimation=r.enemyAnimation,l.prototype.placeEnemyes=r.placeEnemyes,l.prototype.fireAnimationEnded=o.fireAnimationEnded,l.prototype.takeDamage=s.takeDamage,l.prototype.mapObjectMove=o.mapObjectMove,l.prototype.enemyDamageAnimation=s.enemyDamageAnimation},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(1))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(45),n=i(9);function r(e){e.style.display="block"}function o(e){e.style.display="none"}function s(e,t){e.classList.add(t)}function l(e,t){if(!e.classList)return!1;e.classList.remove(t)}t.appMenu=function(e,t){var i=null,c={showSelectedItem:function(){return{selectedMenuItem:i}},menu:{constants:{sectionTemplate:".section-template",contentContainer:"#wrapper",sideMenuWrapper:"#main-menu"},importSectionsToDOM:function(){var e=document.querySelectorAll('link[rel="import"]');Array.prototype.forEach.call(e,(function(e){var t=e.import.querySelector(c.menu.constants.sectionTemplate),i=document.importNode(t.content,!0);document.querySelector(c.menu.constants.contentContainer).appendChild(i)}))},setMenuOnClickEvent:function(){var a=document.querySelector("#dialog-box");document.body.addEventListener("click",(function(n){if(n.target)switch(n.target&&n.target.dataset.section&&(c.menu.hideAllSections(),c.menu.showSection.call(this,n)),function(e){if("LI"==e.target.parentElement.tagName){for(var t=Array.prototype.slice.call(document.querySelectorAll(".selected-items")),a=0,n=t;a<n.length;a++){l(n[a],"selected-items")}i="close"!=e.target.dataset.buttonId&&"cancel"!=e.target.dataset.buttonId&&"exit"!=e.target.dataset.buttonId&&e.target.dataset?e.target.parentElement:i,s(e.target.parentElement,"selected-items")}}(n),n.target.dataset.buttonId){case"exit":!function(e){"none"==e.style.display?r(e):o(e)}(a),t({textData:"Exit the game?",rejectText:"cancel",acceptText:"ok"},e.exitTheGame,c);break;case"close":c.menu.hideAllSections(),i=null}}))},showSection:function(e){var t=e.target.dataset.section;r(document.querySelector("#"+t));for(var i=0,o=Array.prototype.slice.call(document.querySelectorAll(".menu-wrapper"));i<o.length;i++){s(o[i],"menu-backgroud")}a.pageBuilder({target:"#about-section-content",data:n.getLocalData({fileName:"about-page.json"})})},hideAllSections:function(){for(var e=0,t=Array.prototype.slice.call(document.querySelectorAll(this.constants.contentContainer+" section"));e<t.length;e++){o(t[e])}for(var i=0,a=Array.prototype.slice.call(document.querySelectorAll(".menu-wrapper"));i<a.length;i++){l(a[i],"menu-backgroud")}for(var n=0,r=Array.prototype.slice.call(document.querySelectorAll(".selected-items"));n<r.length;n++){l(r[n],"selected-items")}},init:function(){this.importSectionsToDOM(),this.setMenuOnClickEvent(),this.hideAllSections()}}};return c},t.hideShowMenu=function(e,t,i,a,n){!a||n?e.classList.remove("hide-menu"):(e.classList.add("hide-menu"),t.hideAllSections())},t.dialogWindow=function(e,t,i){for(var n=e.textData,c=(e.rejectText,e.acceptText),u=[],h=3;h<arguments.length;h++)u[h-3]=arguments[h];var d=document.querySelector("#dialog-box");function m(e){var a=!!i&&i.showSelectedItem();switch(e.target.dataset.buttonId){case"ok":t(e);break;case"cancel":d&&o(d);for(var n=0,r=Array.prototype.slice.call(document.querySelectorAll(".selected-items"));n<r.length;n++){l(r[n],"selected-items")}a.selectedMenuItem&&s(a.selectedMenuItem,"selected-items");break;case"restart":t.call.apply(t,u),d&&o(d)}}d&&r(d);var g=document.querySelector("#dialog-text"),p=document.querySelector("#dialog-body");p.innerHTML="";var f=[a.createElements({tagName:"button",styleClass:"accept-btn btn-main",inlineStyle:null,pictureUrl:null,linkUrl:null,text:c,innerContent:null,attributeName:"data-button-id",attribute:c}),a.createElements({tagName:"button",styleClass:"reject-btn btn-main",inlineStyle:null,pictureUrl:null,linkUrl:null,text:"cancel",innerContent:null,attributeName:"data-button-id",attribute:"cancel"})];g.innerHTML=n;for(var b=0,y=f;b<y.length;b++){var v=y[b];p.appendChild(v)}d.addEventListener("click",m)}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,r){function o(e){try{l(a.next(e))}catch(e){r(e)}}function s(e){try{l(a.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,r,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,a&&(n=2&r[0]?a.return:r[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,r[1])).done)return n;switch(a=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,a=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){o.label=r[1];break}if(6===r[0]&&o.label<n[1]){o.label=n[1],n=r;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(r);break}n[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],a=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};function r(e){for(var t=e.tagName,i=e.styleClass,a=e.inlineStyle,n=e.pictureUrl,r=(e.linkUrl,e.text),o=e.innerContent,s=e.attributeName,l=e.attribute,c=[],u=1;u<arguments.length;u++)c[u-1]=arguments[u];var h=document.createElement(t);return i&&(h.className=i),a&&(h.style=a),"img"===t&&n&&(h.src=__dirname+n),r&&(h.innerText=r),o&&(h.innerHTML=o),s&&l&&h.setAttribute(s,l),h}Object.defineProperty(t,"__esModule",{value:!0}),t.pageBuilder=function(e){var t=e.target,i=e.data;return a(this,void 0,void 0,(function(){var e,a;return n(this,(function(n){switch(n.label){case 0:return[4,!t];case 1:return(e=n.sent())?[3,3]:[4,!i];case 2:e=n.sent(),n.label=3;case 3:if(e)throw Error("cant fetch the data");return(a=document.querySelector(t)).innerHTML="",i.then((function(e){for(var t=0,i=e;t<i.length;t++){var n=i[t],o=r({tagName:n.tag,styleClass:n.classlist,inlineStyle:n.style,pictureUrl:n.imageLink,linkUrl:n.link,text:n.innerText,innerContent:n.html,attributeName:null,attribute:null},null);a.appendChild(o)}})),[2]}}))}))},t.createElements=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,