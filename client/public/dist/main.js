!function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=13)}([function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,a++)n[a]=r[o];return n};Object.defineProperty(t,"__esModule",{value:!0});var a=i(22);t.createWindow=a.createWindow,t.createShapeRoundBorder=a.createShapeRoundBorder,t.createRoundButton=a.createRoundButton;var r=i(23);function o(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];e[t].apply(e,i)}t.draw=o,t.createLaserBullet=function(e){if(!e.ctx)return new Error("no context");"player"==e.objectOwner&&"blaster"==e.type&&r.weapon1(e,o),"enemy"==e.objectOwner&&"blaster"==e.type&&r.weapon1(e,o),"enemy"==e.objectOwner&&"beam"==e.type&&r.weapon1(e,o)},t.createImage=function(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];o.apply(void 0,n([e,"drawImage",t],i))},t.clearField=function(e,t,i){o(e,"clearRect",0,0,t,i)}},function(e,t,i){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=i(0),r=i(5),o=n(i(4));t.placeEnemyes=function(e){a.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},t.moveEnemyes=function(e,t){void 0===t&&(t=0),this.x-=this.speed,this.y-=t},t.loadEnemyes=function(){this.img=new Image,this.img.src=this.shipTexture},t.shoot=function(e,t){if(t.gameInitData.gamePause||!this.isShoot)return!1;for(var i=this.guns,n=function(i){if(1>t.gameRandomizer(i.fireRepead)){var n=new e(a.x,a.y+(i.firePosition?i.firePosition:t.gameRandomizer(a.height)),i.name,i.color,"enemy",i.speed+a.speed,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);n.img.src=n.texture,n.img.onload=function(){t.gameInitData.allGameBullets=t.gameInitData.allGameBullets.concat(n)}}},a=this,r=0,o=i;r<o.length;r++){n(o[r])}},t.enemyAnimation=function(e){void 0===e&&(e=!0),this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&e&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},t.enemyDamageAnimation=function(){if(this.numberOfVerticalItems>1){var e=this.originalHealthPoint/this.numberOfVerticalItems,t=new Array(this.numberOfVerticalItems).fill(null);t=t.map((function(t,i){return e*(i+1)})).sort((function(e,t){return e-t})).reverse();for(var i=0;i<t.length;i++){if(this.healthPoint<t[i]&&this.healthPoint>t[i+1]&&t[i+1]){this.sy=this.sHeight*i;break}t[i+1]||(this.sy=this.sHeight*(this.numberOfVerticalItems-1))}}},t.takeDamage=function(e,t,i){if(this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"enemy"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint"))return r.explosionFire(this,i,t,o.SideObject),this.objectPresent=!1;if(this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"enemy"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"enemy"==t.objectOwner)n.call(this,null,i),this.enemyDamageAnimation(),this.healthPoint<=0&&(this.objectPresent=!1,r.explosionFire(this,i,t,o.SideObject),this.isBoss&&(i.gameInitData.levelChange=!0));else{if(!this.hasOwnProperty("healthPoint")||"player"!=this.objectOwner||"enemy"!=t.objectOwner)return!1;this.collisionAllow&&n.call(this,i.getLevelUserData(),i)}function n(t,i){if(this.healthPoint-=e,this.healthPoint<=0)return t&&t.life>0?(t.sourse.playerObject.numberOflife-=1,t.sourse.playerObject.numberOflife<=0&&(i.gameOverWindow(),i.gameInitData.gameOver=!0,setTimeout((function(){i.backToStartScreen(o.PlayerShip)}),3e3)),this.healthPoint=t.sourse.playerObject.maxHealth,!1):(i.collectPoints(this.pointsPerUnit),this.objectPresent=!1)}},t.hitDetection=function(e,t,i){for(var n=null,a=0,r=t;a<r.length;a++){var o=r[a],s=e.getObjectPosition.call(e),l=Math.max(s.x,o.x),c=Math.max(s.y,o.y),h=Math.min(s.x+(e.width||s.width),o.x+o.width)-l,u=Math.min(s.y+(e.height||s.height),o.y+o.height)-c;if("collision"==(n=!(Math.sign(h)<0||Math.sign(u)<0)&&"collision")){e.takeDamage&&o.takeDamage&&(e.takeDamage(o.damage?o.damage:0,o,i),o.takeDamage(e.damage?e.damage:0,e,i));break}}return"collision"==n&&e}},function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,a++)n[a]=r[o];return n};Object.defineProperty(t,"__esModule",{value:!0});var a=i(0);t.initField=function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error("Error");for(var n=0,a=i;n<a.length;n++){var r=a[n];r=Object.assign(r,{width:e-4,height:t-4})}},t.setGameFields=function(){this.initField(),this.createContext(),this.initPlayerShip()},t.warpEffect=function(){var e=this.getScreenSize(),t=this.gameInitData.ctx,i=this.gameInitData.warpObjects;if(this.getSecondMeasure((function(e){var t=!(this.gameInitData.timeToEressLevel>=0);this.gameInitData.timeToEressLevel>=0&&!t&&(this.gameInitData.timeToEressLevel-=1);this.gameInitData.timeToEressLevel<0&&!t&&this.changeLevelProcedure()}),{timeToEressLevel:this.gameInitData.timeToEressLevel,ctx:t,screenSiz:this.getScreenSize()}),this.gameInitData.warpObjects=i.length<350?this.gameInitData.warpObjects.concat({x:e.width,y:this.gameRandomizer(e.height),height:this.gameRandomizer(20,10),width:10,speed:this.gameRandomizer(10,5),background:this.getRandomColor()}):this.gameInitData.warpObjects,i.length>0)for(var n=0,r=i;n<r.length;n++){var o=r[n];o.x-=o.x>0?o.speed:0,o.width=i.length<150?o.width-o.speed:i.length>150&&i.length<350?o.width+o.speed:o.width-o.speed,t.fillStyle=o.background,a.draw(t,"fillRect",o.x,o.y,o.width,o.height),t.fill()}},t.levelInit=function(e,t,i){var n=this.showLevelData().levelBackgroundElements;i.gameInitData.backScreenPause=!1;for(var a=0,r=n;a<r.length;a++){var o=r[a],s=new e(o.levelMap,o.speed,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null,o.extraMap?o.extraMap:null,o.timeToExtraMapSeconds?o.timeToExtraMapSeconds:null,o.timeToExtraMapMinutes?o.timeToExtraMapMinutes:null);i.gameInitData.mapBackgroundObjects=i.gameInitData.mapBackgroundObjects.concat(s),s.img.src=__dirname+s.backgroundTexture}},t.createContext=function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},t.getScreenSize=function(){return{width:this.gameInitData.screen.width,height:this.gameInitData.screen.height}},t.changeLevelProcedure=function(){var e=this.showGameInfo();this.changeLevel(e.gameData.currentLevel+1)<=e.gameData.levelData.allLevels?this.nextLevelDataReload(e):this.gameInitData.gameWin=!0},t.levelTimer=function(){var e=this.getLevelUserData();if(e.sourse.levelData.bosPresents)e.sourse.levelData.levelDetails.levelSeconds=null,e.sourse.levelData.levelDetails.levelMinutes=null;else{e.sourse.levelData.levelDetails;this.gameInitData.levelChange||this.getSecondMeasure((function(e){e.levelSeconds<=0&&(0==e.levelMinutes&&0==e.levelSeconds&&(e.levelSeconds=0,this.gameInitData.levelChange=!0),e.levelMinutes=e.levelMinutes>0?e.levelMinutes-1:0);e.levelSeconds=e.levelSeconds>0?e.levelSeconds-1:this.gameInitData.levelChange?0:59}),e.sourse.levelData.levelDetails)}},t.getSecondMeasure=function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];var a=1e3/this.gameInitData.intervalCount;if(this.gameInitData.gemeExtraSeconds%a==0)return this.gameInitData.gemeExtraSeconds=0,e?e.call.apply(e,n([this],t)):a},t.gameSecondsIncrease=function(){this.gameInitData.gemeExtraSeconds+=1},t.getLevelUserData=function(){var e=this.gameInitData.gameData,t=e.levelData.levelDetails;return{sourse:e,currentLevel:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,life:e.playerObject.numberOflife,minutes:t.levelMinutes,seconds:t.levelSeconds}},t.deleteBullet=function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},t.deleteObjects=function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},t.delateSideObject=function(e){if(!e.objectPresent||e.x<0-e.width){var t=this.gameInitData.allGameSideObjects.indexOf(e);this.gameInitData.allGameSideObjects.splice(t,1)}},t.collectPoints=function(e){this.gameInitData.gameData.currentPoint+=e},t.getObjectPosition=function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},t.getRandomColor=function(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e},t.preloadImage=function(e){var t=document.querySelector("#preloader");function i(e,t,i){"skinName"!=e&&"texture"!=e&&"levelMap"!=e||t&&(i.src=__dirname+t)}!function e(n){if(!n)return;for(var a=0,r=Object.entries(n);a<r.length;a++){var o=r[a],s=o[0],l=o[1];"object"==typeof n[s]&&e(n[s]),i(s,l,t)}}(e)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=function(e,t){e(t=t||this)},t.getUIObjectPosition=function(){return{x:this.propertyes.x,y:this.propertyes.y,width:this.propertyes.width,height:this.propertyes.height}}},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(25)),n(i(36)),n(i(37)),n(i(40)),n(i(41)),n(i(42))},function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var a in t=arguments[i])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.explosionFire=function(e,t,i,o){return a(this,void 0,void 0,(function(){var a,s,l,c,h,u;return r(this,(function(r){switch(r.label){case 0:return a=i.x+i.width/2,s=e.x+e.width/2,l=Math.max(a,s)-Math.min(a,s),i.x>e.x?l:l/2,c={x:e.x-e.explosion.width/2,y:e.bulletType?e.y-e.explosion.width/2:e.y,sx:0,sy:0,objectOwner:"explosion",sWidth:e.explosion.imageWidth/e.explosion.numberOfItems,sHeight:e.explosion.imageHeight,width:2*e.explosion.width,height:2*e.explosion.width,animationSteps:e.explosion.animationSteps,target:i.objectOwner,numberOfItems:e.explosion.imageWidth/e.explosion.numberOfItems,texture:e.explosion.texture,speed:i.speed/2,picturesWidth:e.explosion.imageWidth},(h=new o(n({},c))).img.onload=function(){t.gameInitData.allGameSideObjects=t.gameInitData.allGameSideObjects.concat(h)},u=h.img,[4,h.texture];case 1:return u.src=r.sent(),[2]}}))}))},t.fireAnimationEnded=function(e){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.objectPresent=!1,this.sx=0)),this.sx>=this.picturesWidth&&(this.animationState=!1)},t.mapObjectMove=function(){this.x-=this.speed?this.speed:3},t.mapRanomObjectSpawn=function(e,t,i){this.getSecondMeasure((function(e,t,i){var a=this,r=this.showGameInfo().gameData.levelData;if(this.gameRandomizer(r.objectProbability)<r.objectMinTimeSpawn){var o=this.getScreenSize(),s=e[this.gameRandomizer(e.length)],l="bottom"==s.spawnDetails.position&&"string"==typeof s.spawnDetails.position?o.height-this.gameRandomizer(s.height):"top"==s.spawnDetails.position&&"string"==typeof s.spawnDetails.position?this.gameRandomizer(s.height):"string"==typeof s.spawnDetails.position?this.gameRandomizer(o.height):s.spawnDetails.position,c={x:o.width,y:l,sx:0,sy:0,objectOwner:s.objectOwner,sWidth:s.imageWidth/s.numberOfItems,sHeight:s.imageHeight,width:s.width,height:s.height,animationSteps:s.animationSteps,target:null,numberOfItems:s.numberOfItems,texture:s.skinName,speed:s.speed,picturesWidth:s.imageWidth,healthPoint:s.healthPoint,damage:s.damage,isBackground:s.isBackground,explosion:s.explosionAnimation,pointsPerUnit:s.pointsPerUnit},h=new t(n({},c));h.img.src=h.texture,h.img.onload=function(){a.gameInitData.allGameSideObjects=a.gameInitData.allGameSideObjects.concat(h)}}}),e,t,i)}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(21),o=i(2),s=i(24).remote;function l(e){return n(this,void 0,void 0,(function(){var t,i,n,s,l,c;return a(this,(function(a){switch(a.label){case 0:return t={host:"http://localhost:3000/",picturesDirection:__dirname+"/public/images/",levelData:{method:"GET",url:"api/level-data"},levelObjects:{method:"GET",url:"api/level-objects"},gameSetings:{method:"GET",url:"api/game-settings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,r.getData({url:t.host+t.levelData.url,method:t.levelData.method,data:null,headers:{maplevel:e.level}})];case 1:return i=a.sent(),[4,r.getData({url:t.host+t.levelObjects.url,method:t.levelObjects.method,data:null,headers:{mapObject:i.levelOBjects}})];case 2:return n=a.sent(),[4,r.getData({url:t.host+t.gameSetings.url,method:t.gameSetings.method,data:null,headers:null})];case 3:return s=a.sent(),[4,r.getData({url:t.host+t.userShip.url,method:t.userShip.method,data:null,headers:{usership:e.shipConfiguration}})];case 4:return l=a.sent(),[4,r.getData({url:t.host+t.enemylData.url,method:t.enemylData.method,data:null,headers:{"ship-type-number":i.enemyType}})];case 5:return c=a.sent(),o.preloadImage(c),o.preloadImage(i),o.preloadImage(n),[2,{levelData:i,levelObjects:n,gameSetings:s,userData:l,enemyData:c}]}}))}))}function c(e){return n(this,void 0,void 0,(function(){var t,i,n,r,o,s,c,h,u,d,m;return a(this,(function(a){switch(a.label){case 0:return t=document.querySelector("#gamefield"),i=document.querySelector("#gameObjectsfield"),n=document.querySelector("#gameUifield"),1,o=5,[4,l({level:r=5,shipConfiguration:1})];case 1:return s=a.sent(),c=s.levelData,h=s.levelObjects,u=s.gameSetings,d=s.userData,m=s.enemyData,[2,{data:{ctx:null,gameField:t||null,gameActionField:i||null,gameUIField:n||null,gameData:{currentLevel:r,currentPoint:0,playerObject:new e(d,0,300,o,100,100,d.size.width,d.size.height,d.damage),levelData:c,levelObjects:h,gameSetings:u,enemyData:m,controllers:null},screen:{width:window.innerWidth,height:window.innerHeight},intervalCount:20,enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],warpObjects:[],timeToEressLevel:6,levelChange:!1,gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameStatus:!1,gameOver:!1,gameWin:!1,gemeExtraSeconds:0}}]}}))}))}t.serverRequest=l,t.gameDataInit=c,t.gameEngine=function(e){return n(this,void 0,void 0,(function(){return a(this,(function(e){return[2]}))}))},t.gameStart=function(){this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!0},t.backToStartScreen=function(e){return n(this,void 0,void 0,(function(){var t,i,n,r,o,s;return a(this,(function(a){switch(a.label){case 0:return[4,c(e)];case 1:for(t=a.sent(),i=0,n=Object.entries(t.data);i<n.length;i++)r=n[i],o=r[0],null!==(s=r[1])&&(this.gameInitData[o]=s);return this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!1,[2]}}))}))},t.exitTheGame=function(){confirm("exit?")&&s.getCurrentWindow().close()}},function(e,t,i){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=n(i(4)),r=n(i(26));t.initPlayerShip=function(e){var t=this;if(this.ctx){var i=this.data.texture,n=e.showGameInfo().imageDirrection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=n+i}},t.movePlayerShip=function(){this.img&&this.ctx&&this.img&&r.createImage(this.ctx,this.img,this.x,this.y,this.width,this.height)},t.shipControl=function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(n){if(e.gameInitData.gamePause)return!1;i.down.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(i){if(e.gameInitData.gamePause)return!1;if("CANVAS"===i.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var n=i.clientX-i.target.offsetLeft,a=i.clientY-i.target.offsetTop;t.xFinal=(n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed))-t.width/2,t.yFinal=(a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed))-t.height/2}})),document.addEventListener("click",(function(i){if(e.gameInitData.gamePause)return!1;for(var n=function(i){var n=new a.BulletConstruct(t.x,t.y+i.firePosition,i.name,i.color,"player",i.speed+t.xAdj,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);n.img.src=n.texture,n.img.onload=function(){e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(n)}},r=0,o=t.data.guns;r<o.length;r++){n(o[r])}}))},t.setContext=function(e){this.ctx=e},t.placeShip=function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.xAdj=this.x>this.xFinal?0:e,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.moveShip=function(e){var t=e.xPos,i=void 0===t?0:t,n=e.yPos,a=void 0===n?0:n;this.x+=i,this.y+=a}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uiImage=function(e){var t=e.propertyes;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},t.uiText=function(e){var t=e.propertyes;t.ctx.measureText(e.text).width,t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)},t.uiRepeatImage=function(e){var t=e.propertyes,i=t.ctx.createPattern(t.background,"repeat-x");t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.rect(t.x,t.y,t.width,t.height),t.ctx.fillStyle=i,t.ctx.fill()}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(6);t.nextLevelDataReload=function(e){return n(this,void 0,void 0,(function(){function t(e){for(var n=0,a=Object.entries(e);n<a.length;n++){var r=a[n],o=r[0],s=r[1];"object"!=typeof e[o]||null==s||e[o].length||t(e[o]),i.call(this,o,e)}}function i(e,t){for(var i=0,n=Object.entries(l);i<n.length;i++){var a=n[i],r=a[0],o=a[1];r==e&&null!=o&&(this.gameInitData[r]=o)}}var n,o,s,l;return a(this,(function(i){switch(i.label){case 0:return n=e.gameData.currentLevel,[4,r.serverRequest({level:n,shipConfiguration:1})];case 1:return o=i.sent(),l={gameData:{currentLevel:n,currentPoint:(s=this).gameInitData.gameData.currentPoint,playerObject:s.gameInitData.gameData.playerObject,levelData:o.levelData,levelObjects:o.levelObjects,gameSetings:s.gameInitData.gameData.gameSetings,enemyData:o.enemyData,controllers:s.gameInitData.gameData.controllers},enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameOver:!1,gemeExtraSeconds:0},setTimeout((function(){s.gameInitData.warpObjects=[],s.gameInitData.timeToEressLevel=6,s.gameInitData.levelChange=!1}),5e3),t.call(this,this.gameInitData),[2]}}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.enemyShipLogicVertical=function(e,t){var i=Math.max(e.x,this.x),n=Math.min(e.x,this.x),a=Math.max(e.y-this.height/2,this.y),r=Math.min(e.y-this.height/2,this.y),o=i-n,s=a-r;if(this.isMove&&this.behavior)switch(this.behavior){case"patrool":if(!this.direction){var l=t.gameRandomizer(2,1);this.direction=1==l?"up":"down"}(function(e){var t=e.getScreenSize(),i=Math.max(this.y,this.yFinal)-Math.min(this.y,this.yFinal);switch(this.direction){case"up":this.yFinal=0,this.y-this.height<this.yFinal&&(this.direction="down");break;case"down":this.yFinal=t.height,this.y+this.height>this.yFinal&&(this.direction="up");break;default:this.yFinal=t.height/2}this.enemyVerticalMoveCalculation(i)}).call(this,t);break;case"find":c.call(this);break;case"attack":(function(e,t,i){this.yFinal=i.y-this.height/2,t<100&&this.enemyVerticalMoveCalculation(e)}).call(this,s,o,e);break;case"comeEndFind":c.call(this),function(){var e=t.getScreenSize();this.x<e.width-2*this.width&&(this.speed=0)}.call(this);break;default:c.call(this)}function c(){if(this.spotDistance>o||this.spotDistance>s)return this.yFinal=e.y-this.height/2,this.enemyVerticalMoveCalculation(s),!0}},t.enemyVerticalMoveCalculation=function(e){var t=e/this.verticalSpeed;t=(t=Math.sign(t)>0?t:-1*t)>this.verticalSpeed?this.verticalSpeed:t,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.spawnEnemyLogic=function(e){var t=this.gameInitData.gameData,i=t.levelData,n=t.enemyData,a=this.getLevelUserData(),r=a.sourse.levelData.bosPresents?a.sourse.levelData.bosPresents:null;if(this.gameInitData.gameData.levelChange||r){if(0==this.gameInitData.allGameEnemies.length){var o=this.createNewEnemy(n[0],e);o.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(o)}}else(function(){if(this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var t=this.gameRandomizer(i.enemyMaxNumber);t<i.enemyMaxNumber;t++){var a=n[this.gameRandomizer(n.length)],r=this.createNewEnemy(a,e);r.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}}).call(this)},t.createNewEnemy=function(e,t){var i=this.gameInitData.screen.width+300,n=this.gameRandomizer(this.gameInitData.screen.height-200,100);if(e.details){var a=e.details,r=a.behavior?a.behavior[this.gameRandomizer(a.behavior.length)]:null;return new t({x:i,y:n,sx:a.sx,sy:a.sy,sWidth:a.imageWidth/a.numberOfItems,sHeight:a.imageHeight,picturesWidth:a.imageWidth,numberOfItems:a.numberOfItems,width:a.width,height:a.height,shipTexture:a.skinName,speed:a.speed,status:a.status,name:a.name,bulletTypeNumber:a.bulletType,rapidFire:a.rapidFire,pointsPerUnit:a.pointsPerUnit,healthPoint:a.healthPoint,animationSteps:a.animationSteps,damage:a.damage,objectOwner:a.objectOwner,guns:a.guns?a.guns:[],explosion:a.explosionAnimation,numberOfVerticalItems:a.numberOfVerticalItems,isMove:a.isMove,isShoot:a.isShoot,spotDistance:a.spotDistance,behavior:r,verticalSpeed:a.verticalSpeed?a.verticalSpeed:null,isBoss:!!a.isBoss&&a.isBoss})}},t.gameRandomizer=function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(0);t.updateMap=function(){this.x-=this.backgroundSpeed,Math.sign(this.backgroundSpeed)>0&&this.x+this.screenData.width<0?this.x=this.screenData.width:Math.sign(this.backgroundSpeed)<0&&this.x>this.screenData.width&&(this.x=0-this.screenData.width),n.createImage(this.ctx,this.img,this.x,0,this.screenData.width+2,this.screenData.height)},t.changePartOfTexture=function(e,t){var i=e.getLevelUserData(),n=e.getScreenSize();if(i.minutes<=this.timeToExtraMapMinutes&&i.seconds<=this.timeToExtraMapSeconds&&this.extraMap&&this.x>=n.width-200){var a=e.showGameInfo();this.img.src=a.imageDirrection+this.extraMap}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(0);t.createBullets=function(e){n.createLaserBullet({source:this,objectOwner:this.objectOwner,ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5,type:this.type,img:this.img,sx:this.sx,sy:this.sy,sWidth:this.sWidth,sHeight:this.sHeight})},t.initBullets=function(){},t.moveBullets=function(e,t){switch(this.type){case"blaster":i.call(this);break;case"beam":(function(){t.getScreenSize();this.x>0?this.width+=this.bulletSpeed:this.width>0&&(this.x=0,this.width-=this.bulletSpeed)}).call(this),i.call(this);break;default:i.call(this)}function i(){"player"==this.objectOwner?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0}),i(14);i(18);var o=r(i(20)),s=r(i(4)),l=i(0),c=i(44);!function(){n(this,void 0,void 0,(function(){function e(){return n(this,void 0,void 0,(function(){var e,i,n,o,u,m,g,p,f,y,b,v;return a(this,(function(a){if(r.gameInitData.ctxUIField&&l.clearField(r.gameInitData.ctxUIField,r.gameInitData.screen.width,r.gameInitData.screen.height),r.gameInitData.ctxActionField&&!r.gameInitData.gamePause&&l.clearField(r.gameInitData.ctxActionField,r.gameInitData.screen.width,r.gameInitData.screen.height),r.gameInitData.backScreenPause&&r.levelInit(s.GameBackground,r.gameInitData.ctx,r),!r.gameInitData.gamePause&&r.gameInitData.gameStatus&&r.gameInitData.gameStatus){if(r.gameInitData.levelChange||r.spawnEnemyLogic(s.EnemyObject),r.gameInitData.allGameBullets.length>0)for(e=0,i=r.gameInitData.allGameBullets;e<i.length;e++)(n=i[e]).moveBullets(h,r),n.createBullets(r),r.deleteBullet(n),r.hitDetection(n,r.gameInitData.allGameEnemies,r),r.hitDetection(h,[n],r),r.hitDetection(n,r.gameInitData.allGameSideObjects,r);if(r.gameInitData.allGameEnemies.length>0)for(o=0,u=r.gameInitData.allGameEnemies;o<u.length;o++)(m=u[o]).placeEnemyes(r),m.moveEnemyes(),m.enemyShipLogicVertical({x:h.x,y:h.y},r),m.enemyAnimation(!0),m.shoot(s.BulletConstruct,r),r.deleteObjects(m),r.hitDetection(h,[m],r);if(r.gameInitData.gameOver||(h.placeShip(),h.movePlayerShip()),r.gameInitData.allGameSideObjects.length>0)for(g=0,p=r.gameInitData.allGameSideObjects;g<p.length;g++)(f=p[g]).placeEnemyes(r),"explosion"==f.objectOwner?f.fireAnimationEnded(r.gameInitData.allGameSideObjects):("enemy"!=f.objectOwner&&"collide"!=f.objectOwner||r.hitDetection(h,[f],r),f.enemyAnimation()),f.mapObjectMove(),r.delateSideObject(f);r.gameInitData.gameData.levelObjects&&r.mapRanomObjectSpawn(r.gameInitData.gameData.levelObjects,s.SideObject,r.gameInitData.allGameSideObjects),r.gameSecondsIncrease(),r.levelTimer()}if(!(r.gameInitData.backScreenPause&&r.gameInitData.gamePause&&r.gameInitData.gameStatus||r.gameInitData.gamePause&&r.gameInitData.gameStatus)){for(r.gameInitData.ctx&&l.clearField(r.gameInitData.ctx,r.gameInitData.screen.width,r.gameInitData.screen.height),y=0,b=r.gameInitData.mapBackgroundObjects;y<b.length;y++)(v=b[y]).updateMap(),v.changePartOfTexture(r,r.gameInitData.mapBackgroundObjects);r.gameInitData.levelChange&&r.warpEffect()}return r.gameInitData.gameStatus||r.gameInitData.gameUiPause||r.showStartWindow(),r.gameInitData.gameStatus&&r.showGameStats(),r.gameInitData.gamePause&&r.showPauseWindow(),r.gameInitData.gameUiPause&&(r.showMenuWindow(),r.showPauseWindow()),r.gameInitData.gameOver&&r.gameOverWindow(),!r.gameInitData.gameWin||r.gameInitData.gameUiPause||r.gameInitData.gamePause||r.gameWinWindow(),c.hideShowMenu(t,d.menu,r.gameInitData.gameWin,r.gameInitData.gameStatus,r.gameInitData.gameUiPause),[2]}))}))}var t,i,r,h,u,d;return a(this,(function(n){switch(n.label){case 0:return document.querySelector("#wrapper"),t=document.querySelector("#main-menu"),[4,o.gameDataInit(s.PlayerShip)];case 1:return i=n.sent(),[4,new s.Game(i.data)];case 2:return r=n.sent(),h=r.gameInitData.gameData.playerObject,setInterval(e,r.gameInitData.intervalCount),r.uiController(),r.setGameFields(),r.getScreenSize(),u=r.returnContext(),h.ctx=u.gameActionField,h.initPlayerShip(r),h.shipControl(r),(d=c.appMenu(r)).menu.init(),[2]}}))}))}()},function(e,t,i){var n=i(15),a=i(16);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var r={insert:"head",singleton:!1},o=(n(a,r),a.locals?a.locals:{});e.exports=o},function(e,t,i){"use strict";var n,a=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},r=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),o=[];function s(e){for(var t=-1,i=0;i<o.length;i++)if(o[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],a=0;a<e.length;a++){var r=e[a],l=t.base?r[0]+t.base:r[0],c=i[l]||0,h="".concat(l," ").concat(c);i[l]=c+1;var u=s(h),d={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(o[u].references++,o[u].updater(d)):o.push({identifier:h,updater:f(d,t),references:1}),n.push(h)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var a=i.nc;a&&(n.nonce=a)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,i,n){var a=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var r=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function m(e,t,i){var n=i.css,a=i.media,r=i.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),r&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var g=null,p=0;function f(e,t){var i,n,a;if(t.singleton){var r=p++;i=g||(g=c(t)),n=d.bind(null,i,r,!1),a=d.bind(null,i,r,!0)}else i=c(t),n=m.bind(null,i,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var a=s(i[n]);o[a].references--}for(var r=l(e,t),c=0;c<i.length;c++){var h=s(i[c]);0===o[h].references&&(o[h].updater(),o.splice(h,1))}i=r}}}},function(e,t,i){(t=i(17)(!1)).push([e.i,"body{font-family:'Roboto';color:#fff;background:#333;margin:0;padding:0;-khtml-user-select:none;user-select:none}body #preloader{visibility:hidden;width:0px;height:0px}.static-wrapper{display:flex;position:absolute;top:0;width:100vw}.static-wrapper asside{z-index:10}.static-wrapper asside .main-menu{top:20px}.static-wrapper asside .main-menu ul{display:block;top:80px;position:relative;text-transform:uppercase}.static-wrapper asside .main-menu ul li{padding:10px;list-style:none}.static-wrapper asside .main-menu ul a{color:#ffc800;text-decoration:none;font-size:25px}.static-wrapper asside .main-menu ul a:active{color:red}#wrapper section{z-index:5;top:0}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}.hide-menu{visibility:hidden}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var a=(o=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[i].concat(r).concat([a]).join("\n")}var o,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(a[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&a[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t,i){(function(e){function i(e,t){for(var i=0,n=e.length-1;n>=0;n--){var a=e[n];"."===a?e.splice(n,1):".."===a?(e.splice(n,1),i++):i&&(e.splice(n,1),i--)}if(t)for(;i--;i)e.unshift("..");return e}function n(e,t){if(e.filter)return e.filter(t);for(var i=[],n=0;n<e.length;n++)t(e[n],n,e)&&i.push(e[n]);return i}t.resolve=function(){for(var t="",a=!1,r=arguments.length-1;r>=-1&&!a;r--){var o=r>=0?arguments[r]:e.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(t=o+"/"+t,a="/"===o.charAt(0))}return(a?"/":"")+(t=i(n(t.split("/"),(function(e){return!!e})),!a).join("/"))||"."},t.normalize=function(e){var r=t.isAbsolute(e),o="/"===a(e,-1);return(e=i(n(e.split("/"),(function(e){return!!e})),!r).join("/"))||r||(e="."),e&&o&&(e+="/"),(r?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(n(e,(function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e})).join("/"))},t.relative=function(e,i){function n(e){for(var t=0;t<e.length&&""===e[t];t++);for(var i=e.length-1;i>=0&&""===e[i];i--);return t>i?[]:e.slice(t,i-t+1)}e=t.resolve(e).substr(1),i=t.resolve(i).substr(1);for(var a=n(e.split("/")),r=n(i.split("/")),o=Math.min(a.length,r.length),s=o,l=0;l<o;l++)if(a[l]!==r[l]){s=l;break}var c=[];for(l=s;l<a.length;l++)c.push("..");return(c=c.concat(r.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),i=47===t,n=-1,a=!0,r=e.length-1;r>=1;--r)if(47===(t=e.charCodeAt(r))){if(!a){n=r;break}}else a=!1;return-1===n?i?"/":".":i&&1===n?"/":e.slice(0,n)},t.basename=function(e,t){var i=function(e){"string"!=typeof e&&(e+="");var t,i=0,n=-1,a=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!a){i=t+1;break}}else-1===n&&(a=!1,n=t+1);return-1===n?"":e.slice(i,n)}(e);return t&&i.substr(-1*t.length)===t&&(i=i.substr(0,i.length-t.length)),i},t.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,i=0,n=-1,a=!0,r=0,o=e.length-1;o>=0;--o){var s=e.charCodeAt(o);if(47!==s)-1===n&&(a=!1,n=o+1),46===s?-1===t?t=o:1!==r&&(r=1):-1!==t&&(r=-1);else if(!a){i=o+1;break}}return-1===t||-1===n||0===r||1===r&&t===n-1&&t===i+1?"":e.slice(t,n)};var a="b"==="ab".substr(-1)?function(e,t,i){return e.substr(t,i)}:function(e,t,i){return t<0&&(t=e.length+t),e.substr(t,i)}}).call(this,i(19))},function(e,t){var i,n,a=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(i===setTimeout)return setTimeout(e,0);if((i===r||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:r}catch(e){i=r}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var l,c=[],h=!1,u=-1;function d(){h&&l&&(h=!1,l.length?c=l.concat(c):u=-1,c.length&&m())}function m(){if(!h){var e=s(d);h=!0;for(var t=c.length;t;){for(l=c,c=[];++u<t;)l&&l[u].run();u=-1,t=c.length}l=null,h=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function p(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];c.push(new g(e,t)),1!==c.length||h||s(m)},g.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=p,a.addListener=p,a.once=p,a.off=p,a.removeListener=p,a.removeAllListeners=p,a.emit=p,a.prependListener=p,a.prependOnceListener=p,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(6)),n(i(9))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getData=function(e){var t=e.url,i=e.method,n=e.data,a=e.headers,r=Object.assign({"Content-Type":"application/json"},a||!1);return fetch(t,{method:i,mode:"cors",headers:r,body:n?JSON.stringify(n):null}).then((function(e){return e.json()})).then((function(e){return e}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createWindow=function(e,t){var i=this.getScreenSize();i.width,i.height,e.fillRect(t.x,t.y,t.width,t.height)},t.createShapeRoundBorder=function(e){var t=e.propertyes;if(t.ctx.fillStyle=t.background,t.gradient){var i=t.ctx.createLinearGradient(t.topX,t.topY,t.bottomX,t.bottomY);i.addColorStop(0,t.background),i.addColorStop(1,t.backGroundFinal),t.ctx.fillStyle=i}t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.stroke()),t.ctx.closePath(),t.ctx.fill()},t.createRoundButton=function(e){var t=e.propertyes,i=t.ctx.measureText(e.text).width/3.2,n=t.textProperty.leftPadding+i+t.textProperty.rightPadding;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+n-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+n,t.y,t.x+n,t.y+t.radius),t.ctx.lineTo(t.x+n,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+n,t.y+t.height,t.x+n-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill(),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.lineWidth=t.borderRadius,t.ctx.stroke()),t.ctx.font=e.fontSize,t.ctx.fillStyle=t.textProperty.textColor,t.ctx.shadowColor=t.textProperty.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillText(e.text,t.x+t.textProperty.leftPadding,t.y+t.height/2+t.textProperty.topPadding)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.weapon1=function(e,t){t(e.ctx,"drawImage",e.img,e.sx,e.sy,e.sWidth,e.sHeight,e.x,e.y,e.width+10,e.height+10)},t.weapon1backward=function(e,t){t(e.ctx,"drawImage",e.img,0,0,e.width,e.height,e.x,e.y,e.width+10,e.height+10)}},function(e,t){e.exports=require("electron")},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(10),a=i(1),r=i(9),o=i(2),s=i(7),l=i(29),c=i(6),h=i(5),u=function(){function e(e){this.gameInitData=e}return e.prototype.changeLevel=function(e){return this.gameInitData.gameData.currentLevel=e,this.gameInitData.gameData.currentLevel},e.prototype.showGameInfo=function(){return{levelToChange:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint,gameData:this.gameInitData.gameData,imageDirrection:__dirname+"/public/images/"}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();t.Game=u,u.prototype.createContext=o.createContext,u.prototype.initField=o.initField,u.prototype.levelInit=o.levelInit,u.prototype.setGameFields=o.setGameFields,u.prototype.warpEffect=o.warpEffect,u.prototype.getScreenSize=o.getScreenSize,u.prototype.getLevelUserData=o.getLevelUserData,u.prototype.levelTimer=o.levelTimer,u.prototype.getSecondMeasure=o.getSecondMeasure,u.prototype.gameSecondsIncrease=o.gameSecondsIncrease,u.prototype.initPlayerShip=s.initPlayerShip,u.prototype.deleteBullet=o.deleteBullet,u.prototype.deleteObjects=o.deleteObjects,u.prototype.delateSideObject=o.delateSideObject,u.prototype.hitDetection=a.hitDetection,u.prototype.collectPoints=o.collectPoints,u.prototype.spawnEnemyLogic=n.spawnEnemyLogic,u.prototype.createNewEnemy=n.createNewEnemy,u.prototype.gameRandomizer=n.gameRandomizer,u.prototype.uiController=l.uiController,u.prototype.gameUiPause=l.gameUiPause,u.prototype.gameUiMenu=l.gameUiMenu,u.prototype.showMenuWindow=l.showMenuWindow,u.prototype.showUiPopupWindow=l.showUiPopupWindow,u.prototype.showStartWindow=l.showStartWindow,u.prototype.showPauseWindow=l.showPauseWindow,u.prototype.gameOverWindow=l.gameOverWindow,u.prototype.gameWinWindow=l.gameWinWindow,u.prototype.showGameStats=l.showGameStats,u.prototype.initUiElements=l.initUiElements,u.prototype.gameStart=c.gameStart,u.prototype.backToStartScreen=c.backToStartScreen,u.prototype.exitTheGame=c.exitTheGame,u.prototype.nextLevelDataReload=r.nextLevelDataReload,u.prototype.changeLevelProcedure=o.changeLevelProcedure,u.prototype.getRandomColor=o.getRandomColor,u.prototype.mapRanomObjectSpawn=h.mapRanomObjectSpawn},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(0)),n(i(8)),n(i(27))},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(8)),n(i(28))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.warpElement=function(){var e=null.createLinearGradient(0,0,170,0);e.addColorStop("0","magenta"),e.addColorStop("0.5","blue"),e.addColorStop("1.0","red")}},function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,a++)n[a]=r[o];return n};Object.defineProperty(t,"__esModule",{value:!0});var a=i(0),r=i(30),o=i(31),s=i(32),l=i(33),c=i(34),h=i(35),u=i(8),d=i(1);t.gameUiPause=function(){!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},t.gameUiMenu=function(e){this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,this.gameInitData.gamePause=!e},t.uiController=function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,i=this;document.addEventListener("keydown",(function(n){t.escape.some((function(e){return n.keyCode==e}))&&i.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return n.keyCode==e}))&&i.gameUiPause()})),document.addEventListener("click",(function(t){var n=e.getLevelUserData();if("CANVAS"===t.target.tagName){var a=t.clientX-t.target.offsetLeft,s=t.clientY-t.target.offsetTop,l=null,c=e.gameInitData.ctxUIField,u=e.getScreenSize();e.gameInitData.gameStatus||(l=r.gameLoadMenu(null,c,u.width,u.height,null),m.call(e,l)),e.gameInitData.gameUiPause&&(l=o.gameSettingsMenu(null,c,u.width,u.height),m.call(e,l)),e.gameInitData.gameWin&&(l=h.gameWinScreen(null,c,u.width,u.height,null,n),m.call(e,l))}function m(e){for(var t in e){if(d.hitDetection(e[t],[].concat({x:a,y:s,width:10,height:10,name:"cursor"}),this)&&e[t].action){e[t].action.call(this,i);break}}}}))},t.showUiPopupWindow=function(){a.createWindow.call(this)},t.showStartWindow=function(){var e=[a.createRoundButton,u.uiImage,u.uiText,u.uiText];this.initUiElements(e,r.gameLoadMenu)},t.showMenuWindow=function(){var e=[a.createShapeRoundBorder,a.createRoundButton,a.createRoundButton,u.uiText];this.initUiElements(e,o.gameSettingsMenu)},t.showPauseWindow=function(){var e=[u.uiText];this.initUiElements(e,s.gamePause)},t.showGameStats=function(){var e=this.getLevelUserData(),t=[u.uiImage,u.uiText,u.uiText,u.uiText];this.initUiElements(t,l.gameInformationScreen,e)},t.gameOverWindow=function(){var e=[u.uiText,u.uiText,u.uiText];this.initUiElements(e,c.gameOverScreen)},t.gameWinWindow=function(){var e=this.getLevelUserData(),t=[u.uiText,u.uiText,u.uiText,a.createRoundButton,a.createRoundButton,a.createRoundButton];this.initUiElements(t,h.gameWinScreen,e)},t.initUiElements=function(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];for(var r=this.gameInitData.ctxUIField,o=this.getScreenSize(),s=this.showGameInfo().imageDirrection,l=t.apply(void 0,n([null,r,o.width,o.height,s],i)),c=0;c<l.length;c++)l[c].hasOwnProperty("loadPicture")&&l[c].loadPicture(),l[c].init(e[c])}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3);t.gameLoadMenu=function(e,t,i,a,r){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-165,y:a/2+150,background:"rgba(255, 255, 255, 1)",isBorder:!0,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 0)",textProperty:{textColor:"#251536",topPadding:10,rightPadding:40,bottomPadding:10,leftPadding:40},radius:45},action:function(){this.gameStart()},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,shadowColor:"rgba(37, 21, 54, 1)",propertyes:{ctx:t,width:150,height:150,sWidth:1024,sHeight:1024,x:i/2-75,y:90,background:new Image,borderColor:!1,shadowColor:"rgba(37, 21, 54, 1)",radius:null},loadPicture:function(){this.propertyes.background.src=r+"misc/logo-1024x1024.png"},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:-290,height:0,x:i/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:0,x:i/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(89, 0, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=i(3),r=n(i(4));t.gameSettingsMenu=function(e,t,i,n){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:i,height:n/2,x:0,y:n/4,gradient:!0,backGroundFinal:"#8C31A3",topX:0,topY:0,bottomX:i,bottomY:n/2,background:"#6628A7",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(0, 0, 0, 1)",radius:5},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"go to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:200,height:50,x:i/2-150,y:n/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 0)",textProperty:{textColor:"#251536",topPadding:7,rightPadding:50,bottomPadding:10,leftPadding:20},radius:15},action:function(){this.backToStartScreen.call(this,r.PlayerShip)},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button to exit",text:"exit",description:"Exit the game",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:200,height:50,x:i/2+i/3,y:n/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",textProperty:{textColor:"#251536",topPadding:7,rightPadding:50,bottomPadding:10,leftPadding:20},radius:15},action:function(e){e.exitTheGame()},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 0)",propertyes:{ctx:t,width:-45,height:0,x:i/2,y:n/3,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3);t.gamePause=function(e,t,i,a,r){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"60px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3);t.gameInformationScreen=function(e,t,i,a,r,o){return[{name:"lifePoint",text:"",number:o.life,step:[o.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,shadowColor:"rgba(0, 0, 0, 1)",radius:null},loadPicture:function(){this.propertyes.background.src=r+"misc/ruby.png"},init:function(e,t){t=t||this;for(var i=Array(o.life).fill(0).map((function(e,t){return 30*t})),n=0;n<this.number;n++)this.propertyes.x=0==n?30:0+i[n]+(0!=n?30:0),e(t)},getObjectPosition:n.getUIObjectPosition},{name:"level",text:"Current Level "+o.currentLevel+"/"+o.allLevels+" ",description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",propertyes:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Time to end f level",text:o.minutes||o.seconds?"Time to level end "+(o.minutes-10>=0?"":0)+o.minutes+":"+(o.seconds-10>=0?"":0)+o.seconds:"Boss level",description:"Game part the name",clicked:!1,fontSize:"light 16px Roboto",propertyes:{ctx:t,width:50,height:0,x:i-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game points",text:o.points,description:"Game part the name",clicked:!1,fontSize:"light 18px Roboto",propertyes:{ctx:t,width:-50,height:0,x:i/2,y:50,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(3);t.gameOverScreen=function(e,t,i,a,r){return e||[{name:"Pause text",text:"Game Over",description:"text for game over window",fontSize:"110px Arial",clicked:!1,propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:a/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=i(3),r=n(i(4));t.gameWinScreen=function(e,t,i,n,o,s){return e||[{name:"screen title",text:"YOU WIN ",description:"text for game over window",fontSize:" bold 120px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:n/2-n/4,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"screen text",text:"Congratulation ",description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:n/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"score",text:"You score is "+s.points,description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",propertyes:{ctx:t,width:0,height:90,x:i/2-250,y:n/2,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"Save results",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:300,height:50,x:i/2+i/3,y:n/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"go to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:200,height:50,x:20,y:n/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){this.backToStartScreen.call(this,r.PlayerShip)},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2),a=i(11),r=function(e,t,i,n,a,r,o,s){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=n,this.x=a?0:i.width,this.y=0,this.img=new Image,this.extraMap=r,this.timeToEressLevel=4,this.warpObjects=[],this.timeToExtraMapSeconds=o,this.timeToExtraMapMinutes=s};t.GameBackground=r,r.prototype.updateMap=a.updateMap,r.prototype.warpEffect=n.warpEffect,r.prototype.changePartOfTexture=a.changePartOfTexture},function(e,t,i){"use strict";var n=this&&this.__rest||function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(i[n[a]]=e[n[a]])}return i};Object.defineProperty(t,"__esModule",{value:!0});var a=i(10),r=i(1),o=i(38),s=function(e){var t=n(e,[]);this.id=(new Date).getTime(),this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.picturesWidth=t.picturesWidth,this.numberOfItems=t.numberOfItems,this.width=t.width,this.height=t.height,this.shipTexture=__dirname+t.shipTexture,this.speed=t.speed,this.status=t.status,this.name=t.name,this.bulletTypeNumber=t.bulletTypeNumber,this.rapidFire=t.rapidFire,this.pointsPerUnit=t.pointsPerUnit,this.healthPoint=t.healthPoint,this.animationSteps=t.animationSteps,this.damage=t.damage,this.guns=t.guns,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=t.objectOwner,this.guns=t.guns,this.explosion=t.explosion,this.numberOfVerticalItems=t.numberOfVerticalItems,this.originalHealthPoint=t.healthPoint,this.isMove=t.isMove,this.isShoot=t.isShoot,this.verticalSpeed=t.verticalSpeed?t.verticalSpeed:Math.floor(Math.random()*t.speed+1),this.spotDistance=t.isBoss?t.spotDistance:Math.floor(Math.random()*t.spotDistance),this.yFinal=0,this.xFinal=0,this.behavior=t.behavior,this.direction=null,this.isBoss=t.isBoss};t.EnemyObject=s,s.prototype.placeEnemyes=r.placeEnemyes,s.prototype.moveEnemyes=r.moveEnemyes,s.prototype.loadEnemyes=r.loadEnemyes,s.prototype.shoot=r.shoot,s.prototype.enemyAnimation=r.enemyAnimation,s.prototype.getObjectPosition=o.getObjectPosition,s.prototype.enemyDamageAnimation=r.enemyDamageAnimation,s.prototype.enemyShipLogicVertical=a.enemyShipLogicVertical,s.prototype.enemyVerticalMoveCalculation=a.enemyVerticalMoveCalculation,s.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(5)),n(i(7)),n(i(2)),n(i(12)),n(i(11)),n(i(39))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.noData="There is no data",t.noObject="There is no Object"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(7),a=i(2),r=i(1),o=function(e,t,i,n,a,r,o,s,l){void 0===a&&(a=100),void 0===r&&(r=100),this.data=e,this.points=t,this.numberOflife=n,this.healthPoint=i+e.armor,this.maxHealth=i+e.armor,this.x=a-o/2,this.y=r-s/2,this.xFinal=a,this.yFinal=r,this.collisionAllow=!0,this.objectOwner="player",this.width=o,this.height=s,this.xAdj=0,this.speed=e.speed,this.explosion=e.explosion,this.damage=l};t.PlayerShip=o,o.prototype.initPlayerShip=n.initPlayerShip,o.prototype.movePlayerShip=n.movePlayerShip,o.prototype.shipControl=n.shipControl,o.prototype.moveShip=n.moveShip,o.prototype.placeShip=n.placeShip,o.prototype.setContext=n.setContext,o.prototype.getObjectPosition=a.getObjectPosition,o.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(12),a=i(2),r=i(1),o=function(e,t,i,n,a,r,o,s,l,c,h,u,d,m,g,p){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=n,this.objectOwner=a,this.bulletSpeed=r,this.width=o,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0,this.type=c,this.img=new Image,this.texture=__dirname+h,this.sx=u,this.sy=d,this.sWidth=m,this.sHeight=g,this.explosion=p};t.BulletConstruct=o,o.prototype.createBullets=n.createBullets,o.prototype.initBullets=n.initBullets,o.prototype.moveBullets=n.moveBullets,o.prototype.getObjectPosition=a.getObjectPosition,o.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";var n=this&&this.__rest||function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(i[n[a]]=e[n[a]])}return i},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r=a(i(43)),o=i(5),s=i(1),l=function(e){var t=n(e,[]);this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.width=t.width,this.height=t.height,this.img=new Image,this.texture=__dirname+t.texture,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.target=t.target,this.animationState=!0,this.detectFrame=0,this.objectPresent=!0,this.speed=t.speed,this.picturesWidth=t.picturesWidth,this.damage=t.damage?t.damage:null,this.objectOwner=t.objectOwner?t.objectOwner:null,this.healthPoint=t.healthPoint?t.healthPoint:null,this.isBackground=t.isBackground?t.isBackground:null,this.explosion=t.explosion?t.explosion:null,this.pointsPerUnit=t.pointsPerUnit?t.pointsPerUnit:0};t.SideObject=l,l.prototype.enemyAnimation=r.enemyAnimation,l.prototype.placeEnemyes=r.placeEnemyes,l.prototype.fireAnimationEnded=o.fireAnimationEnded,l.prototype.takeDamage=s.takeDamage,l.prototype.mapObjectMove=o.mapObjectMove,l.prototype.enemyDamageAnimation=s.enemyDamageAnimation},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(1))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.appMenu=function(e){function t(e){e.style.display="block"}var i={menu:{constants:{sectionTemplate:".section-template",contentContainer:"#wrapper"},importSectionsToDOM:function(){var e=document.querySelectorAll('link[rel="import"]');Array.prototype.forEach.call(e,(function(e){var t=e.import.querySelector(i.menu.constants.sectionTemplate),n=document.importNode(t.content,!0);document.querySelector(i.menu.constants.contentContainer).appendChild(n)}))},setMenuOnClickEvent:function(){document.body.addEventListener("click",(function(e){!function(e){e.target.dataset.section&&(i.menu.hideAllSections(),i.menu.showSection(e))}(e)}))},showSection:function(e){var i=e.target.dataset.section;t(document.querySelector("#"+i));for(var n=Array.prototype.slice.call(document.querySelectorAll("#"+i+" section")),a=0,r=n;a<r.length;a++){r[a];t(n)}},hideAllSections:function(){for(var e=0,t=Array.prototype.slice.call(document.querySelectorAll(this.constants.contentContainer+" section"));e<t.length;e++){var i=t[e];i.style.display="none"}},init:function(){this.importSectionsToDOM(),this.setMenuOnClickEvent(),this.hideAllSections()}}};return i},t.hideShowMenu=function(e,t,i,n,a){i||!n||a?e.classList.remove("hide-menu"):(e.classList.add("hide-menu"),t.hideAllSections())}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,