!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/public/dist",n(n.s=55)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(8)),s=n(23),c=n(5);t.explosionFire=c.explosionFire;var l=n(24),u=n(15),h=n(11),d=n(6);function p(e){var t=e.ctx,n=e.x,r=e.y,a=e.width,i=e.height,o=e.color;t.fillStyle=o,t.fillRect(n,r,a,i),t.fill()}function f(e){var t=e.item,n=e.mainGameObject,r=e.owner,a=e.BulletConstruct,i=e.SoundCreator,o=e.bulletArray,s=t.defaultAngle?t.defaultAngle.isRandom?n.gameRandomizer(t.defaultAngle.max-t.defaultAngle.min,t.defaultAngle.min):t.defaultAngle.angle:this.shotAngle,c=this.bulletSpeed({bulletSpeed:t.speed,angle:s}),l=Math.sign(c.horizontalSpeed)>0?this.speed:-1*this.speed,h=t.firePositionX?t.firePositionX:0,d=new a({x:this.x+h,y:this.y+(t.firePosition?t.firePosition:n.gameRandomizer(this.height)),bulletType:t.name,bulletTexture:t.color,objectOwner:r,bulletSpeed:"enemy"===r||"hangar"===r?c.horizontalSpeed+l:"player"==r?c.horizontalSpeed+this.xAdj:c.horizontalSpeed,width:t.width,height:t.height,damage:t.damage,type:t.type,texture:t.texture,sx:t.sx?t.sx:0,sy:t.sy?t.sy:0,sWidth:t.sWidth,sHeight:t.sHeight,explosion:t.explosionAnimation,smoke:t.smoke?t.smoke:null,imageWidth:t.imageWidth,imageHeight:t.imageHeight,animationSteps:t.animationSteps,numberOfItems:t.numberOfItems,numberOfVerticalItems:t.numberOfVerticalItems,sound:t.sound?t.sound:null,verticalSpeed:c.verticalSpeed?c.verticalSpeed:0,degree:c.angle?c.angle:0,radius:t.radius?t.radius:null,originOwner:this}),p={soundUrl:d.sound.levelSound,soundLoop:d.sound.soundLoop};d.loadTexture(),d.sound.soundObject=d.sound?u.initSoundObject({SoundCreator:i,mainGameObject:n,soundProps:p}):null,d.img.onload=function(){n.gameInitData[o]=n.gameInitData[o].concat(d)}}function m(e){var t=e.hitObject,n=e.mainGameObject;return!(this.objectPresent&&this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"enemy"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"hangar"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"hangar"==this.objectOwner&&"enemy"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"hangarbullet"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"hangarbullet"==this.objectOwner&&"enemy"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.objectPresent&&this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"environment"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.objectPresent&&this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint")||this.objectPresent&&this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"collide"==t.objectOwner&&t.hasOwnProperty("healthPoint"))||(c.explosionFire({targetData:this,mainGameObject:n,hitObject:t,SideObject:o.SideObject,explosion:"explosion"}),"nuclear_blast"!==this.type&&"defence_shield"!==this.type&&(this.objectPresent=!1,!0))}function g(e){var t=e.hitObject,n=e.mainGameObject;return!(!t.objectPresent&&t.objectOwner)&&(this.objectPresent&&this.hasOwnProperty("bulletType")&&"groundEnemyBullet"==this.objectOwner&&"groundPlayer"==t.objectOwner?r.call(this):!n.gameInitData.dynamicLevelsActive||!t.details&&"groundEnemy"!=t.objectOwner||!t.details&&"groundNPC"!=t.objectOwner||!t.details&&"groundEnemyBullet"!=t.objectOwner||(!(this.objectPresent&&this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&t.details.collision||this.objectPresent&&this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"groundEnemy"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"groundEnemyBullet"==this.objectOwner&&t.details.collision&&"groundEnemy"!=t.objectOwner||this.objectPresent&&this.hasOwnProperty("bulletType")&&"groundEnemyBullet"==this.objectOwner&&"groundNPC"==t.objectOwner)||(!t.details||"hidden_enemy_spawner"!=t.details.type||"groundEnemy"!=t.objectOwner||"groundEnemyBullet"!=this.objectOwner)&&r.call(this)));function r(){if(c.explosionFire({targetData:this,mainGameObject:n,hitObject:t,SideObject:o.SideObject,explosion:"explosion"}),"groundEnemy"==t.objectOwner||"groundNPC"==t.objectOwner){t.currentBehavior="static"===t.currentBehavior?"static":"destroy";var e=this.degree-180;"military"!=t.details.role&&"groundEnemy"!=t.objectOwner?(t.playerDirectionHorizontal=e>90&&e<270?"left":"right",t.currentBehavior="static"===t.currentBehavior?"static":"patrol"):(t.currentBehavior="static"===t.currentBehavior?"static":"destroy",t.playerInRange=!0,t.playerDirectionHorizontal=e>90&&e<270?"right":"leftt",t.targetAngle=Math.sign(e)<0?360+e:e)}return this.objectPresent=!1,!0}}function v(e){var t=e.hitObject,n=e.mainGameObject;e.GrappleObject;if(!n.gameInitData.dynamicLevelsActive)return this.atBackground=!1,!1;for(var r,a=0,i=n.gameInitData.dynamicLevelMapBlocks;a<i.length;a++){var o=i[a];if((!(Math.max(o.x,this.x)-Math.min(o.x,this.x)>200||Math.max(o.y,this.y)-Math.min(o.y,this.y)>200)||o.objectNameFlag||this.objectNameFlag)&&(r=S({object:{x:this.x,y:this.y,width:this.width,height:this.height},target:{x:o.x,y:o.y,width:o.width,height:o.height}})))break}return this.atBackground=!!r,t.atBackground=!!r,!!r}function b(e){var t=e.hitObject,n=e.mainGameObject,r=e.constructors;if(!n.gameInitData.dynamicLevelsActive)return!1;var a=n.getLevelUserData();if(this.objectPresent&&this.hasOwnProperty("healthPoint")&&"groundPlayer"==this.objectOwner&&"groundEnemyBullet"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"groundPlayer"==this.objectOwner&&"groundEnemy"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"groundEnemy"==this.objectOwner&&"player"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"groundEnemy"==this.objectOwner&&"groundNPC"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"groundNPC"==this.objectOwner&&"groundEnemyBullet"==t.objectOwner||!this.objectOwner&&this.details&&"player"==t.objectOwner||!this.objectOwner&&this.details&&"groundNPC"==t.objectOwner||!this.objectOwner&&this.details&&"groundEnemyBullet"==t.objectOwner){if(this.details){if("hidden_enemy_spawner"==this.details.type&&"groundEnemyBullet"==t.objectOwner)return!1;this.details.isDestroy&&this.details.healthPoint>=0&&this.details.type?this.details.healthPoint-=t.damage:this.healthPoint>=0&&(this.healthPoint-=t.damage)}else this.healthPoint-=t.damage;(function(){if(this.details&&(this.details.healthPoint||0==this.details.healthPoint)&&this.details.isDestroy&&"ground-destruct"===this.details.type&&this.details.healthPoint<=0&&this.details.isDestroy&&this.details.type){var e=Object.assign(this,{explosion:this.explosionAnimation,width:this.width?this.width:100,height:this.height?this.height:100});c.explosionFire({targetData:e,mainGameObject:n,hitObject:t,SideObject:r.SideObject,explosion:"explosion"}),this.details.type=null,this.details.collision=!1}"groundPlayer"!=this.objectOwner&&this.healthPoint<=0&&(this.objectPresent=!1,"groundPlayer"===t.bulletOriginOwner.objectOwner&&(n.gameInitData.gameWin||(n.collectPoints(this.pointsPerUnit),d.gameNpcUnitsCounting({mainGameObject:n,target:this}))),this.spawnCoin&&this.spawnCoin(n,r.GrappleObject));if("groundPlayer"==this.objectOwner&&this.healthPoint<=0){var i=a.source.playerObject;if(i.numberOflife-=1,i.numberOflife>0&&(this.healthPoint=this.defaultHealth),a.source.playerObject.numberOflife<=0)return n.gameOverWindow(),n.gameInitData.gameOver=!0,n.mapSoundChanger({soundStatus:"game_over_screen"}),void setTimeout((function(){n.backToStartScreen(r)}),3e3)}}).call(this)}}function y(e){var t=e.hitObject,n=e.mainGameObject;if(n.gameInitData.dynamicLevelsActive&&"player"==t.objectOwner)return!1;if(this.objectPresent&&"grappleObject"==this.objectOwner&&"player"==t.objectOwner&&!t.hasOwnProperty("bulletType")||this.objectPresent&&"grappleObject"==this.objectOwner&&"groundPlayer"==t.objectOwner&&!t.hasOwnProperty("bulletType")){if("nuclear_blast"===this.type||"defence_shield"===this.type)return!1;this.objectPresent=!1,n.gameInitData.grappleObjectOnScreen=!1,c.explosionFire({targetData:this,mainGameObject:n,hitObject:t,SideObject:o.SideObject,explosion:"explosion"}),this[this.grapplePower.methodName]({allGameSideObjects:n,playerShipData:t,mainGameObject:n})}}function w(e){var t=e.hitObject,n=e.mainGameObject;this.objectPresent&&"hangar"==this.objectOwner&&"player"==t.objectOwner&&!t.hasOwnProperty("bulletType")&&!n.gameInitData.shopActive&&n.gameInitData.tradeShipTimeToUndock<=0&&(n.gameInitData.tradeShipTimeToUndock=10,h.enterToTheShopDialog({mainGameObject:n,tradePropertyes:this.tradePropertyes}))}function x(e){var t=e.mainGameObject,n=e.damage,r=e.hitObject;if(t.gameInitData.gameWin)return!1;this.collisionAllow&&!t.gameInitData.shopActive&&O.call(this,{data:t.getLevelUserData(),mainGameObject:t,damage:n,hitObject:r})}function O(e){var t=e.data,n=e.mainGameObject,r=e.damage,a=e.hitObject;if(this.healthPoint-=r,this.healthPoint<=0)return t&&t.life>0&&!n.gameInitData.gameWin?(t.source.playerObject.numberOflife-=1,t.source.playerObject.numberOflife<=0&&(n.gameOverWindow(),n.gameInitData.gameOver=!0,n.mapSoundChanger({soundStatus:"game_over_screen"}),setTimeout((function(){n.backToStartScreen(o)}),3e3)),this.healthPoint=t.source.playerObject.maxHealth,!1):(a.bulletOriginOwner&&"player"===a.bulletOriginOwner.objectOwner&&(n.gameInitData.gameWin||(n.collectPoints(this.pointsPerUnit),d.gameNpcUnitsCounting({mainGameObject:n,target:this}))),this.objectPresent=!1)}function S(e){var t=e.object,n=e.target,r=t.blockRelativeXPos?t.blockRelativeXPos:0,a=t.blockRelativeYPos?t.blockRelativeYPos:0,i=n.blockRelativeXPos?n.blockRelativeXPos:0,o=n.blockRelativeYPos?n.blockRelativeYPos:0,s=Math.max(t.x+r,n.x+i),c=Math.max(t.y+a,n.y+o),l=Math.min(t.x+r+t.width,n.x+i+n.width),u=Math.min(t.y+a+t.height,n.y+o+n.height),h=n.x+i+(n.hasOwnProperty("bulletType")?n.width:n.width/2),d=n.y+o+n.height/2,p=h-(t.x+r+(t.hasOwnProperty("bulletType")?t.width:t.width/2)),f=d-(t.y+a+t.height/2),m=Math.sqrt(p*p+f*f)-(t.height/2+n.height/2);if(n.originObject&&"bullet"!=n.originObject.objectOwner&&m<=0)return"collision";if(!n.originObject||"player"!=n.originObject.objectOwner){var g=u-c,v=l-s;return!(Math.sign(v)<0||Math.sign(g)<0)&&"collision"}}t.drawRectangle=p,t.displayObjectAtScene=function(e,t){if(!(this.y>0-this.height&&this.x>0-this.width&&this.y<window.innerHeight+this.height&&this.x<window.innerWidth+this.width||"bullet"===this.objectNameFlag))return!1;e.gameInitData.ctxActionField.save();var n=this.degree<180?this.width/180*this.degree:this.width/180*(360-this.degree),r=this.degree<180?this.height/180*this.degree:this.height/180*(360-this.degree);n=n&&"bullet"===this.objectNameFlag?n:0,r=r&&"bullet"===this.objectNameFlag?r:0,e.gameInitData.ctxActionField.translate(this.x+n,this.y+r),e.gameInitData.ctxActionField.rotate((this.degree?this.degree:0)*Math.PI/180);var a=t&&this.backgroundTexture?this.backgroundTexture.sWidth:this.sWidth,i=t&&this.backgroundTexture?this.backgroundTexture.sHeight:this.sHeight;!function(e){var t=e.ctx,n=e.img,r=e.sx,a=e.sy,i=e.sWidth,o=e.sHeight,c=e.x,l=e.y,u=e.width,h=e.height;s.createImage(t,n,r,a,i,o,c,l,u,h)}({ctx:e.gameInitData.ctxActionField,img:this.img,sx:this.sx,sy:this.sy,sWidth:a,sHeight:i,x:0+this.blockRelativeXPos?parseInt(this.blockRelativeXPos):0,y:0+this.blockRelativeYPos?parseInt(this.blockRelativeYPos):0,width:this.width,height:this.height}),e.gameInitData.ctxActionField.restore()},t.solidColorFill=function(e){p({ctx:e.mainGameObject.gameInitData.ctxActionField,x:this.x,y:this.y,width:this.width+1,height:this.height+1,color:this.details.mapColor?this.details.mapColor:"#000000"})},t.displayObjectLifeSign=function(e){var t=e.mainGameObject,n=e.targetObject;if((n.healthPoint||n.details.isDestroy)&&(n.healthPoint>0&&n.healthPoint<n.defaultHealth||n.details.healthPoint<n.defaultHealth)){var r=t.gameInitData.ctxActionField,a=n.width,i=a/n.defaultHealth;!function(e){var t=e.ctx,n=e.width,r=e.height,a=e.x,i=e.y,o=e.color;t.strokeStyle=o,t.strokeRect(a,i,n,r)}({ctx:r,x:n.x,y:n.y-10,width:a,height:5,color:"#691500"}),p({ctx:r,x:n.x,y:n.y-10,width:i*(n.healthPoint?n.healthPoint:n.details.healthPoint),height:5,color:n.details.mapColor})}},t.placeBackground=function(){s.createImage(this.ctx,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},t.moveEnemyes=function(e,t){void 0===t&&(t=0),this.x-=this.speed,this.y-=t},t.spriteObjectsAnimation=function(e){return void 0===e&&(e=!0),r(this,void 0,void 0,(function(){var t;return a(this,(function(n){return this.x>window.innerWidth+this.width||this.x<-1*this.width||this.y>window.innerHeight+this.height||this.y<-1*this.height?[2,!1]:(this.backgroundTexture&&(this.backgroundTexture.detectFrame+=1,this.backgroundTexture.detectFrame%this.backgroundTexture.animationSteps==0&&e&&(this.backgroundTexture.detectFrame=0,t=this.backgroundTexture.sWidth,this.backgroundSx+=parseInt(t),Math.round(this.backgroundSx)>=this.backgroundTexture.picturesWidth&&(this.backgroundSx=0))),this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&e&&(this.detectFrame=0,this.sx+=this.sWidth,Math.round(this.sx)>=this.picturesWidth&&(this.sx=0)),[2])}))}))},t.enemyDamageAnimation=function(){if(this.numberOfVerticalItems>1){var e=this.originalHealthPoint/this.numberOfVerticalItems,t=new Array(this.numberOfVerticalItems).fill(null);t=t.map((function(t,n){return e*(n+1)})).sort((function(e,t){return e-t})).reverse();for(var n=0;n<t.length;n++){if(this.healthPoint<t[n]&&this.healthPoint>t[n+1]&&t[n+1]){this.sy=this.sHeight*n;break}t[n+1]||(this.sy=this.sHeight*(this.numberOfVerticalItems-1))}}},t.shot=function(e,t,n,r,a){if(t.gameInitData.gamePause||!this.isShot)return!1;for(var i=0,o=this.guns?this.guns:this.data.guns;i<o.length;i++){var s=o[i];if(s&&"object"!==s.type)(1>t.gameRandomizer(s.fireRepead)||"player"==r&&s)&&f.call(this,{item:s,mainGameObject:t,owner:r,BulletConstruct:e,SoundCreator:n,bulletArray:a})}},t.bulletsCreateModule=f,t.takeDamage=function(e,t,n,i){return r(this,void 0,void 0,(function(){var r,i,s;return a(this,(function(a){switch(a.label){case 0:return r=n.gameInitData.gameExtraSeconds,i=g.call(this,{hitObject:t,mainGameObject:n}),[4,v.call(this,{hitObject:t,mainGameObject:n})];case 1:if(s=a.sent(),b.call(this,{hitObject:t,mainGameObject:n,constructors:o}),y.call(this,{hitObject:t,mainGameObject:n}),s||this.atBackground||t.atBackground)return[2,!1];if(!m.call(this,{hitObject:t,mainGameObject:n})&&!i)return[2,!1];if(w.call(this,{hitObject:t,mainGameObject:n}),n.gameInitData.dynamicLevelsActive&&"player"==t.objectOwner)return[2,!1];if(this.objectPresent&&this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"hangarbullet"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"player"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"collide"==this.objectOwner&&"enemy"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"collide"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"player"==t.objectOwner||this.objectPresent&&this.hasOwnProperty("healthPoint")&&"environment"==this.objectOwner&&"enemy"==t.objectOwner)"player"===t.objectOwner&&"nuclear_blast"!=t.type&&"player"===t.objectOwner&&"defence_shield"!=t.type&&"bullet"!=t.objectNameFlag&&(this.x<t.x+t.width/2&&t.x+t.width/2<this.x+this.width&&!n.gameInitData.shopActive?t.x-=t.speed:t.x>this.x+this.width&&!n.gameInitData.shopActive?t.x+=t.speed:n.gameInitData.shopActive||(t.x-=t.speed)),O.call(this,{data:null,mainGameObject:n,damage:e,hitObject:t}),this.enemyDamageAnimation(),this.healthPoint<=0&&(this.objectPresent=!1,c.explosionFire({targetData:this,mainGameObject:n,hitObject:t,SideObject:o.SideObject,explosion:"collideExplosionAnimation"}),c.explosionFire({targetData:this,mainGameObject:n,hitObject:t,SideObject:o.SideObject,explosion:"explosion"}),this.spawnCoin&&this.spawnCoin(n,o.GrappleObject),this.isBoss&&function(e){e.mainGameObject.gameInitData.levelChange=!0}({mainGameObject:n}));else{if(!this.hasOwnProperty("healthPoint")||"player"!==this.objectOwner||"enemy"!==t.objectOwner&&"collide"!=t.objectOwner)return[2,!1];if(n.gameInitData.dynamicLevelsActive||n.gameInitData.gameWin)return[2,!1];if("collide"===t.objectOwner&&r%1e3!=0||t.hasOwnProperty("healthPoint")&&"enemy"===t.objectOwner&&r%1e3!=0)return[2,!1];x.call(this,{mainGameObject:n,damage:e,hitObject:t}),c.explosionFire({targetData:this,mainGameObject:n,hitObject:t,SideObject:o.SideObject,explosion:"collideExplosionAnimation"})}return[2]}}))}))},t.unitDamage=O,t.spawnCoin=function(e,t){if(this.hasOwnProperty("extraObjects"))for(var n=0,r=this.extraObjects;n<r.length;n++){var a=r[n];a.x=this.x,a.y=this.y,l.loadGrabbleToSideObject.call(this,e,a,t)}},t.explosionDamage=function(e){var t=e.hitObject,n=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,r,i,s;return a(this,(function(a){switch(a.label){case 0:if(!(e=n.gameInitData.allGameEnemies.filter((function(e){var n=Math.max(e.x,t.x),r=Math.min(e.x,t.x),a=Math.max(e.y,t.y)-Math.min(e.y,t.y);if(n-r<=t.radius&&a<=t.radius)return e}))))return[2,!1];r=0,i=e,a.label=1;case 1:return r<i.length?(s=i[r],[4,O.call(s,{data:s,mainGameObject:n,damage:t.damage,hitObject:t})]):[3,4];case 2:a.sent(),s.healthPoint<=0&&(c.explosionFire({targetData:s,mainGameObject:n,hitObject:s,SideObject:o.SideObject,explosion:"explosion"}),s.objectPresent=!1),a.label=3;case 3:return r++,[3,1];case 4:return[2]}}))}))},t.objectIntersectionDetect=S,t.hitDetection=function(e){for(var t=e.object1,n=e.objectsArr,r=e.mainGameObject,a=e.GrappleObject,i=null,o=0,s=n;o<s.length;o++){var c=s[o];if((!(c.x>window.innerWidth+c.width||c.x<-1*c.width||c.y>window.innerHeight+c.height||c.y<-1*c.height)||c.objectNameFlag||t.objectNameFlag)&&(!(Math.max(c.x,t.x)-Math.min(c.x,t.x)>200||Math.max(c.y,t.y)-Math.min(c.y,t.y)>200)||c.objectNameFlag||t.objectNameFlag)){var l=t.getObjectPosition.call(t);if("collision"==(i=S({object:{x:l.x,y:l.y,width:t.width||l.width,height:t.height||l.height,originObject:t},target:{x:c.x,y:c.y,width:c.width,height:c.height,originObject:t}}))){t.takeDamage&&c.takeDamage&&(t.takeDamage(c.damage?c.damage:0,c,r,a),c.takeDamage(t.damage?t.damage:0,t,r,a));break}}}return"collision"==i&&t}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("fs")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),a=n(7),i=n(46),o=n(13);function s(e){e.style.display="block"}function c(e){e.style.display="none"}function l(e){"none"==e.style.display?s(e):c(e)}function u(e,t){e.classList.add(t)}function h(e,t){if(!e.classList)return!1;e.classList.remove(t)}t.show=s,t.hide=c,t.toggler=l,t.addClassList=u,t.removeClassList=h,t.appMenu=function(e,t){var n=null,d={showSelectedItem:function(){return{selectedMenuItem:n}},menu:{constants:{sectionTemplate:".section-template",contentContainer:"#wrapper",sideMenuWrapper:"#main-menu"},importSectionsToDOM:function(){var e=document.querySelectorAll('link[rel="import"]');Array.prototype.forEach.call(e,(function(e){var t=e.import.querySelector(d.menu.constants.sectionTemplate),n=document.importNode(t.content,!0);document.querySelector(d.menu.constants.contentContainer).appendChild(n)}))},setMenuOnClickEvent:function(){var e=document.querySelector("#dialog-box");document.body.addEventListener("click",(function(r){if(r.target){switch(r.target&&r.target.dataset.section&&(d.menu.hideAllSections(),d.menu.showSection.call(this,r)),function(e){if(!e.target.parentElement)return!1;if("LI"!=e.target.parentElement.tagName)return!1;for(var t=Array.prototype.slice.call(document.querySelectorAll(".selected-items")),r=0,a=t;r<a.length;r++){h(a[r],"selected-items")}n="close"!=e.target.dataset.buttonId&&"cancel"!=e.target.dataset.buttonId&&"exit"!=e.target.dataset.buttonId&&e.target.dataset?e.target.parentElement:n,u(e.target.parentElement,"selected-items")}(r),r.target.dataset.section){case"game-results":i.showResultScreen()}switch(r.target.dataset.buttonId){case"game-results":break;case"exit":l(e),t({textData:"Exit the game?",rejectText:"cancel",acceptText:"ok"},o.exitTheGame,d);break;case"close":d.menu.hideAllSections(),n=null}}}))},showSection:function(e){var t=e.target.dataset.section;s(document.querySelector("#"+t));for(var n=0,i=Array.prototype.slice.call(document.querySelectorAll(".menu-wrapper"));n<i.length;n++){u(i[n],"menu-backgroud")}r.pageBuilder({target:"#about-section-content",data:a.getLocalData({fileName:"about-page.json"})})},hideAllSections:function(){for(var e=0,t=Array.prototype.slice.call(document.querySelectorAll(this.constants.contentContainer+" section"));e<t.length;e++){c(t[e])}for(var n=0,r=Array.prototype.slice.call(document.querySelectorAll(".menu-wrapper"));n<r.length;n++){h(r[n],"menu-backgroud")}for(var a=0,i=Array.prototype.slice.call(document.querySelectorAll(".selected-items"));a<i.length;a++){h(i[a],"selected-items")}},init:function(){this.importSectionsToDOM(),this.setMenuOnClickEvent(),this.hideAllSections()}}};return d},t.hideShowMenu=function(e,t,n,r,a){!r||a?e.classList.remove("hide-menu"):(e.classList.add("hide-menu"),t.hideAllSections())},t.dialogWindow=function(e,t,n){for(var a=e.textData,i=(e.rejectText,e.acceptText),o=[],l=3;l<arguments.length;l++)o[l-3]=arguments[l];var d=document.querySelector("#dialog-box"),p=document.querySelector("#dialog-body");function f(e){var r=!!n&&n.showSelectedItem();switch(e.target.dataset.buttonId){case"ok":t(e);break;case"cancel":d&&c(d);for(var a=0,i=Array.prototype.slice.call(document.querySelectorAll(".selected-items"));a<i.length;a++){h(i[a],"selected-items")}r.selectedMenuItem&&u(r.selectedMenuItem,"selected-items");break;case"restart":t.call.apply(t,o),d&&c(d)}}p.innerHTML="",d&&s(d);for(var m=[r.createElements({tagName:"div",styleClass:"dialog-area-wrapper",inlineStyle:null,pictureUrl:null,linkUrl:null,text:i,innerContent:'\n            <div class="dialog-text">'+a+'</div>\n            <div id="dialog-button-area" class="dialog-btn-area">\n            <button data-button-id='+i+' class=" btn-main">'+i+'</button>\n           <button data-button-id="cancel" class="reject-btn btn-main btn-orange-reject">cancel</button>\n       </div>',attributeName:"data-button-id",attribute:i,attributeName1:null,attribute1:null})],g=0,v=m;g<v.length;g++){var b=v[g];p.appendChild(b)}var y=document.querySelector("#dialog-button-area");y.addEventListener("click",f)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(14),s=n(3),c=n(6),l=n(26);function u(){var e=document.querySelector("#backpack-wrapper");s.show(e),process.env.GROUND_CHARACTERS_INVENTORY="true"}function h(){var e=document.querySelector("#backpack-wrapper");s.hide(e),process.env.GROUND_CHARACTERS_INVENTORY="false"}function d(e){for(var t='<h3 class="side-panel-name">Inventory<p>Press I to close</p></h3>',n=0,r=e.playerInventory;n<r.length;n++){var a=r[n];t+='<div class="backpack-item-wrapper">\n        <span class="number-of-items">'+a.numberOfItems+'</span>\n            <img class="back-pack-item-picture" src="'+(a.objectPicture?a.objectPicture:a.texture)+'">\n\n            <p>'+(a.name?a.name:a.innerData.split("_").join(" "))+"</p>\n        </div>"}return t}function p(e){var t=e.renewAnimation,n=e.layerDefaultSize,r=e.shotAngleAnimation;this.numberOfItems!=this.animations.run.numberOfItems&&t.call(this),n.call(this),this.playerDirectionVertical="stand",this.onLeader=!1,this.img.src=__dirname+this.animations.run.innerTexture,y({originalObject:this,dataToReplace:this.animations.run}),"groundPlayer"===this.objectOwner&&this.isShot&&r.call(this,"runAndShotTop","runAndShotBottom","runAndShotForward")}function f(e){var t=e.renewAnimation,n=e.shotAngleAnimation;this.numberOfItems!=this.animations.sit.numberOfItems&&t.call(this),this.height=this.animations.sit.height,this.sHeight=this.animations.sit.imageHeight/2,this.img.src=__dirname+this.animations.sit.innerTexture,y({originalObject:this,dataToReplace:this.animations.sit}),"groundPlayer"===this.objectOwner&&this.isShot&&n.call(this,"sitShotTop","sitShotBottom","sit")}function m(e){var t=e.renewAnimation,n=e.shotAngleAnimation;this.numberOfItems!=this.animations.leader.numberOfItems&&t.call(this),this.height=this.animations.leader.height,this.sWidth=this.animations.leader.imageWidth/this.animations.leader.numberOfItems,this.sHeight=this.animations.leader.imageHeight/2,this.img.src=__dirname+this.animations.leader.innerTexture,y({originalObject:this,dataToReplace:this.animations.leader}),"groundPlayer"===this.objectOwner&&this.isShot&&n.call(this,"leaderShotTop","leaderShotBottom","leaderShotSide")}function g(e){var t=e.renewAnimation,n=e.shotAngleAnimation,r=e.layerDefaultSize;this.numberOfItems!=this.animations.stand.numberOfItems&&t.call(this),r.call(this),this.playerDirectionVertical="stand",this.onLeader=!1,this.img.src=__dirname+this.animations.stand.innerTexture,y({originalObject:this,dataToReplace:this.animations.stand}),"groundPlayer"===this.objectOwner&&n.call(this,"standAndShotTop","standAndShotBottom",null)}function v(e){var t=e.renewAnimation,n=e.layerDefaultSize,r=e.shotAngleAnimation;this.numberOfItems!=this.animations.jump.numberOfItems&&t.call(this),n.call(this),this.playerDirectionVertical="stand",this.onLeader=!1,this.img.src=__dirname+this.animations.jump.innerTexture,y({originalObject:this,dataToReplace:this.animations.jump}),"groundPlayer"===this.objectOwner&&r.call(this,"jump","jumpShotBottom","jumpShotCenter")}function b(){this.sx=0,this.detectFrame=0}function y(e){for(var t=e.originalObject,n=e.dataToReplace,r=0,a=Object.entries(n);r<a.length;r++){var i=a[r],o=i[0],s=i[1];t[o]&&(t[o]=s)}}function w(e){var t=e.mainGameObject,n=e.constructors,r=t.getLevelUserData().source.playerObject;if(r.numberOflife-=1,r.numberOflife<=0)return t.gameOverWindow(),t.gameInitData.gameOver=!0,t.mapSoundChanger({soundStatus:"game_over_screen"}),void setTimeout((function(){t.backToStartScreen(n)}),3e3)}function x(e){var t=e.mainGameObject,n=e.allBlocks,r=t.gameInitData.mapBackgroundObjects,a=[].concat(r),i=function(e){var t=e.allBlocks,n=e.mainGameObject.gameInitData.gameData.groundPlayerCharacter,r=null,a=1/0,i=1/0,o=t.filter((function(e){if(e.details)return"spawner"===e.details.type&&"active"===e.details.active}));if(o)for(var s=0,c=o;s<c.length;s++){var l=c[s],u=Math.max(l.x,n.x)-Math.min(l.x,n.x),h=Math.max(l.y,n.y)-Math.min(l.y,n.y);u<=a&&h<=i&&(a=u,i=h,r=l)}return r||t.find((function(e){if(e.details)return"spawner"===e.details.type}))}({allBlocks:n,mainGameObject:t});if(!i)return!1;O({newSpawnPoint:i,mainGameObject:t});for(var o=0,s=a;o<s.length;o++){var c=s[o];c.y=c.defaultY}}function O(e){var t=e.newSpawnPoint,n=e.mainGameObject;if(!t)return!1;for(var r=n.gameInitData.dynamicLevelEnemy,a=n.gameInitData.allGroundGameBullets,i=n.gameInitData.allGameSideObjects,o=[].concat(n.gameInitData.dynamicLevelMapBlocks,r,a,i),s=n.gameInitData.mapBackgroundObjects,c=[].concat(s),l=window.innerWidth/2-(t.x+t.width/2),u=window.innerHeight/2-t.y,h=0,d=o;h<d.length;h++){var p=d[h];p.x+=l,p.y+=u}for(var f=0,m=c;f<m.length;f++)m[f];for(var g=0,v=r;g<v.length;g++){var b=v[g];b.isRun=!1,b.groundTouch=!0}return{xRangeCompensation:l,yRangeCompensation:u}}t.initGroundPlayer=function(e){var t=e.DynamicUserConstructor;return a(this,void 0,void 0,(function(){var e;return i(this,(function(n){switch(n.label){case 0:return[4,o.loadGroundPlayer()];case 1:return(e=n.sent())?[2,new t(r({},e[0]))]:[2,!1]}}))}))},t.showGroundPlayerInventory=function(e){var t=e.mainGameObject,n=t.gameInitData.gameData.groundPlayerCharacter;if("false"===process.env.GROUND_CHARACTERS_INVENTORY){if(t.gameInitData.gameOver||!t.gameInitData.dynamicLevelsActive||t.gameInitData.gamePause||!t.gameInitData.gameStatus)return!1;u(),function(e){var t=e.groundPlayer.inventory,n=document.querySelector("#backpack-body");if(n.width="auto",t.length>0){var r=d({playerInventory:t});n.innerHTML=r}else n.innerHTML="<p>No items in this inventory</p>"}({groundPlayer:n})}else h()},t.openInventory=u,t.hideInventory=h,t.loadPlayerCharacter=d,t.playerAnimation=function(e){e.groundPlayer,e.mainGameObject.gameInitData.gameExtraSeconds},t.changeAnimationParameters=function(){function e(){"groundPlayer"===this.objectOwner&&(this.width=this.defaultWidth,this.height=this.defaultHeight,this.sHeight=this.imageHeightDefault/2,this.sWidth=this.imageWidthDefault/this.numberOfItems)}function t(e,t,n){this.shotAngle<335&&this.shotAngle>200?(this.img.src=__dirname+this.animations[e].innerTexture,y({originalObject:this,dataToReplace:this.animations[e]})):this.shotAngle>30&&this.shotAngle<160?(this.img.src=__dirname+this.animations[t].innerTexture,y({originalObject:this,dataToReplace:this.animations[t]})):(this.shotState&&n&&this.shotAngle>0&&this.shotAngle<30||this.shotState&&n&&this.shotAngle<360&&this.shotAngle>200||this.shotState&&n&&this.shotAngle>160&&this.shotAngle<200)&&(this.img.src=__dirname+this.animations[n].innerTexture,this.numberOfItems!=this.animations[n].numberOfItems&&b.call(this),y({originalObject:this,dataToReplace:this.animations[n]}))}this.objectPresent?"groundPlayer"===this.objectOwner&&this.onLeader&&"up"===this.playerDirectionVertical||"groundPlayer"===this.objectOwner&&this.onLeader&&"down"===this.playerDirectionVertical?m.call(this,{renewAnimation:b,shotAngleAnimation:t}):"down"!==this.playerDirectionVertical||this.onLeader||"groundPlayer"!==this.objectOwner?this.isRun&&this.groundTouch&&this.objectOwner?p.call(this,{renewAnimation:b,layerDefaultSize:e,shotAngleAnimation:t}):!1===this.isRun&&this.groundTouch&&this.objectOwner||this.onElevator&&this.objectOwner?g.call(this,{renewAnimation:b,shotAngleAnimation:t,layerDefaultSize:e}):this.groundTouch||this.onElevator||!this.objectOwner||v.call(this,{renewAnimation:b,layerDefaultSize:e,shotAngleAnimation:t}):f.call(this,{renewAnimation:b,shotAngleAnimation:t}):(this.numberOfItems!=this.animations.death.numberOfItems&&b.call(this),this.img.src=__dirname+this.animations.death.innerTexture,this.width=this.animations.death.width?this.animations.death.width:this.width,this.height=this.animations.death.height?this.animations.death.height:this.height,y({originalObject:this,dataToReplace:this.animations.death})),this.sWidth=this.imageWidth/this.numberOfItems,this.onLeader=!1,this.leaderClimb=!1},t.changeVerticalAnimationPicture=function(){this.changeAnimationParameters(),"right"===this.playerDirectionHorizontal&&(this.sy=0),"left"===this.playerDirectionHorizontal&&(this.sy=this.sHeight)},t.groundPlayerMinusLife=w,t.backToTheMapAgain=function(e){var t=e.mainGameObject,n=e.player,r=e.constructors,a=t.gameInitData.dynamicLevelEnemy,i=[].concat(t.gameInitData.dynamicLevelMapBlocks,a);i.find((function(e){if(Math.max(e.x,n.x)-Math.min(e.x,n.x)<1e3&&Math.max(e.y,n.y)-Math.min(e.y,n.y)<1e3)return e}))||(t.gameInitData.levelChange||w({mainGameObject:t,constructors:r}),x({mainGameObject:t,allBlocks:i}))},t.positionToSpawner=x,t.playerChangeMapPosition=O,t.groundPlayerShot=function(e){var t=e.groundPlayer,n=e.event,r=c.angleFinder({object:t,target:{x:n.clientX,y:n.clientY,width:1,height:1,speed:1}});return t.onLeader&&t.leaderClimb?(t.playerDirectionHorizontal=t.playerDirectionHorizontal=r>90&&r<=270?"left":"right",!1):("left"===t.playerDirectionHorizontal&&r>90&&r<=270||"right"===t.playerDirectionHorizontal&&r>270&&r<=360||"right"===t.playerDirectionHorizontal&&r>0&&r<=90)&&r},t.groundPlayerCollectable=function(e){e.allGameSideObjects;var t=e.playerShipData;e.mainGameObject,l.saveObjectToBackPack({groundPlayer:t,data:this.grapplePower.grappleItem,previewPicture:this.grapplePower.previewPicture,name:this.grapplePower.name})},t.groundPlayerCheckpointActivate=function(e){var t=e.block,n=e.mainGameObject;if(!t.details)return!1;if("not-active"===t.details.active&&"spawner"===t.details.type){for(var r=0,a=n.gameInitData.dynamicLevelMapBlocks;r<a.length;r++){var i=a[r];i.details&&("spawner"===i.details.type&&"active"===i.details.active&&(i.details.active="not-active",i.sy=0))}t.details.active="active",t.sy+=t.sHeight}}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s=n(33),c=o(n(8)),l=n(15),u=n(6),h=n(0);function d(e){var t,n=e.allGameEnemies;if(n.length<0)return!1;for(var r=1/0,a=1/0,i=0,o=n;i<o.length;i++){var s=o[i];if(s){var c=s.x>this.x?s.x-this.x:this.x-s.x,l=(s.y>this.y?(s.y,this.y):(this.y,s.y),Math.min(s.x+c,this.x)),u=Math.max(s.x+c,this.x),h=Math.min(s.y,this.y),d=Math.max(s.y,this.y);u-l<r&&d-h<a&&(r=s.x,a=s.y,t=s)}}return t}function p(e){var t=e.closestUnit,n=u.angleFinder({object:this,target:t});if(this.defaultAngle)switch(!0){case n>this.defaultAngle.min||n<this.defaultAngle.max:n=0;break;case n<this.defaultAngle.min||n>this.defaultAngle.max:break;default:n=0}return n}t.explosionFire=function(e){var t=e.targetData,n=e.mainGameObject,a=e.hitObject,i=e.SideObject,o=e.explosion;if(u.searchExplosionObject({mainGameObject:n}).length>process.env.MAX_NUMBER_OF_EXPLOSION)return!1;a.type&&("rocket"===a.type&&"rocket"!=t.type&&"player"!=t.type&&"enemy"!=t.type||"homing_rocket"===a.type&&"homing_rocket"!=t.type&&"player"!=t.type&&"enemy"!=t.type)&&h.explosionDamage({hitObject:a,mainGameObject:n});var s="player"===a.objectOwner?t.speed:"groundEnemy"===a.objectOwner||"groundPlayer"===a.objectOwner?0:a.speed/2;s=n.gameInitData.dynamicLevelsActive&&!s?-.1:s;var d={x:"player"===t.objectOwner?t.x+t.width/2-t[o].width:t.x-t[o].width,y:"player"===t.objectOwner?t.y-t[o].width/2:"collide"===t.objectOwner||"environment"===t.objectOwner?t.y:"enemy"===t.objectOwner?t.y-t[o].width/2:t.y-t[o].width,sx:0,sy:0,objectOwner:"explosion",sWidth:t[o].imageWidth/t[o].numberOfItems,sHeight:t[o].imageHeight,width:2*t[o].width,height:2*t[o].width,animationSteps:t[o].animationSteps,target:a.objectOwner,numberOfItems:t[o].imageWidth/t[o].numberOfItems,texture:t[o].texture,speed:s,picturesWidth:t[o].imageWidth,sound:t[o].sound},p=new i(r({},d)),f={soundUrl:p.sound.levelSound,soundLoop:p.sound.soundLoop};p.sound.soundObject=l.initSoundObject({SoundCreator:c.SoundCreator,mainGameObject:n,soundProps:f}),p.img.onload=function(){n.gameInitData.allGameSideObjects=n.gameInitData.allGameSideObjects.concat(p)},p.loadTexture()},t.fireAnimationEnded=function(e){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.objectPresent=!1,this.sx=0)),this.sx>=this.picturesWidth&&(this.animationState=!1)},t.mapObjectMove=function(){this.x-=this.speed?this.speed:3},t.mapRandomObjectSpawn=function(e,t,n){return a(this,void 0,void 0,(function(){function o(e,t,n){return a(this,void 0,void 0,(function(){var n,a,o,c,l,u,h,d,p,f,m,g,v,b,y=this;return i(this,(function(i){switch(i.label){case 0:if(n=this.showGameInfo().gameData,a=this.getLevelUserData(),o=n.levelData,c=this.gameRandomizer(o.objectProbability),l=this,u=o.levelDetails.levelMinutes,h=o.levelDetails.levelSeconds,!(c<o.objectMinTimeSpawn))return[3,4];if(this.getScreenSize(),!(d=e[this.gameRandomizer(e.length)]))return[2,!1];if(p="bottom"===d.spawnDetails.position&&"string"==typeof d.spawnDetails.position?window.innerHeight-this.gameRandomizer(d.height/2,d.height/2):"top"===d.spawnDetails.position&&"string"==typeof d.spawnDetails.position?this.gameRandomizer(d.height/3):"scene"===d.spawnDetails.position&&"string"==typeof d.spawnDetails.position||"string"==typeof d.spawnDetails.position?this.gameRandomizer(window.innerHeight):d.spawnDetails.position,"hangar"==d.objectOwner&&this.gameInitData.tradepostInRange)return[2,!1];if("hangar"==d.objectOwner){if((f=this.gameRandomizer(d.probability))>50&&a.minutes>0||f>500&&0===a.minutes)return[2,!1];this.gameInitData.tradepostInRange=!0}if(d.timing&&d.timing){if(u>d.timing.levelMinutes||h>d.timing.levelSeconds)return[2,!1];if(this.gameInitData.gatePresent)return[2,!1];this.gameInitData.gatePresent=!0}return d.extraObjects?[4,s.loadExtraObject.call(this,d.extraObjects)]:[3,2];case 1:return g=i.sent(),[3,3];case 2:g=!1,i.label=3;case 3:m=g,v={x:window.innerWidth,y:p,sx:0,sy:0,objectOwner:d.objectOwner,sWidth:d.imageWidth/d.numberOfItems,sHeight:d.imageHeight,width:d.width,height:d.height,animationSteps:d.animationSteps,target:null,numberOfItems:d.numberOfItems,absoluteLink:d.absoluteLink?d.absoluteLink:null,texture:d.skinName,speed:d.speed,picturesWidth:d.imageWidth,healthPoint:d.healthPoint,damage:d.damage,isBackground:d.isBackground,explosion:d.explosionAnimation,pointsPerUnit:d.pointsPerUnit,extraObjects:m,collideExplosionAnimation:d.collideExplosionAnimation?d.collideExplosionAnimation:null,sound:d.sound,side:d.side?d.side:null,rapidFire:d.rapidFire?d.rapidFire:null,isShot:!!d.isShot&&d.isShot,guns:d.guns?d.guns:null,tradePropertyes:d.tradePropertyes?d.tradePropertyes:null,defaultAngle:d.defaultAngle?d.defaultAngle:null,timingMinutesPlaced:d.timingMinutesPlaced?d.timingMinutesPlaced:null,timingSecondsPlaced:d.timingSecondsPlaced?d.timingSecondsPlaced:null},(b=new t(r({},v))).img.onload=function(){l.gameInitData.allGameSideObjects=l.gameInitData.allGameSideObjects.concat(b)},b.img.onload=function(){y.gameInitData.allGameSideObjects=y.gameInitData.allGameSideObjects.concat(b)},b.loadTexture(),i.label=4;case 4:return[2]}}))}))}return i(this,(function(r){return this.getSecondMeasure(o,e,t,n),[2]}))}))},t.loadTexture=function(){this.img.src=this.texture},t.findCloseObject=d,t.findAngleToShip=p,t.sideObjectShot=function(e,t,n,r,a){if(a.length<0)return!1;var i=d.call(this,{allGameEnemies:a});if(!i||i.x>window.innerWidth)return!1;var o=p.call(this,{closestUnit:i});this.shotAngle=o,this.shot(e,t,n,r,"allGameBullets")}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),c=n(1),l=(n(19),o(n(87))),u=n(23),h=n(3),d=n(10),p=n(18),f=p.ipcRenderer;p.remote;function m(){var e=this.gameInitData.allGameEnemies;if(!e||e.length<1)return!1;for(var t=0,n=e;t<n.length;t++){n[t].objectPresent=!1}}function g(e){return e.mainGameObject.gameInitData.allGameSideObjects.filter((function(e){return"explosion"===e.objectOwner}))}function v(e){e.saveGameData;var t=e.screenshot;return r(this,void 0,void 0,(function(){var e,n,i,o,u,h,d,p,f=this;return a(this,(function(m){switch(m.label){case 0:return[4,this.gameInitData.gameField.toDataURL()];case 1:return e=m.sent(),[4,this.gameInitData.gameActionField.toDataURL()];case 2:return n=m.sent(),[4,this.gameInitData.gameDialogField.toDataURL()];case 3:return i=m.sent(),o=c.join(__dirname,"../../")+process.env.APP_SCREENSHOTS_DIRECTORY,s.existsSync(o)||s.mkdirSync(o),u=b,h={},[4,e.replace(/^data:image\/png;base64,/,"")];case 4:return[4,u.apply(void 0,[(h.picture_64=m.sent(),h.filename="background",h.screenshot=!1,h)])];case 5:return m.sent(),d=b,p={},[4,n.replace(/^data:image\/png;base64,/,"")];case 6:return[4,d.apply(void 0,[(p.picture_64=m.sent(),p.filename="gameField",p.screenshot=!1,p)]).then((function(o){return r(f,void 0,void 0,(function(){var o=this;return a(this,(function(s){switch(s.label){case 0:return[4,l.default([e,n,i],{width:window.innerWidth,height:window.innerHeight}).then((function(e){return r(o,void 0,void 0,(function(){var n,r;return a(this,(function(a){switch(a.label){case 0:return t?(n=b,r={},[4,e.replace(/^data:image\/png;base64,/,"")]):[3,3];case 1:return[4,n.apply(void 0,[(r.picture_64=a.sent(),r.filename=(new Date).getTime(),r.screenshot=t,r)])];case 2:return[2,a.sent()];case 3:return[2,y({picUrl:"data:image/png;base64,"+e.replace(/^data:image\/png;base64,/,"")}).then((function(e){return e}))]}}))}))}))];case 1:return[2,s.sent()]}}))}))}))];case 7:return[2,m.sent()]}}))}))}function b(e){var t=e.picture_64,n=e.filename,i=e.screenshot;return r(this,void 0,void 0,(function(){var e;return a(this,(function(r){return i?(e=c.join(__dirname,"../../")+process.env.APP_SCREENSHOTS_DIRECTORY,[2,new Promise((function(r,a){s.writeFile(e+"/"+n+".png",t,"base64",(function(e){return e?(a(!1),console.error(e)):(r(!0),!1)}))}))]):[2,t]}))}))}function y(e){var t=e.picUrl;return r(this,void 0,void 0,(function(){var e,n,r;return a(this,(function(a){return(e=document.createElement("canvas")).width=window.innerWidth/2.5,e.height=window.innerHeight/2.5,n=e.getContext("2d"),(r=new Image).src=t,"",[2,new Promise((function(t,a){r.onload=function(){n.drawImage(r,0,0,window.innerWidth,window.innerHeight,0,0,e.width,e.height);var a="data:image/png;base64,"+e.toDataURL().replace(/^data:image\/(png|jpg);base64,/,"");a,t(a)}}))]}))}))}t.gameNpcUnitsCounting=function(e){var t=e.mainGameObject,n=e.target,r=t.gameInitData.gameData.playerObject.journal;"groundEnemy"===n.objectOwner&&(r.defaultData.numberOfGroundEnemy+=1),"enemy"===n.objectOwner&&(r.defaultData.numberFlyOfEnemy+=1)},t.initField=function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var n=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameDialogField,this.gameInitData.gameUIField);if(!n)throw Error("Error");for(var r=0,a=n;r<a.length;r++){var i=a[r];i=Object.assign(i,{width:e-4,height:t-4})}},t.setGameFields=function(){this.initField(),this.createContext(),this.initPlayerShip()},t.warpEffect=function(e){var t=this.gameInitData.ctx,n=this.gameInitData.warpObjects;if(this.getSecondMeasure((function(t){var n=!(this.gameInitData.timeToEressLevel>=0);this.gameInitData.timeToEressLevel>=0&&!n&&(this.gameInitData.timeToEressLevel-=1);this.gameInitData.timeToEressLevel<0&&!n&&(this.gameInitData.levelWindowDescription=!0,this.changeLevelProcedure(e))}),{timeToEressLevel:this.gameInitData.timeToEressLevel,ctx:t,screenSiz:this.getScreenSize()}),this.gameInitData.warpObjects=n.length<350?this.gameInitData.warpObjects.concat({x:window.innerWidth,y:this.gameRandomizer(window.innerHeight),height:this.gameRandomizer(20,10),width:10,speed:this.gameRandomizer(10,5),background:this.getRandomColor()}):this.gameInitData.warpObjects,n.length>0)for(var r=0,a=n;r<a.length;r++){var i=a[r];i.x-=i.x>0?i.speed:0,i.width=n.length<150?i.width-i.speed:n.length>150&&n.length<350?i.width+i.speed:i.width-i.speed,t.fillStyle=i.background,u.draw(t,"fillRect",i.x,i.y,i.width,i.height),t.fill()}},t.levelInit=function(e,t,n){return r(this,void 0,void 0,(function(){function r(r,a,i){for(var o=0,c=r;o<c.length;o++){var l=c[o],u=new e({texture:l.levelMap,speed:l.speed,height:i||null,y:a||null,screenData:this.gameInitData.screen,ctx:t,partOfScreenStatus:this.gameInitData.mapBackgroundObjects.length%2==0||null,extraMap:l.extraMap?l.extraMap:null,timeToExtraMapSeconds:l.timeToExtraMapSeconds?l.timeToExtraMapSeconds:null,timeToExtraMapMinutes:l.timeToExtraMapMinutes?l.timeToExtraMapMinutes:null,imageWidth:l.imageWidth||l.imageWidth?l.imageWidth:s.imageWidth,imageHeight:l.imageHeight?l.imageHeight:s.imageHeight,animationSteps:l.animationSteps||l.animationSteps?l.animationSteps:s.animationSteps,numberOfItems:l.numberOfItems||l.numberOfItems?l.numberOfItems:s.numberOfItems,numberOfVerticalItems:l.numberOfVerticalItems?l.numberOfVerticalItems:s.numberOfVerticalItems,alwaysMove:!!l.alwaysMove&&l.alwaysMove});n.gameInitData.mapBackgroundObjects=n.gameInitData.mapBackgroundObjects.concat(u),u.loadTexture()}}var i,o,s;return a(this,(function(e){switch(e.label){case 0:return i=this.showLevelData(),o=i.levelBackgroundElements,s=i.levelStandartMap,n.gameInitData.backScreenPause=!1,r.call(this,o),i.levelBottomPart?[4,r.call(this,i.levelBottomPart,window.innerHeight-200,window.innerHeight)]:[3,2];case 1:e.sent(),d.backgroundAdjustment({mainGameObject:n}),e.label=2;case 2:return[2]}}))}))},t.createContext=function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxGameDialogField=this.gameInitData.gameDialogField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},t.getScreenSize=function(){return{width:window.innerWidth,height:window.innerHeight}},t.changeLevelProcedure=function(e){var t=this.showGameInfo();this.changeLevel(t.gameData.currentLevel+1)<=t.gameData.levelData.allLevels?this.nextLevelDataReload(t,e):(m.call(this),this.mapSoundChanger({soundStatus:"game_win"}),this.gameInitData.gameWin=!0,this.gameInitData.levelWindowDescription=!1)},t.levelTimer=function(){var e=this.getLevelUserData();if(e.source.levelData.bossPresent)e.source.levelData.levelDetails.levelSeconds=null,e.source.levelData.levelDetails.levelMinutes=null;else{e.source.levelData.levelDetails;this.gameInitData.levelChange||this.getSecondMeasure((function(e){e.levelSeconds<=0&&(0==e.levelMinutes&&0==e.levelSeconds&&(e.levelSeconds=0,this.gameInitData.levelChange=!0),e.levelMinutes=e.levelMinutes>0?e.levelMinutes-1:0);e.levelSeconds=e.levelSeconds>0?e.levelSeconds-1:this.gameInitData.levelChange?0:59}),e.source.levelData.levelDetails)}},t.getSecondMeasure=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return r(this,void 0,void 0,(function(){var n;return a(this,(function(r){switch(r.label){case 0:return n=1e3/this.gameInitData.intervalCount,this.gameInitData.gameExtraSeconds%n!=0?[3,4]:(this.gameInitData.gameExtraSeconds=0,this.gameInitData.shopActive||(this.gameInitData.tradeShipTimeToUndock-=1),this.gameInitData.tradeShipTimeToUndock<0&&(this.gameInitData.tradeShipTimeToUndock=0),[4,e]);case 1:return r.sent()?[4,e.call.apply(e,i([this],t))]:[3,3];case 2:return[2,r.sent()];case 3:return[2,n];case 4:return[2]}}))}))},t.gameSecondsIncrease=function(){this.gameInitData.gameExtraSeconds+=1},t.getLevelUserData=function(){var e=this.gameInitData.gameData,t=this.gameInitData.gameData.levelData.levelDetails,n=this.gameInitData.gameData.playerObject;return{source:e,currentLevel:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,gameCoins:e.gameCoins,life:e.playerObject.numberOflife,minutes:t.levelMinutes,seconds:t.levelSeconds,playerObjectData:n}},t.deleteBullet=function(e,t){if(e.x>window.innerWidth+1500||e.x<-1*(e.width+200)||!e.objectPresent||e.y>window.innerHeight+500||e.y<0-window.innerWidth){var n=this.gameInitData[t].indexOf(e);this.gameInitData[t].splice(n,1)}},t.deleteObjects=function(e){var t=e.object;return e.target,r(this,void 0,void 0,(function(){var e;return a(this,(function(n){return function(e){var t=e.mainGameObject,n=process.env.MAX_NUMBER_OF_EXPLOSION,r=g({mainGameObject:t});if(!r)return!1;if(r.length>n)for(var a=r.length-n,i=0;i<=a;i++)r[i].objectPresent=!1}({mainGameObject:this}),(t.x+t.sWidth<0||!t.objectPresent)&&(t.isSubBoss&&(process.env.SUB_LOAD_AT_LEVEL="false"),e=this.gameInitData.allGameEnemies.indexOf(t),this.gameInitData.allGameEnemies.splice(e,1)),[2]}))}))},t.deleteObjectsOnDemand=function(e){var t=e.object,n=e.mainGameObject,r=e.target;if(!t.objectPresent&&r){var a=n.gameInitData[r].indexOf(t);n.gameInitData[r].splice(a,1)}},t.delateSideObject=function(e){if(function(e){var t=e.mainGameObject,n=process.env.MAX_NUMBER_OF_BULLETS,r=t.gameInitData.allGameBullets.filter((function(e){return"bullet"===e.objectNameFlag&&"player"===e.objectOwner&&"rocket"!=e.type&&"homing_rocket"!=e.type&&"nuclear_blast"!=e.type&&"defence_shield"!=e.type}));if(!r)return!1;if(r.length>n)for(var a=r.length-n,i=r.length;i>=r.length-a-1;i--)r[i]&&(r[i].objectPresent=!1)}({mainGameObject:this}),!e.objectPresent||!this.gameInitData.dynamicLevelsActive&&e.x<-300-e.width){var t=this.gameInitData.allGameSideObjects.indexOf(e);this.gameInitData.allGameSideObjects.splice(t,1),"hangar"==e.objectOwner&&(this.gameInitData.tradepostInRange=!1)}},t.searchExplosionObject=g,t.collectPoints=function(e){this.gameInitData.gameData.currentPoint+=e},t.getObjectPosition=function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},t.createScreenshots=function(e){var t=e.mainGameObject;document.querySelector("#screenshot").addEventListener("click",(function(){if(!t.gameInitData.gameStatus||t.gameInitData.gameWin||t.gameInitData.gameOver)return!1;var e=document.querySelector("#message-screenshot");h.addClassList(e,"active-message-box");c.join(__dirname,"../../"),process.env.APP_SCREENSHOTS_DIRECTORY;e.innerHTML="Screenshot taken \n location: "+process.env.APP_SCREENSHOTS_DIRECTORY,v.call(t,{saveGameData:null,screenshot:!0}),setTimeout((function(){h.removeClassList(e,"active-message-box")}),5e3)}))},t.getImageFromFields=v,t.getRandomColor=function(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e},t.preloadImage=function(e){var t=document.querySelector("#preloader");function n(e,t,n){"skinName"!=e&&"texture"!=e&&"levelMap"!=e||t&&(n.src=__dirname+t)}!function e(r){if(!r)return;for(var a=0,i=Object.entries(r);a<i.length;a++){var o=i[a],s=o[0],c=o[1];"object"==typeof r[s]&&e(r[s]),n(s,c,t)}}(e)},t.fullScreenSwitch=function(e){var t=e.fullscreen;f.on("asynchronous-reply",(function(e,t){})),f.send("asynchronous-message",{fullscreen:t})},t.angleFinder=function(e){var t=e.object,n=e.target,r=(Math.sign(n.x)>0?n.x:0)+n.width/3,a=(Math.sign(n.y)>0?n.y:0)+n.height/2,i=Math.sign(t.x)>0?t.x:0,o=Math.sign(t.y)>0?t.y:0,s=Math.atan((i-r)/(o-a))/(Math.PI/180),c=i-r,l=o-a,u=0;return c<0&&l<0&&(u=90-s),c>0&&l<0&&(u=90-s),c>0&&l>0&&(u=270-s),c<0&&l>0&&(u=270+-1*s),u}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(61),o=(n(18).remote,n(2)),s=n(1),c=n(19);function l(){return JSON.stringify({soundLevel:"5",soundEffect:"20",soundOn:!0,autoshoot:!1,fullScreen:!0,keyControls:{up:[87,38,104],right:[68,39,102],down:[83,40,98],left:[65,37,100],escape:[27],pause:[80],rocket:[82],homingRocket:[72],destroyEnemy:[84],shield:[69],inventory:[73],useKey:[69],miniMap:[77],journal:[74]},screenResolution:{title:"800x600",width:800,height:600},screenVariaton:[{title:"800x600",width:800,height:600},{title:"800x600",width:1366,height:685}]})}function u(e){var t=e.fileName,n=e.data;return t&&n?new Promise((function(e,r){c.set(t,n,(function(t){t&&r(t),e({message:"Settings saved"})}))})):console.error("no data or filename at serverRequestModule")}t.getData=function(e){var t=e.url,n=e.method,o=e.data,s=e.headers;return r(this,void 0,void 0,(function(){var e;return a(this,(function(r){switch(r.label){case 0:return e=Object.assign({"Content-Type":"application/json"},s||!1),"api/level-data"!==t&&"api/level-objects"!==t&&"api/grapple-objects"!==t&&"api/user-ship"!==t&&"api/enemy-ship"!==t&&"api/get-ground-characters"!==t&&"api/shop/guns"!==t&&"api/get-constructor-ground-enemy"!==t&&"api/shop/shipyard"!==t&&"api/shop/store-items"!==t&&"api/game-result"!==t?[3,2]:[4,i.searchDataInFile({url:t,headers:s,method:n,data:o})];case 1:return[2,r.sent()];case 2:return[2,fetch(t,{method:n,mode:"cors",headers:e,body:o?JSON.stringify(o):null}).then((function(e){return 200!=e.status?{status:"reject",message:e.statusText}:e.json()})).then((function(e){return e})).catch((function(e){if(console.log(e),e.response&&(console.log(e.response.data),console.log(e.response.status),console.log(e.response.headers)),e)return{message:"500 No server connection!",status:"error"}}))]}}))}))},t.getLocalData=function(e){var t=e.fileName;return r(this,void 0,void 0,(function(){return a(this,(function(e){if(!t)throw Error("no local files");return[2,new Promise((function(e,n){o.readFile(__dirname+"/public/data/"+t,(function(t,r){if(t)throw Error(t);var a=JSON.parse(r);a?e(a):n("got some problem here")}))}))]}))}))},t.getElectronLocalSaves=function(e){var t=e.fileName;if(!t)throw Error("no local files");return new Promise((function(e,n){c.get(t,(function(r,a){var i=s.join(__dirname,"../../")+process.env.APP_SAVE_DIRECTORY;if(o.existsSync(i)||(o.mkdirSync(i),c.setDataPath(i)),!o.existsSync(i+t)&&Object.keys(a).length<=0)return u({fileName:t,data:"[]"}),e([]),{message:"no save"};if(r)throw Error(r);var l=JSON.parse(a);l?e(l):n("got some problem here")}))}))},t.getElectronLocalData=function(e){var t=e.fileName;if(!t)throw Error("no local files");var n=s.join(__dirname,"../../")+process.env.APP_SAVE_DIRECTORY;return c.setDataPath(n),new Promise((function(e,r){c.get(t,(function(a,i){if(o.existsSync(n)||o.mkdirSync(n),!o.existsSync(n+t)&&Object.keys(i).length<=0)return u({fileName:t,data:l()}),void e(JSON.parse(l()));if(a)throw Error(a);var s=JSON.parse(i);s?e(s):r("got some problem here")}))}))},t.writeElectronLocalData=u,t.writeLocalData=function(e){var t=e.fileName,n=e.data;return r(this,void 0,void 0,(function(){return a(this,(function(e){if(!t)throw Error("no local files");return o.writeFile(__dirname+"/public/data/"+t,n,(function(e){if(e)throw e})),[2]}))}))},t.postData=function(e){var t=e.url,n=(e.method,e.data),r=e.headers,a=Object.assign({"Content-Type":"application/json"},r||!1);return fetch(t,{method:"POST",mode:"cors",cache:"no-cache",headers:a,body:n?JSON.stringify(n):null}).then((function(e){return e.json()})).then((function(e){return e}))}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(89)),r(n(101)),r(n(102)),r(n(104)),r(n(105)),r(n(50)),r(n(107)),r(n(108)),r(n(109)),r(n(51)),r(n(110))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function i(e){for(var t=e.tagName,n=e.styleClass,r=e.inlineStyle,a=e.pictureUrl,i=(e.linkUrl,e.text),o=e.innerContent,s=e.attributeName,c=e.attribute,l=e.attributeName1,u=e.attribute1,h=[],d=1;d<arguments.length;d++)h[d-1]=arguments[d];var p=document.createElement(t);return n&&(p.className=n),r&&(p.style=r),"img"===t&&a&&(p.src=__dirname+a),i&&(p.innerText=i),o&&(p.innerHTML=o),s&&c&&p.setAttribute(s,c),l&&u&&p.setAttribute(l,u),p}Object.defineProperty(t,"__esModule",{value:!0}),t.pageBuilder=function(e){var t=e.target,n=e.data;return r(this,void 0,void 0,(function(){var e,r;return a(this,(function(a){switch(a.label){case 0:return[4,!t];case 1:return(e=a.sent())?[3,3]:[4,!n];case 2:e=a.sent(),a.label=3;case 3:if(e)throw Error("cant fetch the data");return(r=document.querySelector(t))?(r.innerHTML="",n.then((function(e){for(var t=0,n=e;t<n.length;t++){var a=n[t],o=i({tagName:a.tag,styleClass:a.classlist,inlineStyle:a.style,pictureUrl:a.imageLink,linkUrl:a.link,text:a.innerText,innerContent:a.html,attributeName:null,attribute:null,attributeName1:null,attribute1:null},null);r.appendChild(o)}})),[2]):[2,!1]}}))}))},t.createElements=i,t.createSimpleElements=function(e){var t=e.tagname,n=e.classList,r=e.innerText,a=e.idName,i=document.createElement(t);return i.className=n||!1,i.innerHTML=r,a&&i.setAttribute("id",a),i}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(7),s=n(4),c=n(27);t.stairsMove=c.stairsMove,t.elevatorMove=c.elevatorMove;var l=n(26);t.interactWithObjects=l.interactWithObjects;var u=n(16);function h(e){var t=e.mainGameObject,n=e.enemy,r=t.gameInitData.gameData.groundPlayerCharacter,a=n.x+n.width,i=n.y+n.height,o=a-(r.x+r.width),s=i-(r.y+r.height);Math.sqrt(o*o+s*s)-(n.height/2+r.height/2)<0&&(n.isRun=!1,l.useObject({mainGameObject:t,player:r,item:n}))}function d(e){e.object;var t=e.target,n=e.mainGameObject,r=e.explosionFire,o=e.constructors;return a(this,void 0,void 0,(function(){var e,a,s,h,d,m,g,v,b,y,w,x,O,S,j;return i(this,(function(i){if(!0,e=n.gameInitData.gameData.levelData,a=n.gameInitData.gameData.groundPlayerCharacter,s=t.blockRelativeXPos?parseInt(t.blockRelativeXPos):0,h=t.blockRelativeYPos?parseInt(t.blockRelativeYPos):0,d=t.x+s,m=t.y+h,g=d+t.width,v=m+t.height,b=this.x+("groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner)?this.width/2:this.width,y=this.y+this.height,w=g-b,x=v-y,!1,!(Math.sqrt(w*w+x*x)-(this.height/2+t.height/2)))return[2,!1];if(O=function(e){var t=e.mainGameObject,n=e.currentBlock,r=t.gameInitData.dynamicLevelMapBlocks,a=r.indexOf(n),i=r[a-1],o=!1;i&&i.details.collision&&i.width>=n.width&&(o=n.y-i.height===i.y);return!!o}({mainGameObject:n,currentBlock:t}),S=function(e){var t=e.mainGameObject,n=e.currentBlock,r=t.gameInitData.dynamicLevelMapBlocks,a=r.indexOf(n),i=r[a+1],o=!1;i&&i.details.collision&&(o=n.y+n.height===i.y);return!!o}({mainGameObject:n,currentBlock:t}),j=!(Math.sign(w)<0||Math.sign(w)<0)&&"collision","elevator"===t.details.type&&"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&(this.onElevator=!0,"vertical"===t.details.moveDirection&&(this.playerDirectionVertical="down")),function(e){var t=e.mainGameObject,n=e.groundPlayer,r=e.target,a=e.explosionFire,i=e.constructors,o=t.getLevelUserData().source.playerObject,s=null;"groundPlayer"===n.objectOwner&&"health"===r.details.type&&r.details.display?(r.details.display=!1,r.details.active=!1,o.numberOflife+=1,s=Object.assign({},{objectOwner:"groundPlayer",explosion:r.details.explosionAnimation,width:30,height:30,x:r.x,y:r.y,speed:0,type:r.details.type})):("groundPlayer"===n.objectOwner&&"blue_card"===r.details.type&&r.details.display||"groundPlayer"===n.objectOwner&&"green_card"===r.details.type&&r.details.display||"groundPlayer"===n.objectOwner&&"yellow_card"===r.details.type&&r.details.display||"groundPlayer"===n.objectOwner&&"red_card"===r.details.type&&r.details.display||"groundPlayer"===n.objectOwner&&"laptop_with_data"===r.details.type&&r.details.display||"groundPlayer"===n.objectOwner&&"scenario_object"===r.details.type&&r.details.display)&&(r.details.scripts&&u.respawnEnemy({mainGameObject:t,constructors:i,costumeBlocks:null}),l.saveObjectToBackPack({groundPlayer:n,data:r.details.type,previewPicture:process.env.HOST+r.details.previewTexture,name:r.details.objectName?r.details.objectName:null}),r.details.display=!1,r.details.active=!1,s=Object.assign({},{objectOwner:"groundPlayer",explosion:r.details.explosionAnimation,width:30,height:30,x:r.x,y:r.y,speed:0,type:r.details.type}));s&&a({targetData:s,mainGameObject:t,hitObject:n,SideObject:i.SideObject,explosion:"explosion"});return!1}({mainGameObject:n,groundPlayer:this,target:t,explosionFire:r,constructors:o}))return[2,!1];if("stairs-left"===t.details.type||"stairs-right"===t.details.type){if("groundPlayer"!=this.objectOwner)return c.stairsMove({mainGameObject:n,levelInformation:e,stairs:t,player:this,x:w,y:x}),[2,!1];if(!this.isRun)return this.isJump=!1,this.jumpImpuls=0,this.groundTouch=!0,[2,!1]}if(("groundEnemy"===this.objectOwner||"groundNPC"===this.objectOwner)&&(this.x<0||this.y<0||this.x>window.innerWidth||this.y>window.innerHeight||a.onStairs&&this.onStairs&&a.isRun))return this.isRun=!1,this.isJump=!1,this.jumpImpuls=0,this.groundTouch=!0,[2,!1];if(c.deadlyBlocks.call(this,{mainGameObject:n,curentBlock:t,constructors:o}),t.details.deadly)return[2,!1];if(f.call(this,{mainGameObject:n,target:t,targetX:d,targetY:m,levelInformation:e,collision:j,isWall:O,isBottomWall:S,y:x}),"leader"===t.details.type&&(this.onLeader=!0),"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&"leader"===t.details.type)return this.ceilingTouch=!1,[2,!1];if(p.call(this,{mainGameObject:n,target:t,targetX:d,targetY:m,levelInformation:e,x:w,y:x}),m+t.height>this.y&&this.y+this.height>m+t.height&&!S&&j&&"elevator"!=t.details.type&&"stairs-right"!=t.details.type&&"stairs-left"!=t.details.type&&!this.groundTouch&&t.details){if("elevator"===t.details.type)return this.ceilingTouch=!1,[2,!1];this.ceilingTouch=!0,this.groundTouch=!1}return[2,!1]}))}))}function p(e){var t=e.mainGameObject,n=e.target,r=e.targetX,a=e.targetY,i=e.levelInformation,o=e.x,s=e.y;if(this.rightWallTouch||this.leftWallTouch)return!1;if(!m.call(this,{mainGameObject:t,target:n,targetX:r,targetY:a,levelInformation:i,x:o,y:s}))return!1;g.call(this,{mainGameObject:t,target:n,targetX:r,targetY:a,levelInformation:i,x:o,y:s})}function f(e){var t=e.mainGameObject,n=e.target,r=e.targetX,o=e.targetY,s=e.levelInformation,l=e.collision,u=e.isWall;e.isBottomWall,e.y;return a(this,void 0,void 0,(function(){var e;return i(this,(function(a){return"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&u&&(e=this.width/2,this.y+this.height>o&&this.x+e/2>r&&(this.x,this.width,n.width)),this.y+this.height<o+n.height/2&&l&&!u&&"stairs-left"!=n.details.type&&"stairs-right"!=n.details.type&&n.details&&("elevator"===n.details.type?(this.onElevator=!0,c.elevatorPlayerMove({mainGameObject:t,levelInformation:s,elevator:n,player:this})):("groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&(s.jumpImpuls=s.gravityIndex),"groundEnemy"!==this.objectOwner&&"groundNPC"!==this.objectOwner||this.y+this.height-5>o&&(this.y-=.01),this.groundTouch=!0),this.currentGroundBlock=n),[2,!0]}))}))}function m(e){var t=e.mainGameObject,n=e.target,r=e.targetX,a=e.targetY,i=e.levelInformation,o=e.x,s=e.y;e.stearsStateProps;if(this.x<r&&this.x+this.width>r&&this.y+this.height>a+5&&"right"===this.playerDirectionHorizontal){if(this.y+this.height>=a-20&&a-20>this.y&&"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&n.height<20||this.groundTouch&&this.y+this.height>=a-20&&a-20>this.y&&"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner)return this.rightWallTouch=!1,i.jumpImpuls=-1*i.gravity,this.groundTouch=!1,!1;if("stairs-left"===n.details.type)return this.rightWallTouch=!1,this.groundTouch=!1,c.stairsMove({mainGameObject:t,levelInformation:i,stairs:n,player:this,x:o,y:s}),!1;if(n.details){if("elevator"===n.details.type)return this.rightWallTouch=!1,this.groundTouch=!1,!1;if(this.rightWallTouch=!0,("groundEnemy"===this.objectOwner||"groundNPC"===this.objectOwner)&&"leader"!=n.details.type&&n.details.collision&&this.y>a){var l=this.x+this.width-r;this.x-=l}return n.details.collision||"door"!==n.details.type||(this.rightWallTouch=!1,this.groundTouch=!0),this.currentWallBlock=n,!1}}return!0}function g(e){var t=e.mainGameObject,n=e.target,r=e.targetX,a=e.targetY,i=e.levelInformation,o=e.x,s=e.y;e.stearsStateProps;if(this.x<r+n.width&&this.x+this.width>r&&this.x>r&&this.y+this.height>a+5&&"left"===this.playerDirectionHorizontal){if(this.leftWallTouch=!0,this.y+this.height>=a-20&&a-20>this.y&&"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&n.height<20||this.groundTouch&&this.y+this.height>=a-20&&a-20>this.y&&"groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner)return this.leftWallTouch=!1,i.jumpImpuls=-1*i.gravity,this.groundTouch=!1,!1;if("stairs-right"===n.details.type)return this.leftWallTouch=!1,this.groundTouch=!1,c.stairsMove({mainGameObject:t,levelInformation:i,stairs:n,player:this,x:o,y:s}),this.groundTouch=!1,!1;if(n.details){if("elevator"===n.details.type)return this.leftWallTouch=!1,this.groundTouch=!1,!1;if(("groundEnemy"===this.objectOwner||"groundNPC"===this.objectOwner)&&"leader"!=n.details.type&&n.details.collision&&this.y>a){var l=r+n.width-this.x;this.x+=l}return this.leftWallTouch=!0,n.details.collision||"door"!==n.details.type||(this.leftWallTouch=!1,this.groundTouch=!0),this.currentWallBlock=n,!1}}return!0}function v(e){for(var t=e.mainGameObject,n=e.jumpImpuls,r=e.xPos,a=e.groundPlayer,i=e.constructors,o=t.gameInitData.allGameBullets,s=t.gameInitData.gameData.levelData,c=t.gameInitData.allGameEnemies,l=t.gameInitData.mapBackgroundObjects,u=t.gameInitData.allGroundGameBullets,h=t.gameInitData.allGameSideObjects,d=[].concat(l,c,o,h,u),p=r&&a.groundTouch?r:s.horizontalSpeed,f=0,m=d;f<m.length;f++){var g=m[f];if(g instanceof i.GameBackground&&!g.alwaysMove&&(g.speed="right"===a.playerDirectionHorizontal?g.defaultSpeed/2:g.defaultSpeed/2*-1,(!a.leftWallTouch&&!a.rightWallTouch&&p||!a.leftWallTouch&&!a.rightWallTouch&&!a.groundTouch&&p)&&(g.x-=g.speed),0==g.speed||a.groundTouch||a.ceilingTouch||(g.y-=g.defaultSpeed*(n/10)),a.currentGroundBlock&&"elevator"===a.currentGroundBlock.details.type)){var v=a.currentGroundBlock.details.speed;0!=g.speed&&a.groundTouch&&a.onElevator&&!a.ceilingTouch&&"vertical"===a.currentGroundBlock.details.moveDirection?g.y-=a.currentGroundBlock.details.currentDirection?0:g.defaultSpeed/n*(v/10):0!=g.speed&&a.groundTouch&&a.onElevator&&!a.ceilingTouch&&"horizontal"===a.currentGroundBlock.details.moveDirection&&(g.x-=a.currentGroundBlock.details.currentDirection?g.defaultSpeed/v:g.defaultSpeed/v*-1)}g instanceof i.EnemyObject&&(a.leftWallTouch||a.rightWallTouch||!r||(g.x=(a.playerDirectionHorizontal,g.x-s.horizontalSpeed)),0==g.speed||a.groundTouch||a.groundTouch||a.ceilingTouch||(g.y+=.5*n*-1))}}t.loadLevelMap=function(e){var t=e.levelMapName,n=e.constructors;return a(this,void 0,void 0,(function(){var e,a,s,c,l,u,h;return i(this,(function(i){switch(i.label){case 0:return e=process.env.HOST+process.env.DYNAMIC_LEVEL_BLOCKS+"/"+t,process.env.HOST+process.env.DYNAMIC_LEVEL_ENEMY_COLLECTION_URL,[4,o.getData({url:e,method:"GET",data:null,headers:null})];case 1:return[4,(a=i.sent()).allMapObjects.find((function(e){if(e.details)return"spawner"===e.details.type}))];case 2:return(s=i.sent())?(l=window.innerWidth/2,[4,s.x]):[2,!1];case 3:return c=l-(i.sent()+s.width/2),h=window.innerHeight/2,[4,s.y];case 4:return u=h-i.sent(),[4,a.allMapObjects.filter((function(e){return e.details})).map((function(e){return e.mapSizeHorizontal=a.mapSize.width,e.mapSizeVertical=a.mapSize.height,e.x+=c,e.y+=u,new n.DynamicBlockConstructor(r({},e))}))];case 5:return[2,i.sent()]}}))}))},t.mapGravityInit=function(e){var t=e.mainGameObject,n=e.mapObjects,r=e.targetObject,o=e.constructors;return a(this,void 0,void 0,(function(){var e,a,c,l,u,h,d;return i(this,(function(i){switch(i.label){case 0:return e=t.gameInitData.gameData.levelData,a=t.gameInitData.gameExtraSeconds,c=t.gameInitData.gameData.groundPlayerCharacter,t.gameInitData.dynamicLevelEnemy,l=e.gravityIndex||0===e.gravityIndex?e.gravityIndex:e.gravity,Math.round(e.horizontalSpeed)>0&&e.horizontalSpeed>0&&a%2==0&&r.groundTouch&&(e.horizontalSpeed-=1,c.xPos=0),Math.round(e.horizontalSpeed)<0&&e.horizontalSpeed<0&&a%2==0&&r.groundTouch&&(e.horizontalSpeed+=1,c.xPos=0),[4,v({mainGameObject:t,jumpImpuls:t.gameInitData.gameData.levelData.jumpImpuls,xPos:c.xPos,groundPlayer:c,constructors:o})];case 1:if(i.sent(),r.groundTouch&&!c.onElevator)return[2,!1];for(e.jumpImpuls!=l&&a%2==0&&(c.onElevator||(e.jumpImpuls+=.1*l)),c.groundTouch&&(e.jumpImpuls=c.onElevatorSpeed?c.onElevatorSpeed+e.gravity+.6:e.gravity/2*-1),(c.leftWallTouch||c.rightWallTouch)&&(e.horizontalSpeed=0,c.xPos=0),c.ceilingTouch&&(e.jumpImpuls=1),e.jumpImpuls>3*e.gravity&&(e.jumpImpuls=l),-1*e.jumpImpuls>3*e.gravity&&(e.jumpImpuls=-1*l),u=0,h=n;u<h.length;u++)(d=h[u]).y-=e.jumpImpuls?e.jumpImpuls:0,d.x-=e.horizontalSpeed?e.horizontalSpeed:0;return s.backToTheMapAgain({mainGameObject:t,player:c,constructors:o}),c.onStairs=0,[2]}}))}))},t.npcCollisionDetect=h,t.computersDialog=function(e){for(var t=e.mainGameObject,n=e.allBlocks,r=t.gameInitData.gameData.groundPlayerCharacter,a=0,i=n.filter((function(e){if(Math.max(e.x,r.x)-Math.min(e.x,r.x)<=200&&Math.max(e.y,r.y)-Math.min(e.y,r.y)<=200)return e}));a<i.length;a++){var o=i[a];if(!o.details)return!1;"read_terminal"===o.details.type&&h({mainGameObject:t,enemy:o})}},t.blockCollision=function(e){var t=e.objectsToCollide,n=e.targetObject,r=e.objectIntersectionDetect,o=e.mainGameObject,c=e.explosionFire,u=e.constructors;return a(this,void 0,void 0,(function(){var e,a,h,p;return i(this,(function(i){if(!t)return[2,!1];for(!1,n.groundTouch=!1,n.rightWallTouch=!1,n.leftWallTouch=!1,n.ceilingTouch=!1,n.onStairs=!1,n.currentWallBlock=null,n.onElevator=!1,e=t.filter((function(e){if(Math.max(n.x,e.x)-Math.min(n.x,e.x)<=200&&Math.max(n.y,n.y)-Math.min(n.y,e.y)<=200)return e})),a=0,h=e;a<h.length;a++)(p=h[a])&&(!p||p.x>window.innerWidth+200||p.x<-1*p.width||p.y>window.innerHeight+200||p.y<-200||r({object:p,target:n})&&((p.details.collision||"door"===p.details.type||"leader"===p.details.type||"health"===p.details.type&&p.details.display||"blue_card"===p.details.type&&p.details.display||"green_card"===p.details.type&&p.details.display||"yellow_card"===p.details.type&&p.details.display||"red_card"===p.details.type&&p.details.display||"laptop_with_data"===p.details.type&&p.details.display||"scenario_object"===p.details.type&&p.details.display)&&d.call(n,{object:n,target:p,mainGameObject:o,explosionFire:c,constructors:u}),"groundEnemy"!=n.objectOwner&&"groundNPC"!=n.objectOwner&&"npc_spawner"!=p.details.type&&"read_terminal"!=p.details.type&&(l.useObject({mainGameObject:o,player:n,item:p}),s.groundPlayerCheckpointActivate({block:p,mainGameObject:o}))));return[2]}))}))},t.backgroundMoveDuringMove=v,t.backgroundAdjustment=function(e){var t=e.mainGameObject;if(!t.gameInitData.dynamicLevelsActive||0===t.gameInitData.mapBackgroundObjects.length)return!1;var n=t.gameInitData.mapBackgroundObjects,r=t.gameInitData.dynamicLevelMapBlocks,a=t.gameInitData.gameData.groundPlayerCharacter,i=t.gameInitData.gameData.levelData;if(!i.space){for(var o={y:1/0,object:null},s=0;s<r.length;s++)r[s].y<o.y&&(o.y=r[s].y,o.object=r[s]);for(var c=a.y-(o.y<1/0?o.y:0),l=0,u=n;l<u.length;l++){var h=u[l];h.defaultSpeed&&(h.y-=h.defaultSpeed*(c/(2*i.gravity))-100,h.defaultY=h.y)}}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),o=n(7),s=n(9),c=n(0),l=n(17);t.shopInventory=l.shopInventory,t.showDescriptionArea=l.showDescriptionArea;var u=n(47),h=n(24),d=n(35),p=n(90);function f(e){var t=e.element,n=(e.mainGameObject,e.text);t.shopDialogText.innerHTML=n,t.shopErrorMessage.innerHTML="",i.show(t.shopDialog)}function m(e){var t=e.mainGameObject,n=document.querySelector("#inventory-box");t.gameInitData.inventoryActive?i.addClassList(n,"shop-inventory-part"):i.removeClassList(n,"shop-inventory-part")}function g(e){var t=e.event,n=e.hangarElements,r=e.index;return c.objectIntersectionDetect({object:{x:t.clientX-(t.target.offsetLeft+t.target.parentElement.offsetLeft),y:t.clientY-(t.target.offsetTop+t.target.parentElement.offsetTop),width:5,height:5},target:{x:n[r].positionX,y:n[r].positionY,width:n[r].width,height:n[r].height}})}function v(e){var t=e.mainGameObject,n=e.data,r=e.targetData;if(!n)return!1;b({mainGameObject:t,data:n,targetData:r,buying:!0})}function b(e){var t=e.mainGameObject,n=e.data,r=e.targetData,a=e.buying,i=t.gameInitData.gameData.playerObject;if("power"===n.type&&"extralife"===n.name)h.addPlayerLife.call(n,{allGameSideObjects:null,playerShipData:t.gameInitData.gameData.playerObject,mainGameObject:t}),t.gameInitData.gameData.gameCoins-=n.price;else if("inventory weapon"===n.type){if(r){if(i.data.inventory[r.index].grapplePower.maxNumber<=i.data.inventory[r.index].grapplePower.number)return t.shopArea.shopErrorMessage.innerHTML="you reach a limit of this item",!1;a&&(t.gameInitData.gameData.gameCoins-=n.price),i.data.inventory[r.index].grapplePower.number+=1}l.shopInventory({element:t.shopArea,mainGameObject:t})}}function y(e){var t=e.element,n=e.url,i=e.mainGameObject,s=e.customWrapperClass,c=e.shopPageInformation;return r(this,void 0,void 0,(function(){var e,r,l,u,h;return a(this,(function(a){switch(a.label){case 0:return e=i.gameInitData.gameData.playerObject,[4,o.getData({url:n,method:"GET",data:null,headers:null})];case 1:for(r=function(e){var t=e.data,n=e.listNotToDisplay;return t.map((function(e){return function(e){var t=e.listNotToDisplay,n=e.item;return t.every((function(e){return n.title!=e}))?n:null}({listNotToDisplay:n,item:e})?e:null})).filter((function(e){if(e)return e}))}({data:r=a.sent(),listNotToDisplay:["Reaper","Destructor"]}),c.currentShopUrl=n,c.maxItemPerPage="shipyard-item"===s?1:4,c.totalPages=Math.ceil(r.length/c.maxItemPerPage),c.currentPageCardIndex=c.currentPage*c.maxItemPerPage-c.maxItemPerPage,c.customWrapperClass=s,t.displayShopItem.innerHTML="",r.message&&console.error(r.message),l=c.currentPageCardIndex;l<c.currentPageCardIndex+c.maxItemPerPage;l++)(u=r[l])&&(h=w({card:u,customWrapperClass:s,playerObject:e,mainGameObject:i,element:t}),t.displayShopItem.appendChild(h));return[2]}}))}))}function w(e){var t=e.card,n=e.customWrapperClass,r=e.playerObject,a=e.mainGameObject,i=e.element,o="shipyard-item"===n?function(e){var t=e.shipData;return!!t&&"\n    <p> status: "+(t.status?t.status:"")+"</p>\n    <p>armor: "+(t.armor?t.armor:"")+"</p>\n    <p>healthPoint "+(t.healthPoint?t.healthPoint:"")+"</p>\n    <p>speed: "+(t.minSpeed?t.minSpeed:"")+"</p>\n    <p>inventoryCapacity: "+(t.inventoryCapacity?t.inventoryCapacity:"")+"</p>\n    <p>firespots "+(t.firespots?t.firespots:"")+"</p>\n    "}({shipData:t}):function(e){var t=e.card;return!!t&&"\n    <p>"+(t.status?"status: "+t.status:"")+"</p>\n    <p>"+(t.damage?"damage: "+t.damage:"")+"</p>\n    <p>"+(t.speed?"speed: "+t.speed:"")+"</p>\n    "}({card:t}),c=function(e){var t=e.playerObject,n=e.card,r=e.mainGameObject;return t.data.title===n.title?(process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="true",'<div class="current-ship-label"><img src="'+process.env.HOST+'static/shop/misc/accept_label_1024x1024.png"></div>\n        <div class="sale-ship-price"> Sale price '+l.salePercentAddToPrice({price:n.price,mainGameObject:r})+"</div>"):""}({playerObject:r,card:t,mainGameObject:a}),u="background-image: url('./"+t.background+"');",h=s.createElements({tagName:"div",styleClass:n?n+" "+(r.data.title===t.title?"current-ship":""):"shop-card",inlineStyle:u+"' ",pictureUrl:null,linkUrl:null,text:null,innerContent:'<div class="inner-card">\n            <h2>'+t.title+" "+c+'</h2>\n            <img src="'+(process.env.HOST,t.loadImage+'">\n            <div class="')+("shipyard-item"===n?"card-body":"card-regular-description-wrapper")+'">\n                <div class="card-main-data">\n                    <p>'+t.description+"</p>\n                    <h3>Cost: "+t.price+'</h3>\n                </div>\n                <div class="card-details">'+o+"</div>\n            </div>\n        </div>",attribute:null,attributeName:null,attribute1:null,attributeName1:null});return h.addEventListener("click",(function(){process.env.SHOP_ACTIVE_WINDOW="true";var e="buy "+t.title+" cost: "+t.price;a.shopArea.selectedShopItem.title=t.title,a.shopArea.selectedShopItem.price=t.price,f({element:i,mainGameObject:a,text:e})})),h}function x(e){var t=e.state,n=e.element;"to-hangar"==t?(i.hide(n.shopArea),i.show(n.hangarArea)):"to-shop"==t&&(i.hide(n.hangarArea),i.show(n.shopArea))}function O(e){var t=e.status,n=e.event,r=e.picture,a=document.querySelector("#item-dragable-picture");t?(i.show(a),a.style="margin-top: "+(n.clientY-50)+"px; margin-left: "+(n.clientX-100)+"px;",a.src=process.env.HOST+r.loadImage):i.hide(a)}t.enterToTheShopDialog=function(e){var t=e.mainGameObject,n=e.tradePropertyes;if(t.gameInitData.gameOver||t.gameInitData.levelChange)return!1;l.shopInventory({element:t.shopArea,mainGameObject:t}),m({mainGameObject:t}),t.gameInitData.shopActive=!0;var r=t.shopArea;t.shopArea.selectedShopItem.tradePropertyes=n?n.salePercentage?n:function(e){var t=e.tradePropertyes,n=e.mainGameObject;return t.salePercentage=n.gameRandomizer(t.buyPricePercent,t.buyPricePercent/2),t}({tradePropertyes:n,mainGameObject:t}):{buyPricePercent:100,salePercentage:100},p.shopWeaponsActivity({mainGameObject:t,shopArea:t.shopArea}),x({state:"to-shop",element:t.shopArea}),p.toggleShopButtonStyle(null),i.show(r.shopWrapper)},t.leaveShop=f,t.saleBoxLabelChange=m,t.loadShopArea=function(e){var t={selectedShopItem:{title:"",price:"",inventorySelectedItem:null,hangarSelectedItem:null,hangarElements:[],tradePropertyes:null},shopWrapper:document.querySelector("#shop-wrapper"),shopArea:document.querySelector("#shop-area"),hangarArea:document.querySelector("#hangar-area"),hangarShipArea:document.querySelector("#hangar-ship-area"),displayShopItem:document.querySelector("#display-shop-items"),shopDialog:document.querySelector("#shop-dialog"),shopInventoryWrapper:document.querySelector("#shop-inventory-wrapper"),shopDialogText:document.querySelector("#shop-dialog-text"),shopErrorMessage:document.querySelector("#shop-error-message")},n={currentShopUrl:process.env.SHOP_GUNS_URL,currentPage:1,totalPages:1,maxItemPerPage:1,currentPageCardIndex:1,customWrapperClass:null};return y({element:t,url:process.env.SHOP_GUNS_URL,mainGameObject:e,customWrapperClass:null,shopPageInformation:n}),function(e){var t=e.shopArea,n=e.mainGameObject;l.shopInventory({element:t,mainGameObject:n}),t.hangarShipArea.addEventListener("mousemove",(function(e){d.hangarMouseMoveEvent({mainGameObject:n,event:e})})),t.hangarShipArea.addEventListener("mouseleave",(function(e){l.hideDescriptionArea()})),t.hangarShipArea.addEventListener("click",(function(e){return r(this,void 0,void 0,(function(){var t,r,i,o,s,c;return a(this,(function(a){for(t=n.shopArea.selectedShopItem.hangarElements,r=n.gameInitData.gameData.playerObject.data,i=n.gameInitData.gameData.playerObject,o=n.shopArea.selectedShopItem,s=0;s<t.length;s++)t[s]&&(c=g({event:e,hangarElements:t,index:s}),d.inventoryColisionEvent({hitObject:c,playerObjectData:r,shopAreaItems:o,mainGameObject:n,playerObject:i,index:s}));return[2]}))}))})),t.shopWrapper.addEventListener("click",(function(e){l.shopInventory({element:t,mainGameObject:n}),p.shopMenuActivity({mainGameObject:n,shopArea:t}),l.selectInventoryItem({index:n.shopArea.selectedShopItem.inventorySelectedItem,mainGameObject:n})})),document.addEventListener("mousemove",(function(e){var t=n.shopArea.selectedShopItem,r=n.gameInitData.gameData.playerObject.data;r.inventory[t.inventorySelectedItem]&&t.inventorySelectedItem||r.inventory[t.inventorySelectedItem]&&0===t.inventorySelectedItem||t.hangarSelectedItem||0===t.hangarSelectedItem?O({status:!0,event:e,picture:t.inventorySelectedItem||0===t.inventorySelectedItem?r.inventory[t.inventorySelectedItem]:r.guns[t.hangarSelectedItem]}):O({status:!1,event:e,picture:null})})),t.shopDialog.addEventListener("click",(function(e){switch(e.target.dataset.targetBtnId){case"ok":p.shopDialogActivity.call(t.shopDialog,{mainGameObject:n,shopArea:t});break;case"cancel":process.env.SHOP_SALE_WINDOW="false",i.hide(this)}}))}({shopArea:t,mainGameObject:e}),{selectedShopItem:t.selectedShopItem,shopWrapper:t.shopWrapper,shopArea:t.shopArea,hangarArea:t.hangarArea,hangarShipArea:t.hangarShipArea,displayShopItem:t.displayShopItem,shopDialog:t.shopDialog,shopInventoryWrapper:t.shopInventoryWrapper,shopDialogText:t.shopDialogText,shopErrorMessage:t.shopErrorMessage,shopPageInformation:n}},t.shopHitObjectsDetection=g,t.changePage=function(e){var t=e.mainGameObject,n=e.flag,r=t.shopArea.shopPageInformation;"back"===n?r.currentPage-=1:"next"===n&&(r.currentPage+=1),r.currentPage<1&&(r.currentPage=1),r.currentPage>r.totalPages&&(r.currentPage=r.totalPages),y({element:t.shopArea,url:r.currentShopUrl,mainGameObject:t,customWrapperClass:r.customWrapperClass,shopPageInformation:t.shopArea.shopPageInformation})},t.inventoryItemGunsAssign=b,t.showShopData=y,t.switchShopHangar=x,t.buyShip=function(e){var t=e.mainGameObject,n=e.url;return r(this,void 0,void 0,(function(){var e,r,s,c,h,d,p;return a(this,(function(a){switch(a.label){case 0:for(e=t.gameInitData.gameData.playerObject,r=e.data,s=0,c=0,h=0;h<r.inventory.length;h++)r.inventory[h]&&(s=h),r.guns[h]&&(c=h);return d={usercoins:t.gameInitData.gameData.gameCoins+l.salePercentAddToPrice({price:r.price,mainGameObject:t}),itemname:t.shopArea.selectedShopItem.title,currentshipname:r.title,shipinventoryitems:s,shipgunsitems:c},[4,o.getData({url:n,method:"PUT",data:null,headers:d})];case 1:return(p=a.sent())?("false"===p.status?t.shopArea.shopErrorMessage.innerHTML=p.message:p.data&&(t.gameInitData.gameData.gameCoins=parseInt(p.money),u.replaceShipData({mainGameObject:t,buyShipData:p}),i.hide(t.shopArea.shopDialog),l.shopInventory({element:t.shopArea,mainGameObject:t}),y({element:t.shopArea,url:process.env.SHOP_SHIPYARD_URL,mainGameObject:t,customWrapperClass:"shipyard-item",shopPageInformation:t.shopArea.shopPageInformation})),[2]):[2,!1]}}))}))},t.buyItem=function(e){var t=e.url,n=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,r,s,c,u;return a(this,(function(a){switch(a.label){case 0:return e=n.gameInitData.gameData.playerObject,r=l.inventoryFreeItem({inventory:e.data.inventory,inventoryCapacity:e.data.inventoryCapacity}),s={usercoins:n.gameInitData.gameData.gameCoins,itemName:n.shopArea.selectedShopItem.title},r.firstEmptyItem||"Rocket"==n.shopArea.selectedShopItem.title||"Homing Rocket"==n.shopArea.selectedShopItem.title||"Nuclear Blast"==n.shopArea.selectedShopItem.title||"Extra life"==n.shopArea.selectedShopItem.title?[4,o.getData({url:t,method:"PUT",data:null,headers:s})]:(n.shopArea.shopErrorMessage.innerHTML="Your`s inventory is full",[2,!1]);case 1:if("false"===(c=a.sent()).status)return n.shopArea.shopErrorMessage.innerHTML=c.message,[2];if(c.data){if("power"===c.data.type&&"extralife"===c.data.name)return v({mainGameObject:n,data:c.data,targetData:null}),[2,!1];if("inventory weapon"===c.data.type&&(u=d.findIntInventory({inventory:e.data.inventory,searchObject:c.data}),v({mainGameObject:n,data:c.data,targetData:u}),u))return[2];n.gameInitData.gameData.gameCoins=parseInt(c.money),l.putInsideInventory({mainGameObject:n,saveItem:c.data,inventoryItem:r.firstEmptyItem}),"inventory weapon"!=c.data.type&&i.hide(n.shopArea.shopDialog),l.shopInventory({element:n.shopArea,mainGameObject:n})}return[2]}}))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=function(e,t){e(t=t||this)},t.getUIObjectPosition=function(){return{x:this.properties.x,y:this.properties.y,width:this.properties.width,height:this.properties.height}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(14),o=n(32),s=n(22),c=n(18),l=(c.ipcRenderer,c.remote),u=n(10),h=n(16),d=n(4),p=n(4);function f(e){return r(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return console.log("production",process.env.HOST),[4,i.serverDataRequest(e)];case 1:return[2,t.sent()]}}))}))}function m(e){var t=e.PlayerShip,n=e.userData,r=e.shipLife;return new t({data:n,points:0,numberOflife:r,maxOfLife:r,healthPoint:n.healthPoint,armor:n.armor,x:0,y:0,xFinal:n.x,yFinal:n.y,collisionAllow:!0,objectOwner:"player",width:n.width,height:n.height,xAdj:0,speed:n.speed,explosion:n.explosionAnimation,damage:n.damage,sx:n.sx,sy:n.sy,picturesWidth:n.imageWidth,imageHeight:n.imageHeight,sWidth:n.sWidth,sHeight:n.sHeight,animationSteps:n.animationSteps,numberOfItems:n.numberOfItems,numberOfVerticalItems:n.numberOfVerticalItems,collideExplosionAnimation:n.collideExplosionAnimation})}function g(e,t,n){return r(this,void 0,void 0,(function(){var e,r,i,c,l,p,g,v,b,y,w,x,O,S,j,_,D,I,k,P,E,A;return a(this,(function(a){switch(a.label){case 0:return o.loadWindow({loadStatus:"load"}),e=0,1,r=5,i=document.querySelector("#gamefield"),c=document.querySelector("#gameObjectsfield"),l=document.querySelector("#gameActionDialogfield"),p=document.querySelector("#gameUifield"),[4,f({level:e,shipConfiguration:1})];case 1:return g=a.sent(),v=g.levelData,b=g.levelObjects,y=g.grappleObjects,w=g.preloadData,x=g.gameSetings,O=g.userData,S=g.enemyData,process.env.GROUND_PLAYER_ALLOW_MOVE=v.dynamicLevelsActive?"false":"true","error"===v.status||"error"===b||"error"===y||"error"===v.gameSetings||"error"===O||"error"===S?(o.loadWindow({loadStatus:"serverError"}),[2,null]):(o.loadWindow({loadStatus:"success"}),j=m({PlayerShip:n.PlayerShip,userData:O,shipLife:r}),this.gameInitData&&((j=s.renewPlayerShip.call(this,{originData:this.gameInitData.gameData.playerObject,newData:j})).playerShipTextureChange(),this.shopArea.selectedShopItem={title:"",price:"",inventorySelectedItem:null,hangarSelectedItem:null,hangarElements:[]},process.env.SHOP_ACTIVE_WINDOW="false"),v.dynamicLevelsActive?[4,u.loadLevelMap({levelMapName:v.dynamicBlockMap+".json",constructors:n})]:[3,3]);case 2:return D=a.sent(),[3,4];case 3:D=[],a.label=4;case 4:return _=D,v.dynamicLevelsActive?[4,h.loadLevelEnemy({levelDynamicMapBlocks:_,constructors:n})]:[3,6];case 5:return k=a.sent(),[3,7];case 6:k=[],a.label=7;case 7:return I=k,P={},E={ctx:null,gameField:i||null,gameActionField:c||null,gameDialogField:l||null,gameUIField:p||null},A={currentLevel:e,currentPoint:0,gameCoins:0,playerObject:j},[4,d.initGroundPlayer({DynamicUserConstructor:n.DynamicUserConstructor})];case 8:return[2,(P.data=(E.gameData=(A.groundPlayerCharacter=a.sent(),A.levelData=v,A.levelObjects=b,A.grappleObjects=y,A.levelSounds=t||null,A.preloadData=w,A.gameSetings=x,A.enemyData=S,A.controllers=null,A),E.screen={width:window.innerWidth,height:window.innerHeight},E.intervalCount=20,E.enemyType=null,E.allGameSideObjects=[],E.allGameEnemies=[],E.allGameBullets=[],E.allGroundGameBullets=[],E.mapBackgroundObjects=[],E.warpObjects=[],E.mapKeyCode={},E.dynamicLevelMapBlocks=_,E.dynamicLevelEnemy=I,E.timeToEressLevel=6,E.levelChange=!1,E.gamePause=!1,E.gameUiPause=!1,E.backScreenPause=!0,E.gameStatus=!1,E.gameOver=!1,E.gameWin=!1,E.subBossPresent=!1,E.gatePresent=!1,E.levelWindowDescription=!1,E.grappleObjectOnScreen=!1,E.dynamicLevelsActive=!!v.dynamicLevelsActive,E.tradepostInRange=!1,E.inventoryActive=!1,E.shopActive=!1,E.gameExtraSeconds=0,E.tradeShipTimeToUndock=0,E),P)]}}))}))}t.serverRequest=f,t.newPlayerShipConstruct=m,t.gameDataInit=g,t.gameStart=function(){this.mapSoundChanger({soundStatus:"regular_level"}),process.env.BOSS_LOAD_AT_LEVEL="false",process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="false",process.env.SHOP_ACTIVE_WINDOW="false",process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="false",process.env.SHOP_SALE_WINDOW="false",process.env.SHOP_STORE_WINDOW="false",this.initPlayerShip(),this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!0},t.mapSoundChanger=function(e){var t=e.soundStatus,n=this.showGameInfo().gameData,r=n.levelData.levelSound,a=n.levelSounds;switch(t){case"start_screen":r=n.preloadData.startSound;break;case"regular_level":r=n.levelData.levelSound;break;case"game_over_screen":r=n.preloadData.gameOverSound;break;case"game_win":r=n.preloadData.gameWinSound}a.changeTrack({url:r}),a.soundPlay()},t.backToStartScreen=function(e){return r(this,void 0,void 0,(function(){var t,n,r,i,o,s,c;return a(this,(function(a){switch(a.label){case 0:return p.hideInventory(),t=this.showGameInfo().gameData.levelSounds,[4,g.call(this,e.PlayerShip,t,e)];case 1:if(!(n=a.sent()).data)throw new Error("No 'newInitdata.data'");for(r=0,i=Object.entries(n.data);r<i.length;r++)o=i[r],s=o[0],null!==(c=o[1])&&(this.gameInitData[s]=c);return this.mapSoundChanger({soundStatus:"start_screen"}),this.gameInitData.gameOver=!1,this.gameInitData.gameStatus=!1,[2]}}))}))},t.exitTheGame=function(){l.getCurrentWindow().close()}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(7);t.getExtraObjects=function(e){var t=e.randomObject;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,i.getData({url:"api/grapple-objects",method:"GET",data:null,headers:{grappleObject:t.object}})];case 1:return[2,e.sent()]}}))}))},t.getGameResultData=function(e){var t=e.method,n=e.data;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,i.getData({url:"api/game-result",method:t,data:n,headers:null})];case 1:return[2,e.sent()]}}))}))},t.getShopServerData=function(e){var t=e.shopUrl,n=e.headers;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,i.getData({url:t,method:"PUT",data:null,headers:n})];case 1:return[2,e.sent()]}}))}))},t.loadGroundEnemy=function(e){var t=e.dynamicEnemyCollection;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,i.getData({url:t,method:"GET",data:null,headers:null})];case 1:return[2,e.sent()]}}))}))},t.loadGroundPlayer=function(){return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,i.getData({url:process.env.GROUND_CHARACTERS_URL,method:"GET",data:null,headers:{"item-id":"main_character"}})];case 1:return[2,e.sent()]}}))}))},t.serverDataRequest=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o,s,c,l,u;return a(this,(function(a){switch(a.label){case 0:return[4,i.getData({url:process.env.LEVEL_DATA_URL,method:"GET",data:null,headers:{maplevel:e.level}})];case 1:return t=a.sent(),[4,i.getData({url:process.env.LEVEL_OBJECT_URL,method:"GET",data:null,headers:{mapObject:t.levelOBjects}})];case 2:return n=a.sent(),[4,i.getData({url:process.env.LEVEL_GRAPPLE_OBJECTS_URL,method:"GET",data:null,headers:{grappleObject:t.grappleObject}})];case 3:return r=a.sent(),[4,i.getLocalData({fileName:"preloadData.json"})];case 4:return o=a.sent(),[4,i.getElectronLocalData({fileName:"game-settings.json"})];case 5:return s=a.sent(),[4,i.getData({url:process.env.USER_SHIP_URL,method:"GET",data:null,headers:{usership:e.shipConfiguration}})];case 6:return c=a.sent(),[4,i.getData({url:process.env.ENEMY_SHIP_URL,method:"GET",data:null,headers:{"ship-type-number":t.enemyType}})];case 7:return l=a.sent(),u={levelData:t,levelObjects:n,grappleObjects:r,preloadData:o},[4,s];case 8:return[2,(u.gameSetings=a.sent(),u.userData=c,u.enemyData=l,u)]}}))}))}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};function i(e){var t=e.SoundCreator,n=e.mainGameObject,r=e.soundProps,a=n.showGameInfo().gameData.gameSetings,i={soundUrl:r.soundUrl,soundLoop:r.soundLoop,soundOn:a.soundOn,volume:r.volume},o=new t(i);return o.initSound({levelSound:r.soundUrl,volume:i.volume}),o}Object.defineProperty(t,"__esModule",{value:!0}),t.createSound=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o;return a(this,(function(a){switch(a.label){case 0:return t=this.showGameInfo().gameData,n=t.gameSetings,o={},[4,t.preloadData.startSound];case 1:return o.soundUrl=a.sent(),o.soundLoop=!0,o.volume=n.soundLevel,r=o,process.env.MAIN_GAME_SOUND=n.soundLevel.toString(),this.gameInitData.gameData.levelSounds=i({SoundCreator:e,mainGameObject:this,soundProps:r}),[2,t.levelSounds]}}))}))},t.initSoundObject=i,t.changeVolume=function(e){var t=e.volume;this.volume=t||process.env.MAIN_GAME_SOUND_EFFECTS,this.soundObject.volume="true"===process.env.MAIN_GAME_SOUND_ON?this.volume/1e3:0},t.changeTrack=function(e){var t=e.url;this.soundObject.src=__dirname+t},t.soundPlay=function(){this.soundObject.play()},t.soundPause=function(){this.soundObject.pause()},t.makeLoop=function(){this.soundObject.loop=this.soundLoop},t.turnSoundOff=function(e){var t=e.value;this.soundOn=t,this.changeVolume({volume:this.volume})},t.initSound=function(e){var t=e.levelSound,n=e.volume;this.changeVolume({volume:n}),this.changeTrack({url:t}),this.soundPlay(),this.makeLoop()}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},o=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r};Object.defineProperty(t,"__esModule",{value:!0});var s=n(7),c=n(14);function l(e,t){return a(this,void 0,void 0,(function(){var n,r,a,o,c,l,u;return i(this,(function(i){switch(i.label){case 0:return n=e[Math.floor(Math.random()*e.length)],r=Math.floor(Math.random()*n.randomizer),a=Math.floor(Math.random()*n.maxNumber+1),"goldCoin"!=n.object&&r>n.randomizer/2&&(n=e[0]),o=[],c=n.object,t.details.rules&&t.details.rules.contain&&(a=1,c="ground_npc_item"),[4,s.getData({url:"api/grapple-objects",method:"GET",data:null,headers:{grappleObject:c}})];case 1:for(l=i.sent(),t.details.rules&&t.details.rules.contain&&(l[0].grapplePower.grappleItem=t.details.rules.contain,l[0].grapplePower.previewPicture=t.details.rules.objectPicture,l[0].grapplePower.name=t.details.objectName?t.details.objectName:null,l[0].speed=0,l[0].absoluteLink=t.details.rules.objectPicture),u=0;u<a;u++)o=o.concat(l);return[2,o]}}))}))}function u(e){var t=e.mainGameObject,n=e.groundPlayer,r=e.allBlocks,o=e.objectIntersectionDetect;return a(this,void 0,void 0,(function(){var e,a,s,c,l,u,h,d,p,f,m,g;return i(this,(function(i){if((e=t.gameInitData.gameExtraSeconds)%200==0&&(this.playerInRange&&(this.currentBehavior="static"===this.currentBehavior?"static":"find"),this.playerInRange=!1),!n||!r||this.playerInRange)return[2,!1];if(this.x>window.innerWidth+100||this.x<-100||this.y>window.innerHeight+100||this.y<-100)return[2,!1];if(a=Math.max(this.x,n.x)-Math.min(this.x,n.x),s=Math.max(this.y,n.y)-Math.min(this.y,n.y),this.detectRange<a||this.detectRange<s)return[2,!1];if(c=0===(c=this.findAngleToShip({closestUnit:n}))?1:c,("destroy"===this.currentBehavior||"static"===this.currentBehavior&&this.playerInRange)&&(this.targetAngle=c<360?c+1:c),l={},u=this.x>=n.x,h=this.y>=n.y,d=t.gameRandomizer(30,20),e%d!=0)return[2,!1];if(20,(a||0==a)&&(s||0==s)&&!this.playerInRange){for(p=this.x,f=this.y,m=s/a,g=a;g>0&&(u&&h&&(p-=20,f-=20*m),u&&!h&&(p-=20,f+=20*m),u||h||(p+=20,f+=20*m),!u&&h&&(p+=20,f-=20*m),!(l=r.find((function(e){if(Math.max(p,e.x)-Math.min(p,e.x)<100&&Math.max(f,e.y)-Math.min(f,e.y)<100&&(e.details.collision&&o({object:{x:p,y:f,width:40,height:40},target:{x:e.x,y:e.y,width:e.width,height:e.height}})))return e}))));g-=20);return l?[2,!1]:(this.playerInRange=!0,this.currentBehavior="static"===this.currentBehavior?"static":"destroy",this.targetAngle=c,[2,!0])}return[2]}))}))}function h(e){var t=e.findBottomBlock;"find"===this.currentBehavior&&t&&!this.isRun&&!this.leftWallTouch||"find"===this.currentBehavior&&t&&!this.isRun&&!this.rightWallTouch?this.isRun=!0:"find"!==this.currentBehavior||t||this.nextGroundBlock||this.isRun||(this.isRun=!1)}function d(e){var t=e.findBottomBlock;(this.playerInRange&&t&&!this.leftWallTouch||this.playerInRange&&t&&!this.rightWallTouch||this.playerInRange&&this.nextGroundBlock&&!this.leftWallTouch||this.playerInRange&&this.nextGroundBlock&&!this.rightWallTouch)&&(this.isRun=!0),!this.playerInRange||this.nextGroundBlock||t||(this.isRun=!1)}function p(e){var t=e.mainGameObject,n=e.constructors,s=e.costumeBlocks;!function(e){var t=e.mainGameObject,n=e.levelDynamicMapBlocks,s=e.constructors,u=e.characterSelector;a(this,void 0,void 0,(function(){var e,a,h,d,p,f,m,g,v;return i(this,(function(i){switch(i.label){case 0:return e=process.env.DYNAMIC_LEVEL_ENEMY_COLLECTION_URL,a=[],[4,c.loadGroundEnemy({dynamicEnemyCollection:e})];case 1:return h=i.sent(),(d=n.filter((function(e){return e.details.type===u})))?[4,d.map((function(e){var t=h.find((function(t){return t.id===e.details.name})),n=Object.assign(e,t);n.texture=t.texture,e.details.collision=!1;var a=new s.DynamicEnemyConstructor(r({},n));return a.y-=10,a}))]:[2,!1];case 2:a=i.sent(),p=0,f=a,i.label=3;case 3:return p<f.length?(m=f[p],g=m,m.extraObjects?[4,l(m.extraObjects,m)]:[3,5]):[3,8];case 4:return v=i.sent(),[3,6];case 5:v=!1,i.label=6;case 6:g.extraObjects=v,i.label=7;case 7:return p++,[3,3];case 8:return a?(t.gameInitData.dynamicLevelEnemy=t.gameInitData.dynamicLevelEnemy.concat(o(a)),[2]):[2,!1]}}))}))}({mainGameObject:t,levelDynamicMapBlocks:s||t.gameInitData.dynamicLevelMapBlocks,constructors:n,characterSelector:"hidden_enemy_spawner"})}t.loadLevelEnemy=function(e){var t=e.levelDynamicMapBlocks,n=e.constructors;return a(this,void 0,void 0,(function(){var e,a,o,s,u,h,d,p,f;return i(this,(function(i){switch(i.label){case 0:return e=process.env.DYNAMIC_LEVEL_ENEMY_COLLECTION_URL,a=[],[4,c.loadGroundEnemy({dynamicEnemyCollection:e})];case 1:if(o=i.sent(),!(s=t.filter((function(e){return"enemy_spawner"===e.details.type||"npc_spawner"===e.details.type}))))return[2,!1];a=s.map((function(e){var t=o.find((function(t){return t.id===e.details.name})),a=Object.assign(e,t);a.texture=t.texture,e.details.collision=!1;var i=new n.DynamicEnemyConstructor(r({},a));return i.y-=10,i})),u=0,h=a,i.label=2;case 2:return u<h.length?(d=h[u],p=d,d.extraObjects?[4,l(d.extraObjects,d)]:[3,4]):[3,7];case 3:return f=i.sent(),[3,5];case 4:f=!1,i.label=5;case 5:p.extraObjects=f,i.label=6;case 6:return u++,[3,2];case 7:return t=t.map((function(e){return"enemy_spawner"!=e.details.type&&"npc_spawner"!=e.details.type&&"hidden_enemy_spawner"!=e.details.type&&"timer_enemy_spawner"===e.details.type})),process.env.GROUND_PLAYER_ALLOW_MOVE="true",[2,a]}}))}))},t.groundEnemyMove=function(e){var t=e.mainGameObject,n=e.levelInformation;return a(this,void 0,void 0,(function(){var e;return i(this,(function(r){return e=t.gameInitData.gameData.groundPlayerCharacter,this.playerInRange&&this.targetAngle>100&&this.targetAngle<=260&&(this.playerDirectionHorizontal="left"),(this.playerInRange&&this.targetAngle>280||this.playerInRange&&this.targetAngle>=0&&this.targetAngle<=80)&&(this.playerDirectionHorizontal="right"),!this.leftWallTouch||this.isJump||this.playerInRange||"find"==this.currentBehavior||(this.playerDirectionHorizontal="right"),!this.rightWallTouch||this.isJump||this.playerInRange||"find"==this.currentBehavior||(this.playerDirectionHorizontal="left"),"right"===this.playerDirectionHorizontal&&this.isRun&&(this.x+=this.speed),"left"===this.playerDirectionHorizontal&&this.isRun&&(this.x-=this.speed),!this.groundTouch&&e.groundTouch&&(this.y+=n.jumpImpuls),this.groundTouch||e.groundTouch||(this.y+=n.jumpImpuls+n.gravity),[2]}))}))},t.groundPlayerJump=function(e){var t=e.mainGameObject,n=e.allBlocks,r=e.levelInformation;return a(this,void 0,void 0,(function(){var e,a,o,s;return i(this,(function(i){return e=t.gameInitData.gameExtraSeconds,a=this.currentGroundBlock?this.currentGroundBlock.index:null,o=n.find((function(e){var t=a-1;return e.index===t})),e%10==0&&(!this.groundTouch&&this.jumpImpuls<0&&e%10==0&&(this.isRun=!0,this.isJump=!1,this.onLeader&&(this.groundTouch=!0)),this.groundTouch&&this.isJump&&!this.isJumpDown&&(s=this.jumpBlock?this.jumpBlock.height+this.height:0,o&&"leader"===o.details.type&&(s=o.height),s=s>120?120:s,this.jumpImpuls=-1*(this.jumpSpeed*r.gravity+s),this.isRun=!1,this.y+=this.jumpImpuls,this.groundTouch=!1,o&&"leader"===o.details.type&&(this.groundTouch=!0,this.isRun=!1))),[2]}))}))},t.jumpDown=function(e){e.mainGameObject.gameInitData.gameExtraSeconds%10==0&&this.groundTouch&&this.onLeader&&this.isJumpDown&&"leader"===this.currentGroundBlock.details.type&&(this.jumpImpuls=this.jumpSpeed,this.isRun=!1,this.y+=this.jumpImpuls)},t.enemyDetectNpc=function(e){var t=e.mainGameObject,n=e.npcData,r=e.allBlocks,o=e.objectIntersectionDetect;return a(this,void 0,void 0,(function(){var e,a,s,c;return i(this,(function(i){switch(i.label){case 0:if(this.playerInRange)return[2,!1];e=0,a=n,i.label=1;case 1:return e<a.length?!(s=a[e])||s.x>window.innerWidth+s.width||s.x<-100||s.y>window.innerHeight+s.height||s.y<-100?[3,3]:"enemy_spawner"===this.details.type&&"npc_spawner"===s.details.type&&s.objectPresent||"npc_spawner"===this.details.type&&"enemy_spawner"===s.details.type&&s.objectPresent||"npc_spawner"===this.details.type&&"hidden_enemy_spawner"===s.details.type&&s.objectPresent||"hidden_enemy_spawner"===this.details.type&&"npc_spawner"===s.details.type&&s.objectPresent||"timer_enemy_spawner"===this.detailstype&&"npc_spawner"===s.details.type&&s.objectPresent?[4,u.call(this,{mainGameObject:t,groundPlayer:s,allBlocks:r,objectIntersectionDetect:o})]:[3,3]:[3,4];case 2:if(c=i.sent())return[2,c];i.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t.detectPlayer=u,t.groundEnemyDecided=function(e){e.mainGameObject,e.allBlocks,this.currentBehavior},t.groundEnemyPathFinder=function(e){var t=this,n=e.mainGameObject,r=e.allBlocks,a="find"===this.currentBehavior?2:"destroy"===this.currentBehavior?4:1,i=n.gameInitData.gameExtraSeconds;if(i%5==0){if("stand"===this.currentBehavior||"static"===this.currentBehavior)return void(this.isRun=!1);var o=null,s=null,c=null,l=null,u=null,p=this.currentGroundBlock?this.currentGroundBlock.index:null;if(i%this.changeModeRandomizer!=0||this.isRun||!this.groundTouch||this.playerInRange||(this.playerDirectionHorizontal="right"===this.playerDirectionHorizontal?"left":"right",this.isRun=!0),p){s="right"===this.playerDirectionHorizontal?p+parseInt(this.currentGroundBlock.mapSizeVertical):p-parseInt(this.currentGroundBlock.mapSizeVertical);var f=r.find((function(e){return e.index===s&&e.details.collision||e.index===s&&"leader"===e.details.type}));this.nextGroundBlock=f||null}if(p&&!this.nextGroundBlock){var m="right"===this.playerDirectionHorizontal?p-parseInt(this.currentGroundBlock.mapSizeVertical)-1:p+parseInt(this.currentGroundBlock.mapSizeVertical)-1;l=r.find((function(e){return e.index===m&&e.details.collision}))}if(!this.nextGroundBlock&&this.currentGroundBlock){for(var g=function(e){if(c=r.find((function(n){var r="right"===t.playerDirectionHorizontal?p+parseInt(t.currentGroundBlock.mapSizeVertical)+e:p-parseInt(t.currentGroundBlock.mapSizeVertical)+e;return n.index===r&&n.details.collision})))return"break"},v=1;v<=a;v++){if("break"===g(v))break}this.nextBottomBlock=c||null}if((!this.nextGroundBlock&&this.isRun&&!this.playerInRange||!this.nextGroundBlock&&this.isRun&&!c)&&(this.changeModeRandomizer=Math.floor(Math.random()*this.unitRandomize+100),this.isRun=!1),(this.playerInRange&&this.leftWallTouch&&"find"!=this.currentBehavior&&this.currentGroundBlock||this.playerInRange&&this.rightWallTouch&&"find"!=this.currentBehavior&&this.currentGroundBlock||"find"===this.currentBehavior&&this.rightWallTouch&&this.currentGroundBlock||"find"===this.currentBehavior&&this.currentGroundBlock&&this.currentWallBlock||"destroy"===this.currentBehavior&&this.leftWallTouch&&this.currentGroundBlock||"destroy"===this.currentBehavior&&this.currentGroundBlock&&this.currentWallBlock)&&(this.jumpBlock=r.find((function(e){var n="right"===t.playerDirectionHorizontal?p+parseInt(t.currentGroundBlock.mapSizeVertical)-1:p-parseInt(t.currentGroundBlock.mapSizeVertical)-1;return e.index===n&&e.details.collision})),u=r.find((function(e){var n="right"===t.playerDirectionHorizontal?p+parseInt(t.currentGroundBlock.mapSizeVertical)-3:p-parseInt(t.currentGroundBlock.mapSizeVertical)-3;return e.index===n&&e.details.collision})),this.jumpBlock&&(this.isJump=!this.jumpBlock.details.deadly,this.jumpBlock.details.deadly&&(this.isRun=!1)),u&&(this.isRun=!1,this.isJump=!1)),this.playerInRange&&this.onLeader&&(this.isJump=!0),(!this.playerInRange&&c&&!this.isRun&&l||!this.isRun&&!c&&this.playerInRange&&this.jumpBlock&&!u)&&(this.isRun=!0),h.call(this,{findBottomBlock:c}),d.call(this,{findBottomBlock:c}),(u&&this.jumpBlock&&this.leftWallTouch||u&&this.jumpBlock&&this.rightWallTouch)&&(this.isRun=!1),this.playerInRange&&this.targetAngle&&this.onLeader&&this.targetAngle>20&&this.targetAngle<160&&(this.isJumpDown=!0,this.isRun=!1),this.nextGroundBlock&&this.currentGroundBlock&&!this.jumpBlock){var b=function(e){if(o=r.find((function(n){var r="right"===t.playerDirectionHorizontal?p+parseInt(t.nextGroundBlock.mapSizeVertical)-e:p-2*parseInt(t.nextGroundBlock.mapSizeVertical)-e;return n.index===r&&n.details.collision&&n.details.deadly})))return"break"};for(v=1;v<=a;v++){if("break"===b(v))break}o&&(this.isRun=!1)}if(this.currentWallBlock&&this.currentWallBlock.details.collision&&"door"===this.currentWallBlock.details.type){this.isRun=!1,this.isJump=!1,this.groundTouch=!0;var y=this.x+this.width-this.currentWallBlock.x,w=this.currentWallBlock.x+this.currentWallBlock.width-this.x;this.x+="right"===this.playerDirectionHorizontal?y-1:w,this.currentBehavior="static"===this.currentBehavior?"static":"find"}this.currentWallBlock=null}},t.groundEnemyShot=function(e){var t=e.mainGameObject,n=(e.allBlocks,e.callback),r=e.constructors;if(t.gameInitData.gameOver)return!1;var a=t.gameInitData.gameExtraSeconds;(this.shotAngle||0===this.shotAngle)&&this.playerInRange&&this.objectPresent&&a%5==0&&(this.isShot=!0,this.shotAngle=Math.floor(this.targetAngle),n.call(this,r.BulletConstruct,t,r.SoundCreator,"npc_spawner"===this.details.type?"player":"groundEnemyBullet","allGroundGameBullets"),"npc_spawner"===this.details.type&&(this.playerInRange=!1))},t.respawnEnemy=p,t.respawnEnemyByTimer=function(e){var t=e.mainGameObject,n=e.constructors,r=e.currentBlock;if(t.gameInitData.gamePause||!t.gameInitData.gameStatus)return!1;var a=t.gameInitData.gameExtraSeconds,i=t.gameInitData.dynamicLevelEnemy.filter((function(e){if("npc_spawner"!=e.details.type&&e.healthPoint>0&&e.x>-500&&e.y>-500&&e.x<window.innerWidth+500&&e.x<window.innerHeight+500)return e})),o=t.gameInitData.dynamicLevelMapBlocks;if("timer_enemy_spawner"===r.details.type&&a%(100*parseInt(r.details.spawnSeconds))==0&&i.length<r.details.maxNumberOfItem){var s=r.details.targetSpawnerId?r.details.targetSpawnerId.split(","):1;p({mainGameObject:t,constructors:n,costumeBlocks:o.filter((function(e){if("hidden_enemy_spawner"===e.details.type&&s.some((function(t){return t==e.details.spawnerHiddenId})))return e}))})}!function(e){var t=e.mainGameObject;t.gameInitData.dynamicLevelEnemy.filter((function(e){if("npc_spawner"!=e.details.type&&e.healthPoint<=0)return e})).length>100&&t.gameInitData.dynamicLevelEnemy.shift()}({mainGameObject:t})}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),o=n(9),s=n(34),c=n(11);function l(e){var t=e.price,n=e.mainGameObject.shopArea.selectedShopItem;return Math.round(t-t/100*n.tradePropertyes.salePercentage)}function u(e){var t=e.index,n=e.storage,r=e.value;n.splice(t,1,r)}function h(e){var t=e.name,n=e.putIndex,r=e.selectedIndex,a=e.storage,i=e.selectedStorage,o=e.mainGameObject,s=o.gameInitData.gameData.playerObject.data;if(!a[n]&&(o.shopArea.selectedShopItem.hangarSelectedItem&&"inside-storage"==t||0===o.shopArea.selectedShopItem.hangarSelectedItem)&&"inside-storage"==t||i&&(o.shopArea.selectedShopItem.inventorySelectedItem&&"inside-storage"==t||0===o.shopArea.selectedShopItem.inventorySelectedItem&&"inside-storage"==t))d({putIndex:n,selectedIndex:r,storage:a,selectedStorage:a,firespot:s.firespot,mainGameObject:o});else if(i&&(o.shopArea.selectedShopItem.inventorySelectedItem&&"outside-storage"==t||0===o.shopArea.selectedShopItem.inventorySelectedItem&&"outside-storage"==t)){if(i[n])return!1;d({putIndex:n,selectedIndex:r,storage:a,selectedStorage:i,firespot:s.firespot,mainGameObject:o})}}function d(e){var t=e.putIndex,n=e.selectedIndex,r=e.storage,a=e.selectedStorage,i=e.firespot,o=e.mainGameObject,s=r[n];u({index:t,storage:a,value:s=f({gun:s,firespot:i[t]})}),u({index:n,storage:r,value:null}),o.shopArea.selectedShopItem.hangarSelectedItem=null,o.shopArea.selectedShopItem.inventorySelectedItem=null}function p(e){var t=e.playerObject,n=e.item;if(n&&n.grapplePower)switch(n.grapplePower.name){case"guns_rapid":break;case"add_speed":t.addVehicleSpeed({value:n.grapplePower.value,flag:!1})}}function f(e){var t=e.gun,n=e.firespot;return n&&t?(t.firePositionX=n.shipXPosition,t.firePosition=n.shipYPosition,t):t}function m(){var e=document.querySelector("#item-description");i.hide(e)}function g(e){var t=e.selectObject,n=e.event,r=e.mainGameObject,a=document.querySelector("#item-description");a.style="margin-top: "+(n.clientY-100)+"px; margin-left: "+(n.clientX-200)+"px; ",a.innerHTML="<p>"+t.title+"</p>\n            <p>Cost: "+l({price:t.price,mainGameObject:r})+"</p>\n            <p>speed: "+t.speed+"</p>\n            <p>damage: "+t.damage+"</p>\n            <p>"+t.description+"</p>",i.show(a)}t.leaveShop=c.leaveShop,t.shopInventory=function(e){var t=this,n=e.element,i=e.mainGameObject;n.shopInventoryWrapper.innerHTML="";for(var u=i.gameInitData.gameData.playerObject,d=u.data,f=function(e){var c=o.createElements({tagName:"div",styleClass:"inventory-item",inlineStyle:"",pictureUrl:null,linkUrl:null,text:null,innerContent:d.inventory[e]?'<div class="inventory-inner-item">\n            '+("inventory weapon"===d.inventory[e].type?"<span>"+d.inventory[e].grapplePower.number+"</span>":"")+'\n            <img src="'+(d.inventory[e].loadImage?process.env.HOST+d.inventory[e].loadImage:"")+'">\n            </div>':'<div class="inventory-inner-item"></div>',attribute:null,attributeName:null,attribute1:null,attributeName1:null});c.addEventListener("mousemove",(function(t){if(!d.inventory[e])return!1;g({selectObject:d.inventory[e],event:t,mainGameObject:i})})),c.addEventListener("mouseleave",(function(e){m()})),c.addEventListener("click",(function(){return r(t,void 0,void 0,(function(){var t,n,r;return a(this,(function(a){switch(a.label){case 0:return t=i.gameInitData.gameData.playerObject.data,n=i.shopArea.selectedShopItem,r=i.shopArea.selectedShopItem.inventorySelectedItem||0===i.shopArea.selectedShopItem.inventorySelectedItem?i.shopArea.selectedShopItem.inventorySelectedItem:null,i.shopArea.selectedShopItem.inventorySelectedItem=i.shopArea.selectedShopItem.inventorySelectedItem==e?null:e,i.shopArea.selectedShopItem.hangarSelectedItem||0===i.shopArea.selectedShopItem.hangarSelectedItem?[4,p({playerObject:u,item:t.guns[n.hangarSelectedItem]})]:[3,2];case 1:return a.sent(),h({name:"outside-storage",putIndex:e,selectedIndex:n.hangarSelectedItem,storage:t.guns,selectedStorage:t.inventory,mainGameObject:i}),[3,3];case 2:(i.shopArea.selectedShopItem.inventorySelectedItem||0===i.shopArea.selectedShopItem.inventorySelectedItem)&&(r&&!t.inventory[e]||0===r&&!t.inventory[e])&&h({name:"inside-storage",putIndex:e,selectedIndex:r,storage:t.inventory,selectedStorage:t.inventory,mainGameObject:i}),a.label=3;case 3:return s.loadHangar({element:i.shopArea,mainGameObject:i}),[2]}}))}))})),n.shopInventoryWrapper.appendChild(c)},v=0;v<d.inventoryCapacity;v++)f(v);n.shopInventoryWrapper.prepend(function(e){var t=e.mainGameObject,n=o.createElements({tagName:"div",styleClass:"shop-sale-part",inlineStyle:"",pictureUrl:null,linkUrl:null,text:null,innerContent:'<div class="sale-inner-item">\n        </div>',attribute:"inventory-box",attributeName:"id",attribute1:null,attributeName1:null});return n.addEventListener("click",(function(){var e=t.gameInitData.gameData.playerObject.data,n=t.shopArea.selectedShopItem;if(!n.inventorySelectedItem&&0!=n.inventorySelectedItem&&!n.hangarSelectedItem&&0!=n.hangarSelectedItem)return!1;if(process.env.SHOP_SALE_WINDOW="true",process.env.SHOP_ACTIVE_WINDOW="true",n.inventorySelectedItem||0===n.inventorySelectedItem){var r=e.inventory[n.inventorySelectedItem],a=l({price:o=r?r.price:0,mainGameObject:t});if(!r)return!1;c.leaveShop({element:t.shopArea,mainGameObject:t,text:a?"You want to sale "+(r.title?r.title:"this item?")+"\n                    for the "+a+" credits":"You want to destroy this item?"})}else if(n.hangarSelectedItem||0===n.hangarSelectedItem){var i=e.guns[n.hangarSelectedItem],o=e.guns[n.hangarSelectedItem].price;c.leaveShop({element:t.shopArea,mainGameObject:t,text:"You want to sale "+(i?i.title:"this item?")+"\n                    for the "+l({price:o,mainGameObject:t})+" credits"})}})),n}({mainGameObject:i})),c.saleBoxLabelChange({mainGameObject:i})},t.selectInventoryItem=function(e){var t=e.index;if(!e.mainGameObject.gameInitData.gameData.playerObject.data.inventory[t])return!1;for(var n=Array.prototype.slice.call(document.querySelectorAll(".inventory-item")),r=0,a=n;r<a.length;r++){var o=a[r];i.removeClassList(o,"inventory-selected-items")}if(!t&&0!=t)return!1;i.addClassList(n[t],"inventory-selected-items")},t.inventoryFreeItem=function(e){var t=e.inventory,n=e.inventoryCapacity;if(!t||!n)return!1;for(var r={emptyItems:[],fullItems:[],firstEmptyItem:null},a=0;a<n;a++)t[a]?r.fullItems=r.fullItems.concat(r.fullItems,{index:a,item:t[a]}):t[a]||(r.firstEmptyItem||(r.firstEmptyItem={index:a,item:t[a]}),r.fullItems=r.emptyItems.concat(r.emptyItems,{index:a,item:t[a]}));return r},t.saleItem=function(e){var t=e.mainGameObject,n=t.shopArea.selectedShopItem,r=t.gameInitData.gameData.playerObject.data,a=t.gameInitData.gameData.playerObject;if(n.inventorySelectedItem||0===n.inventorySelectedItem){var i=l({price:r.inventory[n.inventorySelectedItem].price,mainGameObject:t});t.gameInitData.gameData.gameCoins+=i,u({index:n.inventorySelectedItem,storage:r.inventory,value:null}),t.shopArea.selectedShopItem.inventorySelectedItem=null}if(n.hangarSelectedItem||0===n.hangarSelectedItem){i=l({price:r.guns[n.hangarSelectedItem].price,mainGameObject:t});p({playerObject:a,item:r.guns[n.hangarSelectedItem]}),u({index:n.hangarSelectedItem,storage:r.guns,value:null}),t.shopArea.selectedShopItem.hangarSelectedItem=null,t.gameInitData.gameData.gameCoins+=i}},t.salePercentAddToPrice=l,t.putInsideInventory=function(e){var t=e.mainGameObject,n=e.saveItem,r=e.inventoryItem;t.gameInitData.gameData.playerObject.data.inventory.splice(r.index,1,n)},t.replaceItemFromStorage=u,t.putItemToStorage=h,t.assignEffectsToShip=function(e){var t=e.playerObject,n=e.item;if(n&&n.grapplePower)switch(n.grapplePower.name){case"guns_rapid":break;case"add_speed":t.addVehicleSpeed({value:n.grapplePower.value,flag:!0})}},t.disableEffects=p,t.assignGunsPosition=f,t.hideDescriptionArea=m,t.showDescriptionArea=g},function(e,t){e.exports=require("electron")},function(e,t,n){"use strict";const r=n(36),a=n(62),i=n(2),o=n(63),s=n(72),c=n(1),l=n(73),u=n(82),h=n(83),d=function(e,t,n){n=n||0,i.readFile(e,(function(r,a){return r?"ENOENT"===r.code?t(null,JSON.stringify({})):"EPERM"===r.code&&n<10?void setTimeout((function(){d(e,t,n+1)}),1e3):t(r):t(null,a)}))};t.getDefaultDataPath=u.getDefaultDataPath,t.setDataPath=u.setDataPath,t.getDataPath=u.getDataPath,t.get=function(e,n,i){r.isFunction(n)&&(i=n),n=n||{},i=i||r.noop;var o=null;a.waterfall([a.asyncify(r.partial(u.getFileName,e,{dataPath:n.dataPath})),function(e,t){o=e,s(c.dirname(o),t)},function(r,a){h.lock(u.getLockFileName(o),(function(r){return r&&"EEXIST"===r.code?t.get(e,n,i):a(r)}))},function(e){d(o,e)},function(e,t){var n={};try{n=JSON.parse(e)}catch(n){return t(new Error("Invalid data: "+e))}return t(null,n)}],(function(e,t){h.unlock(u.getLockFileName(o),(function(n){return e?i(e):i(n,t)}))}))},t.getMany=function(e,n,i){r.isFunction(n)&&(i=n,n={}),n=n||{},i=i||r.noop,a.reduce(e,{},(function(e,a,i){t.get(a,n,(function(t,n){return t?i(t):i(null,r.set(e,a,n))}))}),i)},t.getAll=function(e,n){r.isFunction(e)&&(n=e,e={}),e=e||{},n=n||r.noop,a.waterfall([r.partial(t.keys,e),function(n,i){a.reduce(n,{},(function(n,i,o){a.waterfall([r.partial(t.get,i,e),function(e,t){return t(null,r.set(n,i,e))}],o)}),i)}],n)},t.set=function(e,n,i,o){r.isFunction(i)&&(o=i),i=i||{},o=o||r.noop;var d=null;a.waterfall([a.asyncify(r.partial(u.getFileName,e,{dataPath:i.dataPath})),function(e,t){d=e;const r=JSON.stringify(n);if(!r)return t(new Error("Invalid JSON data"));s(c.dirname(d),(function(e){return t(e,r)}))},function(r,a){h.lock(u.getLockFileName(d),(function(s){return s&&"EEXIST"===s.code?t.set(e,n,i,o):a(s,d,r)}))},function(e,t,n){l(e,t,n)}],(function(e){h.unlock(u.getLockFileName(d),(function(t){return o(e||t)}))}))},t.has=function(e,t,n){r.isFunction(t)&&(n=t),t=t||{},n=n||r.noop,a.waterfall([a.asyncify(r.partial(u.getFileName,e,{dataPath:t.dataPath})),function(e,t){i.stat(e,(function(e){return e?"ENOENT"===e.code?t(null,!1):t(e):t(null,!0)}))}],n)},t.keys=function(e,n){r.isFunction(e)&&(n=e,e={}),e=e||{},n=n||r.noop,a.waterfall([function(n){n(null,e.dataPath||t.getDataPath())},function(e,t){s(e,(function(n){return t(n,e)}))},i.readdir,function(e,t){t(null,r.map(r.reject(e,(function(e){return".json"!==c.extname(e)})),(function(e){return c.basename(decodeURIComponent(e),".json")})))}],n)},t.remove=function(e,t,n){r.isFunction(t)&&(n=t),t=t||{},n=n||r.noop,a.waterfall([a.asyncify(r.partial(u.getFileName,e,{dataPath:t.dataPath})),o],n)},t.clear=function(e,n){r.isFunction(e)&&(n=e),e=e||{},n=n||r.noop;const a=e.dataPath||t.getDataPath(),i=c.join(a,"*.json");o(i,n)}},function(e,t){e.exports=require("assert")},function(e,t){e.exports=require("util")},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(13),o=n(10),s=n(4),c=n(16),l=n(4),u=n(10),h=n(28);function d(e,t){for(var n=0,r=Object.entries(e);n<r.length;n++){var a=r[n],i=a[0],o=a[1];"object"!=typeof e[i]||null==o||e[i].length||d(e[i],t),s.call(this,i,e)}function s(e,n){for(var r=0,a=Object.entries(t);r<a.length;r++){var i=a[r],o=i[0],s=i[1];o==e&&null!=s&&(this.gameInitData[o]=s)}}}t.nextLevelDataReload=function(e,t){return r(this,void 0,void 0,(function(){var n,r,p,f,m,g,v,b,y,w;return a(this,(function(a){switch(a.label){case 0:return l.hideInventory(),n=e.gameData.currentLevel,[4,i.serverRequest({level:n,shipConfiguration:1})];case 1:return r=a.sent(),m={},g={currentLevel:n,currentPoint:(p=this).gameInitData.gameData.currentPoint,playerObject:p.gameInitData.gameData.playerObject},[4,s.initGroundPlayer({DynamicUserConstructor:t.DynamicUserConstructor})];case 2:return m.gameData=(g.groundPlayerCharacter=a.sent(),g.gameCoins=p.gameInitData.gameData.gameCoins,g.levelData=r.levelData,g.levelObjects=r.levelObjects,g.grappleObjects=r.grappleObjects,g.levelSounds=p.gameInitData.gameData.levelSounds,g.preloadData=p.gameInitData.gameData.preloadData,g.gameSetings=p.gameInitData.gameData.gameSetings,g.enemyData=r.enemyData,g.controllers=p.gameInitData.gameData.controllers,g),m.enemyType=null,m.allGameSideObjects=[],m.allGameEnemies=[],m.allGameBullets=[],m.allGroundGameBullets=[],m.mapBackgroundObjects=[],m.dynamicLevelEnemy=[],m.mapKeyCode={},m.gamePause=!1,m.gameUiPause=!1,m.backScreenPause=!0,m.gameOver=!1,m.grappleObjectOnScreen=!1,m.tradepostInRange=!1,m.inventoryActive=!1,m.shopActive=!1,m.subBossPresent=!1,m.gatePresent=!1,m.gameExtraSeconds=0,m.tradeShipTimeToUndock=0,f=m,setTimeout((function(){p.gameInitData.warpObjects=[],p.gameInitData.timeToEressLevel=6,p.gameInitData.levelChange=!1,p.gameInitData.levelWindowDescription=!1,process.env.BOSS_LOAD_AT_LEVEL="false",h.fillJournalDefaultData({mainGameObject:p})}),5e3),process.env.GROUND_PLAYER_ALLOW_MOVE=r.levelData.dynamicLevelsActive?"false":"true",d.call(this,this.gameInitData,f),this.gameInitData.dynamicLevelsActive=!!r.levelData.dynamicLevelsActive,v=this.gameInitData,r.levelData.dynamicLevelsActive?[4,o.loadLevelMap({levelMapName:r.levelData.dynamicBlockMap+".json",constructors:t})]:[3,4];case 3:return b=a.sent(),[3,5];case 4:b=[],a.label=5;case 5:return v.dynamicLevelMapBlocks=b,y=this.gameInitData,r.levelData.dynamicLevelsActive?[4,c.loadLevelEnemy({levelDynamicMapBlocks:p.gameInitData.dynamicLevelMapBlocks,constructors:t})]:[3,7];case 6:return w=a.sent(),[3,8];case 7:w=[],a.label=8;case 8:return y.dynamicLevelEnemy=w,this.mapSoundChanger({soundStatus:"regular_level"}),u.backgroundAdjustment({mainGameObject:this}),[2]}}))}))},t.horizontalVerticalSearch=d,t.renewPlayerShip=function(e){var t=e.originData,n=e.newData;l.hideInventory();for(var r=0,a=Object.entries(t);r<a.length;r++){var i=a[r],o=i[0];i[1];n[o]&&t[o]!=n[o]&&(t[o]=n[o])}return t}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r};Object.defineProperty(t,"__esModule",{value:!0});var a=n(88);function i(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];e.save(),e[t].apply(e,n),e.restore()}t.createWindow=a.createWindow,t.createShapeRoundBorder=a.createShapeRoundBorder,t.createRoundButton=a.createRoundButton,t.draw=i,t.createImage=function(e,t){for(var n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];i.apply(void 0,r([e,"drawImage",t],n))},t.clearField=function(e,t,n){i(e,"clearRect",0,0,t,n)}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(14),s=n(17),c=n(35),l=n(11);function u(e,t,n){return a(this,void 0,void 0,(function(){var a,o,s,c,l,u;return i(this,(function(i){return(a=e.gameRandomizer(t.probability))>10&&"goldCoin"!=t.name||a>20&&"lifepoint"!=t.name?[2,!1]:(o=e,s=e.gameInitData.dynamicLevelsActive?-1e-7:t.speed,c=this,l={x:t.x?t.x+o.gameRandomizer(c.width):window.innerWidth+100,y:t.y?t.y+o.gameRandomizer(c.height):o.gameRandomizer(window.innerHeight),sx:0,sy:0,objectOwner:t.objectOwner,sWidth:t.imageWidth/t.numberOfItems,sHeight:t.imageHeight,width:t.width,height:t.height,animationSteps:t.animationSteps,target:null,numberOfItems:t.numberOfItems,absoluteLink:t.absoluteLink?t.absoluteLink:null,texture:t.absoluteLink?t.absoluteLink:t.skinName,speed:s,picturesWidth:t.imageWidth,healthPoint:t.healthPoint,damage:t.damage,isBackground:null,explosion:t.explosionAnimation,pointsPerUnit:t.pointsPerUnit,isGrapple:t.isGrapple,grapplePower:t.grapplePower,sound:t.sound},(u=new n(r({},l))).img.onload=function(){e.gameInitData.grappleObjectOnScreen=!0,e.gameInitData.allGameSideObjects=e.gameInitData.allGameSideObjects.concat(u)},u.loadTexture(),[2])}))}))}t.loadGrabbleToSideObject=u,t.initGrappleObject=function(e,t){return a(this,void 0,void 0,(function(){var n,r,a,o,s;return i(this,(function(i){if(this.gameInitData.grappleObjectOnScreen)return[2,!1];if(n=this.showGameInfo(),r=n.gameData,a=r.levelData,o=r.grappleObjects,this.gameRandomizer(a.grapleObjectProbability)<1){if(!(s=o[this.gameRandomizer(o.length)]))return[2,!1];if(!s.grapplePower)return[2,!1];switch(s.grapplePower.name){case"life":if(t.numberOflife>=t.maxOfLife-1)return[2]}u(this,s,e)}return[2]}))}))},t.addPlayerLife=function(e){e.allGameSideObjects;var t=e.playerShipData;e.mainGameObject,t.numberOflife+=this.grapplePower.value},t.collectCoin=function(e){e.allGameSideObjects,e.playerShipData,e.mainGameObject.showGameInfo().gameData.gameCoins+=this.grapplePower.value},t.collectObjectsToInventory=function(e){e.allGameSideObjects,e.playerShipData;var t=e.mainGameObject;return a(this,void 0,void 0,(function(){var e,n,r,a,u,h,d;return i(this,(function(i){switch(i.label){case 0:return e=t.gameInitData.gameData.playerObject,n=e.data,r=s.inventoryFreeItem({inventory:n.inventory,inventoryCapacity:n.inventoryCapacity}),a={usercoins:1/0,itemName:this.grapplePower.content.name},r.firstEmptyItem?(u="market"===this.grapplePower.store?process.env.SHOP_STORE_ITEMS:process.env.SHOP_GUNS_URL,[4,o.getShopServerData({shopUrl:u,headers:a})]):(t.shopArea.shopErrorMessage.innerHTML="Your`s inventory is full",[2,!1]);case 1:return h=i.sent(),"inventory weapon"===this.grapplePower.type&&(d=c.findIntInventory({inventory:n.inventory,searchObject:h.data}),l.inventoryItemGunsAssign({mainGameObject:t,data:h.data,targetData:d,buying:!1}),d)?[2]:(s.putInsideInventory({mainGameObject:t,saveItem:h.data,inventoryItem:r.firstEmptyItem}),[2])}}))}))}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),i=n(5),o=n(0),s=r(n(8));function c(e){var t=e.mainGameObject;Math.floor(this.x)%10==0&&a.explosionFire({targetData:this,mainGameObject:t,hitObject:this,SideObject:s.SideObject,explosion:"smoke"})}function l(e){var t=e.bulletSpeed,n=e.angle,r=Math.floor(n/91),a=parseFloat((n/90-r).toFixed(2)),i=function(e){var t=e.sector,n=e.sectorIndex,r=e.sectorIndex2,a=e.bulletSpeed,i=0,o=0;switch(t){case 0:i=r*a,o=n*a;break;case 1:o=r*a,i=n*a*-1;break;case 2:i=r*a*-1,o=n*a*-1;break;case 3:o=r*a*-1,i=n*a;break;default:i=r*a,o=n*a}return{x:i,y:o}}({sector:r,sectorIndex:a,sectorIndex2:1-a,bulletSpeed:t}),o=i.x;return{angle:n,verticalSpeed:i.y,horizontalSpeed:o}}t.moveBullets=function(e,t){switch(this.type){case"blaster":h.call(this);break;case"beam":(function(){this.x>-10?this.width+=-1*this.bulletSpeed:this.width>0&&(this.x=0,this.width-=-1*this.bulletSpeed)}).call(this),h.call(this);break;case"rocket":c.call(this,{mainGameObject:t}),h.call(this);break;case"homing_rocket":this.lastSpeed=this.lastSpeed?this.lastSpeed:this.bulletSpeed,c.call(this,{mainGameObject:t}),h.call(this);var n=t.gameInitData.allGameEnemies;if(n.length<0)return!1;var r=i.findCloseObject.call(this,{allGameEnemies:n});if(!r)return!1;var a=i.findAngleToShip.call(this,{closestUnit:r});this.degree=a||this.degree;var s=l({bulletSpeed:this.lastSpeed,angle:a});this.verticalSpeed=s.verticalSpeed,this.bulletSpeed=s.horizontalSpeed;break;case"nuclear_blast":(function(){this.x-=this.bulletSpeed/2,this.y-=this.bulletSpeed/2,this.width+=this.bulletSpeed,this.height+=this.bulletSpeed}).call(this),u.call(this,{mainGameObject:t});break;case"defence_shield":(function(e){var t=e.mainGameObject.gameInitData.gameData.playerObject;this.x=t.x-30,this.y=t.y-30,this.width=t.width+60,this.height=t.height+60,this.shieldTiming=this.shieldTiming?this.shieldTiming+1:1,this.shieldTiming%1e3==0&&(this.objectPresent=!1)}).call(this,{mainGameObject:t}),u.call(this,{mainGameObject:t});break;default:h.call(this)}function u(e){var t=e.mainGameObject.gameInitData.allGameBullets;if(!t)return!1;for(var n=0,r=t;n<r.length;n++){var a=r[n],i=o.objectIntersectionDetect({object:this,target:a});i&&"nuclear_blast"!=a.type&&i&&"defence_shield"!=a.type&&i&&"homing_rocket"!=a.type&&i&&"rocket"!=a.type&&i&&"player"!=a.objectOwner&&"defence_shield"!=a.type&&(a.objectPresent=!1)}}function h(){this.x+=this.bulletSpeed,this.y+=this.verticalSpeed}},t.bulletSpeed=l},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(27),o=n(4),s=n(9),c=n(28);function l(e){var t=e.currentDialogCharacter,n=e.data,r=e.searchTarget,a=e.mainGameObject,i=e.requireData,l=e.constructors,u=e.groundPlayer;if(!t.details.dialog)return!1;o.openInventory(),function e(t){var n=t.currentDialogCharacter,r=t.currentDialog,a=t.data,i=t.searchTarget,o=t.mainGameObject,l=t.requireData,u=t.constructors,h=t.groundPlayer;if(!n||0!=r&&!r||!n.details.dialog)return!1;var p=n.details.dialog.default,f=n.details.dialog.dialogAnswers,g=document.querySelector("#backpack-body"),v=(new Date).getTime();n.idStartDialog&&0===r&&(r=n.idStartDialog);g.innerHTML="";var b=s.createSimpleElements({tagname:"div",classList:"dialog-header",innerText:"\n        <h3>"+p.name+'</h3>\n        <img class="dialog-picture" src="'+(p.facePictureAbsolute?p.facePictureAbsolute:process.env.HOST+p.facePicture)+'" alt="'+p.name+'">',idName:null});if(g.appendChild(b),!f)return!1;var y=f.find((function(e){return e.id==r}));if(!y||!y.questions)return!1;for(var w=s.createSimpleElements({tagname:"div",classList:"dialog-body",innerText:'<p class="dialog-text-wrapper" id="main-dialog-arrea-'+v+'">'+y.text+"</p>",idName:null}),x=function(t){var r=s.createSimpleElements({tagname:"button",classList:"answer-dialog-button",innerText:"\n            <p>"+t.text+"</p>\n          ",idName:null});r.addEventListener("click",(function(){if(!function(e){var t=e.currentDialogCharacter,n=e.inventory,r=e.targetDialog,a=e.dialogTextId,i=e.mainGameObject,o=document.querySelector("#"+a),s=t.details,l=s.rules.require,u=s.dialog.dialogAnswers.find((function(e){return e.id==r})),h=m({data:n,searchTarget:l}),d=!0;if(u&&l){if(u.numberOfRequireItems)if(c.writeDataToJournal({mainGameObject:i,dialogArea:u,requireData:h,npcDetails:s,requireObject:l}),h)(d=!!(u.numberOfRequireItems&&h.numberOfItems>=parseInt(u.numberOfRequireItems)))||(o.innerHTML="I cant do that, first i need <span>"+u.numberOfRequireItems+"</span>\n                    <span>"+l.split("_").join(" ")+"</span> you got <span>"+(h.numberOfItems?h.numberOfItems:0)+"</span>",t.idStartDialog=t.details.defaultRequestDialogId?t.details.defaultRequestDialogId:0);else if(u.numberOfRequireItems)return o.innerHTML="I cant do that, first i need <span>"+u.numberOfRequireItems+"</span>\n                <span>"+l.split("_").join(" ")+"</span>",t.idStartDialog=t.details.defaultRequestDialogId?t.details.defaultRequestDialogId:0,!1}else u&&s.dialog.default.journalTask&&"give_object"===u.action&&s.rules.contain&&c.writeDataToJournal({mainGameObject:i,dialogArea:u,requireData:h,npcDetails:s,requireObject:l});return d}({currentDialogCharacter:n,inventory:h.inventory,targetDialog:t.id,dialogTextId:"main-dialog-arrea-"+v,mainGameObject:o}))return!1;e({currentDialogCharacter:n,currentDialog:parseInt(t.id),data:a,searchTarget:i,mainGameObject:o,requireData:l,constructors:u,groundPlayer:h}),"give_object"===y.action&&(n.idStartDialog=n.details.defaultSuccessDialogId?n.details.defaultSuccessDialogId:0,l=m({data:h.inventory,searchTarget:o.mapNearActiveElement.details.rules.require}),d({mainGameObject:o,requireData:l,constructors:u,groundPlayer:h,currentDialogCharacter:n}))})),w.appendChild(r)},O=0,S=y.questions;O<S.length;O++){var j=S[O];x(j)}g.appendChild(w)}({currentDialogCharacter:t,currentDialog:0,data:n,searchTarget:r,mainGameObject:a,requireData:i,constructors:l,groundPlayer:u}),process.env.GROUND_CHARACTERS_INVENTORY="true"}function u(e){var t=e.mainGameObject,n=e.player,r=e.item,a=t.returnContext();t.mapNearActiveElement=r;var i=r.details;return i.rules.requireText&&h(a,i.rules.requireText,n.x,n.y+70,"red"),(i.rules.successText&&!i.rules.requireText&&!i.rules.tips||"door"===i.type&&i.rules.successText)&&h(a,i.rules.successText,n.x,n.y-50,"white"),i.rules.tips&&h(a,i.rules.tips,n.x,n.y-20,"orange"),process.env.GROUND_ACTIVE_BLOCK_IN_RANGE="true",r}function h(e,t,n,r,a){t.split("*").forEach((function(t,i){e.gameDialogField.shadowColor="rgba(0, 0, 0, 1)",e.gameDialogField.shadowBlur=4,e.gameDialogField.font="bold 14px Courier New",e.gameDialogField.textAlign="left",e.gameDialogField.fillStyle=a,e.gameDialogField.fillText(t,n,r+12*i)}))}function d(e){var t=e.mainGameObject,n=e.requireData,r=e.constructors,a=e.groundPlayer,i=e.currentDialogCharacter;if(t.mapNearActiveElement.details.rules.contain&&!t.mapNearActiveElement.details.rules.require||t.mapNearActiveElement.details.rules.require&&n){"exit"==t.mapNearActiveElement.details.rules.contain&&g({mainGameObject:t,constructors:r});var o=t.mapNearActiveElement.details,s=o.rules.objectPicture?o.rules.objectPicture:process.env.HOST+o.texture;return t.mapNearActiveElement.details.rules.contain&&a&&s&&(p({currentDialogCharacter:i,requireData:n,groundPlayer:a,mainGameObject:t}),t.mapNearActiveElement.details.deleteFromItemsRequest&&p({currentDialogCharacter:t.mapNearActiveElement,requireData:n,groundPlayer:a,mainGameObject:t,deleteSingleItem:!0}),f({groundPlayer:a,data:t.mapNearActiveElement.details.rules.contain,previewPicture:s,name:t.mapNearActiveElement.details.objectName?t.mapNearActiveElement.details.objectName:null})),t.mapNearActiveElement.details.rules.tips=null,t.mapNearActiveElement.details.rules.contain=null,t.mapNearActiveElement.details.rules.requireText=null,void(t.mapNearActiveElement.details.rules.require=null)}}function p(e){var t=e.currentDialogCharacter,n=e.requireData,r=e.groundPlayer,a=e.mainGameObject,i=e.deleteSingleItem,o=void 0!==i&&i;if(!t)return!1;if(!t.details.rules.require)return!1;var s=r.inventory,l=n.innerData,u=(n.numberOfItems,s.find((function(e){return e.innerData===l})));o||c.completeJournalTask({mainGameObject:a,allRequireObjects:u}),o?function(e){var t=e.groundPlayer,n=e.allRequireObjects,r=t.inventory,a=r.indexOf(n);r[a].numberOfItems&&(r[a].numberOfItems>0&&(r[a].numberOfItems-=1),0===r[a].numberOfItems&&t.inventory.splice(r.indexOf(n),1))}({groundPlayer:r,allRequireObjects:u}):r.inventory.splice(s.indexOf(u),1)}function f(e){var t=e.groundPlayer,n=e.data,r=e.previewPicture,a=e.name;if(o.hideInventory(),function(e){var t=e.data,n=m({data:e.inventory,searchTarget:t});n&&(n.numberOfItems+=1);return n}({data:n,inventory:t.inventory}))return!1;t.inventory=t.inventory.concat({innerData:n,texture:r,numberOfItems:1,name:a})}function m(e){var t=e.data,n=e.searchTarget;return!(t.length<=0||!t)&&t.find((function(e){return e.innerData===n}))}function g(e){var t=e.mainGameObject,n=e.constructors;return r(this,void 0,void 0,(function(){var e,r,i,o;return a(this,(function(a){switch(a.label){case 0:return[4,t.gameInitData.mapBackgroundObjects];case 1:for(e=a.sent(),r=0,i=e;r<i.length;r++)(o=i[r]).speed=o.defaultSpeed;return t.gameInitData.dynamicLevelsActive=!1,t.gameInitData.levelChange=!0,t.warpEffect(n),[2]}}))}))}t.useObject=function(e){var t,n=e.mainGameObject,r=e.player,a=e.item;if(a.objectOwner&&!a.objectPresent)return!1;switch(a.details.type){case"exit":case"terminal_object":case"spawner":case"door":t=u({mainGameObject:n,player:r,item:a});break;case"npc_spawner":if(r.currentDialogCharacter=a,process.env.GROUND_NPC_DIALOG_ACTIVE="true","true"===process.env.GROUND_NPC_DIALOG_ACTIVE&&"true"===process.env.GROUND_CHARACTERS_INVENTORY)break;t=u({mainGameObject:n,player:r,item:a});break;case"teleport_door":t=u({mainGameObject:n,player:r,item:a});break;case"read_terminal":if(r.currentDialogCharacter=a,process.env.GROUND_NPC_DIALOG_ACTIVE="true","true"===process.env.GROUND_NPC_DIALOG_ACTIVE&&"true"===process.env.GROUND_CHARACTERS_INVENTORY)break;t=u({mainGameObject:n,player:r,item:a});break;default:return r.currentDialogCharacter=null,"true"===process.env.GROUND_NPC_DIALOG_ACTIVE&&r.isRun&&(process.env.GROUND_NPC_DIALOG_ACTIVE="false",o.hideInventory()),t}return t},t.displayText=u,t.interactWithObjects=function(e){var t=e.mainGameObject,n=e.constructors,r=t.gameInitData.gameData.groundPlayerCharacter;if(i.doorFunctionality.call(r,{mainGameObject:t,constructors:n}),i.teleportFunctionality.call(r,{mainGameObject:t}),"true"===process.env.GROUND_ACTIVE_BLOCK_IN_RANGE){var a=void 0;if(!t.mapNearActiveElement)return!1;if(r.currentDialogCharacter)return l({currentDialogCharacter:r.currentDialogCharacter,data:r.inventory,searchTarget:t.mapNearActiveElement.details.rules.require,mainGameObject:t,requireData:a,constructors:n,groundPlayer:r}),!1;d({mainGameObject:t,requireData:a=m({data:r.inventory,searchTarget:t.mapNearActiveElement.details.rules.require}),constructors:n,groundPlayer:r,currentDialogCharacter:null})}},t.saveObjectToBackPack=f,t.searchInPlayerInventory=m,t.levelRestore=g},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(26),o=n(4),s=n(15);function c(e){var t=e.mainGameObject,n=e.door,r=e.constructors;if(!n.details.sound)return!1;s.initSoundObject({SoundCreator:r.SoundCreator,mainGameObject:t,soundProps:{soundUrl:n.details.sound.main,soundLoop:!1}})}t.elevatorPlayerMove=function(e){e.mainGameObject;var t=e.levelInformation,n=e.elevator,r=e.player;if("groundPlayer"!=r.objectOwner)return!1;var a=t.gravity;"vertical"===n.details.moveDirection?(t.jumpImpuls=Math.sign(n.details.speed)>0?-1:0,r.onElevatorSpeed=Math.sign(n.details.speed)>0?-1*(n.details.speed+a-1):n.details.speed):"horizontal"===n.details.moveDirection&&(t.horizontalSpeed=n.details.currentDirection?n.details.speed/5:n.details.speed/5*-1,t.jumpImpuls=0,r.onElevatorSpeed=0),r.ceilingTouch=!1},t.elevatorMove=function(e){if(e.mainGameObject,!this.details)return!1;if("elevator"===this.details.type){var t=this.details.currentValueOfMove,n=this.details.valueOfMove;this.details.currentDirection?("vertical"===this.details.moveDirection&&(this.y+=this.details.speed/5),"horizontal"===this.details.moveDirection&&(this.x+=this.details.speed/5),this.details.currentValueOfMove-=this.details.speed/5,t<=0&&(this.details.currentDirection=!1)):this.details.currentDirection||("vertical"===this.details.moveDirection&&(this.y-=this.details.speed/5),"horizontal"===this.details.moveDirection&&(this.x-=this.details.speed/5),this.details.currentValueOfMove+=this.details.speed/5,t>=n&&(this.details.currentDirection=!0))}},t.stairsMove=function(e){var t=e.mainGameObject,n=e.levelInformation,r=e.stairs,a=e.player,i=(e.x,e.y,r.height/r.width),o=t.gameInitData.gameExtraSeconds;if(t.gameInitData.gameData.groundPlayerCharacter,a.onStairs=!0,"groundEnemy"===a.objectOwner||"groundNPC"===a.objectOwner)return o%5==0?(this.y+=this.jumpImpuls,"stairs-left"===r.details.type&&a.isRun?a.y+="right"===a.playerDirectionHorizontal?-1*(n.gravity+2*i):0:"stairs-right"===r.details.type&&a.isRun&&(a.y+="right"===a.playerDirectionHorizontal?0:-1*(n.gravity+2*i)),this.rightWallTouch=!1,this.leftWallTouch=!1,!1):(a.groundTouch=!0,!1);if(a.onStairs=!0,!a.isRun)return a.groundTouch=!0,n.jumpImpuls=-1,(a.y<r.y&&a.onStairs&&a.x<=r.x&&"stairs-left"===r.details.type||a.y<r.y&&a.onStairs&&a.x+a.width/2<=r.x+r.width&&"stairs-right"===r.details.type)&&(a.groundTouch=!1,n.jumpImpuls=n.gravity),!1;Math.max(a.x+a.width,r.x),Math.min(a.x+a.width,r.x),"stairs-left"===r.details.type?(n.jumpImpuls="right"===a.playerDirectionHorizontal?-1*n.gravity:n.gravity,a.groundTouch=!1):"stairs-right"===r.details.type&&a.isRun&&(n.jumpImpuls="right"===a.playerDirectionHorizontal?n.gravity:-1*(n.gravity+2*i),a.groundTouch=!1)},t.doorFunctionality=function(e){var t=e.mainGameObject,n=e.constructors,r=this.currentWallBlock,a=this.currentGroundBlock,o=t.gameInitData.gameData.levelData,c=t.gameInitData.dynamicLevelMapBlocks,l=(t.gameInitData.gameExtraSeconds,a?a.index:null),u=c.find((function(e){var t=l-1;return e.index===t}));if(!r||a===r||u===r&&this.x+this.width>r.x+r.width&&this.x<r.x+r.width-5)return!1;if("door"===r.details.type){if(r.details.rules.require)if(!i.searchInPlayerInventory({data:this.inventory,searchTarget:r.details.rules.require}))return r.details.sound&&s.initSoundObject({SoundCreator:n.SoundCreator,mainGameObject:t,soundProps:{soundUrl:r.details.sound.second,soundLoop:!1}}),!1;!0===r.details.collision?(r.details.rules.successText="door is open",r.details.collision=!1):(r.details.rules.successText="door is closed",r.details.collision=!0),o.horizontalSpeed=3}},t.teleportFunctionality=function(e){var t=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,n,r,s,c,l,u;return a(this,(function(a){switch(a.label){case 0:return e=t.gameInitData.dynamicLevelMapBlocks,n=this.currentGroundBlock,r=n?n.index:null,n&&r?(s=e.find((function(e){var t=r-1;return e.index==t})))&&s.details?"teleport_door"!==s.details.type?[3,2]:s.details.rules.require&&!i.searchInPlayerInventory({data:this.inventory,searchTarget:s.details.rules.require})?[2,!1]:(s.details.rules.doorId,c=s.details.rules.targetId,(l=e.filter((function(e){if(e.details)return"teleport_door"===e.details.type})).find((function(e){if(e.details.rules)return c==e.details.rules.doorId})))?[4,o.playerChangeMapPosition({newSpawnPoint:l,mainGameObject:t})]:[2,!1]):[2,!1]:[2,!1];case 1:u=a.sent(),function(e){for(var t=e.mainGameObject,n=e.positionRange,r=(t.gameInitData.gameData.levelData,t.gameInitData.mapBackgroundObjects),a=0,i=r;a<i.length;a++){var o=i[a];o.y+=o.defaultSpeed/10*(n.yRangeCompensation-1)}}({mainGameObject:t,positionRange:u}),a.label=2;case 2:return[2]}}))}))},t.openClosedDoorAnimation=function(e){var t=e.currentWallBlock,n=e.mainGameObject,r=e.constructors,a=n.gameInitData.gameExtraSeconds;if("door"!=t.details.type)return!1;var i=t.details.collision,o=t.details.numberOfItems,s=t.details.sWidth;a%5==0&&(i&&t.sx>0?(t.sx-=s,c({mainGameObject:n,door:t,constructors:r})):!i&&t.sx>=0&&t.sx<s*(o-1)&&(t.sx+=s,c({mainGameObject:n,door:t,constructors:r})))},t.leadersFunctionality=function(){return"groundEnemy"!==this.objectOwner&&"groundNPC"!==this.objectOwner&&(!this.currentGroundBlock||"leader"!=this.currentGroundBlock.details.type)},t.deadlyBlocks=function(e){var t=e.mainGameObject,n=e.curentBlock,r=e.constructors;if(!n.details)return!1;var a=t.gameInitData.gameExtraSeconds;if("groundEnemy"!=this.objectOwner&&"groundNPC"!=this.objectOwner&&n.details.deadly){var i=t.gameInitData.dynamicLevelEnemy;if(a%50==0&&"deadly-spikes"!=n.details.id&&"deadly-ice-spikes-1"!=n.details.id||"deadly-spikes"===n.details.id||"deadly-ice-spikes"===n.details.id){var s=[].concat(t.gameInitData.dynamicLevelMapBlocks,i);o.positionToSpawner({mainGameObject:t,allBlocks:s}),o.groundPlayerMinusLife({mainGameObject:t,constructors:r})}}else!n.details.deadly||"groundEnemy"!==this.objectOwner&&"groundNPC"!==this.objectOwner||(this.healthPoint-=1,this.healthPoint<=0&&(this.objectPresent=!1))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);function a(e){var t=e.mainGameObject,n=t.showGameInfo(),r=t.gameInitData.gameData.playerObject.journal;if(r.levelTasks&&!r.levelTasks[n.gameData.levelData.level]&&n.gameData.levelData.level){var a=n.gameData.levelData.description,i={levelName:n.gameData.levelData.description.name,levelDescription:a.levelMainTask?a.levelMainTask:a.description,level:n.gameData.levelData.level,taskActive:!1,levelTasks:[]};r.levelTasks[n.gameData.levelData.level]=i}}t.openJournal=function(e){var t=e.mainGameObject,n=e.userShipData,i=(t.showGameInfo(),n.journal),o=document.querySelector("#backpack-body");o.innerHTML="","false"===process.env.GROUND_CHARACTERS_INVENTORY?(a({mainGameObject:t}),function(e){for(var t=e.userShipJournal,n=e.backpackBody,r=e.mainGameObject.showGameInfo(),a='<h3 class="side-panel-name">Journal<p>Press J to close</p></h3>',i=Object.assign([],t.levelTasks).reverse(),o=0,s=i;o<s.length;o++){var c=s[o];c&&(a+='\n        <div class="game-ranked-data">\n            <h4>Enemy log</h4>\n            <p>enemy ships: '+t.defaultData.numberFlyOfEnemy+"</p>\n            <p>enemy units: "+t.defaultData.numberOfGroundEnemy+'</p>\n        </div>\n        <ul class="journal-list-container">\n            <h4 class="'+(r.gameData.levelData.level!=c.level?"complete-task":"")+'">Level '+c.level+" "+c.levelName+'</h4>\n            <li class="'+(c.taskActive||r.gameData.levelData.level!=c.level?"complete-task":"active-task")+'">\n                '+(c.levelMainTask?c.levelMainTask:c.levelDescription)+'\n            </li>\n            <ul class="journal-level-inner-data">'+l(c.levelTasks,c)+"</ul>\n        </ul>")}function l(e,t){var n="";if(!e)return n;for(var a=0,i=e;a<i.length;a++){var o=i[a],s=o.numberOfItems?o.dialogOwner+" require: "+o.numberOfItems+" "+o.requireObject:o.requireObject?o.requireObject:null;s&&(n+='<li class="'+(o.taskActive||r.gameData.levelData.level!=t.level?"complete-task":"active-task")+'">\n            <p>'+s+"</p></li>")}return n}n.innerHTML=a}({userShipJournal:i,backpackBody:o,mainGameObject:t}),r.openInventory()):r.hideInventory()},t.fillJournalDefaultData=a,t.writeDataToJournal=function(e){var t=e.mainGameObject,n=e.dialogArea,r=(e.requireData,e.npcDetails),i=e.requireObject,o=t.showGameInfo(),s=t.gameInitData.gameData.playerObject.journal,c=r.dialog;if(s.levelTasks&&!s.levelTasks[o.gameData.levelData.level]&&a({mainGameObject:t}),s.levelTasks[o.gameData.levelData.level]){if(s.levelTasks[o.gameData.levelData.level].levelTasks.find((function(e){return e.id===i})))return!1;var l=void 0;n&&c.default.journalTask?"give_object"===n.action&&r.rules.contain&&(l={id:i,requireObject:c.default.journalTask,numberOfItems:null,dialogOwner:c.default.name,taskActive:!1}):l={id:i,requireObject:i.split("_").join(" "),numberOfItems:parseInt(n.numberOfRequireItems),dialogOwner:c.default.name,taskActive:!1},s.levelTasks[o.gameData.levelData.level].levelTasks.push(l)}},t.completeJournalTask=function(e){var t=e.mainGameObject,n=e.allRequireObjects,r=t.showGameInfo().gameData.levelData.level,a=t.gameInitData.gameData.playerObject.journal;if(!n)return!1;a.levelTasks[r].levelTasks.find((function(e){return e.id===n.innerData})).taskActive=!0}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=i(n(8)),s=n(0),c=n(35),l=n(17),u=n(11),h=n(3),d=n(4),p=n(26),f=n(27),m=n(48),g=n(28),v=n(4),b=n(15);function y(e){var t=e.mainGameObject,n=e.controlKeys,r=e.event,a=t.gameInitData.gameData.playerObject;if("false"===process.env.GROUND_PLAYER_ALLOW_MOVE)return!1;if(t.gameInitData.dynamicLevelsActive)n.inventory.some((function(e){return r.keyCode==e}))&&d.showGroundPlayerInventory({mainGameObject:t}),n.useKey.some((function(e){return r.keyCode==e}))&&p.interactWithObjects({mainGameObject:t,constructors:o}),n.miniMap.some((function(e){return r.keyCode==e}))&&m.createMapRenderField({mainGameObject:t}),n.journal.some((function(e){return r.keyCode==e}))&&g.openJournal({mainGameObject:t,userShipData:a});else{if(n.inventory.some((function(e){return r.keyCode==e}))&&function(e){var t=e.mainGameObject;if(!t.gameInitData.gameStatus||t.gameInitData.gameOver||t.gameInitData.gameWin||t.gameInitData.levelChange)return!1;t.gameInitData.inventoryActive||t.gameInitData.gamePause?t.gameInitData.inventoryActive&&(t.gameInitData.inventoryActive=!1,u.leaveShop({element:t.shopArea,mainGameObject:t,text:"Return to game?"})):(t.gameInitData.inventoryActive=!0,t.gameInitData.gamePause=!0,u.enterToTheShopDialog({mainGameObject:t,tradePropertyes:null}),h.hide(t.shopArea.shopArea))}({mainGameObject:t}),t.gameInitData.gamePause)return!1;n.down.some((function(e){return r.keyCode==e}))&&a.moveShip({xPos:0,yPos:a.data.speed}),n.left.some((function(e){return r.keyCode==e}))&&a.moveShip({xPos:-1*a.data.speed,yPos:0}),n.right.some((function(e){return r.keyCode==e}))&&a.moveShip({xPos:a.data.speed,yPos:0}),n.up.some((function(e){return r.keyCode==e}))&&a.moveShip({xPos:0,yPos:-1*a.data.speed}),n.rocket.some((function(e){return r.keyCode==e}))&&x({userShipData:a,mainGameObject:t,name:"rocket"}),n.homingRocket.some((function(e){return r.keyCode==e}))&&x({userShipData:a,mainGameObject:t,name:"Homing Rocket"}),n.destroyEnemy.some((function(e){return r.keyCode==e}))&&x({userShipData:a,mainGameObject:t,name:"Nuclear Blast"}),n.shield.some((function(e){return r.keyCode==e}))&&x({userShipData:a,mainGameObject:t,name:"Defence Shield"}),n.journal.some((function(e){return r.keyCode==e}))&&g.openJournal({mainGameObject:t,userShipData:a})}}function w(e){var t=e.key,n=e.mapKeyCode;return!("83"===t&&n[68]||"68"===t&&n[83]||"83"===t&&n[65]||"65"===t&&n[83])}function x(e){var t=e.userShipData,n=e.mainGameObject,r=e.name,a=t.data.inventory,i=c.findIntInventory({inventory:a,searchObject:{name:r}});if(!i)return!1;!function(e){var t=e.userShipData,n=e.mainGameObject,r=e.rocketPresent;t.data.inventory[r.index].grapplePower.number-=1,s.bulletsCreateModule.call(t,{item:t.data.inventory[r.index].grapplePower.value,mainGameObject:n,owner:"player",BulletConstruct:o.BulletConstruct,SoundCreator:o.SoundCreator,bulletArray:"allGameBullets"}),t.data.inventory[r.index].grapplePower.number<=0&&l.replaceItemFromStorage({index:r.index,storage:t.data.inventory,value:null})}({userShipData:t,mainGameObject:n,rocketPresent:i})}function O(e){var t=e.xPos,n=void 0===t?0:t,r=e.yPos,a=void 0===r?0:r,i=e.mainGameObject,o=e.playerDirection;if(i.gameInitData.gamePause||!i.gameInitData.gameStatus||"false"===process.env.GROUND_PLAYER_ALLOW_MOVE)return!1;var s=i.gameInitData.gameData.groundPlayerCharacter,c=i.gameInitData.dynamicLevelEnemy,l=i.gameInitData.allGroundGameBullets,u=i.gameInitData.allGameSideObjects,h=i.gameInitData.dynamicLevelMapBlocks,p=[].concat(h,u,l),m=i.gameInitData.gameExtraSeconds,g=s.playerDirectionVertical;switch(o){case"down":s.playerDirectionVertical=o;break;case"left":case"right":s.playerDirectionHorizontal=o,s.playerDirectionVertical="stand";break;case"up":s.playerDirectionVertical=o}s.xPos=n||s.xPos,s.onLeader||s.leaderClimb||!s.groundTouch||"up"!==s.playerDirectionVertical||S({mainGameObject:i,timing:m,soundUrl:s.sound.jump,soundLoop:!1});for(var v=0,b=p;v<b.length;v++){var y=b[v];if(("left"===s.playerDirectionHorizontal&&!s.leftWallTouch||"right"===s.playerDirectionHorizontal&&!s.rightWallTouch)&&(s.isRun=!0,i.gameInitData.gameData.levelData.horizontalSpeed=n,y.x-=i.gameInitData.gameData.levelData.horizontalSpeed),!s.ceilingTouch&&a&&s.groundTouch&&"up"===s.playerDirectionVertical||a&&s.onElevator){if(Math.sign(i.gameInitData.gameData.levelData.jumpImpuls)>0&&s.groundTouch){var w=i.gameInitData.gameData.levelData.gravity,x=i.gameInitData.gameData.levelData.gravityIndex;i.gameInitData.gameData.levelData.jumpImpuls+=w/x+("down"===g?1:0),i.gameInitData.gameData.levelData.jumpImpuls*=-1,s.groundTouch=!1}s.onElevator&&"up"===s.playerDirectionVertical&&(i.gameInitData.gameData.levelData.jumpImpuls=6+("down"===g?1:0),i.gameInitData.gameData.levelData.jumpImpuls*=-1,s.groundTouch=!1),y.verticalSpeed=a}}if(s.onLeader)if(s.leaderClimb=!0,"up"===s.playerDirectionVertical)s.groundTouch=!1;else if("down"===s.playerDirectionVertical){i.gameInitData.gameData.levelData.jumpImpuls=6;var O=f.leadersFunctionality.call(s);s.groundTouch=!!O}!s.groundTouch&&"down"===s.playerDirectionVertical&&i.gameInitData.gameData.levelData.gravityIndex<1&&(i.gameInitData.gameData.levelData.jumpImpuls=3),!s.groundTouch&&"up"===s.playerDirectionVertical&&i.gameInitData.gameData.levelData.gravityIndex<.1&&(i.gameInitData.gameData.levelData.jumpImpuls=-3),"down"!==o||s.onLeader||(s.isRun=!1);for(var j=0,_=c;j<_.length;j++){var D=_[j];s.rightWallTouch||s.leftWallTouch||(D.x-=i.gameInitData.gameData.levelData.horizontalSpeed)}i.mapNearActiveElement=null,d.playerAnimation({groundPlayer:s,mainGameObject:i}),s.onLeader&&s.leaderClimb&&S({mainGameObject:i,timing:20,soundUrl:s.sound.leaderClimb,soundLoop:!1}),("right"===o&&s.isRun&&s.groundTouch||"left"===o&&s.isRun&&s.groundTouch)&&S({mainGameObject:i,timing:20,soundUrl:s.sound.run,soundLoop:!1})}function S(e){var t=e.mainGameObject,n=e.timing,r=e.soundUrl,a=e.soundLoop;t.gameInitData.gameExtraSeconds%n==0&&b.initSoundObject({SoundCreator:o.SoundCreator,mainGameObject:t,soundProps:{soundUrl:r||null,soundLoop:a}})}t.initPlayerShip=function(){var e=this;this.ctx&&(this.img=new Image,this.img.onload=function(){return e.placePlayerShip&&e.placePlayerShip(),e.img},this.playerShipTextureChange())},t.playerShipTextureChange=function(){this.img.src=__dirname+this.data.texture},t.syncKeyControl=function(e){var t=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,n,r,i,o,s,c,l,u;return a(this,(function(a){if(!t.gameInitData||!t.gameInitData.dynamicLevelsActive)return[2,!1];if(e=t.gameInitData.mapKeyCode,n=t.gameInitData.gameData.gameSetings.keyControls,!e)return[2,!1];for(r=function(r,a){if(!r||!a)return{value:!1};if("68"===r&&e[65]||"65"===r&&e[68])return"continue";if(n.down.some((function(e){return r==e}))&&O({xPos:0,yPos:.5,mainGameObject:t,playerDirection:"down"}),n.left.some((function(e){return r==e}))){if(!w({key:r,mapKeyCode:e}))return"continue";O({xPos:-2,yPos:0,mainGameObject:t,playerDirection:"left"})}if(n.right.some((function(e){return r==e}))){if(!w({key:r,mapKeyCode:e}))return"continue";O({xPos:2,yPos:0,mainGameObject:t,playerDirection:"right"})}n.up.some((function(e){return r==e}))&&O({xPos:0,yPos:-60,mainGameObject:t,playerDirection:"up"})},i=0,o=Object.entries(e);i<o.length;i++)if(s=o[i],c=s[0],l=s[1],"object"==typeof(u=r(c,l)))return[2,u.value];return[2]}))}))},t.shipControl=function(e){var t=e.gameInitData.gameData.gameSetings.keyControls;e.gameInitData.gameData.groundPlayerCharacter,document.addEventListener("keydown",(function(n){e.gameInitData.mapKeyCode[n.keyCode]="keydown"==n.type,y({mainGameObject:e,controlKeys:t,event:n})})),document.addEventListener("keyup",(function(t){delete e.gameInitData.mapKeyCode[t.keyCode]})),document.addEventListener("mousemove",(function(t){var n=e.gameInitData.gameData.playerObject;if(e.gameInitData.gamePause)return!1;if("CANVAS"===t.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var r=t.clientX-t.target.offsetLeft,a=t.clientY-t.target.offsetTop;n.xFinal=(r%n.data.speed==0?r:n.data.speed*Math.floor(r/n.data.speed))-n.width/2,n.yFinal=(a%n.data.speed==0?a:n.data.speed*Math.floor(a/n.data.speed))-n.height/2}})),document.addEventListener("click",(function(t){var n=e.gameInitData.gameData.playerObject,r=e.getLevelUserData();return!e.gameInitData.dynamicLevelsActive&&0!==r.currentLevel&&(!(e.gameInitData.gamePause||!e.gameInitData.gameStatus)&&void(e.gameInitData.shopActive||s.shot.call(n,o.BulletConstruct,e,o.SoundCreator,"player","allGameBullets")))})),document.addEventListener("mousemove",(function(t){if(e.gameInitData.dynamicLevelsActive){var n=e.gameInitData.gameData.groundPlayerCharacter;n.shotAngle=d.groundPlayerShot({groundPlayer:n,event:t})}})),document.addEventListener("mousedown",(function(t){e.gameInitData.dynamicLevelsActive&&(e.gameInitData.gameData.groundPlayerCharacter.shotState=!0)})),document.addEventListener("mouseup",(function(t){e.gameInitData.dynamicLevelsActive&&(e.gameInitData.gameData.groundPlayerCharacter.shotState=!1)}))},t.addVehicleSpeed=function(e){var t=e.value,n=e.flag;n&&(this.data.minSpeed+=t),!n&&this.data.minSpeed>this.defaultSpeed&&(this.data.minSpeed-=t)},t.setContext=function(e){this.ctx=e},t.placeShip=function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.xAdj=this.x>this.xFinal?0:e,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.moveShip=function(e){var t=e.xPos,n=void 0===t?0:t,r=e.yPos,a=void 0===r?0:r;this.x+=n,this.y+=a},t.shipInSpace=function(e){var t=e.mainGameObject,n=e.playerShip,r=e.constructors,a=t.gameInitData.gameData.levelData;t.gameInitData.gameExtraSeconds%1e3==0&&"small fighter"===n.data.status&&a.space&&v.groundPlayerMinusLife({mainGameObject:t,constructors:r})}},function(e,t,n){e.exports=u,u.Minimatch=h;var r={sep:"/"};try{r=n(1)}catch(e){}var a=u.GLOBSTAR=h.GLOBSTAR={},i=n(65),o={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},s="().*{}+?[]^$\\!".split("").reduce((function(e,t){return e[t]=!0,e}),{});var c=/\/+/;function l(e,t){e=e||{},t=t||{};var n={};return Object.keys(t).forEach((function(e){n[e]=t[e]})),Object.keys(e).forEach((function(t){n[t]=e[t]})),n}function u(e,t,n){if("string"!=typeof t)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===t.charAt(0))&&(""===t.trim()?""===e:new h(t,n).match(e))}function h(e,t){if(!(this instanceof h))return new h(e,t);if("string"!=typeof e)throw new TypeError("glob pattern string required");t||(t={}),e=e.trim(),"/"!==r.sep&&(e=e.split(r.sep).join("/")),this.options=t,this.set=[],this.pattern=e,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function d(e,t){if(t||(t=this instanceof h?this.options:{}),void 0===(e=void 0===e?this.pattern:e))throw new TypeError("undefined pattern");return t.nobrace||!e.match(/\{.*\}/)?[e]:i(e)}u.filter=function(e,t){return t=t||{},function(n,r,a){return u(n,e,t)}},u.defaults=function(e){if(!e||!Object.keys(e).length)return u;var t=u,n=function(n,r,a){return t.minimatch(n,r,l(e,a))};return n.Minimatch=function(n,r){return new t.Minimatch(n,l(e,r))},n},h.defaults=function(e){return e&&Object.keys(e).length?u.defaults(e).Minimatch:h},h.prototype.debug=function(){},h.prototype.make=function(){if(this._made)return;var e=this.pattern,t=this.options;if(!t.nocomment&&"#"===e.charAt(0))return void(this.comment=!0);if(!e)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();t.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map((function(e){return e.split(c)})),this.debug(this.pattern,n),n=n.map((function(e,t,n){return e.map(this.parse,this)}),this),this.debug(this.pattern,n),n=n.filter((function(e){return-1===e.indexOf(!1)})),this.debug(this.pattern,n),this.set=n},h.prototype.parseNegate=function(){var e=this.pattern,t=!1,n=this.options,r=0;if(n.nonegate)return;for(var a=0,i=e.length;a<i&&"!"===e.charAt(a);a++)t=!t,r++;r&&(this.pattern=e.substr(r));this.negate=t},u.braceExpand=function(e,t){return d(e,t)},h.prototype.braceExpand=d,h.prototype.parse=function(e,t){if(e.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===e)return a;if(""===e)return"";var r,i="",c=!!n.nocase,l=!1,u=[],h=[],d=!1,f=-1,m=-1,g="."===e.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",v=this;function b(){if(r){switch(r){case"*":i+="[^/]*?",c=!0;break;case"?":i+="[^/]",c=!0;break;default:i+="\\"+r}v.debug("clearStateChar %j %j",r,i),r=!1}}for(var y,w=0,x=e.length;w<x&&(y=e.charAt(w));w++)if(this.debug("%s\t%s %s %j",e,w,i,y),l&&s[y])i+="\\"+y,l=!1;else switch(y){case"/":return!1;case"\\":b(),l=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",e,w,i,y),d){this.debug("  in class"),"!"===y&&w===m+1&&(y="^"),i+=y;continue}v.debug("call clearStateChar %j",r),b(),r=y,n.noext&&b();continue;case"(":if(d){i+="(";continue}if(!r){i+="\\(";continue}u.push({type:r,start:w-1,reStart:i.length,open:o[r].open,close:o[r].close}),i+="!"===r?"(?:(?!(?:":"(?:",this.debug("plType %j %j",r,i),r=!1;continue;case")":if(d||!u.length){i+="\\)";continue}b(),c=!0;var O=u.pop();i+=O.close,"!"===O.type&&h.push(O),O.reEnd=i.length;continue;case"|":if(d||!u.length||l){i+="\\|",l=!1;continue}b(),i+="|";continue;case"[":if(b(),d){i+="\\"+y;continue}d=!0,m=w,f=i.length,i+=y;continue;case"]":if(w===m+1||!d){i+="\\"+y,l=!1;continue}if(d){var S=e.substring(m+1,w);try{RegExp("["+S+"]")}catch(e){var j=this.parse(S,p);i=i.substr(0,f)+"\\["+j[0]+"\\]",c=c||j[1],d=!1;continue}}c=!0,d=!1,i+=y;continue;default:b(),l?l=!1:!s[y]||"^"===y&&d||(i+="\\"),i+=y}d&&(S=e.substr(m+1),j=this.parse(S,p),i=i.substr(0,f)+"\\["+j[0],c=c||j[1]);for(O=u.pop();O;O=u.pop()){var _=i.slice(O.reStart+O.open.length);this.debug("setting tail",i,O),_=_.replace(/((?:\\{2}){0,64})(\\?)\|/g,(function(e,t,n){return n||(n="\\"),t+t+n+"|"})),this.debug("tail=%j\n   %s",_,_,O,i);var D="*"===O.type?"[^/]*?":"?"===O.type?"[^/]":"\\"+O.type;c=!0,i=i.slice(0,O.reStart)+D+"\\("+_}b(),l&&(i+="\\\\");var I=!1;switch(i.charAt(0)){case".":case"[":case"(":I=!0}for(var k=h.length-1;k>-1;k--){var P=h[k],E=i.slice(0,P.reStart),A=i.slice(P.reStart,P.reEnd-8),T=i.slice(P.reEnd-8,P.reEnd),G=i.slice(P.reEnd);T+=G;var C=E.split("(").length-1,L=G;for(w=0;w<C;w++)L=L.replace(/\)[+*?]?/,"");var M="";""===(G=L)&&t!==p&&(M="$"),i=E+A+G+M+T}""!==i&&c&&(i="(?=.)"+i);I&&(i=g+i);if(t===p)return[i,c];if(!c)return function(e){return e.replace(/\\(.)/g,"$1")}(e);var R=n.nocase?"i":"";try{var N=new RegExp("^"+i+"$",R)}catch(e){return new RegExp("$.")}return N._glob=e,N._src=i,N};var p={};u.makeRe=function(e,t){return new h(e,t||{}).makeRe()},h.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var e=this.set;if(!e.length)return this.regexp=!1,this.regexp;var t=this.options,n=t.noglobstar?"[^/]*?":t.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",r=t.nocase?"i":"",i=e.map((function(e){return e.map((function(e){return e===a?n:"string"==typeof e?function(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}(e):e._src})).join("\\/")})).join("|");i="^(?:"+i+")$",this.negate&&(i="^(?!"+i+").*$");try{this.regexp=new RegExp(i,r)}catch(e){this.regexp=!1}return this.regexp},u.match=function(e,t,n){var r=new h(t,n=n||{});return e=e.filter((function(e){return r.match(e)})),r.options.nonull&&!e.length&&e.push(t),e},h.prototype.match=function(e,t){if(this.debug("match",e,this.pattern),this.comment)return!1;if(this.empty)return""===e;if("/"===e&&t)return!0;var n=this.options;"/"!==r.sep&&(e=e.split(r.sep).join("/"));e=e.split(c),this.debug(this.pattern,"split",e);var a,i,o=this.set;for(this.debug(this.pattern,"set",o),i=e.length-1;i>=0&&!(a=e[i]);i--);for(i=0;i<o.length;i++){var s=o[i],l=e;if(n.matchBase&&1===s.length&&(l=[a]),this.matchOne(l,s,t))return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},h.prototype.matchOne=function(e,t,n){var r=this.options;this.debug("matchOne",{this:this,file:e,pattern:t}),this.debug("matchOne",e.length,t.length);for(var i=0,o=0,s=e.length,c=t.length;i<s&&o<c;i++,o++){this.debug("matchOne loop");var l,u=t[o],h=e[i];if(this.debug(t,u,h),!1===u)return!1;if(u===a){this.debug("GLOBSTAR",[t,u,h]);var d=i,p=o+1;if(p===c){for(this.debug("** at the end");i<s;i++)if("."===e[i]||".."===e[i]||!r.dot&&"."===e[i].charAt(0))return!1;return!0}for(;d<s;){var f=e[d];if(this.debug("\nglobstar while",e,d,t,p,f),this.matchOne(e.slice(d),t.slice(p),n))return this.debug("globstar found match!",d,s,f),!0;if("."===f||".."===f||!r.dot&&"."===f.charAt(0)){this.debug("dot detected!",e,d,t,p);break}this.debug("globstar swallow a segment, and continue"),d++}return!(!n||(this.debug("\n>>> no match, partial?",e,d,t,p),d!==s))}if("string"==typeof u?(l=r.nocase?h.toLowerCase()===u.toLowerCase():h===u,this.debug("string match",u,h,l)):(l=h.match(u),this.debug("pattern match",u,h,l)),!l)return!1}if(i===s&&o===c)return!0;if(i===s)return n;if(o===c)return i===s-1&&""===e[i];throw new Error("wtf?")}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function a(e){var t=/^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/.exec(e),n=t[1]||"",r=Boolean(n&&":"!==n.charAt(1));return Boolean(t[2]||r)}e.exports="win32"===process.platform?a:r,e.exports.posix=r,e.exports.win32=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),a=n(13);function i(e){document.querySelector(e).addEventListener("click",(function(){document.location.reload()}))}t.hideLoadScreen=function(){var e=document.querySelector("#main-load-screen");r.addClassList(e,"hide-animation"),setTimeout((function(){r.hide(e)}),1e3)},t.loadWindow=function(e){var t,n=e.loadStatus,o=document.querySelector("#load-screen");switch(o.innerHTML="",n){case"load":r.show(o),o.innerHTML='<div class="load-circle-image load-circe-wrapper"></div><p>Waiting...</p>';break;case"serverError":o.innerHTML='<p>Fail to load data</p>\n            <div class="load-screen-button-wrapper">\n                <button id="reload-page" class="btn-orange btn-main">Reload</button>\n                <button id="exit-btn" class="btn-orange btn-main">exit</button>\n            </div>\n            ',i("#reload-page"),t="#exit-btn",document.querySelector(t).addEventListener("click",(function(e){e.preventDefault(),a.exitTheGame()}));break;case"success":r.hide(o)}},t.reloadPage=i},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(14);function o(e){return r(this,void 0,void 0,(function(){var t,n,r,o,s,c;return a(this,(function(a){switch(a.label){case 0:return t=e[this.gameRandomizer(e.length)],n=this.gameRandomizer(t.randomizer),r=this.gameRandomizer(t.maxNumber+1),"goldCoin"!=t.object&&n>t.randomizer/2&&(t=e[0]),o=[],[4,i.getExtraObjects({randomObject:t})];case 1:for(s=a.sent(),c=0;c<r;c++)o=o.concat(s);return[2,o]}}))}))}t.enemyShipLogicVertical=function(e,t){var n=Math.max(e.x,this.x),r=Math.min(e.x,this.x),a=Math.max(e.y-this.height/2,this.y),i=Math.min(e.y-this.height/2,this.y),o=n-r,s=a-i;if(this.isMove&&this.behavior)switch(this.behavior){case"patrool":if(!this.direction){var c=t.gameRandomizer(2,1);this.direction=1==c?"up":"down"}(function(e){e.getScreenSize();var t=Math.max(this.y,this.yFinal)-Math.min(this.y,this.yFinal);switch(this.direction){case"up":this.yFinal=0,this.y-this.height<this.yFinal&&(this.direction="down");break;case"down":this.yFinal=window.innerHeight,this.y+this.height>this.yFinal&&(this.direction="up");break;default:this.yFinal=window.innerHeight/2}this.enemyVerticalMoveCalculation(t)}).call(this,t);break;case"find":p.call(this);break;case"attack":(function(e,t,n){this.yFinal=n.y-this.height/2,t<100&&this.enemyVerticalMoveCalculation(e)}).call(this,s,o,e);break;case"comeEndFind":p.call(this),h.call(this),l.call(this,t);break;case"rush":p.call(this),h.call(this),function(e){var t=e.gameRandomizer(1e3),n=e.getScreenSize();t<1&&!this.rushAtack&&!this.searchUser&&(this.rushAtack=!0,this.rushData=0,this.xFinal=0,this.searchUser=!0,this.speed=(Math.sign(this.speed),16));this.x<=2&&(this.rushAtack=!1,this.speed=this.defaultSpeed,this.changeXposition=!0,this.xFinal=n.width,this.direction="forward",l.call(this,e));this.rushAtack||l.call(this,e)}.call(this,t);break;default:p.call(this)}function l(e){if(this.changeXposition&&"backwards"!=this.direction||this.changeXposition&&this.x<this.xFinal&&"backwards"!=this.direction){this.direction="backwards";var t=e.getScreenSize(),n=e.gameRandomizer(2*this.width),r=t.width-n;this.xFinal=r,this.rushAtack=!1,u.call(this)}else this.changeXposition&&this.x>this.xFinal&&"forward"!=this.direction&&(this.direction="forward",this.changeXposition=!1,this.searchUser=!1,u.call(this))}function u(){this.speed=-1*this.speed}function h(){var e=t.getScreenSize().width-2*this.width;this.x<e&&!this.changeXposition&&!this.rushAtack&&(this.changeSpeed||d.call(this,3),this.changeSpeed=!0,this.changeXposition=!0)}function d(e){this.speed=this.speed/e}function p(){return!this.searchUser&&(this.spotDistance>o||this.spotDistance>s?(this.yFinal=e.y-this.height/2,this.enemyVerticalMoveCalculation(s),!0):void 0)}},t.enemyVerticalMoveCalculation=function(e){var t=e/this.verticalSpeed;t=(t=Math.sign(t)>0?t:-1*t)>this.verticalSpeed?this.verticalSpeed:t,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.spawnEnemyLogic=function(e){return r(this,void 0,void 0,(function(){function t(){return r(this,void 0,void 0,(function(){var t,n,r,s;return a(this,(function(a){switch(a.label){case 0:if(!(this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex))return[3,4];t=this.gameRandomizer(i.enemyMaxNumber),n=t,a.label=1;case 1:if(!(n<i.enemyMaxNumber))return[3,4];if(!(r=o[this.gameRandomizer(o.length)]))return[3,3];if(r.details||r.details){if(r.details.isBoss&&"true"===process.env.BOSS_LOAD_AT_LEVEL||r.details.subBoss&&"true"===process.env.SUB_LOAD_AT_LEVEL)return[2,!1];r.details.isBoss&&(process.env.BOSS_LOAD_AT_LEVEL="true"),r.details.subBoss&&(process.env.SUB_LOAD_AT_LEVEL="true")}return[4,this.createNewEnemy({enemyData:r,EnemyObject:e})];case 2:if(!(s=a.sent()))return[2,!1];s.loadTexture(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(s),a.label=3;case 3:return n++,[3,1];case 4:return[2]}}))}))}var n,i,o,s;return a(this,(function(e){return this.gameInitData.shopActive||(n=this.gameInitData.gameData,i=n.levelData,o=n.enemyData,s=this.getLevelUserData(),s.source.levelData.bossPresent?s.source.levelData.bossPresent:null,this.gameInitData.gameData.levelChange||t.call(this,{levelStatus:"reguler-level"})),[2]}))}))},t.createNewEnemy=function(e){var t=e.enemyData,n=e.EnemyObject;return r(this,void 0,void 0,(function(){var e,r,i,s,c,l;return a(this,(function(a){switch(a.label){case 0:return t?(e=window.innerWidth+300,r=this.gameRandomizer(window.innerHeight-200,100),t.details?(i=t.details,s=i.behavior?i.behavior[this.gameRandomizer(i.behavior.length)]:null,i.extraObjects?[4,o.call(this,i.extraObjects)]:[3,2]):[3,4]):(console.error("no ship data"),[2,!1]);case 1:return l=a.sent(),[3,3];case 2:l=!1,a.label=3;case 3:return c=l,[2,new n({x:e,y:r,sx:i.sx?i.sx:0,sy:i.sy?i.sy:0,sWidth:i.imageWidth/i.numberOfItems,sHeight:i.imageHeight,picturesWidth:i.imageWidth,numberOfItems:i.numberOfItems,width:i.width,height:i.height,texture:i.skinName,speed:i.speed,isShot:i.isShot,status:i.status,name:i.name,bulletTypeNumber:i.bulletType,rapidFire:i.rapidFire,pointsPerUnit:i.pointsPerUnit,healthPoint:i.healthPoint,animationSteps:i.animationSteps,damage:i.damage,objectOwner:i.objectOwner,guns:i.guns?i.guns:[],explosion:i.explosionAnimation,numberOfVerticalItems:i.numberOfVerticalItems,isMove:i.isMove,isShoot:i.isShoot,spotDistance:i.spotDistance,behavior:s,verticalSpeed:i.verticalSpeed?i.verticalSpeed:null,isBoss:!!i.isBoss&&i.isBoss,extraObjects:c,collideExplosionAnimation:i.collideExplosionAnimation,defaultAngle:i.defaultAngle?i.defaultAngle:null,hitShape:i.hitShape?i.hitShape:null,isSubBoss:i.subBoss?i.subBoss:null})];case 4:return[2]}}))}))},t.loadExtraObject=o,t.gameRandomizer=function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(23);t.loadHangar=function(e){var t=e.element,n=e.mainGameObject,a=document.querySelector("#hangar-text"),i=n.gameInitData.gameData.playerObject,o=i.data,s=t.hangarShipArea.getContext("2d"),c=new Image;function l(e){var t=e.position,a=e.index,i=e.gun;if(s.fillStyle=n.shopArea.selectedShopItem.hangarSelectedItem===a?"rgba(255, 221, 0, .7)":"rgba(234, 70, 72, .5)",s.fillRect(t.positionX,t.positionY,60,50),i){var o=new Image;o.src=process.env.HOST+i.loadImage,o.onload=function(){r.createImage(s,o,t.positionX,t.positionY,60,50)}}n.shopArea.selectedShopItem.hangarElements[a]={object:i,positionX:t.positionX,positionY:t.positionY,shipXPosition:5,shipYPosition:12,width:60,height:50}}t.hangarShipArea.width=600,t.hangarShipArea.height=350,c.src=process.env.HOST+o.hangarImage,a.innerHTML="<p>"+o.name.split("_").join(" ")+"</p>",c.onload=function(){r.createImage(s,c,80,20,500,300);for(var e=0;e<o.firespot.length;e++)l({position:o.firespot[e],index:e,gun:i.data.guns[e]})}}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(11),o=n(34),s=n(17);t.hangarMouseMoveEvent=function(e){for(var t=e.mainGameObject,n=e.event,r=t.shopArea.selectedShopItem.hangarElements,a=0;a<r.length;a++){if(r[a])if("collision"===i.shopHitObjectsDetection({event:n,hangarElements:r,index:a})){if(!r[a].object)return!1;s.showDescriptionArea({selectObject:r[a].object,event:n,mainGameObject:t})}}},t.findIntInventory=function(e){var t=e.inventory,n=e.searchObject,r=t.find((function(e){if(e&&n)return e.name===n.name}));return!!r&&(r={dataObject:r,index:t.indexOf(r)})},t.inventoryColisionEvent=function(e){var t=e.hitObject,n=e.playerObjectData,i=e.shopAreaItems,c=e.mainGameObject,l=e.playerObject,u=e.index;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return"collision"!==t?[3,3]:(!n.guns[u]||i.inventorySelectedItem&&0==i.inventorySelectedItem||(i.hangarSelectedItem=i.hangarSelectedItem==u?null:u,c.shopArea.selectedShopItem.inventorySelectedItem=null),i.inventorySelectedItem||0===i.inventorySelectedItem?function(e){var t=e.item;return!t.grapplePower||!t||"inventory weapon"!==t.type}({item:n.inventory[i.inventorySelectedItem]})?[4,s.assignEffectsToShip({playerObject:l,item:n.inventory[i.inventorySelectedItem]})]:[2,!1]:[3,2]);case 1:e.sent(),s.putItemToStorage({name:"outside-storage",putIndex:u,selectedIndex:i.inventorySelectedItem,storage:n.inventory,selectedStorage:n.guns,mainGameObject:c}),e.label=2;case 2:return(i.hangarSelectedItem||0===i.hangarSelectedItem)&&s.putItemToStorage({name:"inside-storage",putIndex:u,selectedIndex:i.hangarSelectedItem,storage:n.guns,selectedStorage:null,mainGameObject:c}),o.loadHangar({element:c.shopArea,mainGameObject:c}),[2];case 3:return[2]}}))}))},t.saleBoxEvent=function(e){var t=e.mainGameObject,n=t.gameInitData.gameData.playerObject.data,r=t.shopArea.selectedShopItem;if(!r.inventorySelectedItem&&0!=r.inventorySelectedItem&&!r.hangarSelectedItem&&0!=r.hangarSelectedItem)return!1;if(process.env.SHOP_SALE_WINDOW="true",process.env.SHOP_ACTIVE_WINDOW="true",r.inventorySelectedItem||0===r.inventorySelectedItem){var a=n.inventory[r.inventorySelectedItem],o=a?a.price:0,c=s.salePercentAddToPrice({price:o,mainGameObject:t});if(!a)return!1;i.leaveShop({element:t.shopArea,mainGameObject:t,text:c?"You want to sale "+(a.title?a.title:"this item?")+"\n                    for the "+c+" credits":"You want to destroy this item?"})}else if(r.hangarSelectedItem||0===r.hangarSelectedItem){var l=n.guns[r.hangarSelectedItem];o=n.guns[r.hangarSelectedItem].price;i.leaveShop({element:t.shopArea,mainGameObject:t,text:"You want to sale "+(l?l.title:"this item?")+"\n                    for the "+s.salePercentAddToPrice({price:o,mainGameObject:t})+" credits"})}}},function(e,t,n){(function(e){var r;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a="Expected a function",i="__lodash_placeholder__",o=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",c="[object Array]",l="[object Boolean]",u="[object Date]",h="[object Error]",d="[object Function]",p="[object GeneratorFunction]",f="[object Map]",m="[object Number]",g="[object Object]",v="[object RegExp]",b="[object Set]",y="[object String]",w="[object Symbol]",x="[object WeakMap]",O="[object ArrayBuffer]",S="[object DataView]",j="[object Float32Array]",_="[object Float64Array]",D="[object Int8Array]",I="[object Int16Array]",k="[object Int32Array]",P="[object Uint8Array]",E="[object Uint16Array]",A="[object Uint32Array]",T=/\b__p \+= '';/g,G=/\b(__p \+=) '' \+/g,C=/(__e\(.*?\)|\b__t\)) \+\n'';/g,L=/&(?:amp|lt|gt|quot|#39);/g,M=/[&<>"']/g,R=RegExp(L.source),N=RegExp(M.source),B=/<%-([\s\S]+?)%>/g,W=/<%([\s\S]+?)%>/g,F=/<%=([\s\S]+?)%>/g,U=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,H=/^\w*$/,z=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,V=/[\\^$.*+?()[\]{}|]/g,q=RegExp(V.source),Y=/^\s+|\s+$/g,J=/^\s+/,X=/\s+$/,$=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,K=/\{\n\/\* \[wrapped with (.+)\] \*/,Z=/,? & /,Q=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ee=/\\(\\)?/g,te=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ne=/\w*$/,re=/^[-+]0x[0-9a-f]+$/i,ae=/^0b[01]+$/i,ie=/^\[object .+?Constructor\]$/,oe=/^0o[0-7]+$/i,se=/^(?:0|[1-9]\d*)$/,ce=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,le=/($^)/,ue=/['\n\r\u2028\u2029\\]/g,he="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",de="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",pe="[\\ud800-\\udfff]",fe="["+de+"]",me="["+he+"]",ge="\\d+",ve="[\\u2700-\\u27bf]",be="[a-z\\xdf-\\xf6\\xf8-\\xff]",ye="[^\\ud800-\\udfff"+de+ge+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",we="\\ud83c[\\udffb-\\udfff]",xe="[^\\ud800-\\udfff]",Oe="(?:\\ud83c[\\udde6-\\uddff]){2}",Se="[\\ud800-\\udbff][\\udc00-\\udfff]",je="[A-Z\\xc0-\\xd6\\xd8-\\xde]",_e="(?:"+be+"|"+ye+")",De="(?:"+je+"|"+ye+")",Ie="(?:"+me+"|"+we+")"+"?",ke="[\\ufe0e\\ufe0f]?"+Ie+("(?:\\u200d(?:"+[xe,Oe,Se].join("|")+")[\\ufe0e\\ufe0f]?"+Ie+")*"),Pe="(?:"+[ve,Oe,Se].join("|")+")"+ke,Ee="(?:"+[xe+me+"?",me,Oe,Se,pe].join("|")+")",Ae=RegExp("['’]","g"),Te=RegExp(me,"g"),Ge=RegExp(we+"(?="+we+")|"+Ee+ke,"g"),Ce=RegExp([je+"?"+be+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[fe,je,"$"].join("|")+")",De+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[fe,je+_e,"$"].join("|")+")",je+"?"+_e+"+(?:['’](?:d|ll|m|re|s|t|ve))?",je+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ge,Pe].join("|"),"g"),Le=RegExp("[\\u200d\\ud800-\\udfff"+he+"\\ufe0e\\ufe0f]"),Me=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Re=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ne=-1,Be={};Be[j]=Be[_]=Be[D]=Be[I]=Be[k]=Be[P]=Be["[object Uint8ClampedArray]"]=Be[E]=Be[A]=!0,Be[s]=Be[c]=Be[O]=Be[l]=Be[S]=Be[u]=Be[h]=Be[d]=Be[f]=Be[m]=Be[g]=Be[v]=Be[b]=Be[y]=Be[x]=!1;var We={};We[s]=We[c]=We[O]=We[S]=We[l]=We[u]=We[j]=We[_]=We[D]=We[I]=We[k]=We[f]=We[m]=We[g]=We[v]=We[b]=We[y]=We[w]=We[P]=We["[object Uint8ClampedArray]"]=We[E]=We[A]=!0,We[h]=We[d]=We[x]=!1;var Fe={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ue=parseFloat,He=parseInt,ze="object"==typeof global&&global&&global.Object===Object&&global,Ve="object"==typeof self&&self&&self.Object===Object&&self,qe=ze||Ve||Function("return this")(),Ye=t&&!t.nodeType&&t,Je=Ye&&"object"==typeof e&&e&&!e.nodeType&&e,Xe=Je&&Je.exports===Ye,$e=Xe&&ze.process,Ke=function(){try{var e=Je&&Je.require&&Je.require("util").types;return e||$e&&$e.binding&&$e.binding("util")}catch(e){}}(),Ze=Ke&&Ke.isArrayBuffer,Qe=Ke&&Ke.isDate,et=Ke&&Ke.isMap,tt=Ke&&Ke.isRegExp,nt=Ke&&Ke.isSet,rt=Ke&&Ke.isTypedArray;function at(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function it(e,t,n,r){for(var a=-1,i=null==e?0:e.length;++a<i;){var o=e[a];t(r,o,n(o),e)}return r}function ot(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function st(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function ct(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function lt(e,t){for(var n=-1,r=null==e?0:e.length,a=0,i=[];++n<r;){var o=e[n];t(o,n,e)&&(i[a++]=o)}return i}function ut(e,t){return!!(null==e?0:e.length)&&wt(e,t,0)>-1}function ht(e,t,n){for(var r=-1,a=null==e?0:e.length;++r<a;)if(n(t,e[r]))return!0;return!1}function dt(e,t){for(var n=-1,r=null==e?0:e.length,a=Array(r);++n<r;)a[n]=t(e[n],n,e);return a}function pt(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}function ft(e,t,n,r){var a=-1,i=null==e?0:e.length;for(r&&i&&(n=e[++a]);++a<i;)n=t(n,e[a],a,e);return n}function mt(e,t,n,r){var a=null==e?0:e.length;for(r&&a&&(n=e[--a]);a--;)n=t(n,e[a],a,e);return n}function gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var vt=jt("length");function bt(e,t,n){var r;return n(e,(function(e,n,a){if(t(e,n,a))return r=n,!1})),r}function yt(e,t,n,r){for(var a=e.length,i=n+(r?1:-1);r?i--:++i<a;)if(t(e[i],i,e))return i;return-1}function wt(e,t,n){return t==t?function(e,t,n){var r=n-1,a=e.length;for(;++r<a;)if(e[r]===t)return r;return-1}(e,t,n):yt(e,Ot,n)}function xt(e,t,n,r){for(var a=n-1,i=e.length;++a<i;)if(r(e[a],t))return a;return-1}function Ot(e){return e!=e}function St(e,t){var n=null==e?0:e.length;return n?It(e,t)/n:NaN}function jt(e){return function(t){return null==t?void 0:t[e]}}function _t(e){return function(t){return null==e?void 0:e[t]}}function Dt(e,t,n,r,a){return a(e,(function(e,a,i){n=r?(r=!1,e):t(n,e,a,i)})),n}function It(e,t){for(var n,r=-1,a=e.length;++r<a;){var i=t(e[r]);void 0!==i&&(n=void 0===n?i:n+i)}return n}function kt(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Pt(e){return function(t){return e(t)}}function Et(e,t){return dt(t,(function(t){return e[t]}))}function At(e,t){return e.has(t)}function Tt(e,t){for(var n=-1,r=e.length;++n<r&&wt(t,e[n],0)>-1;);return n}function Gt(e,t){for(var n=e.length;n--&&wt(t,e[n],0)>-1;);return n}function Ct(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}var Lt=_t({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Mt=_t({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Rt(e){return"\\"+Fe[e]}function Nt(e){return Le.test(e)}function Bt(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function Wt(e,t){return function(n){return e(t(n))}}function Ft(e,t){for(var n=-1,r=e.length,a=0,o=[];++n<r;){var s=e[n];s!==t&&s!==i||(e[n]=i,o[a++]=n)}return o}function Ut(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Ht(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function zt(e){return Nt(e)?function(e){var t=Ge.lastIndex=0;for(;Ge.test(e);)++t;return t}(e):vt(e)}function Vt(e){return Nt(e)?function(e){return e.match(Ge)||[]}(e):function(e){return e.split("")}(e)}var qt=_t({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Yt=function e(t){var n,r=(t=null==t?qe:Yt.defaults(qe.Object(),t,Yt.pick(qe,Re))).Array,he=t.Date,de=t.Error,pe=t.Function,fe=t.Math,me=t.Object,ge=t.RegExp,ve=t.String,be=t.TypeError,ye=r.prototype,we=pe.prototype,xe=me.prototype,Oe=t["__core-js_shared__"],Se=we.toString,je=xe.hasOwnProperty,_e=0,De=(n=/[^.]+$/.exec(Oe&&Oe.keys&&Oe.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Ie=xe.toString,ke=Se.call(me),Pe=qe._,Ee=ge("^"+Se.call(je).replace(V,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ge=Xe?t.Buffer:void 0,Le=t.Symbol,Fe=t.Uint8Array,ze=Ge?Ge.allocUnsafe:void 0,Ve=Wt(me.getPrototypeOf,me),Ye=me.create,Je=xe.propertyIsEnumerable,$e=ye.splice,Ke=Le?Le.isConcatSpreadable:void 0,vt=Le?Le.iterator:void 0,_t=Le?Le.toStringTag:void 0,Jt=function(){try{var e=Qa(me,"defineProperty");return e({},"",{}),e}catch(e){}}(),Xt=t.clearTimeout!==qe.clearTimeout&&t.clearTimeout,$t=he&&he.now!==qe.Date.now&&he.now,Kt=t.setTimeout!==qe.setTimeout&&t.setTimeout,Zt=fe.ceil,Qt=fe.floor,en=me.getOwnPropertySymbols,tn=Ge?Ge.isBuffer:void 0,nn=t.isFinite,rn=ye.join,an=Wt(me.keys,me),on=fe.max,sn=fe.min,cn=he.now,ln=t.parseInt,un=fe.random,hn=ye.reverse,dn=Qa(t,"DataView"),pn=Qa(t,"Map"),fn=Qa(t,"Promise"),mn=Qa(t,"Set"),gn=Qa(t,"WeakMap"),vn=Qa(me,"create"),bn=gn&&new gn,yn={},wn=Di(dn),xn=Di(pn),On=Di(fn),Sn=Di(mn),jn=Di(gn),_n=Le?Le.prototype:void 0,Dn=_n?_n.valueOf:void 0,In=_n?_n.toString:void 0;function kn(e){if(zo(e)&&!Go(e)&&!(e instanceof Tn)){if(e instanceof An)return e;if(je.call(e,"__wrapped__"))return Ii(e)}return new An(e)}var Pn=function(){function e(){}return function(t){if(!Ho(t))return{};if(Ye)return Ye(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function En(){}function An(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=void 0}function Tn(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Gn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Cn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ln(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Mn(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ln;++t<n;)this.add(e[t])}function Rn(e){var t=this.__data__=new Cn(e);this.size=t.size}function Nn(e,t){var n=Go(e),r=!n&&To(e),a=!n&&!r&&Ro(e),i=!n&&!r&&!a&&Zo(e),o=n||r||a||i,s=o?kt(e.length,ve):[],c=s.length;for(var l in e)!t&&!je.call(e,l)||o&&("length"==l||a&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||oi(l,c))||s.push(l);return s}function Bn(e){var t=e.length;return t?e[Mr(0,t-1)]:void 0}function Wn(e,t){return Si(va(e),Xn(t,0,e.length))}function Fn(e){return Si(va(e))}function Un(e,t,n){(void 0!==n&&!Po(e[t],n)||void 0===n&&!(t in e))&&Yn(e,t,n)}function Hn(e,t,n){var r=e[t];je.call(e,t)&&Po(r,n)&&(void 0!==n||t in e)||Yn(e,t,n)}function zn(e,t){for(var n=e.length;n--;)if(Po(e[n][0],t))return n;return-1}function Vn(e,t,n,r){return er(e,(function(e,a,i){t(r,e,n(e),i)})),r}function qn(e,t){return e&&ba(t,ws(t),e)}function Yn(e,t,n){"__proto__"==t&&Jt?Jt(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Jn(e,t){for(var n=-1,a=t.length,i=r(a),o=null==e;++n<a;)i[n]=o?void 0:ms(e,t[n]);return i}function Xn(e,t,n){return e==e&&(void 0!==n&&(e=e<=n?e:n),void 0!==t&&(e=e>=t?e:t)),e}function $n(e,t,n,r,a,i){var o,c=1&t,h=2&t,x=4&t;if(n&&(o=a?n(e,r,a,i):n(e)),void 0!==o)return o;if(!Ho(e))return e;var T=Go(e);if(T){if(o=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&je.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!c)return va(e,o)}else{var G=ni(e),C=G==d||G==p;if(Ro(e))return ha(e,c);if(G==g||G==s||C&&!a){if(o=h||C?{}:ai(e),!c)return h?function(e,t){return ba(e,ti(e),t)}(e,function(e,t){return e&&ba(t,xs(t),e)}(o,e)):function(e,t){return ba(e,ei(e),t)}(e,qn(o,e))}else{if(!We[G])return a?e:{};o=function(e,t,n){var r=e.constructor;switch(t){case O:return da(e);case l:case u:return new r(+e);case S:return function(e,t){var n=t?da(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case j:case _:case D:case I:case k:case P:case"[object Uint8ClampedArray]":case E:case A:return pa(e,n);case f:return new r;case m:case y:return new r(e);case v:return function(e){var t=new e.constructor(e.source,ne.exec(e));return t.lastIndex=e.lastIndex,t}(e);case b:return new r;case w:return a=e,Dn?me(Dn.call(a)):{}}var a}(e,G,c)}}i||(i=new Rn);var L=i.get(e);if(L)return L;i.set(e,o),Xo(e)?e.forEach((function(r){o.add($n(r,t,n,r,e,i))})):Vo(e)&&e.forEach((function(r,a){o.set(a,$n(r,t,n,a,e,i))}));var M=T?void 0:(x?h?qa:Va:h?xs:ws)(e);return ot(M||e,(function(r,a){M&&(r=e[a=r]),Hn(o,a,$n(r,t,n,a,e,i))})),o}function Kn(e,t,n){var r=n.length;if(null==e)return!r;for(e=me(e);r--;){var a=n[r],i=t[a],o=e[a];if(void 0===o&&!(a in e)||!i(o))return!1}return!0}function Zn(e,t,n){if("function"!=typeof e)throw new be(a);return yi((function(){e.apply(void 0,n)}),t)}function Qn(e,t,n,r){var a=-1,i=ut,o=!0,s=e.length,c=[],l=t.length;if(!s)return c;n&&(t=dt(t,Pt(n))),r?(i=ht,o=!1):t.length>=200&&(i=At,o=!1,t=new Mn(t));e:for(;++a<s;){var u=e[a],h=null==n?u:n(u);if(u=r||0!==u?u:0,o&&h==h){for(var d=l;d--;)if(t[d]===h)continue e;c.push(u)}else i(t,h,r)||c.push(u)}return c}kn.templateSettings={escape:B,evaluate:W,interpolate:F,variable:"",imports:{_:kn}},kn.prototype=En.prototype,kn.prototype.constructor=kn,An.prototype=Pn(En.prototype),An.prototype.constructor=An,Tn.prototype=Pn(En.prototype),Tn.prototype.constructor=Tn,Gn.prototype.clear=function(){this.__data__=vn?vn(null):{},this.size=0},Gn.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Gn.prototype.get=function(e){var t=this.__data__;if(vn){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return je.call(t,e)?t[e]:void 0},Gn.prototype.has=function(e){var t=this.__data__;return vn?void 0!==t[e]:je.call(t,e)},Gn.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=vn&&void 0===t?"__lodash_hash_undefined__":t,this},Cn.prototype.clear=function(){this.__data__=[],this.size=0},Cn.prototype.delete=function(e){var t=this.__data__,n=zn(t,e);return!(n<0)&&(n==t.length-1?t.pop():$e.call(t,n,1),--this.size,!0)},Cn.prototype.get=function(e){var t=this.__data__,n=zn(t,e);return n<0?void 0:t[n][1]},Cn.prototype.has=function(e){return zn(this.__data__,e)>-1},Cn.prototype.set=function(e,t){var n=this.__data__,r=zn(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Ln.prototype.clear=function(){this.size=0,this.__data__={hash:new Gn,map:new(pn||Cn),string:new Gn}},Ln.prototype.delete=function(e){var t=Ka(this,e).delete(e);return this.size-=t?1:0,t},Ln.prototype.get=function(e){return Ka(this,e).get(e)},Ln.prototype.has=function(e){return Ka(this,e).has(e)},Ln.prototype.set=function(e,t){var n=Ka(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Mn.prototype.add=Mn.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},Mn.prototype.has=function(e){return this.__data__.has(e)},Rn.prototype.clear=function(){this.__data__=new Cn,this.size=0},Rn.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Rn.prototype.get=function(e){return this.__data__.get(e)},Rn.prototype.has=function(e){return this.__data__.has(e)},Rn.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Cn){var r=n.__data__;if(!pn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ln(r)}return n.set(e,t),this.size=n.size,this};var er=xa(cr),tr=xa(lr,!0);function nr(e,t){var n=!0;return er(e,(function(e,r,a){return n=!!t(e,r,a)})),n}function rr(e,t,n){for(var r=-1,a=e.length;++r<a;){var i=e[r],o=t(i);if(null!=o&&(void 0===s?o==o&&!Ko(o):n(o,s)))var s=o,c=i}return c}function ar(e,t){var n=[];return er(e,(function(e,r,a){t(e,r,a)&&n.push(e)})),n}function ir(e,t,n,r,a){var i=-1,o=e.length;for(n||(n=ii),a||(a=[]);++i<o;){var s=e[i];t>0&&n(s)?t>1?ir(s,t-1,n,r,a):pt(a,s):r||(a[a.length]=s)}return a}var or=Oa(),sr=Oa(!0);function cr(e,t){return e&&or(e,t,ws)}function lr(e,t){return e&&sr(e,t,ws)}function ur(e,t){return lt(t,(function(t){return Wo(e[t])}))}function hr(e,t){for(var n=0,r=(t=sa(t,e)).length;null!=e&&n<r;)e=e[_i(t[n++])];return n&&n==r?e:void 0}function dr(e,t,n){var r=t(e);return Go(e)?r:pt(r,n(e))}function pr(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":_t&&_t in me(e)?function(e){var t=je.call(e,_t),n=e[_t];try{e[_t]=void 0;var r=!0}catch(e){}var a=Ie.call(e);r&&(t?e[_t]=n:delete e[_t]);return a}(e):function(e){return Ie.call(e)}(e)}function fr(e,t){return e>t}function mr(e,t){return null!=e&&je.call(e,t)}function gr(e,t){return null!=e&&t in me(e)}function vr(e,t,n){for(var a=n?ht:ut,i=e[0].length,o=e.length,s=o,c=r(o),l=1/0,u=[];s--;){var h=e[s];s&&t&&(h=dt(h,Pt(t))),l=sn(h.length,l),c[s]=!n&&(t||i>=120&&h.length>=120)?new Mn(s&&h):void 0}h=e[0];var d=-1,p=c[0];e:for(;++d<i&&u.length<l;){var f=h[d],m=t?t(f):f;if(f=n||0!==f?f:0,!(p?At(p,m):a(u,m,n))){for(s=o;--s;){var g=c[s];if(!(g?At(g,m):a(e[s],m,n)))continue e}p&&p.push(m),u.push(f)}}return u}function br(e,t,n){var r=null==(e=mi(e,t=sa(t,e)))?e:e[_i(Ni(t))];return null==r?void 0:at(r,e,n)}function yr(e){return zo(e)&&pr(e)==s}function wr(e,t,n,r,a){return e===t||(null==e||null==t||!zo(e)&&!zo(t)?e!=e&&t!=t:function(e,t,n,r,a,i){var o=Go(e),d=Go(t),p=o?c:ni(e),x=d?c:ni(t),j=(p=p==s?g:p)==g,_=(x=x==s?g:x)==g,D=p==x;if(D&&Ro(e)){if(!Ro(t))return!1;o=!0,j=!1}if(D&&!j)return i||(i=new Rn),o||Zo(e)?Ha(e,t,n,r,a,i):function(e,t,n,r,a,i,o){switch(n){case S:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case O:return!(e.byteLength!=t.byteLength||!i(new Fe(e),new Fe(t)));case l:case u:case m:return Po(+e,+t);case h:return e.name==t.name&&e.message==t.message;case v:case y:return e==t+"";case f:var s=Bt;case b:var c=1&r;if(s||(s=Ut),e.size!=t.size&&!c)return!1;var d=o.get(e);if(d)return d==t;r|=2,o.set(e,t);var p=Ha(s(e),s(t),r,a,i,o);return o.delete(e),p;case w:if(Dn)return Dn.call(e)==Dn.call(t)}return!1}(e,t,p,n,r,a,i);if(!(1&n)){var I=j&&je.call(e,"__wrapped__"),k=_&&je.call(t,"__wrapped__");if(I||k){var P=I?e.value():e,E=k?t.value():t;return i||(i=new Rn),a(P,E,n,r,i)}}if(!D)return!1;return i||(i=new Rn),function(e,t,n,r,a,i){var o=1&n,s=Va(e),c=s.length,l=Va(t).length;if(c!=l&&!o)return!1;var u=c;for(;u--;){var h=s[u];if(!(o?h in t:je.call(t,h)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var p=!0;i.set(e,t),i.set(t,e);var f=o;for(;++u<c;){h=s[u];var m=e[h],g=t[h];if(r)var v=o?r(g,m,h,t,e,i):r(m,g,h,e,t,i);if(!(void 0===v?m===g||a(m,g,n,r,i):v)){p=!1;break}f||(f="constructor"==h)}if(p&&!f){var b=e.constructor,y=t.constructor;b==y||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof y&&y instanceof y||(p=!1)}return i.delete(e),i.delete(t),p}(e,t,n,r,a,i)}(e,t,n,r,wr,a))}function xr(e,t,n,r){var a=n.length,i=a,o=!r;if(null==e)return!i;for(e=me(e);a--;){var s=n[a];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++a<i;){var c=(s=n[a])[0],l=e[c],u=s[1];if(o&&s[2]){if(void 0===l&&!(c in e))return!1}else{var h=new Rn;if(r)var d=r(l,u,c,e,t,h);if(!(void 0===d?wr(u,l,3,r,h):d))return!1}}return!0}function Or(e){return!(!Ho(e)||(t=e,De&&De in t))&&(Wo(e)?Ee:ie).test(Di(e));var t}function Sr(e){return"function"==typeof e?e:null==e?qs:"object"==typeof e?Go(e)?Pr(e[0],e[1]):kr(e):tc(e)}function jr(e){if(!hi(e))return an(e);var t=[];for(var n in me(e))je.call(e,n)&&"constructor"!=n&&t.push(n);return t}function _r(e){if(!Ho(e))return function(e){var t=[];if(null!=e)for(var n in me(e))t.push(n);return t}(e);var t=hi(e),n=[];for(var r in e)("constructor"!=r||!t&&je.call(e,r))&&n.push(r);return n}function Dr(e,t){return e<t}function Ir(e,t){var n=-1,a=Lo(e)?r(e.length):[];return er(e,(function(e,r,i){a[++n]=t(e,r,i)})),a}function kr(e){var t=Za(e);return 1==t.length&&t[0][2]?pi(t[0][0],t[0][1]):function(n){return n===e||xr(n,e,t)}}function Pr(e,t){return ci(e)&&di(t)?pi(_i(e),t):function(n){var r=ms(n,e);return void 0===r&&r===t?gs(n,e):wr(t,r,3)}}function Er(e,t,n,r,a){e!==t&&or(t,(function(i,o){if(a||(a=new Rn),Ho(i))!function(e,t,n,r,a,i,o){var s=vi(e,n),c=vi(t,n),l=o.get(c);if(l)return void Un(e,n,l);var u=i?i(s,c,n+"",e,t,o):void 0,h=void 0===u;if(h){var d=Go(c),p=!d&&Ro(c),f=!d&&!p&&Zo(c);u=c,d||p||f?Go(s)?u=s:Mo(s)?u=va(s):p?(h=!1,u=ha(c,!0)):f?(h=!1,u=pa(c,!0)):u=[]:Yo(c)||To(c)?(u=s,To(s)?u=os(s):Ho(s)&&!Wo(s)||(u=ai(c))):h=!1}h&&(o.set(c,u),a(u,c,r,i,o),o.delete(c));Un(e,n,u)}(e,t,o,n,Er,r,a);else{var s=r?r(vi(e,o),i,o+"",e,t,a):void 0;void 0===s&&(s=i),Un(e,o,s)}}),xs)}function Ar(e,t){var n=e.length;if(n)return oi(t+=t<0?n:0,n)?e[t]:void 0}function Tr(e,t,n){var r=-1;return t=dt(t.length?t:[qs],Pt($a())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(Ir(e,(function(e,n,a){return{criteria:dt(t,(function(t){return t(e)})),index:++r,value:e}})),(function(e,t){return function(e,t,n){var r=-1,a=e.criteria,i=t.criteria,o=a.length,s=n.length;for(;++r<o;){var c=fa(a[r],i[r]);if(c){if(r>=s)return c;var l=n[r];return c*("desc"==l?-1:1)}}return e.index-t.index}(e,t,n)}))}function Gr(e,t,n){for(var r=-1,a=t.length,i={};++r<a;){var o=t[r],s=hr(e,o);n(s,o)&&Fr(i,sa(o,e),s)}return i}function Cr(e,t,n,r){var a=r?xt:wt,i=-1,o=t.length,s=e;for(e===t&&(t=va(t)),n&&(s=dt(e,Pt(n)));++i<o;)for(var c=0,l=t[i],u=n?n(l):l;(c=a(s,u,c,r))>-1;)s!==e&&$e.call(s,c,1),$e.call(e,c,1);return e}function Lr(e,t){for(var n=e?t.length:0,r=n-1;n--;){var a=t[n];if(n==r||a!==i){var i=a;oi(a)?$e.call(e,a,1):Qr(e,a)}}return e}function Mr(e,t){return e+Qt(un()*(t-e+1))}function Rr(e,t){var n="";if(!e||t<1||t>9007199254740991)return n;do{t%2&&(n+=e),(t=Qt(t/2))&&(e+=e)}while(t);return n}function Nr(e,t){return wi(fi(e,t,qs),e+"")}function Br(e){return Bn(Ps(e))}function Wr(e,t){var n=Ps(e);return Si(n,Xn(t,0,n.length))}function Fr(e,t,n,r){if(!Ho(e))return e;for(var a=-1,i=(t=sa(t,e)).length,o=i-1,s=e;null!=s&&++a<i;){var c=_i(t[a]),l=n;if(a!=o){var u=s[c];void 0===(l=r?r(u,c,s):void 0)&&(l=Ho(u)?u:oi(t[a+1])?[]:{})}Hn(s,c,l),s=s[c]}return e}var Ur=bn?function(e,t){return bn.set(e,t),e}:qs,Hr=Jt?function(e,t){return Jt(e,"toString",{configurable:!0,enumerable:!1,value:Hs(t),writable:!0})}:qs;function zr(e){return Si(Ps(e))}function Vr(e,t,n){var a=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var o=r(i);++a<i;)o[a]=e[a+t];return o}function qr(e,t){var n;return er(e,(function(e,r,a){return!(n=t(e,r,a))})),!!n}function Yr(e,t,n){var r=0,a=null==e?r:e.length;if("number"==typeof t&&t==t&&a<=2147483647){for(;r<a;){var i=r+a>>>1,o=e[i];null!==o&&!Ko(o)&&(n?o<=t:o<t)?r=i+1:a=i}return a}return Jr(e,t,qs,n)}function Jr(e,t,n,r){t=n(t);for(var a=0,i=null==e?0:e.length,o=t!=t,s=null===t,c=Ko(t),l=void 0===t;a<i;){var u=Qt((a+i)/2),h=n(e[u]),d=void 0!==h,p=null===h,f=h==h,m=Ko(h);if(o)var g=r||f;else g=l?f&&(r||d):s?f&&d&&(r||!p):c?f&&d&&!p&&(r||!m):!p&&!m&&(r?h<=t:h<t);g?a=u+1:i=u}return sn(i,4294967294)}function Xr(e,t){for(var n=-1,r=e.length,a=0,i=[];++n<r;){var o=e[n],s=t?t(o):o;if(!n||!Po(s,c)){var c=s;i[a++]=0===o?0:o}}return i}function $r(e){return"number"==typeof e?e:Ko(e)?NaN:+e}function Kr(e){if("string"==typeof e)return e;if(Go(e))return dt(e,Kr)+"";if(Ko(e))return In?In.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Zr(e,t,n){var r=-1,a=ut,i=e.length,o=!0,s=[],c=s;if(n)o=!1,a=ht;else if(i>=200){var l=t?null:Ra(e);if(l)return Ut(l);o=!1,a=At,c=new Mn}else c=t?[]:s;e:for(;++r<i;){var u=e[r],h=t?t(u):u;if(u=n||0!==u?u:0,o&&h==h){for(var d=c.length;d--;)if(c[d]===h)continue e;t&&c.push(h),s.push(u)}else a(c,h,n)||(c!==s&&c.push(h),s.push(u))}return s}function Qr(e,t){return null==(e=mi(e,t=sa(t,e)))||delete e[_i(Ni(t))]}function ea(e,t,n,r){return Fr(e,t,n(hr(e,t)),r)}function ta(e,t,n,r){for(var a=e.length,i=r?a:-1;(r?i--:++i<a)&&t(e[i],i,e););return n?Vr(e,r?0:i,r?i+1:a):Vr(e,r?i+1:0,r?a:i)}function na(e,t){var n=e;return n instanceof Tn&&(n=n.value()),ft(t,(function(e,t){return t.func.apply(t.thisArg,pt([e],t.args))}),n)}function ra(e,t,n){var a=e.length;if(a<2)return a?Zr(e[0]):[];for(var i=-1,o=r(a);++i<a;)for(var s=e[i],c=-1;++c<a;)c!=i&&(o[i]=Qn(o[i]||s,e[c],t,n));return Zr(ir(o,1),t,n)}function aa(e,t,n){for(var r=-1,a=e.length,i=t.length,o={};++r<a;){var s=r<i?t[r]:void 0;n(o,e[r],s)}return o}function ia(e){return Mo(e)?e:[]}function oa(e){return"function"==typeof e?e:qs}function sa(e,t){return Go(e)?e:ci(e,t)?[e]:ji(ss(e))}var ca=Nr;function la(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:Vr(e,t,n)}var ua=Xt||function(e){return qe.clearTimeout(e)};function ha(e,t){if(t)return e.slice();var n=e.length,r=ze?ze(n):new e.constructor(n);return e.copy(r),r}function da(e){var t=new e.constructor(e.byteLength);return new Fe(t).set(new Fe(e)),t}function pa(e,t){var n=t?da(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function fa(e,t){if(e!==t){var n=void 0!==e,r=null===e,a=e==e,i=Ko(e),o=void 0!==t,s=null===t,c=t==t,l=Ko(t);if(!s&&!l&&!i&&e>t||i&&o&&c&&!s&&!l||r&&o&&c||!n&&c||!a)return 1;if(!r&&!i&&!l&&e<t||l&&n&&a&&!r&&!i||s&&n&&a||!o&&a||!c)return-1}return 0}function ma(e,t,n,a){for(var i=-1,o=e.length,s=n.length,c=-1,l=t.length,u=on(o-s,0),h=r(l+u),d=!a;++c<l;)h[c]=t[c];for(;++i<s;)(d||i<o)&&(h[n[i]]=e[i]);for(;u--;)h[c++]=e[i++];return h}function ga(e,t,n,a){for(var i=-1,o=e.length,s=-1,c=n.length,l=-1,u=t.length,h=on(o-c,0),d=r(h+u),p=!a;++i<h;)d[i]=e[i];for(var f=i;++l<u;)d[f+l]=t[l];for(;++s<c;)(p||i<o)&&(d[f+n[s]]=e[i++]);return d}function va(e,t){var n=-1,a=e.length;for(t||(t=r(a));++n<a;)t[n]=e[n];return t}function ba(e,t,n,r){var a=!n;n||(n={});for(var i=-1,o=t.length;++i<o;){var s=t[i],c=r?r(n[s],e[s],s,n,e):void 0;void 0===c&&(c=e[s]),a?Yn(n,s,c):Hn(n,s,c)}return n}function ya(e,t){return function(n,r){var a=Go(n)?it:Vn,i=t?t():{};return a(n,e,$a(r,2),i)}}function wa(e){return Nr((function(t,n){var r=-1,a=n.length,i=a>1?n[a-1]:void 0,o=a>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(a--,i):void 0,o&&si(n[0],n[1],o)&&(i=a<3?void 0:i,a=1),t=me(t);++r<a;){var s=n[r];s&&e(t,s,r,i)}return t}))}function xa(e,t){return function(n,r){if(null==n)return n;if(!Lo(n))return e(n,r);for(var a=n.length,i=t?a:-1,o=me(n);(t?i--:++i<a)&&!1!==r(o[i],i,o););return n}}function Oa(e){return function(t,n,r){for(var a=-1,i=me(t),o=r(t),s=o.length;s--;){var c=o[e?s:++a];if(!1===n(i[c],c,i))break}return t}}function Sa(e){return function(t){var n=Nt(t=ss(t))?Vt(t):void 0,r=n?n[0]:t.charAt(0),a=n?la(n,1).join(""):t.slice(1);return r[e]()+a}}function ja(e){return function(t){return ft(Ws(Ts(t).replace(Ae,"")),e,"")}}function _a(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=Pn(e.prototype),r=e.apply(n,t);return Ho(r)?r:n}}function Da(e){return function(t,n,r){var a=me(t);if(!Lo(t)){var i=$a(n,3);t=ws(t),n=function(e){return i(a[e],e,a)}}var o=e(t,n,r);return o>-1?a[i?t[o]:o]:void 0}}function Ia(e){return za((function(t){var n=t.length,r=n,i=An.prototype.thru;for(e&&t.reverse();r--;){var o=t[r];if("function"!=typeof o)throw new be(a);if(i&&!s&&"wrapper"==Ja(o))var s=new An([],!0)}for(r=s?r:n;++r<n;){var c=Ja(o=t[r]),l="wrapper"==c?Ya(o):void 0;s=l&&li(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?s[Ja(l[0])].apply(s,l[3]):1==o.length&&li(o)?s[c]():s.thru(o)}return function(){var e=arguments,r=e[0];if(s&&1==e.length&&Go(r))return s.plant(r).value();for(var a=0,i=n?t[a].apply(this,e):r;++a<n;)i=t[a].call(this,i);return i}}))}function ka(e,t,n,a,i,o,s,c,l,u){var h=128&t,d=1&t,p=2&t,f=24&t,m=512&t,g=p?void 0:_a(e);return function v(){for(var b=arguments.length,y=r(b),w=b;w--;)y[w]=arguments[w];if(f)var x=Xa(v),O=Ct(y,x);if(a&&(y=ma(y,a,i,f)),o&&(y=ga(y,o,s,f)),b-=O,f&&b<u){var S=Ft(y,x);return La(e,t,ka,v.placeholder,n,y,S,c,l,u-b)}var j=d?n:this,_=p?j[e]:e;return b=y.length,c?y=gi(y,c):m&&b>1&&y.reverse(),h&&l<b&&(y.length=l),this&&this!==qe&&this instanceof v&&(_=g||_a(_)),_.apply(j,y)}}function Pa(e,t){return function(n,r){return function(e,t,n,r){return cr(e,(function(e,a,i){t(r,n(e),a,i)})),r}(n,e,t(r),{})}}function Ea(e,t){return function(n,r){var a;if(void 0===n&&void 0===r)return t;if(void 0!==n&&(a=n),void 0!==r){if(void 0===a)return r;"string"==typeof n||"string"==typeof r?(n=Kr(n),r=Kr(r)):(n=$r(n),r=$r(r)),a=e(n,r)}return a}}function Aa(e){return za((function(t){return t=dt(t,Pt($a())),Nr((function(n){var r=this;return e(t,(function(e){return at(e,r,n)}))}))}))}function Ta(e,t){var n=(t=void 0===t?" ":Kr(t)).length;if(n<2)return n?Rr(t,e):t;var r=Rr(t,Zt(e/zt(t)));return Nt(t)?la(Vt(r),0,e).join(""):r.slice(0,e)}function Ga(e){return function(t,n,a){return a&&"number"!=typeof a&&si(t,n,a)&&(n=a=void 0),t=ns(t),void 0===n?(n=t,t=0):n=ns(n),function(e,t,n,a){for(var i=-1,o=on(Zt((t-e)/(n||1)),0),s=r(o);o--;)s[a?o:++i]=e,e+=n;return s}(t,n,a=void 0===a?t<n?1:-1:ns(a),e)}}function Ca(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=is(t),n=is(n)),e(t,n)}}function La(e,t,n,r,a,i,o,s,c,l){var u=8&t;t|=u?32:64,4&(t&=~(u?64:32))||(t&=-4);var h=[e,t,a,u?i:void 0,u?o:void 0,u?void 0:i,u?void 0:o,s,c,l],d=n.apply(void 0,h);return li(e)&&bi(d,h),d.placeholder=r,xi(d,e,t)}function Ma(e){var t=fe[e];return function(e,n){if(e=is(e),(n=null==n?0:sn(rs(n),292))&&nn(e)){var r=(ss(e)+"e").split("e");return+((r=(ss(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Ra=mn&&1/Ut(new mn([,-0]))[1]==1/0?function(e){return new mn(e)}:Ks;function Na(e){return function(t){var n=ni(t);return n==f?Bt(t):n==b?Ht(t):function(e,t){return dt(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Ba(e,t,n,o,s,c,l,u){var h=2&t;if(!h&&"function"!=typeof e)throw new be(a);var d=o?o.length:0;if(d||(t&=-97,o=s=void 0),l=void 0===l?l:on(rs(l),0),u=void 0===u?u:rs(u),d-=s?s.length:0,64&t){var p=o,f=s;o=s=void 0}var m=h?void 0:Ya(e),g=[e,t,n,o,s,p,f,c,l,u];if(m&&function(e,t){var n=e[1],r=t[1],a=n|r,o=a<131,s=128==r&&8==n||128==r&&256==n&&e[7].length<=t[8]||384==r&&t[7].length<=t[8]&&8==n;if(!o&&!s)return e;1&r&&(e[2]=t[2],a|=1&n?0:4);var c=t[3];if(c){var l=e[3];e[3]=l?ma(l,c,t[4]):c,e[4]=l?Ft(e[3],i):t[4]}(c=t[5])&&(l=e[5],e[5]=l?ga(l,c,t[6]):c,e[6]=l?Ft(e[5],i):t[6]);(c=t[7])&&(e[7]=c);128&r&&(e[8]=null==e[8]?t[8]:sn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=a}(g,m),e=g[0],t=g[1],n=g[2],o=g[3],s=g[4],!(u=g[9]=void 0===g[9]?h?0:e.length:on(g[9]-d,0))&&24&t&&(t&=-25),t&&1!=t)v=8==t||16==t?function(e,t,n){var a=_a(e);return function i(){for(var o=arguments.length,s=r(o),c=o,l=Xa(i);c--;)s[c]=arguments[c];var u=o<3&&s[0]!==l&&s[o-1]!==l?[]:Ft(s,l);if((o-=u.length)<n)return La(e,t,ka,i.placeholder,void 0,s,u,void 0,void 0,n-o);var h=this&&this!==qe&&this instanceof i?a:e;return at(h,this,s)}}(e,t,u):32!=t&&33!=t||s.length?ka.apply(void 0,g):function(e,t,n,a){var i=1&t,o=_a(e);return function t(){for(var s=-1,c=arguments.length,l=-1,u=a.length,h=r(u+c),d=this&&this!==qe&&this instanceof t?o:e;++l<u;)h[l]=a[l];for(;c--;)h[l++]=arguments[++s];return at(d,i?n:this,h)}}(e,t,n,o);else var v=function(e,t,n){var r=1&t,a=_a(e);return function t(){var i=this&&this!==qe&&this instanceof t?a:e;return i.apply(r?n:this,arguments)}}(e,t,n);return xi((m?Ur:bi)(v,g),e,t)}function Wa(e,t,n,r){return void 0===e||Po(e,xe[n])&&!je.call(r,n)?t:e}function Fa(e,t,n,r,a,i){return Ho(e)&&Ho(t)&&(i.set(t,e),Er(e,t,void 0,Fa,i),i.delete(t)),e}function Ua(e){return Yo(e)?void 0:e}function Ha(e,t,n,r,a,i){var o=1&n,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var u=-1,h=!0,d=2&n?new Mn:void 0;for(i.set(e,t),i.set(t,e);++u<s;){var p=e[u],f=t[u];if(r)var m=o?r(f,p,u,t,e,i):r(p,f,u,e,t,i);if(void 0!==m){if(m)continue;h=!1;break}if(d){if(!gt(t,(function(e,t){if(!At(d,t)&&(p===e||a(p,e,n,r,i)))return d.push(t)}))){h=!1;break}}else if(p!==f&&!a(p,f,n,r,i)){h=!1;break}}return i.delete(e),i.delete(t),h}function za(e){return wi(fi(e,void 0,Gi),e+"")}function Va(e){return dr(e,ws,ei)}function qa(e){return dr(e,xs,ti)}var Ya=bn?function(e){return bn.get(e)}:Ks;function Ja(e){for(var t=e.name+"",n=yn[t],r=je.call(yn,t)?n.length:0;r--;){var a=n[r],i=a.func;if(null==i||i==e)return a.name}return t}function Xa(e){return(je.call(kn,"placeholder")?kn:e).placeholder}function $a(){var e=kn.iteratee||Ys;return e=e===Ys?Sr:e,arguments.length?e(arguments[0],arguments[1]):e}function Ka(e,t){var n,r,a=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof t?"string":"hash"]:a.map}function Za(e){for(var t=ws(e),n=t.length;n--;){var r=t[n],a=e[r];t[n]=[r,a,di(a)]}return t}function Qa(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Or(n)?n:void 0}var ei=en?function(e){return null==e?[]:(e=me(e),lt(en(e),(function(t){return Je.call(e,t)})))}:ac,ti=en?function(e){for(var t=[];e;)pt(t,ei(e)),e=Ve(e);return t}:ac,ni=pr;function ri(e,t,n){for(var r=-1,a=(t=sa(t,e)).length,i=!1;++r<a;){var o=_i(t[r]);if(!(i=null!=e&&n(e,o)))break;e=e[o]}return i||++r!=a?i:!!(a=null==e?0:e.length)&&Uo(a)&&oi(o,a)&&(Go(e)||To(e))}function ai(e){return"function"!=typeof e.constructor||hi(e)?{}:Pn(Ve(e))}function ii(e){return Go(e)||To(e)||!!(Ke&&e&&e[Ke])}function oi(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&se.test(e))&&e>-1&&e%1==0&&e<t}function si(e,t,n){if(!Ho(n))return!1;var r=typeof t;return!!("number"==r?Lo(n)&&oi(t,n.length):"string"==r&&t in n)&&Po(n[t],e)}function ci(e,t){if(Go(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Ko(e))||(H.test(e)||!U.test(e)||null!=t&&e in me(t))}function li(e){var t=Ja(e),n=kn[t];if("function"!=typeof n||!(t in Tn.prototype))return!1;if(e===n)return!0;var r=Ya(n);return!!r&&e===r[0]}(dn&&ni(new dn(new ArrayBuffer(1)))!=S||pn&&ni(new pn)!=f||fn&&"[object Promise]"!=ni(fn.resolve())||mn&&ni(new mn)!=b||gn&&ni(new gn)!=x)&&(ni=function(e){var t=pr(e),n=t==g?e.constructor:void 0,r=n?Di(n):"";if(r)switch(r){case wn:return S;case xn:return f;case On:return"[object Promise]";case Sn:return b;case jn:return x}return t});var ui=Oe?Wo:ic;function hi(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||xe)}function di(e){return e==e&&!Ho(e)}function pi(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in me(n)))}}function fi(e,t,n){return t=on(void 0===t?e.length-1:t,0),function(){for(var a=arguments,i=-1,o=on(a.length-t,0),s=r(o);++i<o;)s[i]=a[t+i];i=-1;for(var c=r(t+1);++i<t;)c[i]=a[i];return c[t]=n(s),at(e,this,c)}}function mi(e,t){return t.length<2?e:hr(e,Vr(t,0,-1))}function gi(e,t){for(var n=e.length,r=sn(t.length,n),a=va(e);r--;){var i=t[r];e[r]=oi(i,n)?a[i]:void 0}return e}function vi(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var bi=Oi(Ur),yi=Kt||function(e,t){return qe.setTimeout(e,t)},wi=Oi(Hr);function xi(e,t,n){var r=t+"";return wi(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace($,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return ot(o,(function(n){var r="_."+n[0];t&n[1]&&!ut(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(K);return t?t[1].split(Z):[]}(r),n)))}function Oi(e){var t=0,n=0;return function(){var r=cn(),a=16-(r-n);if(n=r,a>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}function Si(e,t){var n=-1,r=e.length,a=r-1;for(t=void 0===t?r:t;++n<t;){var i=Mr(n,a),o=e[i];e[i]=e[n],e[n]=o}return e.length=t,e}var ji=function(e){var t=So(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(z,(function(e,n,r,a){t.push(r?a.replace(ee,"$1"):n||e)})),t}));function _i(e){if("string"==typeof e||Ko(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Di(e){if(null!=e){try{return Se.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ii(e){if(e instanceof Tn)return e.clone();var t=new An(e.__wrapped__,e.__chain__);return t.__actions__=va(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var ki=Nr((function(e,t){return Mo(e)?Qn(e,ir(t,1,Mo,!0)):[]})),Pi=Nr((function(e,t){var n=Ni(t);return Mo(n)&&(n=void 0),Mo(e)?Qn(e,ir(t,1,Mo,!0),$a(n,2)):[]})),Ei=Nr((function(e,t){var n=Ni(t);return Mo(n)&&(n=void 0),Mo(e)?Qn(e,ir(t,1,Mo,!0),void 0,n):[]}));function Ai(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:rs(n);return a<0&&(a=on(r+a,0)),yt(e,$a(t,3),a)}function Ti(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r-1;return void 0!==n&&(a=rs(n),a=n<0?on(r+a,0):sn(a,r-1)),yt(e,$a(t,3),a,!0)}function Gi(e){return(null==e?0:e.length)?ir(e,1):[]}function Ci(e){return e&&e.length?e[0]:void 0}var Li=Nr((function(e){var t=dt(e,ia);return t.length&&t[0]===e[0]?vr(t):[]})),Mi=Nr((function(e){var t=Ni(e),n=dt(e,ia);return t===Ni(n)?t=void 0:n.pop(),n.length&&n[0]===e[0]?vr(n,$a(t,2)):[]})),Ri=Nr((function(e){var t=Ni(e),n=dt(e,ia);return(t="function"==typeof t?t:void 0)&&n.pop(),n.length&&n[0]===e[0]?vr(n,void 0,t):[]}));function Ni(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}var Bi=Nr(Wi);function Wi(e,t){return e&&e.length&&t&&t.length?Cr(e,t):e}var Fi=za((function(e,t){var n=null==e?0:e.length,r=Jn(e,t);return Lr(e,dt(t,(function(e){return oi(e,n)?+e:e})).sort(fa)),r}));function Ui(e){return null==e?e:hn.call(e)}var Hi=Nr((function(e){return Zr(ir(e,1,Mo,!0))})),zi=Nr((function(e){var t=Ni(e);return Mo(t)&&(t=void 0),Zr(ir(e,1,Mo,!0),$a(t,2))})),Vi=Nr((function(e){var t=Ni(e);return t="function"==typeof t?t:void 0,Zr(ir(e,1,Mo,!0),void 0,t)}));function qi(e){if(!e||!e.length)return[];var t=0;return e=lt(e,(function(e){if(Mo(e))return t=on(e.length,t),!0})),kt(t,(function(t){return dt(e,jt(t))}))}function Yi(e,t){if(!e||!e.length)return[];var n=qi(e);return null==t?n:dt(n,(function(e){return at(t,void 0,e)}))}var Ji=Nr((function(e,t){return Mo(e)?Qn(e,t):[]})),Xi=Nr((function(e){return ra(lt(e,Mo))})),$i=Nr((function(e){var t=Ni(e);return Mo(t)&&(t=void 0),ra(lt(e,Mo),$a(t,2))})),Ki=Nr((function(e){var t=Ni(e);return t="function"==typeof t?t:void 0,ra(lt(e,Mo),void 0,t)})),Zi=Nr(qi);var Qi=Nr((function(e){var t=e.length,n=t>1?e[t-1]:void 0;return n="function"==typeof n?(e.pop(),n):void 0,Yi(e,n)}));function eo(e){var t=kn(e);return t.__chain__=!0,t}function to(e,t){return t(e)}var no=za((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,a=function(t){return Jn(t,e)};return!(t>1||this.__actions__.length)&&r instanceof Tn&&oi(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:to,args:[a],thisArg:void 0}),new An(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(void 0),e}))):this.thru(a)}));var ro=ya((function(e,t,n){je.call(e,n)?++e[n]:Yn(e,n,1)}));var ao=Da(Ai),io=Da(Ti);function oo(e,t){return(Go(e)?ot:er)(e,$a(t,3))}function so(e,t){return(Go(e)?st:tr)(e,$a(t,3))}var co=ya((function(e,t,n){je.call(e,n)?e[n].push(t):Yn(e,n,[t])}));var lo=Nr((function(e,t,n){var a=-1,i="function"==typeof t,o=Lo(e)?r(e.length):[];return er(e,(function(e){o[++a]=i?at(t,e,n):br(e,t,n)})),o})),uo=ya((function(e,t,n){Yn(e,n,t)}));function ho(e,t){return(Go(e)?dt:Ir)(e,$a(t,3))}var po=ya((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var fo=Nr((function(e,t){if(null==e)return[];var n=t.length;return n>1&&si(e,t[0],t[1])?t=[]:n>2&&si(t[0],t[1],t[2])&&(t=[t[0]]),Tr(e,ir(t,1),[])})),mo=$t||function(){return qe.Date.now()};function go(e,t,n){return t=n?void 0:t,Ba(e,128,void 0,void 0,void 0,void 0,t=e&&null==t?e.length:t)}function vo(e,t){var n;if("function"!=typeof t)throw new be(a);return e=rs(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=void 0),n}}var bo=Nr((function(e,t,n){var r=1;if(n.length){var a=Ft(n,Xa(bo));r|=32}return Ba(e,r,t,n,a)})),yo=Nr((function(e,t,n){var r=3;if(n.length){var a=Ft(n,Xa(yo));r|=32}return Ba(t,r,e,n,a)}));function wo(e,t,n){var r,i,o,s,c,l,u=0,h=!1,d=!1,p=!0;if("function"!=typeof e)throw new be(a);function f(t){var n=r,a=i;return r=i=void 0,u=t,s=e.apply(a,n)}function m(e){return u=e,c=yi(v,t),h?f(e):s}function g(e){var n=e-l;return void 0===l||n>=t||n<0||d&&e-u>=o}function v(){var e=mo();if(g(e))return b(e);c=yi(v,function(e){var n=t-(e-l);return d?sn(n,o-(e-u)):n}(e))}function b(e){return c=void 0,p&&r?f(e):(r=i=void 0,s)}function y(){var e=mo(),n=g(e);if(r=arguments,i=this,l=e,n){if(void 0===c)return m(l);if(d)return ua(c),c=yi(v,t),f(l)}return void 0===c&&(c=yi(v,t)),s}return t=is(t)||0,Ho(n)&&(h=!!n.leading,o=(d="maxWait"in n)?on(is(n.maxWait)||0,t):o,p="trailing"in n?!!n.trailing:p),y.cancel=function(){void 0!==c&&ua(c),u=0,r=l=i=c=void 0},y.flush=function(){return void 0===c?s:b(mo())},y}var xo=Nr((function(e,t){return Zn(e,1,t)})),Oo=Nr((function(e,t,n){return Zn(e,is(t)||0,n)}));function So(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new be(a);var n=function(){var r=arguments,a=t?t.apply(this,r):r[0],i=n.cache;if(i.has(a))return i.get(a);var o=e.apply(this,r);return n.cache=i.set(a,o)||i,o};return n.cache=new(So.Cache||Ln),n}function jo(e){if("function"!=typeof e)throw new be(a);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}So.Cache=Ln;var _o=ca((function(e,t){var n=(t=1==t.length&&Go(t[0])?dt(t[0],Pt($a())):dt(ir(t,1),Pt($a()))).length;return Nr((function(r){for(var a=-1,i=sn(r.length,n);++a<i;)r[a]=t[a].call(this,r[a]);return at(e,this,r)}))})),Do=Nr((function(e,t){return Ba(e,32,void 0,t,Ft(t,Xa(Do)))})),Io=Nr((function(e,t){return Ba(e,64,void 0,t,Ft(t,Xa(Io)))})),ko=za((function(e,t){return Ba(e,256,void 0,void 0,void 0,t)}));function Po(e,t){return e===t||e!=e&&t!=t}var Eo=Ca(fr),Ao=Ca((function(e,t){return e>=t})),To=yr(function(){return arguments}())?yr:function(e){return zo(e)&&je.call(e,"callee")&&!Je.call(e,"callee")},Go=r.isArray,Co=Ze?Pt(Ze):function(e){return zo(e)&&pr(e)==O};function Lo(e){return null!=e&&Uo(e.length)&&!Wo(e)}function Mo(e){return zo(e)&&Lo(e)}var Ro=tn||ic,No=Qe?Pt(Qe):function(e){return zo(e)&&pr(e)==u};function Bo(e){if(!zo(e))return!1;var t=pr(e);return t==h||"[object DOMException]"==t||"string"==typeof e.message&&"string"==typeof e.name&&!Yo(e)}function Wo(e){if(!Ho(e))return!1;var t=pr(e);return t==d||t==p||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Fo(e){return"number"==typeof e&&e==rs(e)}function Uo(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function Ho(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function zo(e){return null!=e&&"object"==typeof e}var Vo=et?Pt(et):function(e){return zo(e)&&ni(e)==f};function qo(e){return"number"==typeof e||zo(e)&&pr(e)==m}function Yo(e){if(!zo(e)||pr(e)!=g)return!1;var t=Ve(e);if(null===t)return!0;var n=je.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Se.call(n)==ke}var Jo=tt?Pt(tt):function(e){return zo(e)&&pr(e)==v};var Xo=nt?Pt(nt):function(e){return zo(e)&&ni(e)==b};function $o(e){return"string"==typeof e||!Go(e)&&zo(e)&&pr(e)==y}function Ko(e){return"symbol"==typeof e||zo(e)&&pr(e)==w}var Zo=rt?Pt(rt):function(e){return zo(e)&&Uo(e.length)&&!!Be[pr(e)]};var Qo=Ca(Dr),es=Ca((function(e,t){return e<=t}));function ts(e){if(!e)return[];if(Lo(e))return $o(e)?Vt(e):va(e);if(vt&&e[vt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[vt]());var t=ni(e);return(t==f?Bt:t==b?Ut:Ps)(e)}function ns(e){return e?(e=is(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function rs(e){var t=ns(e),n=t%1;return t==t?n?t-n:t:0}function as(e){return e?Xn(rs(e),0,4294967295):0}function is(e){if("number"==typeof e)return e;if(Ko(e))return NaN;if(Ho(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ho(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Y,"");var n=ae.test(e);return n||oe.test(e)?He(e.slice(2),n?2:8):re.test(e)?NaN:+e}function os(e){return ba(e,xs(e))}function ss(e){return null==e?"":Kr(e)}var cs=wa((function(e,t){if(hi(t)||Lo(t))ba(t,ws(t),e);else for(var n in t)je.call(t,n)&&Hn(e,n,t[n])})),ls=wa((function(e,t){ba(t,xs(t),e)})),us=wa((function(e,t,n,r){ba(t,xs(t),e,r)})),hs=wa((function(e,t,n,r){ba(t,ws(t),e,r)})),ds=za(Jn);var ps=Nr((function(e,t){e=me(e);var n=-1,r=t.length,a=r>2?t[2]:void 0;for(a&&si(t[0],t[1],a)&&(r=1);++n<r;)for(var i=t[n],o=xs(i),s=-1,c=o.length;++s<c;){var l=o[s],u=e[l];(void 0===u||Po(u,xe[l])&&!je.call(e,l))&&(e[l]=i[l])}return e})),fs=Nr((function(e){return e.push(void 0,Fa),at(Ss,void 0,e)}));function ms(e,t,n){var r=null==e?void 0:hr(e,t);return void 0===r?n:r}function gs(e,t){return null!=e&&ri(e,t,gr)}var vs=Pa((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ie.call(t)),e[t]=n}),Hs(qs)),bs=Pa((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=Ie.call(t)),je.call(e,t)?e[t].push(n):e[t]=[n]}),$a),ys=Nr(br);function ws(e){return Lo(e)?Nn(e):jr(e)}function xs(e){return Lo(e)?Nn(e,!0):_r(e)}var Os=wa((function(e,t,n){Er(e,t,n)})),Ss=wa((function(e,t,n,r){Er(e,t,n,r)})),js=za((function(e,t){var n={};if(null==e)return n;var r=!1;t=dt(t,(function(t){return t=sa(t,e),r||(r=t.length>1),t})),ba(e,qa(e),n),r&&(n=$n(n,7,Ua));for(var a=t.length;a--;)Qr(n,t[a]);return n}));var _s=za((function(e,t){return null==e?{}:function(e,t){return Gr(e,t,(function(t,n){return gs(e,n)}))}(e,t)}));function Ds(e,t){if(null==e)return{};var n=dt(qa(e),(function(e){return[e]}));return t=$a(t),Gr(e,n,(function(e,n){return t(e,n[0])}))}var Is=Na(ws),ks=Na(xs);function Ps(e){return null==e?[]:Et(e,ws(e))}var Es=ja((function(e,t,n){return t=t.toLowerCase(),e+(n?As(t):t)}));function As(e){return Bs(ss(e).toLowerCase())}function Ts(e){return(e=ss(e))&&e.replace(ce,Lt).replace(Te,"")}var Gs=ja((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),Cs=ja((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Ls=Sa("toLowerCase");var Ms=ja((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Rs=ja((function(e,t,n){return e+(n?" ":"")+Bs(t)}));var Ns=ja((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Bs=Sa("toUpperCase");function Ws(e,t,n){return e=ss(e),void 0===(t=n?void 0:t)?function(e){return Me.test(e)}(e)?function(e){return e.match(Ce)||[]}(e):function(e){return e.match(Q)||[]}(e):e.match(t)||[]}var Fs=Nr((function(e,t){try{return at(e,void 0,t)}catch(e){return Bo(e)?e:new de(e)}})),Us=za((function(e,t){return ot(t,(function(t){t=_i(t),Yn(e,t,bo(e[t],e))})),e}));function Hs(e){return function(){return e}}var zs=Ia(),Vs=Ia(!0);function qs(e){return e}function Ys(e){return Sr("function"==typeof e?e:$n(e,1))}var Js=Nr((function(e,t){return function(n){return br(n,e,t)}})),Xs=Nr((function(e,t){return function(n){return br(e,n,t)}}));function $s(e,t,n){var r=ws(t),a=ur(t,r);null!=n||Ho(t)&&(a.length||!r.length)||(n=t,t=e,e=this,a=ur(t,ws(t)));var i=!(Ho(n)&&"chain"in n&&!n.chain),o=Wo(e);return ot(a,(function(n){var r=t[n];e[n]=r,o&&(e.prototype[n]=function(){var t=this.__chain__;if(i||t){var n=e(this.__wrapped__),a=n.__actions__=va(this.__actions__);return a.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,pt([this.value()],arguments))})})),e}function Ks(){}var Zs=Aa(dt),Qs=Aa(ct),ec=Aa(gt);function tc(e){return ci(e)?jt(_i(e)):function(e){return function(t){return hr(t,e)}}(e)}var nc=Ga(),rc=Ga(!0);function ac(){return[]}function ic(){return!1}var oc=Ea((function(e,t){return e+t}),0),sc=Ma("ceil"),cc=Ea((function(e,t){return e/t}),1),lc=Ma("floor");var uc,hc=Ea((function(e,t){return e*t}),1),dc=Ma("round"),pc=Ea((function(e,t){return e-t}),0);return kn.after=function(e,t){if("function"!=typeof t)throw new be(a);return e=rs(e),function(){if(--e<1)return t.apply(this,arguments)}},kn.ary=go,kn.assign=cs,kn.assignIn=ls,kn.assignInWith=us,kn.assignWith=hs,kn.at=ds,kn.before=vo,kn.bind=bo,kn.bindAll=Us,kn.bindKey=yo,kn.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return Go(e)?e:[e]},kn.chain=eo,kn.chunk=function(e,t,n){t=(n?si(e,t,n):void 0===t)?1:on(rs(t),0);var a=null==e?0:e.length;if(!a||t<1)return[];for(var i=0,o=0,s=r(Zt(a/t));i<a;)s[o++]=Vr(e,i,i+=t);return s},kn.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,a=[];++t<n;){var i=e[t];i&&(a[r++]=i)}return a},kn.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],a=e;a--;)t[a-1]=arguments[a];return pt(Go(n)?va(n):[n],ir(t,1))},kn.cond=function(e){var t=null==e?0:e.length,n=$a();return e=t?dt(e,(function(e){if("function"!=typeof e[1])throw new be(a);return[n(e[0]),e[1]]})):[],Nr((function(n){for(var r=-1;++r<t;){var a=e[r];if(at(a[0],this,n))return at(a[1],this,n)}}))},kn.conforms=function(e){return function(e){var t=ws(e);return function(n){return Kn(n,e,t)}}($n(e,1))},kn.constant=Hs,kn.countBy=ro,kn.create=function(e,t){var n=Pn(e);return null==t?n:qn(n,t)},kn.curry=function e(t,n,r){var a=Ba(t,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return a.placeholder=e.placeholder,a},kn.curryRight=function e(t,n,r){var a=Ba(t,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return a.placeholder=e.placeholder,a},kn.debounce=wo,kn.defaults=ps,kn.defaultsDeep=fs,kn.defer=xo,kn.delay=Oo,kn.difference=ki,kn.differenceBy=Pi,kn.differenceWith=Ei,kn.drop=function(e,t,n){var r=null==e?0:e.length;return r?Vr(e,(t=n||void 0===t?1:rs(t))<0?0:t,r):[]},kn.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Vr(e,0,(t=r-(t=n||void 0===t?1:rs(t)))<0?0:t):[]},kn.dropRightWhile=function(e,t){return e&&e.length?ta(e,$a(t,3),!0,!0):[]},kn.dropWhile=function(e,t){return e&&e.length?ta(e,$a(t,3),!0):[]},kn.fill=function(e,t,n,r){var a=null==e?0:e.length;return a?(n&&"number"!=typeof n&&si(e,t,n)&&(n=0,r=a),function(e,t,n,r){var a=e.length;for((n=rs(n))<0&&(n=-n>a?0:a+n),(r=void 0===r||r>a?a:rs(r))<0&&(r+=a),r=n>r?0:as(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},kn.filter=function(e,t){return(Go(e)?lt:ar)(e,$a(t,3))},kn.flatMap=function(e,t){return ir(ho(e,t),1)},kn.flatMapDeep=function(e,t){return ir(ho(e,t),1/0)},kn.flatMapDepth=function(e,t,n){return n=void 0===n?1:rs(n),ir(ho(e,t),n)},kn.flatten=Gi,kn.flattenDeep=function(e){return(null==e?0:e.length)?ir(e,1/0):[]},kn.flattenDepth=function(e,t){return(null==e?0:e.length)?ir(e,t=void 0===t?1:rs(t)):[]},kn.flip=function(e){return Ba(e,512)},kn.flow=zs,kn.flowRight=Vs,kn.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var a=e[t];r[a[0]]=a[1]}return r},kn.functions=function(e){return null==e?[]:ur(e,ws(e))},kn.functionsIn=function(e){return null==e?[]:ur(e,xs(e))},kn.groupBy=co,kn.initial=function(e){return(null==e?0:e.length)?Vr(e,0,-1):[]},kn.intersection=Li,kn.intersectionBy=Mi,kn.intersectionWith=Ri,kn.invert=vs,kn.invertBy=bs,kn.invokeMap=lo,kn.iteratee=Ys,kn.keyBy=uo,kn.keys=ws,kn.keysIn=xs,kn.map=ho,kn.mapKeys=function(e,t){var n={};return t=$a(t,3),cr(e,(function(e,r,a){Yn(n,t(e,r,a),e)})),n},kn.mapValues=function(e,t){var n={};return t=$a(t,3),cr(e,(function(e,r,a){Yn(n,r,t(e,r,a))})),n},kn.matches=function(e){return kr($n(e,1))},kn.matchesProperty=function(e,t){return Pr(e,$n(t,1))},kn.memoize=So,kn.merge=Os,kn.mergeWith=Ss,kn.method=Js,kn.methodOf=Xs,kn.mixin=$s,kn.negate=jo,kn.nthArg=function(e){return e=rs(e),Nr((function(t){return Ar(t,e)}))},kn.omit=js,kn.omitBy=function(e,t){return Ds(e,jo($a(t)))},kn.once=function(e){return vo(2,e)},kn.orderBy=function(e,t,n,r){return null==e?[]:(Go(t)||(t=null==t?[]:[t]),Go(n=r?void 0:n)||(n=null==n?[]:[n]),Tr(e,t,n))},kn.over=Zs,kn.overArgs=_o,kn.overEvery=Qs,kn.overSome=ec,kn.partial=Do,kn.partialRight=Io,kn.partition=po,kn.pick=_s,kn.pickBy=Ds,kn.property=tc,kn.propertyOf=function(e){return function(t){return null==e?void 0:hr(e,t)}},kn.pull=Bi,kn.pullAll=Wi,kn.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Cr(e,t,$a(n,2)):e},kn.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Cr(e,t,void 0,n):e},kn.pullAt=Fi,kn.range=nc,kn.rangeRight=rc,kn.rearg=ko,kn.reject=function(e,t){return(Go(e)?lt:ar)(e,jo($a(t,3)))},kn.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,a=[],i=e.length;for(t=$a(t,3);++r<i;){var o=e[r];t(o,r,e)&&(n.push(o),a.push(r))}return Lr(e,a),n},kn.rest=function(e,t){if("function"!=typeof e)throw new be(a);return Nr(e,t=void 0===t?t:rs(t))},kn.reverse=Ui,kn.sampleSize=function(e,t,n){return t=(n?si(e,t,n):void 0===t)?1:rs(t),(Go(e)?Wn:Wr)(e,t)},kn.set=function(e,t,n){return null==e?e:Fr(e,t,n)},kn.setWith=function(e,t,n,r){return r="function"==typeof r?r:void 0,null==e?e:Fr(e,t,n,r)},kn.shuffle=function(e){return(Go(e)?Fn:zr)(e)},kn.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&si(e,t,n)?(t=0,n=r):(t=null==t?0:rs(t),n=void 0===n?r:rs(n)),Vr(e,t,n)):[]},kn.sortBy=fo,kn.sortedUniq=function(e){return e&&e.length?Xr(e):[]},kn.sortedUniqBy=function(e,t){return e&&e.length?Xr(e,$a(t,2)):[]},kn.split=function(e,t,n){return n&&"number"!=typeof n&&si(e,t,n)&&(t=n=void 0),(n=void 0===n?4294967295:n>>>0)?(e=ss(e))&&("string"==typeof t||null!=t&&!Jo(t))&&!(t=Kr(t))&&Nt(e)?la(Vt(e),0,n):e.split(t,n):[]},kn.spread=function(e,t){if("function"!=typeof e)throw new be(a);return t=null==t?0:on(rs(t),0),Nr((function(n){var r=n[t],a=la(n,0,t);return r&&pt(a,r),at(e,this,a)}))},kn.tail=function(e){var t=null==e?0:e.length;return t?Vr(e,1,t):[]},kn.take=function(e,t,n){return e&&e.length?Vr(e,0,(t=n||void 0===t?1:rs(t))<0?0:t):[]},kn.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Vr(e,(t=r-(t=n||void 0===t?1:rs(t)))<0?0:t,r):[]},kn.takeRightWhile=function(e,t){return e&&e.length?ta(e,$a(t,3),!1,!0):[]},kn.takeWhile=function(e,t){return e&&e.length?ta(e,$a(t,3)):[]},kn.tap=function(e,t){return t(e),e},kn.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new be(a);return Ho(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),wo(e,t,{leading:r,maxWait:t,trailing:i})},kn.thru=to,kn.toArray=ts,kn.toPairs=Is,kn.toPairsIn=ks,kn.toPath=function(e){return Go(e)?dt(e,_i):Ko(e)?[e]:va(ji(ss(e)))},kn.toPlainObject=os,kn.transform=function(e,t,n){var r=Go(e),a=r||Ro(e)||Zo(e);if(t=$a(t,4),null==n){var i=e&&e.constructor;n=a?r?new i:[]:Ho(e)&&Wo(i)?Pn(Ve(e)):{}}return(a?ot:cr)(e,(function(e,r,a){return t(n,e,r,a)})),n},kn.unary=function(e){return go(e,1)},kn.union=Hi,kn.unionBy=zi,kn.unionWith=Vi,kn.uniq=function(e){return e&&e.length?Zr(e):[]},kn.uniqBy=function(e,t){return e&&e.length?Zr(e,$a(t,2)):[]},kn.uniqWith=function(e,t){return t="function"==typeof t?t:void 0,e&&e.length?Zr(e,void 0,t):[]},kn.unset=function(e,t){return null==e||Qr(e,t)},kn.unzip=qi,kn.unzipWith=Yi,kn.update=function(e,t,n){return null==e?e:ea(e,t,oa(n))},kn.updateWith=function(e,t,n,r){return r="function"==typeof r?r:void 0,null==e?e:ea(e,t,oa(n),r)},kn.values=Ps,kn.valuesIn=function(e){return null==e?[]:Et(e,xs(e))},kn.without=Ji,kn.words=Ws,kn.wrap=function(e,t){return Do(oa(t),e)},kn.xor=Xi,kn.xorBy=$i,kn.xorWith=Ki,kn.zip=Zi,kn.zipObject=function(e,t){return aa(e||[],t||[],Hn)},kn.zipObjectDeep=function(e,t){return aa(e||[],t||[],Fr)},kn.zipWith=Qi,kn.entries=Is,kn.entriesIn=ks,kn.extend=ls,kn.extendWith=us,$s(kn,kn),kn.add=oc,kn.attempt=Fs,kn.camelCase=Es,kn.capitalize=As,kn.ceil=sc,kn.clamp=function(e,t,n){return void 0===n&&(n=t,t=void 0),void 0!==n&&(n=(n=is(n))==n?n:0),void 0!==t&&(t=(t=is(t))==t?t:0),Xn(is(e),t,n)},kn.clone=function(e){return $n(e,4)},kn.cloneDeep=function(e){return $n(e,5)},kn.cloneDeepWith=function(e,t){return $n(e,5,t="function"==typeof t?t:void 0)},kn.cloneWith=function(e,t){return $n(e,4,t="function"==typeof t?t:void 0)},kn.conformsTo=function(e,t){return null==t||Kn(e,t,ws(t))},kn.deburr=Ts,kn.defaultTo=function(e,t){return null==e||e!=e?t:e},kn.divide=cc,kn.endsWith=function(e,t,n){e=ss(e),t=Kr(t);var r=e.length,a=n=void 0===n?r:Xn(rs(n),0,r);return(n-=t.length)>=0&&e.slice(n,a)==t},kn.eq=Po,kn.escape=function(e){return(e=ss(e))&&N.test(e)?e.replace(M,Mt):e},kn.escapeRegExp=function(e){return(e=ss(e))&&q.test(e)?e.replace(V,"\\$&"):e},kn.every=function(e,t,n){var r=Go(e)?ct:nr;return n&&si(e,t,n)&&(t=void 0),r(e,$a(t,3))},kn.find=ao,kn.findIndex=Ai,kn.findKey=function(e,t){return bt(e,$a(t,3),cr)},kn.findLast=io,kn.findLastIndex=Ti,kn.findLastKey=function(e,t){return bt(e,$a(t,3),lr)},kn.floor=lc,kn.forEach=oo,kn.forEachRight=so,kn.forIn=function(e,t){return null==e?e:or(e,$a(t,3),xs)},kn.forInRight=function(e,t){return null==e?e:sr(e,$a(t,3),xs)},kn.forOwn=function(e,t){return e&&cr(e,$a(t,3))},kn.forOwnRight=function(e,t){return e&&lr(e,$a(t,3))},kn.get=ms,kn.gt=Eo,kn.gte=Ao,kn.has=function(e,t){return null!=e&&ri(e,t,mr)},kn.hasIn=gs,kn.head=Ci,kn.identity=qs,kn.includes=function(e,t,n,r){e=Lo(e)?e:Ps(e),n=n&&!r?rs(n):0;var a=e.length;return n<0&&(n=on(a+n,0)),$o(e)?n<=a&&e.indexOf(t,n)>-1:!!a&&wt(e,t,n)>-1},kn.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:rs(n);return a<0&&(a=on(r+a,0)),wt(e,t,a)},kn.inRange=function(e,t,n){return t=ns(t),void 0===n?(n=t,t=0):n=ns(n),function(e,t,n){return e>=sn(t,n)&&e<on(t,n)}(e=is(e),t,n)},kn.invoke=ys,kn.isArguments=To,kn.isArray=Go,kn.isArrayBuffer=Co,kn.isArrayLike=Lo,kn.isArrayLikeObject=Mo,kn.isBoolean=function(e){return!0===e||!1===e||zo(e)&&pr(e)==l},kn.isBuffer=Ro,kn.isDate=No,kn.isElement=function(e){return zo(e)&&1===e.nodeType&&!Yo(e)},kn.isEmpty=function(e){if(null==e)return!0;if(Lo(e)&&(Go(e)||"string"==typeof e||"function"==typeof e.splice||Ro(e)||Zo(e)||To(e)))return!e.length;var t=ni(e);if(t==f||t==b)return!e.size;if(hi(e))return!jr(e).length;for(var n in e)if(je.call(e,n))return!1;return!0},kn.isEqual=function(e,t){return wr(e,t)},kn.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:void 0)?n(e,t):void 0;return void 0===r?wr(e,t,void 0,n):!!r},kn.isError=Bo,kn.isFinite=function(e){return"number"==typeof e&&nn(e)},kn.isFunction=Wo,kn.isInteger=Fo,kn.isLength=Uo,kn.isMap=Vo,kn.isMatch=function(e,t){return e===t||xr(e,t,Za(t))},kn.isMatchWith=function(e,t,n){return n="function"==typeof n?n:void 0,xr(e,t,Za(t),n)},kn.isNaN=function(e){return qo(e)&&e!=+e},kn.isNative=function(e){if(ui(e))throw new de("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Or(e)},kn.isNil=function(e){return null==e},kn.isNull=function(e){return null===e},kn.isNumber=qo,kn.isObject=Ho,kn.isObjectLike=zo,kn.isPlainObject=Yo,kn.isRegExp=Jo,kn.isSafeInteger=function(e){return Fo(e)&&e>=-9007199254740991&&e<=9007199254740991},kn.isSet=Xo,kn.isString=$o,kn.isSymbol=Ko,kn.isTypedArray=Zo,kn.isUndefined=function(e){return void 0===e},kn.isWeakMap=function(e){return zo(e)&&ni(e)==x},kn.isWeakSet=function(e){return zo(e)&&"[object WeakSet]"==pr(e)},kn.join=function(e,t){return null==e?"":rn.call(e,t)},kn.kebabCase=Gs,kn.last=Ni,kn.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r;return void 0!==n&&(a=(a=rs(n))<0?on(r+a,0):sn(a,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,a):yt(e,Ot,a,!0)},kn.lowerCase=Cs,kn.lowerFirst=Ls,kn.lt=Qo,kn.lte=es,kn.max=function(e){return e&&e.length?rr(e,qs,fr):void 0},kn.maxBy=function(e,t){return e&&e.length?rr(e,$a(t,2),fr):void 0},kn.mean=function(e){return St(e,qs)},kn.meanBy=function(e,t){return St(e,$a(t,2))},kn.min=function(e){return e&&e.length?rr(e,qs,Dr):void 0},kn.minBy=function(e,t){return e&&e.length?rr(e,$a(t,2),Dr):void 0},kn.stubArray=ac,kn.stubFalse=ic,kn.stubObject=function(){return{}},kn.stubString=function(){return""},kn.stubTrue=function(){return!0},kn.multiply=hc,kn.nth=function(e,t){return e&&e.length?Ar(e,rs(t)):void 0},kn.noConflict=function(){return qe._===this&&(qe._=Pe),this},kn.noop=Ks,kn.now=mo,kn.pad=function(e,t,n){e=ss(e);var r=(t=rs(t))?zt(e):0;if(!t||r>=t)return e;var a=(t-r)/2;return Ta(Qt(a),n)+e+Ta(Zt(a),n)},kn.padEnd=function(e,t,n){e=ss(e);var r=(t=rs(t))?zt(e):0;return t&&r<t?e+Ta(t-r,n):e},kn.padStart=function(e,t,n){e=ss(e);var r=(t=rs(t))?zt(e):0;return t&&r<t?Ta(t-r,n)+e:e},kn.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),ln(ss(e).replace(J,""),t||0)},kn.random=function(e,t,n){if(n&&"boolean"!=typeof n&&si(e,t,n)&&(t=n=void 0),void 0===n&&("boolean"==typeof t?(n=t,t=void 0):"boolean"==typeof e&&(n=e,e=void 0)),void 0===e&&void 0===t?(e=0,t=1):(e=ns(e),void 0===t?(t=e,e=0):t=ns(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var a=un();return sn(e+a*(t-e+Ue("1e-"+((a+"").length-1))),t)}return Mr(e,t)},kn.reduce=function(e,t,n){var r=Go(e)?ft:Dt,a=arguments.length<3;return r(e,$a(t,4),n,a,er)},kn.reduceRight=function(e,t,n){var r=Go(e)?mt:Dt,a=arguments.length<3;return r(e,$a(t,4),n,a,tr)},kn.repeat=function(e,t,n){return t=(n?si(e,t,n):void 0===t)?1:rs(t),Rr(ss(e),t)},kn.replace=function(){var e=arguments,t=ss(e[0]);return e.length<3?t:t.replace(e[1],e[2])},kn.result=function(e,t,n){var r=-1,a=(t=sa(t,e)).length;for(a||(a=1,e=void 0);++r<a;){var i=null==e?void 0:e[_i(t[r])];void 0===i&&(r=a,i=n),e=Wo(i)?i.call(e):i}return e},kn.round=dc,kn.runInContext=e,kn.sample=function(e){return(Go(e)?Bn:Br)(e)},kn.size=function(e){if(null==e)return 0;if(Lo(e))return $o(e)?zt(e):e.length;var t=ni(e);return t==f||t==b?e.size:jr(e).length},kn.snakeCase=Ms,kn.some=function(e,t,n){var r=Go(e)?gt:qr;return n&&si(e,t,n)&&(t=void 0),r(e,$a(t,3))},kn.sortedIndex=function(e,t){return Yr(e,t)},kn.sortedIndexBy=function(e,t,n){return Jr(e,t,$a(n,2))},kn.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Yr(e,t);if(r<n&&Po(e[r],t))return r}return-1},kn.sortedLastIndex=function(e,t){return Yr(e,t,!0)},kn.sortedLastIndexBy=function(e,t,n){return Jr(e,t,$a(n,2),!0)},kn.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Yr(e,t,!0)-1;if(Po(e[n],t))return n}return-1},kn.startCase=Rs,kn.startsWith=function(e,t,n){return e=ss(e),n=null==n?0:Xn(rs(n),0,e.length),t=Kr(t),e.slice(n,n+t.length)==t},kn.subtract=pc,kn.sum=function(e){return e&&e.length?It(e,qs):0},kn.sumBy=function(e,t){return e&&e.length?It(e,$a(t,2)):0},kn.template=function(e,t,n){var r=kn.templateSettings;n&&si(e,t,n)&&(t=void 0),e=ss(e),t=us({},t,r,Wa);var a,i,o=us({},t.imports,r.imports,Wa),s=ws(o),c=Et(o,s),l=0,u=t.interpolate||le,h="__p += '",d=ge((t.escape||le).source+"|"+u.source+"|"+(u===F?te:le).source+"|"+(t.evaluate||le).source+"|$","g"),p="//# sourceURL="+(je.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++Ne+"]")+"\n";e.replace(d,(function(t,n,r,o,s,c){return r||(r=o),h+=e.slice(l,c).replace(ue,Rt),n&&(a=!0,h+="' +\n__e("+n+") +\n'"),s&&(i=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+t.length,t})),h+="';\n";var f=je.call(t,"variable")&&t.variable;f||(h="with (obj) {\n"+h+"\n}\n"),h=(i?h.replace(T,""):h).replace(G,"$1").replace(C,"$1;"),h="function("+(f||"obj")+") {\n"+(f?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var m=Fs((function(){return pe(s,p+"return "+h).apply(void 0,c)}));if(m.source=h,Bo(m))throw m;return m},kn.times=function(e,t){if((e=rs(e))<1||e>9007199254740991)return[];var n=4294967295,r=sn(e,4294967295);e-=4294967295;for(var a=kt(r,t=$a(t));++n<e;)t(n);return a},kn.toFinite=ns,kn.toInteger=rs,kn.toLength=as,kn.toLower=function(e){return ss(e).toLowerCase()},kn.toNumber=is,kn.toSafeInteger=function(e){return e?Xn(rs(e),-9007199254740991,9007199254740991):0===e?e:0},kn.toString=ss,kn.toUpper=function(e){return ss(e).toUpperCase()},kn.trim=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(Y,"");if(!e||!(t=Kr(t)))return e;var r=Vt(e),a=Vt(t);return la(r,Tt(r,a),Gt(r,a)+1).join("")},kn.trimEnd=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(X,"");if(!e||!(t=Kr(t)))return e;var r=Vt(e);return la(r,0,Gt(r,Vt(t))+1).join("")},kn.trimStart=function(e,t,n){if((e=ss(e))&&(n||void 0===t))return e.replace(J,"");if(!e||!(t=Kr(t)))return e;var r=Vt(e);return la(r,Tt(r,Vt(t))).join("")},kn.truncate=function(e,t){var n=30,r="...";if(Ho(t)){var a="separator"in t?t.separator:a;n="length"in t?rs(t.length):n,r="omission"in t?Kr(t.omission):r}var i=(e=ss(e)).length;if(Nt(e)){var o=Vt(e);i=o.length}if(n>=i)return e;var s=n-zt(r);if(s<1)return r;var c=o?la(o,0,s).join(""):e.slice(0,s);if(void 0===a)return c+r;if(o&&(s+=c.length-s),Jo(a)){if(e.slice(s).search(a)){var l,u=c;for(a.global||(a=ge(a.source,ss(ne.exec(a))+"g")),a.lastIndex=0;l=a.exec(u);)var h=l.index;c=c.slice(0,void 0===h?s:h)}}else if(e.indexOf(Kr(a),s)!=s){var d=c.lastIndexOf(a);d>-1&&(c=c.slice(0,d))}return c+r},kn.unescape=function(e){return(e=ss(e))&&R.test(e)?e.replace(L,qt):e},kn.uniqueId=function(e){var t=++_e;return ss(e)+t},kn.upperCase=Ns,kn.upperFirst=Bs,kn.each=oo,kn.eachRight=so,kn.first=Ci,$s(kn,(uc={},cr(kn,(function(e,t){je.call(kn.prototype,t)||(uc[t]=e)})),uc),{chain:!1}),kn.VERSION="4.17.15",ot(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){kn[e].placeholder=kn})),ot(["drop","take"],(function(e,t){Tn.prototype[e]=function(n){n=void 0===n?1:on(rs(n),0);var r=this.__filtered__&&!t?new Tn(this):this.clone();return r.__filtered__?r.__takeCount__=sn(n,r.__takeCount__):r.__views__.push({size:sn(n,4294967295),type:e+(r.__dir__<0?"Right":"")}),r},Tn.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),ot(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=1==n||3==n;Tn.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:$a(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),ot(["head","last"],(function(e,t){var n="take"+(t?"Right":"");Tn.prototype[e]=function(){return this[n](1).value()[0]}})),ot(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");Tn.prototype[e]=function(){return this.__filtered__?new Tn(this):this[n](1)}})),Tn.prototype.compact=function(){return this.filter(qs)},Tn.prototype.find=function(e){return this.filter(e).head()},Tn.prototype.findLast=function(e){return this.reverse().find(e)},Tn.prototype.invokeMap=Nr((function(e,t){return"function"==typeof e?new Tn(this):this.map((function(n){return br(n,e,t)}))})),Tn.prototype.reject=function(e){return this.filter(jo($a(e)))},Tn.prototype.slice=function(e,t){e=rs(e);var n=this;return n.__filtered__&&(e>0||t<0)?new Tn(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),void 0!==t&&(n=(t=rs(t))<0?n.dropRight(-t):n.take(t-e)),n)},Tn.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},Tn.prototype.toArray=function(){return this.take(4294967295)},cr(Tn.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),a=kn[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);a&&(kn.prototype[t]=function(){var t=this.__wrapped__,o=r?[1]:arguments,s=t instanceof Tn,c=o[0],l=s||Go(t),u=function(e){var t=a.apply(kn,pt([e],o));return r&&h?t[0]:t};l&&n&&"function"==typeof c&&1!=c.length&&(s=l=!1);var h=this.__chain__,d=!!this.__actions__.length,p=i&&!h,f=s&&!d;if(!i&&l){t=f?t:new Tn(this);var m=e.apply(t,o);return m.__actions__.push({func:to,args:[u],thisArg:void 0}),new An(m,h)}return p&&f?e.apply(this,o):(m=this.thru(u),p?r?m.value()[0]:m.value():m)})})),ot(["pop","push","shift","sort","splice","unshift"],(function(e){var t=ye[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);kn.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var a=this.value();return t.apply(Go(a)?a:[],e)}return this[n]((function(n){return t.apply(Go(n)?n:[],e)}))}})),cr(Tn.prototype,(function(e,t){var n=kn[t];if(n){var r=n.name+"";je.call(yn,r)||(yn[r]=[]),yn[r].push({name:t,func:n})}})),yn[ka(void 0,2).name]=[{name:"wrapper",func:void 0}],Tn.prototype.clone=function(){var e=new Tn(this.__wrapped__);return e.__actions__=va(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=va(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=va(this.__views__),e},Tn.prototype.reverse=function(){if(this.__filtered__){var e=new Tn(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},Tn.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=Go(e),r=t<0,a=n?e.length:0,i=function(e,t,n){var r=-1,a=n.length;for(;++r<a;){var i=n[r],o=i.size;switch(i.type){case"drop":e+=o;break;case"dropRight":t-=o;break;case"take":t=sn(t,e+o);break;case"takeRight":e=on(e,t-o)}}return{start:e,end:t}}(0,a,this.__views__),o=i.start,s=i.end,c=s-o,l=r?s:o-1,u=this.__iteratees__,h=u.length,d=0,p=sn(c,this.__takeCount__);if(!n||!r&&a==c&&p==c)return na(e,this.__actions__);var f=[];e:for(;c--&&d<p;){for(var m=-1,g=e[l+=t];++m<h;){var v=u[m],b=v.iteratee,y=v.type,w=b(g);if(2==y)g=w;else if(!w){if(1==y)continue e;break e}}f[d++]=g}return f},kn.prototype.at=no,kn.prototype.chain=function(){return eo(this)},kn.prototype.commit=function(){return new An(this.value(),this.__chain__)},kn.prototype.next=function(){void 0===this.__values__&&(this.__values__=ts(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?void 0:this.__values__[this.__index__++]}},kn.prototype.plant=function(e){for(var t,n=this;n instanceof En;){var r=Ii(n);r.__index__=0,r.__values__=void 0,t?a.__wrapped__=r:t=r;var a=r;n=n.__wrapped__}return a.__wrapped__=e,t},kn.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof Tn){var t=e;return this.__actions__.length&&(t=new Tn(this)),(t=t.reverse()).__actions__.push({func:to,args:[Ui],thisArg:void 0}),new An(t,this.__chain__)}return this.thru(Ui)},kn.prototype.toJSON=kn.prototype.valueOf=kn.prototype.value=function(){return na(this.__wrapped__,this.__actions__)},kn.prototype.first=kn.prototype.head,vt&&(kn.prototype[vt]=function(){return this}),kn}();qe._=Yt,void 0===(r=function(){return Yt}.call(t,n,t,e))||(e.exports=r)}).call(this)}).call(this,n(37)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){e.exports=y;var r=n(2),a=n(39),i=n(30),o=(i.Minimatch,n(68)),s=n(40).EventEmitter,c=n(1),l=n(20),u=n(31),h=n(70),d=n(41),p=(d.alphasort,d.alphasorti,d.setopts),f=d.ownProp,m=n(71),g=(n(21),d.childrenIgnored),v=d.isIgnored,b=n(43);function y(e,t,n){if("function"==typeof t&&(n=t,t={}),t||(t={}),t.sync){if(n)throw new TypeError("callback provided to sync glob");return h(e,t)}return new x(e,t,n)}y.sync=h;var w=y.GlobSync=h.GlobSync;function x(e,t,n){if("function"==typeof t&&(n=t,t=null),t&&t.sync){if(n)throw new TypeError("callback provided to sync glob");return new w(e,t)}if(!(this instanceof x))return new x(e,t,n);p(this,e,t),this._didRealPath=!1;var r=this.minimatch.set.length;this.matches=new Array(r),"function"==typeof n&&(n=b(n),this.on("error",n),this.on("end",(function(e){n(null,e)})));var a=this;if(this._processing=0,this._emitQueue=[],this._processQueue=[],this.paused=!1,this.noprocess)return this;if(0===r)return o();for(var i=0;i<r;i++)this._process(this.minimatch.set[i],i,!1,o);function o(){--a._processing,a._processing<=0&&a._finish()}}y.glob=y,y.hasMagic=function(e,t){var n=function(e,t){if(null===t||"object"!=typeof t)return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}({},t);n.noprocess=!0;var r=new x(e,n).minimatch.set;if(!e)return!1;if(r.length>1)return!0;for(var a=0;a<r[0].length;a++)if("string"!=typeof r[0][a])return!0;return!1},y.Glob=x,o(x,s),x.prototype._finish=function(){if(l(this instanceof x),!this.aborted){if(this.realpath&&!this._didRealpath)return this._realpath();d.finish(this),this.emit("end",this.found)}},x.prototype._realpath=function(){if(!this._didRealpath){this._didRealpath=!0;var e=this.matches.length;if(0===e)return this._finish();for(var t=this,n=0;n<this.matches.length;n++)this._realpathSet(n,r)}function r(){0==--e&&t._finish()}},x.prototype._realpathSet=function(e,t){var n=this.matches[e];if(!n)return t();var r=Object.keys(n),i=this,o=r.length;if(0===o)return t();var s=this.matches[e]=Object.create(null);r.forEach((function(n,r){n=i._makeAbs(n),a.realpath(n,i.realpathCache,(function(r,a){r?"stat"===r.syscall?s[n]=!0:i.emit("error",r):s[a]=!0,0==--o&&(i.matches[e]=s,t())}))}))},x.prototype._mark=function(e){return d.mark(this,e)},x.prototype._makeAbs=function(e){return d.makeAbs(this,e)},x.prototype.abort=function(){this.aborted=!0,this.emit("abort")},x.prototype.pause=function(){this.paused||(this.paused=!0,this.emit("pause"))},x.prototype.resume=function(){if(this.paused){if(this.emit("resume"),this.paused=!1,this._emitQueue.length){var e=this._emitQueue.slice(0);this._emitQueue.length=0;for(var t=0;t<e.length;t++){var n=e[t];this._emitMatch(n[0],n[1])}}if(this._processQueue.length){var r=this._processQueue.slice(0);this._processQueue.length=0;for(t=0;t<r.length;t++){var a=r[t];this._processing--,this._process(a[0],a[1],a[2],a[3])}}}},x.prototype._process=function(e,t,n,r){if(l(this instanceof x),l("function"==typeof r),!this.aborted)if(this._processing++,this.paused)this._processQueue.push([e,t,n,r]);else{for(var a,o=0;"string"==typeof e[o];)o++;switch(o){case e.length:return void this._processSimple(e.join("/"),t,r);case 0:a=null;break;default:a=e.slice(0,o).join("/")}var s,c=e.slice(o);null===a?s=".":u(a)||u(e.join("/"))?(a&&u(a)||(a="/"+a),s=a):s=a;var h=this._makeAbs(s);if(g(this,s))return r();c[0]===i.GLOBSTAR?this._processGlobStar(a,s,h,c,t,n,r):this._processReaddir(a,s,h,c,t,n,r)}},x.prototype._processReaddir=function(e,t,n,r,a,i,o){var s=this;this._readdir(n,i,(function(c,l){return s._processReaddir2(e,t,n,r,a,i,l,o)}))},x.prototype._processReaddir2=function(e,t,n,r,a,i,o,s){if(!o)return s();for(var l=r[0],u=!!this.minimatch.negate,h=l._glob,d=this.dot||"."===h.charAt(0),p=[],f=0;f<o.length;f++){if("."!==(g=o[f]).charAt(0)||d)(u&&!e?!g.match(l):g.match(l))&&p.push(g)}var m=p.length;if(0===m)return s();if(1===r.length&&!this.mark&&!this.stat){this.matches[a]||(this.matches[a]=Object.create(null));for(f=0;f<m;f++){var g=p[f];e&&(g="/"!==e?e+"/"+g:e+g),"/"!==g.charAt(0)||this.nomount||(g=c.join(this.root,g)),this._emitMatch(a,g)}return s()}r.shift();for(f=0;f<m;f++){g=p[f];e&&(g="/"!==e?e+"/"+g:e+g),this._process([g].concat(r),a,i,s)}s()},x.prototype._emitMatch=function(e,t){if(!this.aborted&&!v(this,t))if(this.paused)this._emitQueue.push([e,t]);else{var n=u(t)?t:this._makeAbs(t);if(this.mark&&(t=this._mark(t)),this.absolute&&(t=n),!this.matches[e][t]){if(this.nodir){var r=this.cache[n];if("DIR"===r||Array.isArray(r))return}this.matches[e][t]=!0;var a=this.statCache[n];a&&this.emit("stat",t,a),this.emit("match",t)}}},x.prototype._readdirInGlobStar=function(e,t){if(!this.aborted){if(this.follow)return this._readdir(e,!1,t);var n=this,a=m("lstat\0"+e,(function(r,a){if(r&&"ENOENT"===r.code)return t();var i=a&&a.isSymbolicLink();n.symlinks[e]=i,i||!a||a.isDirectory()?n._readdir(e,!1,t):(n.cache[e]="FILE",t())}));a&&r.lstat(e,a)}},x.prototype._readdir=function(e,t,n){if(!this.aborted&&(n=m("readdir\0"+e+"\0"+t,n))){if(t&&!f(this.symlinks,e))return this._readdirInGlobStar(e,n);if(f(this.cache,e)){var a=this.cache[e];if(!a||"FILE"===a)return n();if(Array.isArray(a))return n(null,a)}r.readdir(e,function(e,t,n){return function(r,a){r?e._readdirError(t,r,n):e._readdirEntries(t,a,n)}}(this,e,n))}},x.prototype._readdirEntries=function(e,t,n){if(!this.aborted){if(!this.mark&&!this.stat)for(var r=0;r<t.length;r++){var a=t[r];a="/"===e?e+a:e+"/"+a,this.cache[a]=!0}return this.cache[e]=t,n(null,t)}},x.prototype._readdirError=function(e,t,n){if(!this.aborted){switch(t.code){case"ENOTSUP":case"ENOTDIR":var r=this._makeAbs(e);if(this.cache[r]="FILE",r===this.cwdAbs){var a=new Error(t.code+" invalid cwd "+this.cwd);a.path=this.cwd,a.code=t.code,this.emit("error",a),this.abort()}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(e)]=!1;break;default:this.cache[this._makeAbs(e)]=!1,this.strict&&(this.emit("error",t),this.abort()),this.silent||console.error("glob error",t)}return n()}},x.prototype._processGlobStar=function(e,t,n,r,a,i,o){var s=this;this._readdir(n,i,(function(c,l){s._processGlobStar2(e,t,n,r,a,i,l,o)}))},x.prototype._processGlobStar2=function(e,t,n,r,a,i,o,s){if(!o)return s();var c=r.slice(1),l=e?[e]:[],u=l.concat(c);this._process(u,a,!1,s);var h=this.symlinks[n],d=o.length;if(h&&i)return s();for(var p=0;p<d;p++){if("."!==o[p].charAt(0)||this.dot){var f=l.concat(o[p],c);this._process(f,a,!0,s);var m=l.concat(o[p],r);this._process(m,a,!0,s)}}s()},x.prototype._processSimple=function(e,t,n){var r=this;this._stat(e,(function(a,i){r._processSimple2(e,t,a,i,n)}))},x.prototype._processSimple2=function(e,t,n,r,a){if(this.matches[t]||(this.matches[t]=Object.create(null)),!r)return a();if(e&&u(e)&&!this.nomount){var i=/[\/\\]$/.test(e);"/"===e.charAt(0)?e=c.join(this.root,e):(e=c.resolve(this.root,e),i&&(e+="/"))}"win32"===process.platform&&(e=e.replace(/\\/g,"/")),this._emitMatch(t,e),a()},x.prototype._stat=function(e,t){var n=this._makeAbs(e),a="/"===e.slice(-1);if(e.length>this.maxLength)return t();if(!this.stat&&f(this.cache,n)){var i=this.cache[n];if(Array.isArray(i)&&(i="DIR"),!a||"DIR"===i)return t(null,i);if(a&&"FILE"===i)return t()}var o=this.statCache[n];if(void 0!==o){if(!1===o)return t(null,o);var s=o.isDirectory()?"DIR":"FILE";return a&&"FILE"===s?t():t(null,s,o)}var c=this,l=m("stat\0"+n,(function(a,i){if(i&&i.isSymbolicLink())return r.stat(n,(function(r,a){r?c._stat2(e,n,null,i,t):c._stat2(e,n,r,a,t)}));c._stat2(e,n,a,i,t)}));l&&r.lstat(n,l)},x.prototype._stat2=function(e,t,n,r,a){if(n&&("ENOENT"===n.code||"ENOTDIR"===n.code))return this.statCache[t]=!1,a();var i="/"===e.slice(-1);if(this.statCache[t]=r,"/"===t.slice(-1)&&r&&!r.isDirectory())return a(null,!1,r);var o=!0;return r&&(o=r.isDirectory()?"DIR":"FILE"),this.cache[t]=this.cache[t]||o,i&&"FILE"===o?a():a(null,o,r)}},function(e,t,n){e.exports=u,u.realpath=u,u.sync=h,u.realpathSync=h,u.monkeypatch=function(){r.realpath=u,r.realpathSync=h},u.unmonkeypatch=function(){r.realpath=a,r.realpathSync=i};var r=n(2),a=r.realpath,i=r.realpathSync,o=process.version,s=/^v[0-5]\./.test(o),c=n(64);function l(e){return e&&"realpath"===e.syscall&&("ELOOP"===e.code||"ENOMEM"===e.code||"ENAMETOOLONG"===e.code)}function u(e,t,n){if(s)return a(e,t,n);"function"==typeof t&&(n=t,t=null),a(e,t,(function(r,a){l(r)?c.realpath(e,t,n):n(r,a)}))}function h(e,t){if(s)return i(e,t);try{return i(e,t)}catch(n){if(l(n))return c.realpathSync(e,t);throw n}}},function(e,t){e.exports=require("events")},function(e,t,n){function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.alphasort=l,t.alphasorti=c,t.setopts=function(e,t,n){n||(n={});if(n.matchBase&&-1===t.indexOf("/")){if(n.noglobstar)throw new Error("base matching requires globstar");t="**/"+t}e.silent=!!n.silent,e.pattern=t,e.strict=!1!==n.strict,e.realpath=!!n.realpath,e.realpathCache=n.realpathCache||Object.create(null),e.follow=!!n.follow,e.dot=!!n.dot,e.mark=!!n.mark,e.nodir=!!n.nodir,e.nodir&&(e.mark=!0);e.sync=!!n.sync,e.nounique=!!n.nounique,e.nonull=!!n.nonull,e.nosort=!!n.nosort,e.nocase=!!n.nocase,e.stat=!!n.stat,e.noprocess=!!n.noprocess,e.absolute=!!n.absolute,e.maxLength=n.maxLength||1/0,e.cache=n.cache||Object.create(null),e.statCache=n.statCache||Object.create(null),e.symlinks=n.symlinks||Object.create(null),function(e,t){e.ignore=t.ignore||[],Array.isArray(e.ignore)||(e.ignore=[e.ignore]);e.ignore.length&&(e.ignore=e.ignore.map(u))}(e,n),e.changedCwd=!1;var i=process.cwd();r(n,"cwd")?(e.cwd=a.resolve(n.cwd),e.changedCwd=e.cwd!==i):e.cwd=i;e.root=n.root||a.resolve(e.cwd,"/"),e.root=a.resolve(e.root),"win32"===process.platform&&(e.root=e.root.replace(/\\/g,"/"));e.cwdAbs=o(e.cwd)?e.cwd:h(e,e.cwd),"win32"===process.platform&&(e.cwdAbs=e.cwdAbs.replace(/\\/g,"/"));e.nomount=!!n.nomount,n.nonegate=!0,n.nocomment=!0,e.minimatch=new s(t,n),e.options=e.minimatch.options},t.ownProp=r,t.makeAbs=h,t.finish=function(e){for(var t=e.nounique,n=t?[]:Object.create(null),r=0,a=e.matches.length;r<a;r++){var i=e.matches[r];if(i&&0!==Object.keys(i).length){var o=Object.keys(i);t?n.push.apply(n,o):o.forEach((function(e){n[e]=!0}))}else if(e.nonull){var s=e.minimatch.globSet[r];t?n.push(s):n[s]=!0}}t||(n=Object.keys(n));e.nosort||(n=n.sort(e.nocase?c:l));if(e.mark){for(r=0;r<n.length;r++)n[r]=e._mark(n[r]);e.nodir&&(n=n.filter((function(t){var n=!/\/$/.test(t),r=e.cache[t]||e.cache[h(e,t)];return n&&r&&(n="DIR"!==r&&!Array.isArray(r)),n})))}e.ignore.length&&(n=n.filter((function(t){return!d(e,t)})));e.found=n},t.mark=function(e,t){var n=h(e,t),r=e.cache[n],a=t;if(r){var i="DIR"===r||Array.isArray(r),o="/"===t.slice(-1);if(i&&!o?a+="/":!i&&o&&(a=a.slice(0,-1)),a!==t){var s=h(e,a);e.statCache[s]=e.statCache[n],e.cache[s]=e.cache[n]}}return a},t.isIgnored=d,t.childrenIgnored=function(e,t){return!!e.ignore.length&&e.ignore.some((function(e){return!(!e.gmatcher||!e.gmatcher.match(t))}))};var a=n(1),i=n(30),o=n(31),s=i.Minimatch;function c(e,t){return e.toLowerCase().localeCompare(t.toLowerCase())}function l(e,t){return e.localeCompare(t)}function u(e){var t=null;if("/**"===e.slice(-3)){var n=e.replace(/(\/\*\*)+$/,"");t=new s(n,{dot:!0})}return{matcher:new s(e,{dot:!0}),gmatcher:t}}function h(e,t){var n=t;return n="/"===t.charAt(0)?a.join(e.root,t):o(t)||""===t?t:e.changedCwd?a.resolve(e.cwd,t):a.resolve(t),"win32"===process.platform&&(n=n.replace(/\\/g,"/")),n}function d(e,t){return!!e.ignore.length&&e.ignore.some((function(e){return e.matcher.match(t)||!(!e.gmatcher||!e.gmatcher.match(t))}))}},function(e,t){e.exports=function e(t,n){if(t&&n)return e(t)(n);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach((function(e){r[e]=t[e]})),r;function r(){for(var e=new Array(arguments.length),n=0;n<e.length;n++)e[n]=arguments[n];var r=t.apply(this,e),a=e[e.length-1];return"function"==typeof r&&r!==a&&Object.keys(a).forEach((function(e){r[e]=a[e]})),r}}},function(e,t,n){var r=n(42);function a(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function i(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},n=e.name||"Function wrapped with `once`";return t.onceError=n+" shouldn't be called more than once",t.called=!1,t}e.exports=r(a),e.exports.strict=r(i),a.proto=a((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return a(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return i(this)},configurable:!0})}))},function(e,t){e.exports=require("constants")},function(e,t,n){var r,a=n(20),i=n(80),o=/^win/i.test(process.platform),s=n(40);function c(){h&&(h=!1,i.forEach((function(e){try{process.removeListener(e,u[e])}catch(e){}})),process.emit=m,process.reallyExit=p,r.count-=1)}function l(e,t,n){r.emitted[e]||(r.emitted[e]=!0,r.emit(e,t,n))}"function"!=typeof s&&(s=s.EventEmitter),process.__signal_exit_emitter__?r=process.__signal_exit_emitter__:((r=process.__signal_exit_emitter__=new s).count=0,r.emitted={}),r.infinite||(r.setMaxListeners(1/0),r.infinite=!0),e.exports=function(e,t){a.equal(typeof e,"function","a callback must be provided for exit handler"),!1===h&&d();var n="exit";t&&t.alwaysLast&&(n="afterexit");return r.on(n,e),function(){r.removeListener(n,e),0===r.listeners("exit").length&&0===r.listeners("afterexit").length&&c()}},e.exports.unload=c;var u={};i.forEach((function(e){u[e]=function(){process.listeners(e).length===r.count&&(c(),l("exit",null,e),l("afterexit",null,e),o&&"SIGHUP"===e&&(e="SIGINT"),process.kill(process.pid,e))}})),e.exports.signals=function(){return i},e.exports.load=d;var h=!1;function d(){h||(h=!0,r.count+=1,i=i.filter((function(e){try{return process.on(e,u[e]),!0}catch(e){return!1}})),process.emit=g,process.reallyExit=f)}var p=process.reallyExit;function f(e){process.exitCode=e||0,l("exit",process.exitCode,null),l("afterexit",process.exitCode,null),p.call(process,process.exitCode)}var m=process.emit;function g(e,t){if("exit"===e){void 0!==t&&(process.exitCode=t);var n=m.apply(this,arguments);return l("exit",process.exitCode,null),l("afterexit",process.exitCode,null),n}return m.apply(this,arguments)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),o=n(9),s=n(14),c=n(86);function l(e,t,n){if(!e)throw Error("No data to transform");for(var r={userName:null,userEmail:null,userAvatar:null,gamePoints:null,gameCoins:null,userPassword:null,destroyShip:null,destroyEnemy:null},a=t.gameInitData.gameData.playerObject.journal,i=0,o=e;i<o.length;i++){var s=o[i];if(s.name&&s.value)r[s.name]=s.value;else if(s.name&&!s.value)return!1}var c=t.getLevelUserData();return r.gamePoints=c.points,r.gameCoins=c.gameCoins,r.userAvatar=n.avatarPicture,r.destroyShip=a.defaultData.numberFlyOfEnemy,r.destroyEnemy=a.defaultData.numberOfGroundEnemy,r}t.showResultScreen=function(){return r(this,void 0,void 0,(function(){var e,t,n,r,i,c,l,u;return a(this,(function(h){switch(h.label){case 0:return(e=document.querySelector("#show-result-area")).innerHTML="",[4,s.getGameResultData({method:"GET",data:null})];case 1:if((t=h.sent()).hasOwnProperty("message"))return e.innerHTML='<div class="result-message-wrapper"><p>'+t.message+"</p></div>",[2,!1];n=0,r=t.slice(0,100),i=function(t){var r,i,s,c,l,u,h,d;return a(this,(function(a){switch(a.label){case 0:return r=new Date(t.time),i=r.getFullYear(),s=r.getUTCMonth()+1,c=r.getDate(),l=t.userAvatar?t.userAvatar:__dirname+"/public/images/misc/avatars/picture_icon.png",u=new Image,h=u,[4,l];case 1:return h.src=a.sent(),n+=1,[4,o.createElements({tagName:"li",styleClass:"winner-list",inlineStyle:null,pictureUrl:null,linkUrl:null,text:null,innerContent:'<p class="single-item"><span class="rate-number">'+n+"</span>\n                <span><img class='small-avatar' src="+u.src+" width='30' alt='avatar'></span>\n                <span>name:</span> <span class=\"item-name\"> "+t.userName+"</span>\n                "+(t.destroyEnemy?"<span>Destroy Ground Units:</span>":"")+' <span class="item-coin"> '+(t.destroyEnemy?t.destroyEnemy:"")+"</span>\n                "+(t.destroyShip?"<span>Destroy Flying Units:</span>":"")+' <span class="item-coin"> '+(t.destroyShip?t.destroyShip:"")+'</span>\n                <span>credits:</span> <span class="item-coin"> '+t.gameCoins+'</span>\n                <span>score:</span> <span class="item-points"> '+t.gamePoints+'</span>\n                <span class="item-date"> '+i+"/"+s+"/"+c+"</span></p>",attributeName:"data-button-id",attribute:t.id,attributeName1:null,attribute1:null})];case 2:return d=a.sent(),setTimeout((function(){e.appendChild(d)}),100*n),[2]}}))},c=0,l=r,h.label=2;case 2:return c<l.length?(u=l[c],[5,i(u)]):[3,5];case 3:h.sent(),h.label=4;case 4:return c++,[3,2];case 5:return[2]}}))}))},t.initResultScreen=function(e){var t=document.querySelector("#save-result-box"),n=document.querySelector("#form-btn-switcher-area"),u=document.querySelector("#form-load-area");u.innerHTML="",n.innerHTML="",i.show(t);for(var h=0,d=[o.createElements({tagName:"button",styleClass:"accept-btn btn-main",inlineStyle:null,pictureUrl:null,linkUrl:null,text:"update player",innerContent:"",attributeName:"data-btn-id",attribute:"update-player",attributeName1:null,attribute1:null}),o.createElements({tagName:"button",styleClass:"accept-btn btn-main selected-form",inlineStyle:null,pictureUrl:null,linkUrl:null,text:"new player",innerContent:"",attributeName:"data-btn-id",attribute:"new-player",attributeName1:null,attribute1:null})];h<d.length;h++){var p=d[h];n.appendChild(p)}for(var f={avatarSectionShowState:!1,avatarPicture:null},m=0,g=[o.createElements({tagName:"form",styleClass:"",inlineStyle:null,pictureUrl:null,linkUrl:null,text:"save result",innerContent:'\n                <h1>Create new player</h1>\n                <p>Please fill the fields to save your result</p>\n                <label for="avatar-picture">\n                    <p>You profile picture</p>\n\n                    <button id="avatar-button" class="avatar-button">\n                        <img id="avatar-picture" class="avatar-inner-picture">\n                    </button>\n\n                    <section id="avatar-box" class="avatar-box">\n                        <button id="avatar-close" class="avatar-close" >x</button>\n                        <h2>Select you pictures</h2>\n                        <input type="file" id="player-avatar" accept="image/png, image/jpeg">\n\n                        <div id="avatar-inner-box" class="avatar-inner-box"></div>\n                    </section>\n                </label>\n\n                <label for="name">\n                    <p>Please enter you name</p>\n                    <input id="name" maxlength="30" minlength="3" name="userName" type="text" required placeholder="Enter you name">\n                </label>\n                <label for="mail">\n                    <p>Please enter you email</p>\n                    <input id="mail" name="userEmail" type="email" required placeholder="Create you email address">\n                </label>\n                <label for="password">\n                    <p>Create password</p>\n                    <input id="password" name="userPassword" maxlength="20" minlength="4" type="password" required placeholder="Password">\n                </label>\n                <div id="alert-message" class="alert-message"></div>\n                <div id="dialog-bottom-area" class="dialog-bottom-area">\n                    <button type="submit" data-button-id="save-result" class="accept-btn btn-main">save</button>\n                    <button data-button-id="cancel" class="reject-btn btn-main btn-orange-reject">cancel</button>\n                </div>',attributeName:"name",attribute:"save-result-form",attributeName1:null,attribute1:null}),o.createElements({tagName:"form",styleClass:"",inlineStyle:"display: none;",pictureUrl:null,linkUrl:null,text:"save result",innerContent:'\n                    <h1>Update player</h1>\n                    <p>Enter email and password</p>\n                    <label for="avatar-picture">\n                    <p>You profile picture</p>\n\n                    <button id="avatar-button-update" class="avatar-button">\n                        <img id="avatar-picture-update" class="avatar-inner-picture">\n                    </button>\n\n                    <section id="avatar-box-update" class="avatar-box">\n                        <button id="avatar-close-update" class="avatar-close" >x</button>\n                        <h2>Select you pictures</h2>\n                        <input type="file" id="player-avatar-update" accept="image/png, image/jpeg">\n\n                        <div id="avatar-inner-box-update" class="avatar-inner-box"></div>\n                    </section>\n                </label>\n                    <label for="mail">\n                        <p>Please enter you email</p>\n                        <input id="mail" name="userEmail" type="email" required placeholder="Enter you email address">\n                    </label>\n                    <label for="password">\n                        <p>Create password</p>\n                        <input id="password" name="userPassword" maxlength="20" minlength="4" type="password" required placeholder="Enter you password">\n                    </label>\n                    <div id="alert-message" class="alert-message"></div>\n                    <div id="dialog-bottom-area" class="dialog-bottom-area">\n                        <button type="submit" data-button-id="save-result" class="accept-btn btn-main">save</button>\n                        <button data-button-id="cancel" class="reject-btn btn-main btn-orange-reject">cancel</button>\n                    </div>',attributeName:"name",attribute:"rewrite-result-form",attributeName1:null,attribute1:null})];m<g.length;m++){p=g[m];u.appendChild(p)}var v=document.forms["save-result-form"],b=document.forms["rewrite-result-form"],y=document.querySelectorAll(".dialog-bottom-area");function w(){var e=document.querySelectorAll(".selected-form");Array.prototype.slice.call(e).forEach((function(e){i.removeClassList(e,"selected-form")}))}function x(e){switch(e.target.dataset.buttonId){case"save-result":break;case"cancel":u.innerHTML="",t&&i.hide(t)}}function O(t,n){return r(this,void 0,void 0,(function(){var r,i;return a(this,(function(a){switch(a.label){case 0:return t.preventDefault(),(r=l(this,e,n))?[4,s.getGameResultData({method:"POST",data:r})]:[3,2];case 1:return S({message:(i=a.sent()).message,status:i.status}),[2];case 2:S({message:"I cant send this, please check form again",status:"reject"}),a.label=3;case 3:return[2]}}))}))}function S(e){var t=e.message,n=e.status,r=document.querySelectorAll(".alert-message"),a="";switch(n){case"reject":a='<p class="reject-text">'+t+"</p>";break;case"warning":a='<p class="warning-text">'+t+"</p>";break;case"success":a='<p class="success-text">'+t+"</p>",v.reset(),b.reset();break;default:a=""}Array.prototype.forEach.call(r,(function(e){e.innerHTML=a}))}c.avatarButton({newAvatarSelectors:{buttonSelector:"#avatar-button",avatarCloseSelector:"#avatar-close",playerAvatarLoadSelector:"#player-avatar",avatarBoxSelector:"#avatar-box",avatarInnerBoxSelector:"#avatar-inner-box",displaySelector:"#avatar-picture"},formState:f}),c.avatarButton({newAvatarSelectors:{buttonSelector:"#avatar-button-update",avatarCloseSelector:"#avatar-close-update",playerAvatarLoadSelector:"#player-avatar-update",avatarBoxSelector:"#avatar-box-update",avatarInnerBoxSelector:"#avatar-inner-box-update",displaySelector:"#avatar-picture-update"},formState:f}),n.addEventListener("click",(function(e){switch(e.target.dataset.btnId){case"new-player":w.call(this),i.hide(b),i.show(v),i.addClassList(e.target,"selected-form");break;case"update-player":w.call(this),i.hide(v),i.show(b),i.addClassList(e.target,"selected-form")}})),Array.prototype.forEach.call(y,(function(e){e.addEventListener("click",x)})),v.addEventListener("submit",(function(e){O.call(this,e,f)})),b.addEventListener("submit",(function(t){return r(this,void 0,void 0,(function(){var n,r;return a(this,(function(a){switch(a.label){case 0:return t.preventDefault(),(n=l(this,e,f))?[4,s.getGameResultData({method:"PUT",data:n})]:[3,2];case 1:return S({message:(r=a.sent()).message,status:r.status}),[2];case 2:S({message:"I cant send this, please check form again",status:"reject"}),a.label=3;case 3:return[2]}}))}))}))}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=n(22),i=n(13),o=n(17),s=r(n(8));t.replaceShipData=function(e){var t=e.mainGameObject,n=e.buyShipData,r=t.gameInitData.gameData.playerObject,c={inventory:r.data.inventory,firespot:r.data.firespot,guns:r.data.guns,numberOflife:r.numberOflife,healthPoint:r.healthPoint,journal:r.journal},l=i.newPlayerShipConstruct({PlayerShip:s.PlayerShip,userData:n.data,shipLife:5});a.renewPlayerShip({originData:r.data,newData:l.data}),a.renewPlayerShip({originData:r,newData:l}),r.playerShipTextureChange();for(var u=0;u<c.inventory.length;u++)r.data.inventory[u]=c.inventory[u],c.guns[u]=o.assignGunsPosition({gun:c.guns[u],firespot:r.data.firespot[u]}),r.data.guns[u]=c.guns[u];r.numberOflife=c.numberOflife,r.healthPoint=c.healthPoint,r.journal=c.journal}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),a=n(9);t.detectObjectsAsMap=function(e){var t=e.mainGameObject,n=t.gameInitData.dynamicLevelMapBlocks;if(t.gameInitData.gameExtraSeconds%5==0)for(var r,a=function(e){if(e.x>0&&e.x<window.innerWidth&&e.y>0&&e.y<window.innerHeight&&!i.mapFinder.find((function(t){return t.index===e.index}))){if(!e.details)return"continue";if(!e.details.collision)return"continue";r=Object.assign({},{index:e.index,defaultMapX:e.defaultMapX?e.defaultMapX:0,defaultMapY:e.defaultMapY?e.defaultMapY:0,x:e.x?e.x:0,y:e.y?e.y:0,details:{collision:e.details.collision?e.details.collision:null,mapColor:e.details.mapColor?e.details.mapColor:null}}),i.mapFinder=i.mapFinder.concat(r)}},i=this,o=0,s=n;o<s.length;o++){a(s[o])}return this.mapFinder},t.createMapRenderField=function(e){var t=e.mainGameObject;if("false"===process.env.GROUND_CHARACTERS_INVENTORY){var n=t.gameInitData.gameData.groundPlayerCharacter,i=t.gameInitData.dynamicLevelMapBlocks,o={width:parseInt(i[0].mapSizeHorizontal),height:parseInt(i[0].mapSizeVertical),blockSize:i[0].width,inventoryMap:n.mapFinder};r.openInventory(),function(e){var t=e.mainGameObject,n=(e.allBlocks,e.mapProps),r=e.groundPlayer,i=document.querySelector("#backpack-body"),o=(t.gameInitData.gameExtraSeconds,0),s=!0;i.innerHTML="";var c=a.createSimpleElements({tagname:"h3",classList:"side-panel-name",innerText:"Level Map <p>Press M to close</p>",idName:null}),l=document.createElement("canvas"),u=i.offsetWidth/(50*n.width);l.width=n.width*(i.offsetWidth/n.width),l.height=n.height*(i.offsetWidth/n.width);var h=i.offsetWidth/n.width,d=l.getContext("2d");i.appendChild(l),i.prepend(c);var p=setInterval((function(){var e=r.detectObjectsAsMap({mainGameObject:t}).filter((function(e){if(e.details&&e.details.collision)return e}));"false"!==process.env.GROUND_CHARACTERS_INVENTORY&&"true"!==process.env.GROUND_NPC_DIALOG_ACTIVE||clearInterval(p),d.clearRect(0,0,l.width,l.height);for(var a=0,i=e;a<i.length;a++){var c=i[a];d.save(),d.fillStyle=c.details.mapColor?c.details.mapColor:"rgba(225, 208, 0, 1)";var f=c.defaultMapX?c.defaultMapX:c.x,m=c.defaultMapY?c.defaultMapY:c.y;d.fillRect(f*u,m*u+50,h,h),d.restore()}if(o+=1,s){var g=r.currentGroundBlock.defaultMapX,v=r.currentGroundBlock.defaultMapY-n.blockSize;d.fillStyle="rgba(225, 8, 0, 1)",d.fillRect(g*u,v*u+60,2*h,2*h),o>=1&&(s=!1,o=0)}else o>=1&&(s=!0,o=0)}),200)}({mainGameObject:t,allBlocks:i,mapProps:o,groundPlayer:n})}else r.hideInventory()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateMap=function(e){e.mainGameObject.gameInitData.dynamicLevelsActive&&!this.alwaysMove||this.moveEnemyes(),Math.sign(this.speed)>0&&this.x+window.innerWidth<0?this.x=window.innerWidth:Math.sign(this.speed)<0&&this.x>window.innerWidth&&(this.x=0-window.innerWidth)},t.changePartOfTexture=function(e,t){var n=e.getLevelUserData();n.minutes<=this.timeToExtraMapMinutes&&n.seconds<=this.timeToExtraMapSeconds&&this.extraMap&&this.x+200>=window.innerWidth&&(this.texture=__dirname+this.extraMap,this.loadTexture())}},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=a(n(106)),o=n(5),s=n(0),c=n(25),l=function(e){var t=r(e,[]);this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.width=t.width,this.height=t.height,this.img=new Image,this.texture=t.absoluteLink?t.absoluteLink:__dirname+t.texture,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.target=t.target,this.animationState=!0,this.detectFrame=0,this.objectPresent=!0,this.speed=t.speed?t.speed:0,this.defaultSpeed=t.speed?t.speed:0,this.picturesWidth=t.picturesWidth,this.damage=t.damage?t.damage:null,this.objectOwner=t.objectOwner?t.objectOwner:null,this.healthPoint=t.healthPoint?t.healthPoint:null,this.isBackground=t.isBackground?t.isBackground:null,this.explosion=t.explosion?t.explosion:null,this.pointsPerUnit=t.pointsPerUnit?t.pointsPerUnit:0,this.extraObjects=t.extraObjects?t.extraObjects:0,this.collideExplosionAnimation=t.collideExplosionAnimation,this.sound=t.sound?t.sound:null,this.side=t.side?t.side:null,this.guns=t.guns?t.guns:null,this.degree=t.degree?t.degree:0,this.rapidFire=t.rapidFire?t.rapidFire:null,this.isShot=!!t.isShot&&t.isShot,this.shotAngle=0,this.tradePropertyes=t.tradePropertyes?t.tradePropertyes:null,this.defaultAngle=t.defaultAngle?t.defaultAngle:null,this.timingMinutesPlaced=t.timingMinutesPlaced?t.timingMinutesPlaced:null,this.timingSecondsPlaced=t.timingSecondsPlaced?t.timingSecondsPlaced:null};t.SideObject=l,l.prototype.spriteObjectsAnimation=i.spriteObjectsAnimation,l.prototype.displayObjectAtScene=i.displayObjectAtScene,l.prototype.shot=i.shot,l.prototype.fireAnimationEnded=o.fireAnimationEnded,l.prototype.takeDamage=s.takeDamage,l.prototype.mapObjectMove=o.mapObjectMove,l.prototype.enemyDamageAnimation=s.enemyDamageAnimation,l.prototype.spawnCoin=s.spawnCoin,l.prototype.sideObjectShot=o.sideObjectShot,l.prototype.bulletSpeed=c.bulletSpeed,l.prototype.loadTexture=o.loadTexture},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),i=n(5),o=n(0),s=n(4),c=n(25),l=n(6),u=n(10),h=n(48),d=function(e){var t=r(e,[]);this.x=t.x?t.x:window.innerWidth/2-t.width/2,this.y=t.y?t.y:window.innerHeight/2-t.height/2,this.width=t.width,this.height=t.height,this.defaultWidth=t.width,this.defaultHeight=t.height,this.imageWidth=t.imageWidth,this.imageHeight=t.imageHeight,this.imageWidthDefault=t.imageWidth,this.imageHeightDefault=t.imageHeight,this.texture=__dirname+t.texture,this.img=new Image,this.img.src=__dirname+t.texture,this.sx=0,this.sy=0,this.picturesWidth=t.imageWidth,this.sWidth=t.imageWidth/t.numberOfItems,this.sHeight=t.imageHeight/t.numberOfVerticalItems,this.sWidthDefault=t.imageWidth/t.numberOfItems,this.sHeightDefault=t.imageHeight/t.numberOfVerticalItems,this.speed=t.speed,this.groundTouch=!1,this.leftWallTouch=!1,this.rightWallTouch=!1,this.ceilingTouch=!1,this.numberOfJump=2,this.inventory=[],this.playerDirectionHorizontal="right",this.playerDirectionVertical="stand",this.isRun=!1,this.onElevator=!1,this.onStairs=!1,this.animations=t.animations,this.animationSteps=t.animationSteps,this.numberOfVerticalItems=t.numberOfVerticalItems,this.numberOfItems=t.numberOfItems,this.detectFrame=0,this.xPos=0,this.data=t.data,this.isShot=!0,this.shotAngle=360,this.xAdj=0,this.shotState=!1,this.objectOwner="groundPlayer",this.objectPresent=!0,this.healthPoint=t.healthPoint,this.defaultHealth=t.healthPoint,this.currentWallBlock=null,this.currentGroundBlock=null,this.currentDialogCharacter=null,this.onLeader=!1,this.type="ground-object",this.mapFinder=[],this.sound=t.sound?t.sound:null};t.DynamicUserConstructor=d,d.prototype.displayObjectAtScene=a.displayObjectAtScene,d.prototype.loadTexture=i.loadTexture,d.prototype.spriteObjectsAnimation=o.spriteObjectsAnimation,d.prototype.changeAnimationParameters=s.changeAnimationParameters,d.prototype.changeVerticalAnimationPicture=s.changeVerticalAnimationPicture,d.prototype.bulletSpeed=c.bulletSpeed,d.prototype.takeDamage=a.takeDamage,d.prototype.getObjectPosition=l.getObjectPosition,d.prototype.stairsMove=u.stairsMove,d.prototype.detectObjectsAsMap=h.detectObjectsAsMap},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(53),o=n(54);function s(e){var t=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,n;return a(this,(function(r){switch(r.label){case 0:return e={saveForm:document.forms["main-save-form"],saveScreen:document.querySelectorAll(".save-load-wrapper")},[4,o.showSaveData()];case 1:return n=r.sent(),o.displaySavesOnScreen({saveScreen:e.saveScreen,saveData:n,mainGameObject:t}),[2,{saveForm:e.saveForm,saveScreen:e.saveScreen}]}}))}))}t.initSaveLoadScreen=s,t.saveGameEvents=function(e){var t=e.mainGameObject;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,s({mainGameObject:t})];case 1:return e.sent().saveForm.addEventListener("submit",(function(e){return r(this,void 0,void 0,(function(){var n;return a(this,(function(r){switch(r.label){case 0:return e.preventDefault(),!t.gameInitData.gameStatus||t.gameInitData.gameOver||t.gameInitData.gameWin||t.gameInitData.shopActive||t.gameInitData.levelChange?[2,!1]:(n=i.collectData.call(this),[4,i.createSave({saveName:n,saveData:t,mainGameObject:t})]);case 1:return r.sent(),[2]}}))}))})),[2]}}))}))}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(19),s=n(52),c=n(7),l=n(54);function u(e){var t=e.text,n=e.typeOfWarning,r=Array.prototype.slice.call(document.querySelectorAll(".save-dialog-window"));if(a({data:""}),!t)return!1;function a(e){var t=e.data;r.forEach((function(e){return e.innerHTML="<p class="+n+">"+t+"</p>"}))}a({data:t})}t.saveDialog=u,t.createSave=function(e){var t=e.saveName,n=e.saveData,i=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,r,o,h,d,p,f;return a(this,(function(a){switch(a.label){case 0:return t&&n?parseInt(process.env.NUMBER_OF_SAVES)>=10?(l.loadedScreenDeactive(),[2,u({text:"You have 10 saves it`s maximum",typeOfWarning:"warning-text"})]):(l.loadedScreenActive(),[4,s.initSaveLoadScreen({mainGameObject:i})]):[2,console.error("There is no saveName or saveData")];case 1:return e=a.sent(),r=(new Date).getTime(),o=i.showGameInfo(),h={currentLevel:o.gameData.currentLevel,points:o.gameData.currentPoint,coins:o.gameData.gameCoins,minutes:o.gameData.levelData.levelDetails.levelMinutes,seconds:o.gameData.levelData.levelDetails.levelSeconds,playerLife:o.playerObject.numberOflife},d={savePicture:null,saveName:t.saveName?t.saveName:r,saveTime:r,playerInformation:h,saveData:JSON.stringify(n)},[4,i.getImageFromFields({saveGameData:d,screenshot:!1})];case 2:return p=a.sent(),d.savePicture=p,[4,c.writeElectronLocalData({fileName:t.saveName?t.saveName:r,data:JSON.stringify(d)})];case 3:return a.sent(),[4,l.showSaveData()];case 4:return f=a.sent(),u({text:"Save created successfully",typeOfWarning:"success-text"}),l.displaySavesOnScreen({saveScreen:e.saveScreen,saveData:f,mainGameObject:i}),l.loadedScreenDeactive(),[2]}}))}))},t.collectData=function(){for(var e={},t=0;t<this.length;t++){var n=this[t];n.name&&n.value&&(e[n.name]=n.value)}return e},t.deleteSaveData=function(e){var t=e.currentSave,n=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,r,c,h,d;return a(this,(function(a){switch(a.label){case 0:return l.loadedScreenActive(),[4,s.initSaveLoadScreen({mainGameObject:n})];case 1:return e=a.sent(),[4,l.showSaveData()];case 2:return r=a.sent(),c=o.getDataPath()+"/"+t.saveName+".png",h=r.find((function(e,n){return e.saveTime===t.saveTime})),d=r.indexOf(h),[4,r.splice(d,1)];case 3:a.sent(),a.label=4;case 4:return a.trys.push([4,6,,7]),[4,i.unlinkSync(c)];case 5:return a.sent(),[3,7];case 6:return a.sent(),console.log("no image"),[3,7];case 7:return u({text:"You just delete save "+t.saveName,typeOfWarning:"success-text"}),[4,i.unlinkSync(o.getDataPath()+"/"+t.saveName+".json")];case 8:return a.sent(),l.displaySavesOnScreen({saveScreen:e.saveScreen,saveData:r,mainGameObject:n}),l.loadedScreenDeactive(),[2]}}))}))},t.overwriteSaveData=function(e){var t=e.currentSave,n=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,r,h,d,p,f,m,g;return a(this,(function(a){switch(a.label){case 0:return l.loadedScreenActive(),[4,s.initSaveLoadScreen({mainGameObject:n})];case 1:return e=a.sent(),[4,l.showSaveData()];case 2:return r=a.sent(),h=r.find((function(e,n){return e.saveTime===t.saveTime})),r.indexOf(h),d=(new Date).getTime(),p=n.showGameInfo(),f={currentLevel:p.gameData.currentLevel,points:p.gameData.currentPoint,coins:p.gameData.gameCoins,minutes:p.gameData.levelData.levelDetails.levelMinutes,seconds:p.gameData.levelData.levelDetails.levelSeconds,playerLife:p.playerObject.numberOflife},m={savePicture:null,saveName:t.saveName?t.saveName:d,saveTime:d,playerInformation:f,saveData:JSON.stringify(n)},u({text:"Save overwrite successfully",typeOfWarning:"success-text"}),[4,n.getImageFromFields({saveGameData:m,screenshot:!1})];case 3:return g=a.sent(),m.savePicture=g,[4,i.unlinkSync(o.getDataPath()+"/"+t.saveName+".json")];case 4:return a.sent(),[4,c.writeElectronLocalData({fileName:t.saveName?t.saveName:d,data:JSON.stringify(m)})];case 5:return a.sent(),[4,l.showSaveData()];case 6:return r=a.sent(),l.displaySavesOnScreen({saveScreen:e.saveScreen,saveData:r,mainGameObject:n}),l.loadedScreenDeactive(),[2]}}))}))}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),s=n(19),c=n(7),l=n(9),u=n(22),h=i(n(8)),d=n(47),p=n(53),f=n(3),m=n(32);function g(){return r(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){return e=s.getDataPath()+"/",t=0,[2,new Promise((function(n,r){o.readdir(e,(function(e,r){var a=[];r.forEach((function(e){var n=JSON.stringify(e).split(".json");if(n[1]){'"game-saves'!=n[0]&&'"game-settings'!=n[0]&&'"gameResults'!=n[0]&&(t+=1,process.env.NUMBER_OF_SAVES=t.toString());var r={name:n[0].replace('"',"")};a=a.concat(r)}})),n(a)}))}))]}))}))}function v(e){for(var t=0,n=e.target;t<n.length;t++){n[t].object.innerHTML=""}}function b(e){var t=this,n=e.mainGameObject,r=e.saveDataItem,a=e.flag;!function(e){for(var t=0,n=e.target;t<n.length;t++){n[t].remove()}}({target:Array.prototype.slice.call(document.querySelectorAll(".save-load-buttons-list"))});var i=this,o=r.savePicture,s=new Image;s.src=o||null,s.onload=function(){var e=l.createElements({tagName:"li",styleClass:"save-load-buttons-list",inlineStyle:null,pictureUrl:null,linkUrl:null,text:null,innerContent:'\n            <div class="save-preview-image-large">\n                <img src="'+r.savePicture+'" alt="'+r.saveName+'">\n                <div class="save-details">\n                    <h3>Save: '+r.saveName+"</h3>\n                    <p>Level: "+r.playerInformation.currentLevel+"</p>\n                    <p>minutes: "+(r.playerInformation.minutes?r.playerInformation.minutes:0)+"</p>\n                    <p>seconds: "+(r.playerInformation.seconds?r.playerInformation.seconds:0)+"</p>\n                    <p>Life: "+r.playerInformation.playerLife+"</p>\n                    <p>Points: "+r.playerInformation.points+"</p>\n                    <p>Credits: "+r.playerInformation.coins+"</p>\n                </div>\n            </div>\n            "+("save-screen"===a?'<div class="save-load-button-area">\n        <button data-button-id="overwrite-save" class="btn-main">Overwrite</button>\n        <button data-button-id="delete-save" class="btn-main btn-orange-reject">Delete</button>\n    </div>':'<div class="save-load-button-area">\n        <button data-button-id="load-save" class="btn-main">Load</button>\n        <button data-button-id="delete-save" class="btn-main btn-orange-reject">Delete</button>\n    </div>')+"\n            ",attributeName:null,attribute:null,attributeName1:null,attribute1:null}),o=t;e.addEventListener("click",(function(e){switch(e.target.dataset.buttonId){case"load-save":y({parentElement:o,callback:x,saveDataItem:r,mainGameObject:n,text:"Load save: "+r.saveName+" ?"});break;case"overwrite-save":if(!n.gameInitData.gameStatus||n.gameInitData.gameOver||n.gameInitData.gameWin||n.gameInitData.shopActive||n.gameInitData.levelChange)return!1;process.env.OVERWRITE_SAVE="true"===process.env.OVERWRITE_SAVE?"false":"true",process.env.OVERWRITE_SAVE&&f.addClassList(i,"selected-overwrite-data"),y({parentElement:o,callback:p.overwriteSaveData,saveDataItem:r,mainGameObject:n,text:"Overwrite save: "+r.saveName+" with a new one?"});break;case"delete-save":y({parentElement:o,callback:p.deleteSaveData,saveDataItem:r,mainGameObject:n,text:"Delete save: "+r.saveName+" ?"});break;default:return!1}})),t.appendChild(e)}}function y(e){var t=e.parentElement,n=e.callback,r=e.saveDataItem,a=e.mainGameObject,i=e.text;p.saveDialog({text:null,typeOfWarning:""});var o=l.createElements({tagName:"div",styleClass:"save-load-dialog",inlineStyle:null,pictureUrl:null,linkUrl:null,text:null,innerContent:'<div class="save-dialog-wrapper">\n        <div class="dialog-content">\n            <p>'+i+'</p>\n        </div>\n        <button data-button-id="accept-save-action" class="btn-main">ok</button>\n        <button data-button-id="reject-save-action" class="btn-main btn-orange-reject">cancel</button>\n        </div>',attributeName:null,attribute:null,attributeName1:null,attribute1:null});o.addEventListener("click",(function(e){switch(e.target.dataset.buttonId){case"accept-save-action":n({currentSave:r,mainGameObject:a}),o.remove();break;case"reject-save-action":o.remove();break;default:return!1}})),t.appendChild(o)}function w(e){var t=e.data,n=e.constructor,r=Object.create(n);return Object.assign(Object.create(r.prototype),t)}function x(e){var t=e.mainGameObject,n=e.currentSave,r=JSON.parse(n.saveData),a={ctx:t.gameInitData.ctx,gameField:t.gameInitData.gameField,gameActionField:t.gameInitData.gameActionField,gameDialogField:t.gameInitData.gameDialogField,gameUIField:t.gameInitData.gameUIField,ctxActionField:t.gameInitData.ctxActionField,ctxGameDialogField:t.gameInitData.ctxGameDialogField,ctxUIField:t.gameInitData.ctxUIField,soundObject:t.gameInitData.gameData.levelSounds.soundObject,shopArea:t.shopArea},i=!1;r.gameInitData.allGameSideObjects=r.gameInitData.allGameSideObjects.map((function(e){var t=w({data:e,constructor:"grappleObject"===e.objectOwner?h.GrappleObject:h.SideObject});return t.img=new Image,t.loadTexture(),t})),r.gameInitData.allGameEnemies=r.gameInitData.allGameEnemies.map((function(e){var t=w({data:e,constructor:h.EnemyObject});return t.isBoss&&(i=!0,process.env.BOSS_LOAD_AT_LEVEL="true"),t.img=new Image,t.loadTexture(),t})),r.gameInitData.allGameBullets=r.gameInitData.allGameBullets.map((function(e){var t=w({data:e,constructor:h.BulletConstruct});return t.img=new Image,t.loadTexture(),t})),r.gameInitData.dynamicLevelMapBlocks&&(r.gameInitData.dynamicLevelMapBlocks=r.gameInitData.dynamicLevelMapBlocks.map((function(e){var t=w({data:e,constructor:h.DynamicBlockConstructor});return t.img=new Image,t.loadTexture(),t.backgroundTexture&&(t.backgroundTextureImg=new Image,t.backgroundTextureImg.src=process.env.HOST+t.backgroundTexture.texture),t}))),r.gameInitData.allGroundGameBullets&&(r.gameInitData.allGroundGameBullets=r.gameInitData.allGroundGameBullets.map((function(e){var t=w({data:e,constructor:h.BulletConstruct});return t.img=new Image,t.loadTexture(),t}))),r.gameInitData.dynamicLevelEnemy&&(r.gameInitData.dynamicLevelEnemy=r.gameInitData.dynamicLevelEnemy.map((function(e){var t=w({data:e,constructor:h.DynamicEnemyConstructor});return t.img=new Image,t.loadTexture(),t}))),r.gameInitData.mapBackgroundObjects=r.gameInitData.mapBackgroundObjects.map((function(e){var t=w({data:e,constructor:h.GameBackground});return t.x=t.partOfScreenStatus?-1:window.innerWidth+1,t.width=t.partOfScreenStatus?window.innerWidth+2:window.innerWidth,t.height=window.innerHeight,t.img=new Image,t.ctx=a.ctx,t.loadTexture(),t})),r.gameInitData.gameData.groundPlayerCharacter&&(r.gameInitData.gameData.groundPlayerCharacter=w({data:r.gameInitData.gameData.groundPlayerCharacter,constructor:h.DynamicUserConstructor}),r.gameInitData.gameData.groundPlayerCharacter.img=new Image,r.gameInitData.gameData.groundPlayerCharacter.loadTexture()),r.gameInitData.gameData.playerObject=w({data:r.gameInitData.gameData.playerObject,constructor:h.PlayerShip}),r.gameInitData.gameData.playerObject.ctx=a.gameActionField,r.gameInitData.gameData.playerObject.playerShipTextureChange(),r.gameInitData.gameData.levelSounds=w({data:r.gameInitData.gameData.levelSounds,constructor:h.SoundCreator}),r.gameInitData.gameData.levelSounds.soundObject=a.soundObject,(r=w({data:r,constructor:h.Game})).gameInitData.ctx=a.ctx,r.gameInitData.gameField=a.gameField,r.gameInitData.gameActionField=a.gameActionField,r.gameInitData.gameDialogField=a.gameDialogField,r.gameInitData.gameUIField=a.gameUIField,r.gameInitData.ctxActionField=a.ctxActionField,r.gameInitData.ctxGameDialogField=a.ctxGameDialogField,r.gameInitData.ctxUIField=a.ctxUIField,r.gameInitData.mapKeyCode={},r.gameInitData.gamePause=!0,r.gameInitData.gameUiPause=!1,r.gameInitData.shopActive=!1,r.gameInitData.randomObject=!1,r.gameInitData.levelWindowDescription=!1,r.gameInitData.grappleObjectOnScreen=!1,r.gameInitData.inventoryActive=!1,process.env.BOSS_LOAD_AT_LEVEL=i?"true":"false",r.shopArea=a.shopArea,process.env.SHOP_ACTIVE_WINDOW="false",process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="false",process.env.SHOP_SALE_WINDOW="false",process.env.SHOP_STORE_WINDOW="false",process.env.GROUND_CHARACTERS_INVENTORY="false",process.env.GROUND_ACTIVE_BLOCK_IN_RANGE="false",process.env.GROUND_PLAYER_ALLOW_MOVE="true",process.env.OVERWRITE_SAVE="false";var o=r.gameInitData.gameData.playerObject;f.hide(t.shopArea.shopWrapper),f.hide(t.shopArea.shopDialog),u.renewPlayerShip({originData:t,newData:r}),u.renewPlayerShip({originData:t.gameInitData.gameData.playerObject,newData:o}),t.gameInitData.gameData.playerObject.playerShipTextureChange(),d.replaceShipData({mainGameObject:t,buyShipData:o}),t.gameInitData.gameData.playerObject.placeShip(),t.gameInitData.gameData.playerObject.x=o.xFinal,t.gameInitData.gameData.playerObject.y=o.yFinal,t.mapSoundChanger({soundStatus:"regular_level"}),t.getScreenSize(),t.setGameFields(),t.initField()}t.showSaveData=function(){return r(this,void 0,void 0,(function(){var e,t,n,r,i,o,s,l,u;return a(this,(function(a){switch(a.label){case 0:return n=(t=Object).assign,r=[[]],[4,g()];case 1:e=n.apply(t,r.concat([a.sent()])),i=[],o=0,s=e,a.label=2;case 2:return o<s.length?(l=s[o])?"game-saves"===l.name||"game-settings"===l.name||"gameResults"===l.name?[3,4]:[4,c.getElectronLocalSaves({fileName:l.name})]:[3,4]:[3,5];case 3:u=a.sent(),i=i.concat(u),a.label=4;case 4:return o++,[3,2];case 5:return[2,i]}}))}))},t.displaySavesOnScreen=function(e){e.saveScreen;var t=e.saveData,n=e.mainGameObject;return r(this,void 0,void 0,(function(){var e,r,i,o,s,c,u,h,d;return a(this,(function(f){switch(f.label){case 0:return e=["save-screen","load-screen"],[4,v({target:r=Array.prototype.slice.call(document.querySelectorAll(".save-load-wrapper")).map((function(t,n){return{indexFlag:e[n],object:t}}))})];case 1:if(f.sent(),t.length<1){for(i=0,o=r;i<o.length;i++)d=o[i],(s=document.createElement("div")).innerHTML="<div><h2>No save data</h2></div>",d.object.appendChild(s);return m.hideLoadScreen(),[2]}return[4,t.sort((function(e,t){return e.saveTime-t.saveTime}))];case 2:return f.sent(),[4,t.reverse()];case 3:f.sent(),c=function(e){var r,i,o,s,c;return a(this,(function(u){switch(u.label){case 0:(!t||t.length<1)&&(e.object.innerHTML=""),r=0,i=function(t){var i,o,s,c,u,h,d,f,m;return a(this,(function(a){switch(a.label){case 0:return i=new Date(t.saveTime),o=i.getFullYear(),s=i.getUTCMonth()+1,c=i.getDate(),u=i.getHours(),h=i.getMinutes(),d=i.getSeconds(),f=new Image,m=t.savePicture,f.src=m||null,[4,new Promise((function(e,n){f.src=t.savePicture?t.savePicture:null,f.onload=function(){e({pictureURL:t.savePicture})}})).then((function(a){r+=1;var i=l.createElements({tagName:"li",styleClass:"save-load-list "+e.indexFlag,inlineStyle:null,pictureUrl:null,linkUrl:null,text:null,innerContent:'\n                    <div class="save-card-body">\n                        <div class="saveImage-wrapper-small">\n                            <img id="preview-img-'+t.saveTime+'" src="'+(t.savePicture?t.savePicture:"")+'" alt="'+t.saveName+'">\n                        </div>\n                        <p class="single-item"><span class="rate-number">'+r+'</span>\n                        <span>save name:</span> <span class="item-name"> '+t.saveName+'</span>\n                        <span class="item-date"> '+o+"/"+s+"/"+c+"    "+u+":"+h+":"+d+"</span></p>\n                    </div>\n                    ",attributeName:"data-button-id",attribute:t.saveTime,attributeName1:null,attribute1:null});i.addEventListener("click",(function(r){p.saveDialog({text:null,typeOfWarning:""});var a=document.querySelector("#preview-img-"+t.saveTime),i=t.savePicture;a.src=i||null,b.call(this,{mainGameObject:n,saveDataItem:t,flag:e.indexFlag})})),e.object.appendChild(i)}))];case 1:return a.sent(),[2]}}))},o=0,s=t,u.label=1;case 1:return o<s.length?(c=s[o],[5,i(c)]):[3,4];case 2:u.sent(),u.label=3;case 3:return o++,[3,1];case 4:return[2]}}))},u=0,h=r,f.label=4;case 4:return u<h.length?(d=h[u],[5,c(d)]):[3,7];case 5:f.sent(),f.label=6;case 6:return u++,[3,4];case 7:return m.hideLoadScreen(),[2]}}))}))},t.loadedScreenActive=function(){process.env.GROUND_PLAYER_ALLOW_MOVE="false";var e=document.querySelector("#wait-screen");f.show(e)},t.loadedScreenDeactive=function(){process.env.GROUND_PLAYER_ALLOW_MOVE="true";var e=document.querySelector("#wait-screen");f.hide(e)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0}),n(56);var o=n(18),s=(o.ipcRenderer,o.remote,n(1),i(n(60))),c=i(n(8)),l=n(23),u=n(3),h=n(11),d=n(52),p=n(6),f=n(10),m=n(27),g=n(0),v=n(29),b=n(0),y=n(5),w=n(111),x=n(28),O=n(16);function S(e){var t=e.object,n=e.gameObject;"enemy"!=t.objectOwner&&"collide"!=t.objectOwner&&"grappleObject"!=t.objectOwner&&"hangar"!=t.objectOwner&&"enemy"!=t.objectOwner||(n.hitDetection({object1:n.gameInitData.gameData.playerObject,objectsArr:[t],mainGameObject:n,GrappleObject:c.GrappleObject}),"enemy"!=t.objectOwner?t.sideObjectShot(c.BulletConstruct,n,c.SoundCreator,"hangarbullet",n.gameInitData.allGameEnemies.concat(n.gameInitData.allGameSideObjects.map((function(e){if("enemy"===e.objectOwner)return e})))):"enemy"===t.objectOwner&&t.sideObjectShot(c.BulletConstruct,n,c.SoundCreator,"enemy",[n.gameInitData.gameData.playerObject].concat(n.gameInitData.allGameSideObjects.map((function(e){if("hangar"===e.objectOwner||"collide"===e.objectOwner)return e})))))}function j(e){var t=e.gameObject;if(!t.gameInitData.backScreenPause||!t.gameInitData.gamePause||!t.gameInitData.gameStatus){t.gameInitData.ctx&&l.clearField(t.gameInitData.ctx,t.gameInitData.screen.width,t.gameInitData.screen.height);for(var n=0,r=t.gameInitData.mapBackgroundObjects;n<r.length;n++){var a=r[n];t.gameInitData.gamePause&&t.gameInitData.gameStatus||(t.gameInitData.shopActive||a.updateMap({mainGameObject:t}),a.spriteObjectsAnimation()),a.placeBackground(),a.changePartOfTexture(t,t.gameInitData.mapBackgroundObjects)}!function(e){var t=e.gameObject;t.gameInitData.levelChange&&t.warpEffect(c);t.gameInitData.levelWindowDescription&&t.levelChangeWindow()}({gameObject:t})}}function _(e){var t=e.gameObject;if(!t.gameInitData.dynamicLevelsActive)return!1;var n=t.gameInitData.dynamicLevelMapBlocks;if(!n)return!1;for(var r=n.filter((function(e){return"elevator"===e.details.type})),a=0,i=n.filter((function(e){return!e.details.collision||e.backgroundTexture}));a<i.length;a++){var o=i[a];!o||o.x>window.innerWidth+o.width||o.x+50<-1*o.width||o.y>window.innerHeight+o.height||o.y+50<-1*o.height||(O.respawnEnemyByTimer({mainGameObject:t,constructors:c,currentBlock:o}),o.backgroundTexture&&(b.displayObjectAtScene.call({x:o.x,y:o.y,sx:o.backgroundSx,sy:o.backgroundSy,sWidth:o.backgroundTexture.sWidth,sHeight:o.backgroundTexture.sWidth,width:o.backgroundTexture.width,height:o.backgroundTexture.height+1,degree:0,img:o.backgroundTextureImg},t),o.backgroundTexture.degree=0),t.gameInitData.gamePause||"door"==o.details.type||o.spriteObjectsAnimation(),"enemy_spawner"===o.details.type||"hidden_enemy_spawner"===o.details.type||"timer_enemy_spawner"===o.details.type||"npc_spawner"===o.details.type||"elevator"===o.details.type||"health"===o.details.type||o.details.isDestroy||!o.details.display&&"scenario_object"===o.details.type||!o.details.display&&"blue_card"===o.details.type||!o.details.display&&"green_card"===o.details.type||!o.details.display&&"yellow_card"===o.details.type||!o.details.display&&"red_card"===o.details.type||!o.details.display&&"laptop_with_data"===o.details.type||"ground-destruct"===o.details.type||(m.openClosedDoorAnimation({currentWallBlock:o,mainGameObject:t,constructors:c}),o.displayObjectAtScene(t)))}for(var s=0,l=r;s<l.length;s++){var u=l[s];t.gameInitData.gamePause||u.elevatorMove({mainGameObject:t}),u.displayObjectAtScene(t)}for(var h=0,d=n;h<d.length;h++){var p=d[h];!p||p.x>window.innerWidth+p.width||p.x<-1*p.width||p.y>window.innerHeight+p.height+220||p.y<0-p.height||p&&("enemy_spawner"===p.details.type||"hidden_enemy_spawner"===p.details.type||"timer_enemy_spawner"===p.details.type||"npc_spawner"===p.details.type||"elevator"===p.details.type||!p.details.display&&"health"===p.details.type||!p.details.display&&"scenario_object"===p.details.type||!p.details.display&&"blue_card"===p.details.type||!p.details.display&&"green_card"===p.details.type||!p.details.display&&"yellow_card"===p.details.type||!p.details.display&&"red_card"===p.details.type||!p.details.display&&"laptop_with_data"===p.details.type||"ground-destruct"===p.details.type&&p.details.isDestroy&&p.details.healthPoint<=0||!p.details.type&&p.details.isDestroy&&p.details.healthPoint<=0||!p.details.collision&&"background-wall"===p.details.type||!p.details.collision&&"door"===p.details.type||(m.openClosedDoorAnimation({currentWallBlock:p,mainGameObject:t,constructors:c}),t.gameInitData.gamePause||"door"==p.details.type||p.spriteObjectsAnimation(),p.displayObjectAtScene(t),b.displayObjectLifeSign({mainGameObject:t,targetObject:p})))}}!function(){r(this,void 0,void 0,(function(){function e(){return r(this,void 0,void 0,(function(){var e,t,n,r;return a(this,(function(a){switch(a.label){case 0:return e=document.querySelector("#main-menu"),[4,s.gameDataInit(c.PlayerShip,null,c)];case 1:if(!(t=a.sent()))throw u.appMenu(n,u.dialogWindow).menu.init(),new Error("There is no data in: gameState");return[4,new c.Game(t.data)];case 2:return n=a.sent(),r=n.gameInitData.gameData.playerObject,[2,{mainMenu:e,gameObject:n,playerShipData:r}]}}))}))}function t(e){var t=e.gameObject;return r(this,void 0,void 0,(function(){var e;return a(this,(function(n){return(e=u.appMenu(t,u.dialogWindow)).menu.init(),[2,e]}))}))}function n(e){var t=e.gameObject;return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,t.gameSettingsMenuInit()];case 1:return e.sent(),t.createSound(c.SoundCreator),[2]}}))}))}function i(){return r(this,void 0,void 0,(function(){var e;return a(this,(function(t){return D.uiController(),D.setGameFields(),D.getScreenSize(),D.shopArea=h.loadShopArea(D),e=D.returnContext(),D.gameInitData.gameData.playerObject.ctx=e.gameActionField,D.gameInitData.gameData.playerObject.initPlayerShip(),I.shipControl(D),window.addEventListener("resize",(function(){D.getScreenSize(),D.setGameFields(),D.initField()})),[2]}))}))}function o(){return r(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return D.gameInitData.ctxUIField&&l.clearField(D.gameInitData.ctxUIField,window.innerWidth,window.innerHeight),D.gameInitData.ctxActionField&&(l.clearField(D.gameInitData.ctxActionField,window.innerWidth,window.innerHeight),l.clearField(D.gameInitData.ctxGameDialogField,window.innerWidth,window.innerHeight)),D.gameInitData.backScreenPause&&D.levelInit(c.GameBackground,D.gameInitData.ctx,D),process.env.GROUND_ACTIVE_BLOCK_IN_RANGE="false",function(e){var t=e.gameObject;if(t.gameInitData.allGameEnemies.length>0)for(var n=0,r=t.gameInitData.allGameEnemies;n<r.length;n++){var a=r[n];a.displayObjectAtScene(t),!t.gameInitData.gamePause&&t.gameInitData.gameStatus&&(a.moveEnemyes(),a.enemyShipLogicVertical({x:t.gameInitData.gameData.playerObject.x,y:t.gameInitData.gameData.playerObject.y},t),a.spriteObjectsAnimation(!0),a.shot(c.BulletConstruct,t,c.SoundCreator,"enemy","allGameBullets"),t.deleteObjects({object:a,target:""}),t.hitDetection({object1:t.gameInitData.gameData.playerObject,objectsArr:[a],mainGameObject:t,GrappleObject:c.GrappleObject}),t.hitDetection({object1:a,objectsArr:t.gameInitData.allGameSideObjects,mainGameObject:t,GrappleObject:c.GrappleObject}))}}({gameObject:D}),function(e){var t=e.gameObject;if(t.gameInitData.allGameBullets.length>0)for(var n=0,r=t.gameInitData.allGameBullets;n<r.length;n++){var a=r[n];a.displayObjectAtScene(t),!t.gameInitData.gamePause&&t.gameInitData.gameStatus&&(a.moveBullets(t.gameInitData.gameData.playerObject,t),t.deleteBullet(a,"allGameBullets"),t.hitDetection({object1:a,objectsArr:t.gameInitData.allGameEnemies,mainGameObject:t,GrappleObject:c.GrappleObject}),t.gameInitData.dynamicLevelsActive||t.hitDetection({object1:t.gameInitData.gameData.playerObject,objectsArr:[a],mainGameObject:t,GrappleObject:c.GrappleObject}),t.hitDetection({object1:a,objectsArr:t.gameInitData.allGameSideObjects,mainGameObject:t,GrappleObject:c.GrappleObject}),a.spriteObjectsAnimation())}}({gameObject:D}),[4,_({gameObject:D})];case 1:return e.sent(),function(e){var t=e.gameObject;if(!t.gameInitData.dynamicLevelsActive)return!1;if(t.gameInitData.allGroundGameBullets.length>0)for(var n=function(e){if(e.displayObjectAtScene(t),!t.gameInitData.gamePause&&t.gameInitData.gameStatus){if(e.moveBullets(t.gameInitData.gameData.playerObject,t),e.x>window.innerWidth+100||e.x<-100||e.y>window.innerHeight+100||e.y<-100)return"continue";t.deleteBullet(e,"allGroundGameBullets"),t.hitDetection({object1:e,objectsArr:t.gameInitData.allGameEnemies,mainGameObject:t,GrappleObject:c.GrappleObject}),t.hitDetection({object1:e,objectsArr:t.gameInitData.allGameSideObjects,mainGameObject:t,GrappleObject:c.GrappleObject}),t.hitDetection({object1:t.gameInitData.gameData.groundPlayerCharacter,objectsArr:[e],mainGameObject:t,GrappleObject:c.GrappleObject});var n=t.gameInitData.dynamicLevelEnemy.filter((function(t){if(Math.max(e.x,t.x)-Math.min(e.x,t.x)<100&&Math.max(e.y,t.y)-Math.min(e.y,t.y)<100)return t}));t.hitDetection({object1:e,objectsArr:n,mainGameObject:t,GrappleObject:c.GrappleObject});var r=t.gameInitData.dynamicLevelMapBlocks.filter((function(t){if(Math.max(e.x,t.x)-Math.min(e.x,t.x)<100&&Math.max(e.y,t.y)-Math.min(e.y,t.y)<100&&t.details.collision)return t}));t.hitDetection({object1:e,objectsArr:r,mainGameObject:t,GrappleObject:c.GrappleObject}),e.spriteObjectsAnimation()}},r=0,a=t.gameInitData.allGroundGameBullets;r<a.length;r++){n(a[r])}}({gameObject:D}),function(e){var t=e.gameObject;r(this,void 0,void 0,(function(){var e,n,r,i,o,s,l,u,h;return a(this,(function(a){switch(a.label){case 0:return t.gameInitData.dynamicLevelsActive?t.gameInitData.gameOver||!t.gameInitData.gameStatus?[3,5]:(e=t.gameInitData.allGameBullets,n=t.gameInitData.allGroundGameBullets,r=t.gameInitData.allGameSideObjects,i=t.gameInitData.gameExtraSeconds,o=t.gameInitData.gameData.groundPlayerCharacter,s=t.gameInitData.dynamicLevelMapBlocks,l=t.gameInitData.dynamicLevelEnemy,u=[].concat(n,r,e,s,l),o.displayObjectAtScene(t),t.gameInitData.gamePause||!t.gameInitData.gameStatus?[3,5]:(o.onLeader&&o.leaderClimb?o.spriteObjectsAnimation():o.onLeader||o.spriteObjectsAnimation(),o.changeVerticalAnimationPicture(),"false"===process.env.GROUND_CHARACTERS_INVENTORY&&o.detectObjectsAsMap({mainGameObject:t}),o.shotState&&i%10==0&&(o.shotAngle||0===o.shotAngle)&&(h="down"===o.playerDirectionVertical?Math.floor(1*Math.random()):o.groundTouch?Math.floor(5*Math.random()):Math.floor(10*Math.random()),h*=Math.floor(10*Math.random())>5?-1:1,o.shotAngle+=h,o.shotAngle<0&&(o.shotAngle=0),b.shot.call(o,c.BulletConstruct,t,c.SoundCreator,"player","allGroundGameBullets")),[4,f.blockCollision({objectsToCollide:s,targetObject:o,objectIntersectionDetect:g.objectIntersectionDetect,mainGameObject:t,explosionFire:y.explosionFire,constructors:c})])):[2,!1];case 1:return a.sent(),[4,f.computersDialog({mainGameObject:t,allBlocks:s})];case 2:return a.sent(),[4,f.mapGravityInit({mainGameObject:t,mapObjects:u,targetObject:o,constructors:c})];case 3:return a.sent(),[4,t.hitDetection({object1:o,objectsArr:t.gameInitData.allGameSideObjects,mainGameObject:t,GrappleObject:c.GrappleObject})];case 4:a.sent(),o.xPos=0,a.label=5;case 5:return[2]}}))}))}({gameObject:D}),function(e){var t=e.gameObject;r(this,void 0,void 0,(function(){var e,n,r,i,o,s,l;return a(this,(function(a){switch(a.label){case 0:if(!t.gameInitData.dynamicLevelsActive)return[2,!1];if(e=t.gameInitData.gameData.levelData,n=t.gameInitData.dynamicLevelEnemy,r=t.gameInitData.gameData.groundPlayerCharacter,i=t.gameInitData.dynamicLevelMapBlocks.filter((function(e){if(e.details)if(!e||e.x>window.innerWidth+e.width||e.x<-1*e.width||e.y>window.innerHeight+e.height+220||e.y<0-e.height);else if(e.details.collision)return e})),r.isRun=!1,!n)return[2,!1];o=0,s=n,a.label=1;case 1:return o<s.length?!(l=s[o])||l.x>window.innerWidth||l.x<-1*l.width||l.y>window.innerHeight||l.y<-1*l.height?[3,5]:(l.displayObjectAtScene(t),l.changeVerticalAnimationPicture(),l.objectPresent?t.gameInitData.gamePause||!t.gameInitData.gameStatus?[3,4]:(l.spriteObjectsAnimation(),l.groundEnemyMove({mainGameObject:t,levelInformation:e}),f.blockCollision({objectsToCollide:i,targetObject:l,objectIntersectionDetect:g.objectIntersectionDetect,mainGameObject:t,explosionFire:y.explosionFire,constructors:c}),l.enemyDetectNpc({mainGameObject:t,npcData:n,allBlocks:i,objectIntersectionDetect:g.objectIntersectionDetect}),"npc_spawner"==l.details.type?[3,3]:[4,l.detectPlayer({mainGameObject:t,groundPlayer:r,allBlocks:i,objectIntersectionDetect:g.objectIntersectionDetect})]):(l.details.collision&&(l.details.collision=!1),[3,5])):[3,6];case 2:a.sent(),a.label=3;case 3:l.groundEnemyDecided({mainGameObject:t,allBlocks:i}),l.groundEnemyPathFinder({mainGameObject:t,allBlocks:i}),l.jumpDown({mainGameObject:t}),l.groundPlayerJump({mainGameObject:t,allBlocks:i,levelInformation:e}),l.jumpDown({mainGameObject:t,allBlocks:i,levelInformation:e}),l.groundEnemyShot({mainGameObject:t,allBlocks:i,callback:b.shot,constructors:c}),f.npcCollisionDetect({mainGameObject:t,enemy:l}),a.label=4;case 4:b.displayObjectLifeSign({mainGameObject:t,targetObject:l}),l.onLeader=!1,a.label=5;case 5:return o++,[3,1];case 6:return[2]}}))}))}({gameObject:D}),v.syncKeyControl({mainGameObject:D}),function(e){var t=e.gameObject,n=t.getLevelUserData();if(t.gameInitData.dynamicLevelsActive||0===n.currentLevel)return!1;t.gameInitData.gameOver||(!t.gameInitData.gamePause&&t.gameInitData.gameStatus&&(t.gameInitData.shopActive||t.gameInitData.gameData.playerObject.placeShip(),t.gameInitData.gameData.playerObject.spriteObjectsAnimation(),v.shipInSpace({mainGameObject:t,playerShip:t.gameInitData.gameData.playerObject,constructors:c})),t.gameInitData.gameStatus&&t.gameInitData.gameData.playerObject.displayObjectAtScene(t))}({gameObject:D}),function(e){var t=e.gameObject;if(t.gameInitData.allGameSideObjects.length>0)for(var n=0,r=t.gameInitData.allGameSideObjects;n<r.length;n++){var a=r[n];a.displayObjectAtScene(t),!t.gameInitData.gamePause&&t.gameInitData.gameStatus&&("explosion"==a.objectOwner||"smoke"==a.objectOwner?a.fireAnimationEnded(t.gameInitData.allGameSideObjects):(S({object:a,gameObject:t}),a.spriteObjectsAnimation()),t.gameInitData.shopActive||a.mapObjectMove(),t.delateSideObject(a))}}({gameObject:D}),function(e){var t=e.gameObject;if(!t.gameInitData.gamePause&&t.gameInitData.gameStatus&&t.gameInitData.gameStatus&&(t.gameInitData.gameData.levelObjects&&(t.gameInitData.dynamicLevelsActive||t.gameInitData.shopActive||t.mapRandomObjectSpawn(t.gameInitData.gameData.levelObjects,c.SideObject,t.gameInitData.allGameSideObjects)),t.gameInitData.levelChange||t.spawnEnemyLogic(c.EnemyObject),t.gameInitData.levelChange||t.initGrappleObject(c.GrappleObject,t.gameInitData.gameData.playerObject),t.gameSecondsIncrease(),!t.gameInitData.shopActive)){if(t.gameInitData.dynamicLevelsActive)return!1;t.levelTimer()}}({gameObject:D}),j({gameObject:D}),function(e){var t=e.gameObject;!function(e){var t=e.gameObject;t.gameInitData.gameStatus||t.showStartWindow(),t.gameInitData.gameStatus&&t.showGameStats({playerObject:t.gameInitData.gameData.playerObject,mainGameObject:t}),t.gameInitData.gamePause&&t.gameInitData.gameStatus&&t.showPauseWindow(),t.gameInitData.gameUiPause&&t.gameInitData.gameStatus&&(t.showMenuWindow(),t.showPauseWindow())}({gameObject:t}),t.gameInitData.gameOver&&t.gameOverWindow(),!t.gameInitData.gameWin||t.gameInitData.gameUiPause||t.gameInitData.gamePause||t.gameWinWindow()}({gameObject:D}),u.hideShowMenu(O,k.menu,D.gameInitData.gameWin,D.gameInitData.gameStatus,D.gameInitData.gameUiPause),[2]}}))}))}var m,O,D,I,k;return a(this,(function(r){switch(r.label){case 0:return document.addEventListener("dragover",(function(e){return e.preventDefault(),!1}),!1),document.addEventListener("drop",(function(e){return e.preventDefault(),!1}),!1),w.initAppGlobalVariable(),[4,e()];case 1:return[4,(m=r.sent()).mainMenu];case 2:return O=r.sent(),[4,m.gameObject];case 3:return D=r.sent(),[4,m.playerShipData];case 4:return I=r.sent(),[4,t({gameObject:D})];case 5:return k=r.sent(),[4,n({gameObject:D})];case 6:return r.sent(),[4,setInterval(o,D.gameInitData.intervalCount)];case 7:return r.sent(),[4,i()];case 8:return r.sent(),d.saveGameEvents({mainGameObject:D}),p.createScreenshots({mainGameObject:D}),x.fillJournalDefaultData({mainGameObject:D}),[2]}}))}))}()},function(e,t,n){var r=n(57),a=n(58);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var i={insert:"head",singleton:!1},o=(r(a,i),a.locals?a.locals:{});e.exports=o},function(e,t,n){"use strict";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function s(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],a=0;a<e.length;a++){var i=e[a],c=t.base?i[0]+t.base:i[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var h=s(u),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==h?(o[h].references++,o[h].updater(d)):o.push({identifier:u,updater:g(d,t),references:1}),r.push(u)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=h(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,a=n.media,i=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,m=0;function g(e,t){var n,r,a;if(t.singleton){var i=m++;n=f||(f=l(t)),r=d.bind(null,n,i,!1),a=d.bind(null,n,i,!0)}else n=l(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=s(n[r]);o[a].references--}for(var i=c(e,t),l=0;l<n.length;l++){var u=s(n[l]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=i}}}},function(e,t,n){(t=n(59)(!1)).push([e.i,'.btn-main{padding:10px;border:0px;border-radius:5px;transition:.5s linear}.btn-main:hover{background:#b4b4b4}.selected-items{background:#161325}.btn-sticky{position:fixed;top:90%;z-index:100;left:0;width:220px;background:#EA6C00;transition:.5s linear}.btn-sticky:hover{background:#ffaf6a}.btn-orange{background:#EA6C00;padding:10px;margin:0 auto;display:block;min-width:250px;transition:.5s linear}.btn-orange:hover{background:#ffaf6a}.btn-orange-reject{background:#EA6C00;padding:10px;transition:.5s linear}.btn-orange-reject:hover{background:#ffaf6a}button{height:40px;min-width:100px}.to-hangar-btn,.to-shop-btn{float:right;background:#d22020;z-index:10;position:relative;margin-top:-54px;margin-right:99px;color:#ffd9b9;text-transform:uppercase}.to-shop-btn{margin-top:46px}button:focus,li:focus,ul:focus,img:focus,div:focus,p:focus{outline:0}.tablet-btn{height:160px;padding:15px;min-width:10px;background-size:cover;background-position:center;border:0px;border-radius:20px;color:#fff;font-size:20px;box-shadow:2px 4px 9px #000;transition:.3s linear;border:5px solid #542801}.avatar-close{background:none;border:0px;color:#ffffff;text-align:left;font-size:18px}.avatar-button{width:100px;height:100px;background-color:#4f3563;background-size:contain;display:block;margin:0 auto;border-radius:50%;border:0px;padding:0px;overflow:hidden}.screenshot-button{position:absolute;right:15px;background:none;border:0px}.screenshot-button img{width:50px;transition:.5s linear;display:block;float:right}.screenshot-button img:hover{transform:scale(1.2)}.message-screenshot{background-color:#4bae60;color:#fff;padding:20px;right:-200%;top:0;position:absolute}.active-message-box{animation:apear-message 5s linear forwards}.screenshot-button:active{opacoty:.3}@keyframes apear-message{0%{right:-200%}10%{right:0%}90%{right:0%}100%{right:-200%}}.btn-main{padding:10px;border:0px;border-radius:5px;transition:.5s linear}.btn-main:hover{background:#b4b4b4}.selected-items{background:#161325}.btn-sticky{position:fixed;top:90%;z-index:100;left:0;width:220px;background:#EA6C00;transition:.5s linear}.btn-sticky:hover{background:#ffaf6a}.btn-orange{background:#EA6C00;padding:10px;margin:0 auto;display:block;min-width:250px;transition:.5s linear}.btn-orange:hover{background:#ffaf6a}.btn-orange-reject{background:#EA6C00;padding:10px;transition:.5s linear}.btn-orange-reject:hover{background:#ffaf6a}button{height:40px;min-width:100px}.to-hangar-btn,.to-shop-btn{float:right;background:#d22020;z-index:10;position:relative;margin-top:-54px;margin-right:99px;color:#ffd9b9;text-transform:uppercase}.to-shop-btn{margin-top:46px}button:focus,li:focus,ul:focus,img:focus,div:focus,p:focus{outline:0}.tablet-btn{height:160px;padding:15px;min-width:10px;background-size:cover;background-position:center;border:0px;border-radius:20px;color:#fff;font-size:20px;box-shadow:2px 4px 9px #000;transition:.3s linear;border:5px solid #542801}.avatar-close{background:none;border:0px;color:#ffffff;text-align:left;font-size:18px}.avatar-button{width:100px;height:100px;background-color:#4f3563;background-size:contain;display:block;margin:0 auto;border-radius:50%;border:0px;padding:0px;overflow:hidden}.screenshot-button{position:absolute;right:15px;background:none;border:0px}.screenshot-button img{width:50px;transition:.5s linear;display:block;float:right}.screenshot-button img:hover{transform:scale(1.2)}.message-screenshot{background-color:#4bae60;color:#fff;padding:20px;right:-200%;top:0;position:absolute}.active-message-box{animation:apear-message 5s linear forwards}.screenshot-button:active{opacoty:.3}@keyframes apear-message{0%{right:-200%}10%{right:0%}90%{right:0%}100%{right:-200%}}.save-dialog-window .success-text{border:1px solid green;color:green;padding:10px}@keyframes message-apear{0%{top:-100px}10%{top:0px}90%{top:0px}100%{top:-100px}}body{font-family:\'Roboto\';color:#fff;background:#333;margin:0;padding:0;overflow:hidden;-khtml-user-select:none;user-select:none}body #preloader{visibility:hidden;width:0px;height:0px}body form .reject-text{border:1px solid red;color:red;padding:10px}body form .warning-text{border:1px solid yellow;color:yellow;padding:10px}body form .success-text{border:1px solid green;color:green;padding:10px}body form .message-slide-text{right:0;width:0px;padding:0px}body form .show-message{position:fixed;right:10px;top:0;padding:10px;background:green;color:#fff;dialog:block;width:30%;text-align:center;animation:message-apear 5s linear forwards}*,*::after,*::before{-webkit-user-select:none;-webkit-user-drag:none;-webkit-app-region:no-drag}.header-full-banner{position:fixed;display:flex;top:0;z-index:2}.header-full-banner .header-description{position:absolute;width:100%;height:100%;display:flex;flex-flow:column;justify-content:center;font-size:32px}.header-full-banner .header-description h1,.header-full-banner .header-description h2{margin-top:10px;margin-bottom:20px}.header-full-banner img{width:101%;margin-left:-20px}main{z-index:10;position:relative;background:linear-gradient(232deg, #1e1a32 0%, #161325 57%, #201326 100%);background-attachment:fixed;padding:20px;margin-top:350px;margin-left:-20px;width:100%;color:#afa3aa}main h1,main h2,main h3{text-transform:uppercase;text-align:center;font-weight:900;color:#EA6C00}section h1:first-letter,section h2:first-letter,section h3:first-letter{text-transform:uppercase}.static-wrapper{display:flex;position:absolute;top:0;width:100vw}.static-wrapper asside.menu-backgroud{background:linear-gradient(232deg, #2f2231 0%, #270f2e 35%, #131325 100%)}.static-wrapper asside{z-index:1088}.static-wrapper asside .main-menu{z-index:1210;top:10px}.static-wrapper asside .main-menu ul{display:grid;top:105px;position:relative;text-shadow:0px 0px 6px rgba(92,2,108,0.5);padding:0;text-transform:uppercase}.static-wrapper asside .main-menu ul li{min-width:160px;padding:10px;list-style:none;padding-left:50px;transition:.5s linear}.static-wrapper asside .main-menu ul li:hover{background:#1d111f}.static-wrapper asside .main-menu ul li:hover a{color:#ffba3a}.static-wrapper asside .main-menu ul a{color:#fff;text-decoration:none;font-size:17px;width:100%;padding:5px;display:block;outline:none}.static-wrapper asside .main-menu ul a:active{color:red}.content-wrapper{width:100%;max-height:100vh;overflow-y:scroll;z-index:1100}.content-wrapper .menu-pages-wrapper{background:linear-gradient(232deg, #1e1a32 0%, #161325 57%, #201326 100%);margin-top:-20px;min-height:100vh;padding:20px;background-attachment:fixed}.content-wrapper::-webkit-scrollbar{width:12px}.content-wrapper::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,0);border-radius:10px}.content-wrapper::-webkit-scrollbar-thumb{border-radius:10px;background:rgba(71,6,83,0.8);-webkit-box-shadow:inset 0 0 6px #000}.content-wrapper::-webkit-scrollbar-thumb:window-inactive{background:rgba(255,0,0,0.1)}.dialog-box{position:absolute;margin:0 auto;padding:10px;min-width:100%;min-height:100vh;position:fixed;left:0}.dialog-box .dialog-wrapper{display:flex;height:100vh;justify-content:center;align-items:center}.dialog-box .dialog-wrapper .dialog-window{background:#292c35;padding:20px;min-width:400px;min-height:100px;border-radius:5px;box-shadow:-3px 3px 10px rgba(0,0,0,0.7)}.dialog-box .dialog-wrapper .dialog-window form input[type="text"],.dialog-box .dialog-wrapper .dialog-window form input[type="email"],.dialog-box .dialog-wrapper .dialog-window form input[type="password"]{width:93%;padding:10px;border-radius:5px;background:rgba(255,255,255,0.1);border:0px;color:white}.dialog-box .dialog-wrapper .dialog-window form label{font-size:12px;color:#eee}.dialog-box .dialog-wrapper .dialog-window form .alert-message{font-size:12px}.dialog-box .dialog-wrapper .dialog-window form .alert-message p{padding:10px}.dialog-box .dialog-wrapper .dialog-window form .alert-message .reject-text{border:1px solid red;color:red;padding:10px}.dialog-box .dialog-wrapper .dialog-window form .alert-message .warning-text{border:1px solid yellow;color:yellow;padding:10px}.dialog-box .dialog-wrapper .dialog-window form .alert-message .success-text{border:1px solid green;color:green;padding:10px}.dialog-box .dialog-wrapper .dialog-window div{padding:10px}.dialog-box .dialog-wrapper .dialog-window div p{text-align:center}.dialog-box .dialog-wrapper .dialog-window .dialog-bottom-area{display:flex;justify-content:space-evenly}.dialog-box .dialog-wrapper .dialog-window .dialog-bottom-area button.accept-btn{background:#4bae60;width:calc(100% / 3);transition:.5s linear}.dialog-box .dialog-wrapper .dialog-window .dialog-bottom-area button.accept-btn:hover{background:#74f08e}.dialog-btn-area{display:flex;justify-content:space-evenly}.dialog-btn-area button.accept-btn{background:#4bae60;width:calc(100% / 3);transition:.5s linear}.dialog-btn-area button.accept-btn:hover{background:#74f08e}.load-screen-button-wrapper{margin-top:38vh}.load-screen-button-wrapper button{margin-top:10px}.wait-screen{width:100vw;height:100vh;background:#21003a80;position:absolute;z-index:1500}.wait-screen h1{text-align:center}.wait-screen .wait-screen-inner{display:flex;height:100%;justify-content:center;align-items:center}#wrapper section{z-index:50;top:0}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;width:100%;align-items:center}.hide-menu{display:none}.dialog-text{text-align:center}.dialog-text button{width:50%;border-radius:0px;background:none;color:#fff}.dialog-text .selected-form{box-sizing:border-box;border-bottom:3px solid #c90000}.main-load-screen{background-size:cover;overflow:hidden;position:absolute;z-index:2000;width:100vw;height:100vh}.main-load-screen h1{text-align:center;font-size:100px;margin-top:10px;font-weight:900}.main-load-screen p{padding:20px}.main-load-screen span{font-weight:100}.inner-page-container .single-news-item{padding-top:30px;padding-bottom:50px;border-bottom:1px solid #4d0094}.single-items-content-area{display:flex;flex-wrap:wrap}.single-items-content-area p{width:100%}.single-items-content-area .article-part-item{width:47%;padding:10px;display:grid;justify-content:center;align-items:center}.single-items-content-area .article-part-item p,.single-items-content-area .article-part-item li{color:#b4b4b4}.single-items-content-area .article-part-item img{width:100%;padding:3px}.single-items-content-area .article-part-item h2{text-align:right}p.text-branding{position:absolute;top:0;padding:20px;font-size:12px;right:0;color:#dea754}.hide-animation{animation:hide-animation 1s forwards linear}.article-part-item b{color:#EA6C00}@keyframes hide-animation{0%{opacity:1}100%{opacity:0}}.btn-main{padding:10px;border:0px;border-radius:5px;transition:.5s linear}.btn-main:hover{background:#b4b4b4}.selected-items{background:#161325}.btn-sticky{position:fixed;top:90%;z-index:100;left:0;width:220px;background:#EA6C00;transition:.5s linear}.btn-sticky:hover{background:#ffaf6a}.btn-orange{background:#EA6C00;padding:10px;margin:0 auto;display:block;min-width:250px;transition:.5s linear}.btn-orange:hover{background:#ffaf6a}.btn-orange-reject{background:#EA6C00;padding:10px;transition:.5s linear}.btn-orange-reject:hover{background:#ffaf6a}button{height:40px;min-width:100px}.to-hangar-btn,.to-shop-btn{float:right;background:#d22020;z-index:10;position:relative;margin-top:-54px;margin-right:99px;color:#ffd9b9;text-transform:uppercase}.to-shop-btn{margin-top:46px}button:focus,li:focus,ul:focus,img:focus,div:focus,p:focus{outline:0}.tablet-btn{height:160px;padding:15px;min-width:10px;background-size:cover;background-position:center;border:0px;border-radius:20px;color:#fff;font-size:20px;box-shadow:2px 4px 9px #000;transition:.3s linear;border:5px solid #542801}.avatar-close{background:none;border:0px;color:#ffffff;text-align:left;font-size:18px}.avatar-button{width:100px;height:100px;background-color:#4f3563;background-size:contain;display:block;margin:0 auto;border-radius:50%;border:0px;padding:0px;overflow:hidden}.screenshot-button{position:absolute;right:15px;background:none;border:0px}.screenshot-button img{width:50px;transition:.5s linear;display:block;float:right}.screenshot-button img:hover{transform:scale(1.2)}.message-screenshot{background-color:#4bae60;color:#fff;padding:20px;right:-200%;top:0;position:absolute}.active-message-box{animation:apear-message 5s linear forwards}.screenshot-button:active{opacoty:.3}@keyframes apear-message{0%{right:-200%}10%{right:0%}90%{right:0%}100%{right:-200%}}.shop-wrapper{z-index:1000;width:90%;border-radius:10px;padding:20px;max-height:72vh;background-size:cover;height:550px}.shop-wrapper .shop-frame{position:absolute;width:62%;height:570px}.shop-wrapper h1{text-align:center}.shop-wrapper .hangar-body-wrapper{z-index:1000;position:relative}.shop-wrapper .hangar-body-wrapper p{text-align:center}.shop-wrapper .shop-header{margin-top:-48px;position:absolute;width:62%;background-repeat:no-repeat;z-index:200}.shop-wrapper .external-btn{position:absolute;z-index:2000;min-width:160px;height:38px;margin-top:534px;margin-left:147px;width:100px;color:#ffffff;text-transform:uppercase}.shop-wrapper .shop-menu-wrapper{display:flex;justify-content:space-around;margin-top:-12px;padding:20px}.shop-wrapper .item-description{width:100px;height:fit-content;font-size:10px;background:rgba(47,24,51,0.81);position:absolute;padding:5px;border-radius:5px;z-index:2500}.shop-wrapper .item-dragable-picture{width:120px;height:94px;font-size:10px;position:absolute;z-index:2500}.shop-wrapper .shop-sale-part{width:100%;height:67px;background-size:cover}.shop-wrapper .shop-sale-part .sale-inner-item img{width:100%}.shop-wrapper .inner-shop-wrapper{display:flex}.shop-wrapper .display-area-wrapper{background-repeat-x:no-repeat;width:70%;height:527px}.shop-wrapper .display-area-wrapper canvas{background-size:cover}.shop-wrapper .right-side-inventory{width:245px;height:fit-content;justify-content:center;display:flex;flex-wrap:wrap;right:50px;background-size:contain;margin:0 auto}.shop-wrapper .right-side-inventory .inventory-selected-items{background:orange}.shop-wrapper .right-side-inventory .inventory-item{height:93px;width:44%;padding:5px}.shop-wrapper .right-side-inventory .inventory-item .inventory-inner-item{width:100%;height:100%;background:rgba(43,31,40,0.8);border-radius:7px;display:flex;justify-content:center}.shop-wrapper .right-side-inventory .inventory-item .inventory-inner-item span{position:absolute;padding:2px}.shop-wrapper .right-side-inventory .inventory-item .inventory-inner-item img{justify-self:center;width:80%;height:84%;align-self:center}.shop-wrapper .display-shop-items{display:flex;flex-flow:wrap;transform:scale(0.9);margin:0 auto;margin-top:88px;min-height:485px}.shop-wrapper .display-shop-items .current-ship{border:2px solid rebeccapurple;box-sizing:border-box}.shop-wrapper .display-shop-items .card-regular-description-wrapper{font-size:12px}.shop-wrapper .display-shop-items .shipyard-item{width:100%;margin:1%;background-size:cover;max-height:405px;overflow-y:scroll;border-radius:5px}.shop-wrapper .display-shop-items .shipyard-item img{width:55}.shop-wrapper .display-shop-items h2{display:flex}.shop-wrapper .display-shop-items .current-ship-label{width:120px;padding-left:10%}.shop-wrapper .display-shop-items .card-body{display:flex;flex-flow:wrap;flex-wrap:wrap;justify-content:space-evenly;background:#330044;font-size:12px}.shop-wrapper .display-shop-items .shop-card{width:calc(100%/4.4);margin:1%;background-size:cover;height:406px}.shop-wrapper .display-shop-items .inner-card{padding:10px}.shop-wrapper .display-shop-items img{width:55%;margin:0 auto;display:block}.shop-wrapper .display-shop-items .shipyard-item .card-main-data{width:50%}.botoom-shop-navigation-area{z-index:1000;position:relative}.selected-shop-btn{background:#EA6C00}.selected-shop-btn:hover{background:#ffaf6a}.shop-button{margin-top:21%;position:relative}button .shop-button{width:10px;min-width:10px}.btn-to-right{float:right}.btn-to-left{float:left}.shipyard-item::-webkit-scrollbar{width:12px}.shipyard-item::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,0);border-radius:10px}.shipyard-item::-webkit-scrollbar-thumb{border-radius:10px;background:rgba(71,6,83,0.8);-webkit-box-shadow:inset 0 0 6px #000}.shipyard-item::-webkit-scrollbar-thumb:window-inactive{background:rgba(255,0,0,0.1)}.shop-dialog{z-index:1010;background:#292c35;position:absolute;align-self:center;padding:20px;width:400px;text-align:center;border-radius:5px;box-shadow:-3px 3px 10px rgba(0,0,0,0.7)}.result-message-wrapper{display:flex;color:orange;justify-content:center;height:80vh;align-items:center}.result-message-wrapper p{text-align:center;font-size:20px}.result-message-wrapper p:first-letter{text-transform:uppercase}ul.show-result-area{list-style:none}ul.show-result-area li{padding:10px}ul.show-result-area li .rate-number{color:red;flex-basis:5%}ul.show-result-area li .item-name{color:orange;flex-basis:60%}ul.show-result-area li .item-coin{color:green;flex-basis:15%}ul.show-result-area li .item-points{color:orange;flex-basis:15%}ul.show-result-area li .item-date{font-size:10px;color:grey;flex-basis:5%}ul.show-result-area li p{display:flex;font-size:14px;color:#bdbdbd}ul.show-result-area li:nth-child(odd){background:#0a0713}ul.show-result-area li:nth-child(odd) .save-load-buttons-list{overflow:hidden;height:auto;background:#0a0713;height:10px;position:relative;display:list-item;animation:load-preview-pics .8s linear forwards}ul.show-result-area li:nth-child(even){background:#0f0c1b}ul.show-result-area li:nth-child(even) .save-load-buttons-list{height:auto;overflow:hidden;background:#0f0c1b;height:10px;position:relative;display:list-item;animation:load-preview-pics .8s linear forwards}@keyframes load-preview-pics{0%{min-height:0px;background:#161325}99%{min-height:400px;background:#0a0713}100%{height:auto}}.load-screen-wrapper{z-index:2000;width:100vw;height:100vh;top:0;position:relative}.load-screen-wrapper .load-circe-wrapper{width:100px;height:100px;background-size:cover;animation:load-circle-rotate 1s infinite steps(11, end)}.load-screen-wrapper p{text-align:left}@keyframes load-circle-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.save-dialog-window .success-text{border:1px solid green;color:green;padding:10px}@keyframes message-apear{0%{top:-100px}10%{top:0px}90%{top:0px}100%{top:-100px}}.btn-main{padding:10px;border:0px;border-radius:5px;transition:.5s linear}.btn-main:hover{background:#b4b4b4}.selected-items{background:#161325}.btn-sticky{position:fixed;top:90%;z-index:100;left:0;width:220px;background:#EA6C00;transition:.5s linear}.btn-sticky:hover{background:#ffaf6a}.btn-orange{background:#EA6C00;padding:10px;margin:0 auto;display:block;min-width:250px;transition:.5s linear}.btn-orange:hover{background:#ffaf6a}.btn-orange-reject{background:#EA6C00;padding:10px;transition:.5s linear}.btn-orange-reject:hover{background:#ffaf6a}button{height:40px;min-width:100px}.to-hangar-btn,.to-shop-btn{float:right;background:#d22020;z-index:10;position:relative;margin-top:-54px;margin-right:99px;color:#ffd9b9;text-transform:uppercase}.to-shop-btn{margin-top:46px}button:focus,li:focus,ul:focus,img:focus,div:focus,p:focus{outline:0}.tablet-btn{height:160px;padding:15px;min-width:10px;background-size:cover;background-position:center;border:0px;border-radius:20px;color:#fff;font-size:20px;box-shadow:2px 4px 9px #000;transition:.3s linear;border:5px solid #542801}.avatar-close{background:none;border:0px;color:#ffffff;text-align:left;font-size:18px}.avatar-button{width:100px;height:100px;background-color:#4f3563;background-size:contain;display:block;margin:0 auto;border-radius:50%;border:0px;padding:0px;overflow:hidden}.screenshot-button{position:absolute;right:15px;background:none;border:0px}.screenshot-button img{width:50px;transition:.5s linear;display:block;float:right}.screenshot-button img:hover{transform:scale(1.2)}.message-screenshot{background-color:#4bae60;color:#fff;padding:20px;right:-200%;top:0;position:absolute}.active-message-box{animation:apear-message 5s linear forwards}.screenshot-button:active{opacoty:.3}@keyframes apear-message{0%{right:-200%}10%{right:0%}90%{right:0%}100%{right:-200%}}.save-dialog-window .success-text{border:1px solid green;color:green;padding:10px}@keyframes message-apear{0%{top:-100px}10%{top:0px}90%{top:0px}100%{top:-100px}}.menu-screen .settings-slider{margin:0 auto;width:100%;-webkit-appearance:none;height:15px;background:#500892;outline:none;opacity:0.7;-webkit-transition:.2s;transition:opacity .2s;border-radius:10px}.menu-screen .settings-slider a{outline:none}.menu-screen .settings-slider:hover{opacity:1}.menu-screen .settings-slider::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:25px;height:25px;background:#6a0efd;border-radius:50%}.menu-screen .settings-slider::-moz-range-thumb{width:25px;height:25px;background:#6a0efd;border-radius:50%}.switch{position:relative;display:inline-block;width:60px;height:34px}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;top:0;left:0;right:0;bottom:0;background-color:#920848;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:white;-webkit-transition:.4s;transition:.4s}input:checked+.slider{background-color:#4810a3}input:focus+.slider{box-shadow:0 0 1px #4a00bf}input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px)}.slider.round{border-radius:34px}.slider.round:before{border-radius:50%}.avatar-box{display:none}.opened-avatar-box{background:#27222b;width:380px;height:100%;position:absolute;display:block}.avatar-inner-box{display:flex;flex-wrap:wrap}.avatar-item{width:27%;padding:10px}.avatar-inner-picture{width:100%}.small-avatar{width:30px;height:30px;border-radius:50%;margin-right:10px}.nav-header-menu-wrapper{display:flex;flex-wrap:wrap}.nav-header-menu-wrapper .active{color:#EA6C00 !important}.nav-header-menu-wrapper .menu-nav-button{display:block;padding:15px;text-decoration:none;color:#fff;text-transform:uppercase;text-align:center;box-sizing:border-box;border-right:1px solid #777;transition:.5s linear}.nav-header-menu-wrapper .menu-nav-button:last-child{border-right:0px}.nav-header-menu-wrapper .menu-nav-button:hover{color:#EA6C00}.dialog-button-columns{display:block}.dialog-button-columns .btn-column{width:30% !important;margin-top:20px}.settings-wrapper .wide-text-column{display:block}.settings-wrapper .settings-tip-area p{font-size:12px}.settings-wrapper .settings-tip-area p span{background:#9e988f;color:#000;padding:3px;border-radius:3px;border:1px solid #9c5700}.btn-main{padding:10px;border:0px;border-radius:5px;transition:.5s linear}.btn-main:hover{background:#b4b4b4}.selected-items{background:#161325}.btn-sticky{position:fixed;top:90%;z-index:100;left:0;width:220px;background:#EA6C00;transition:.5s linear}.btn-sticky:hover{background:#ffaf6a}.btn-orange{background:#EA6C00;padding:10px;margin:0 auto;display:block;min-width:250px;transition:.5s linear}.btn-orange:hover{background:#ffaf6a}.btn-orange-reject{background:#EA6C00;padding:10px;transition:.5s linear}.btn-orange-reject:hover{background:#ffaf6a}button{height:40px;min-width:100px}.to-hangar-btn,.to-shop-btn{float:right;background:#d22020;z-index:10;position:relative;margin-top:-54px;margin-right:99px;color:#ffd9b9;text-transform:uppercase}.to-shop-btn{margin-top:46px}button:focus,li:focus,ul:focus,img:focus,div:focus,p:focus{outline:0}.tablet-btn{height:160px;padding:15px;min-width:10px;background-size:cover;background-position:center;border:0px;border-radius:20px;color:#fff;font-size:20px;box-shadow:2px 4px 9px #000;transition:.3s linear;border:5px solid #542801}.avatar-close{background:none;border:0px;color:#ffffff;text-align:left;font-size:18px}.avatar-button{width:100px;height:100px;background-color:#4f3563;background-size:contain;display:block;margin:0 auto;border-radius:50%;border:0px;padding:0px;overflow:hidden}.screenshot-button{position:absolute;right:15px;background:none;border:0px}.screenshot-button img{width:50px;transition:.5s linear;display:block;float:right}.screenshot-button img:hover{transform:scale(1.2)}.message-screenshot{background-color:#4bae60;color:#fff;padding:20px;right:-200%;top:0;position:absolute}.active-message-box{animation:apear-message 5s linear forwards}.screenshot-button:active{opacoty:.3}@keyframes apear-message{0%{right:-200%}10%{right:0%}90%{right:0%}100%{right:-200%}}.save-dialog-window .success-text{border:1px solid green;color:green;padding:10px}@keyframes message-apear{0%{top:-100px}10%{top:0px}90%{top:0px}100%{top:-100px}}.save-load-wrapper{list-style:none}.save-load-wrapper .save-card-body{display:flex}.save-load-list .save-card-body p{width:100%;justify-content:center;align-content:center;align-items:center}.save-load-button-area{padding-top:20px}.saveImage-wrapper-small img{width:120px;padding:10px}.save-preview-image-large{display:flex;flex-wrap:wrap}.save-preview-image-large img{width:70%}.save-preview-image-large .save-details{padding:10px;margin:0 auto}.save-load-dialog{position:absolute;width:100vw;height:100vh;top:0;left:0;background:rgba(0,0,0,0.3);display:flex;justify-content:center;justify-items:center;z-index:1000}.save-load-dialog .save-dialog-wrapper{min-height:100px;min-width:500px;align-self:center;padding:20px;background:#292c35;text-align:center;border-radius:5px;box-shadow:-3px 3px 10px rgba(0,0,0,0.7)}.save-load-dialog .save-dialog-wrapper div p{text-align:center;display:block}.save-field-group{display:flex;padding:20px;align-items:center;color:#b4b4b4}.save-field-group button{margin-top:0px !important;width:auto;min-width:100px !important}.save-field-group div{padding:5px}.save-field-group div input{width:90% !important;height:21px}.save-field-group div.save-field-input-wrapper{width:50%}.save-form input[type="text"],.save-form input[type="email"],.save-form input[type="password"]{width:60%;padding:10px;border-radius:5px;background:rgba(255,255,255,0.1);border:0px;color:white;margin:0 auto;display:inherit}.save-form button{min-width:15%;margin:0 auto;display:block;margin-top:18px}.backpack-wrapper{position:fixed;height:100vh;z-index:100;right:0}.backpack-wrapper .backpack-body{background:#26002f;border-radius:5px;max-width:100%;max-height:300px;min-width:100%;min-height:300px;overflow-y:scroll;right:0;position:fixed;padding:5px;color:#ffffff;display:flex;flex-wrap:wrap;bottom:0;justify-content:center}.backpack-wrapper .backpack-body .backpack-item-wrapper{width:100px;padding:5px;position:relative;font-size:10px}.backpack-wrapper .backpack-body .back-pack-item-picture{width:100%;height:auto;background:#6e5177;border-radius:5px}.backpack-wrapper .backpack-body p{width:100%;text-align:center;align-self:center}.backpack-wrapper .backpack-body canvas{background:#1f071a;position:absolute;align-self:center}.backpack-wrapper .backpack-body h3.side-panel-name{position:absolute;z-index:100;margin-top:0px;left:30px}.backpack-wrapper .backpack-body h3.side-panel-name p{font-size:12px}.backpack-wrapper .backpack-body .dialog-text-wrapper{text-align:center}.backpack-wrapper .backpack-body .dialog-text-wrapper span{color:#EA6C00}.backpack-wrapper .backpack-body .answer-dialog-button{width:100%;background:none;border:1px solid #b9b9b9;color:#c1c1c1;color-transition:.5s linear}.backpack-wrapper .backpack-body .answer-dialog-button:hover{border:1px solid #EA6C00;color:#EA6C00}.backpack-wrapper .backpack-body .answer-dialog-button:active{color:#ffffff;background:#EA6C00}.backpack-wrapper .backpack-body .dialog-header{width:75%;display:grid;grid-template-columns:auto auto}.backpack-wrapper .backpack-body .dialog-header .dialog-picture{width:100px;float:right}.backpack-wrapper .backpack-body .dialog-body{width:75%}.game-ranked-data{position:fixed;right:20px;padding:24px;font-size:12px;color:#bbb}.journal-level-inner-data li p{display:contents}.backpack-body::-webkit-scrollbar{width:12px}.backpack-body::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,0);border-radius:10px}.backpack-body::-webkit-scrollbar-thumb{border-radius:10px;background:rgba(71,6,83,0.8);-webkit-box-shadow:inset 0 0 6px #000}.backpack-body::-webkit-scrollbar-thumb:window-inactive{background:rgba(255,0,0,0.1)}.journal-list-container{text-align:left;border-left:1px solid #4c4c4c;padding:18px;min-width:50%;max-width:50%;border-top:1px solid #4c4c4c;list-style:inside;background:linear-gradient(90deg, #0c0c0c, transparent)}.complete-task{color:#EA6C00}\n',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}var o,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(13)),r(n(22))},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),o=n(1),s=n(19),c=n(7);function l(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/gameLevelData.json"),(function(e,r){if(e)return console.log(e);if(!t.maplevel&&0!=t.maplevel)return n({message:"no-level-identificator"});var a=JSON.parse(r),i=a.find((function(e){return e.level==t.maplevel}));if(!i)return n({message:"no-level-found"});i.allLevels=a.length-1,i?n(i):s(e)})),[2]}))}))}))]}))}))}function u(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/gameLevelObject.json"),(function(e,r){if(e)return console.log(e);var a=JSON.parse(r),i=t.mapObject;if(!i&&0!=i)return n(null),!1;i=t.mapObject.map((function(e){return e}));var o=a.filter((function(e){return t.mapObject.some((function(t){return t==e.id}))}));o?n(o):s(e)})),[2]}))}))}))]}))}))}function h(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/gameGrappleObjectData.json"),(function(e,r){var a=JSON.parse(r),i=t.grappleObject;if(!i&&0!=i)return n([]),!1;if(i.length<1)return n([]);i=i instanceof Object?i.map((function(e){return e})):i;var o=a.filter((function(e){return i instanceof Object?i.some((function(t){return t==e.id})):i==e.id}));o?n(o):s(e)})),[2]}))}))}))]}))}))}function d(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/playerShipsData.json"),(function(e,r){if(!t)return s({message:"there is no user ship"}),console.log("there is no user ship");if(e)return s("We dont find such file "+e),console.log(e);var a=JSON.parse(r).find((function(e){return e.id==t.usership}));a?n(a):s(e)})),[2]}))}))}))]}))}))}function p(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/enemyTypeData.json"),(function(e,r){if(e)return s("We dont find such file "+e),console.log(e);var a=JSON.parse(r),i=t["ship-type-number"];if(!i)return n([]),console.log("there is no enemy ship type");i=i.map((function(e){return e}));var o=a.filter((function(e){return i.some((function(t){return t==e.id}))}));o?n(o):s(e)})),[2]}))}))}))]}))}))}function f(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return t||s({message:"Invalid request",status:403}),i.readFile(o.join(__dirname,"./public/db/groundCharactersData.json"),(function(e,r){if(e)return s("We dont find such file "+e),console.log(e);var a=JSON.parse(r).filter((function(e){return e.id===t["item-id"]}));n(a)})),[2]}))}))}))]}))}))}function m(e){e.url,e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(t){return[2,new Promise((function(t,n){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/groundEnemyData.json"),(function(e,n){var r=JSON.parse(n);t(r)})),[2]}))}))}))]}))}))}function g(e){e.url,e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(t){return[2,new Promise((function(t,n){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/shopData/gameShopGun.json"),(function(e,r){if(e)return n("We dont find such file "+e),console.log(e);if(0!==r.length){var a=JSON.parse(r).map((function(e){return{loadImage:e.loadImage,background:e.background,price:e.price,title:e.title,description:e.description,speed:e.speed,damage:e.damage,status:e.status}}));t(a)}else n({message:"there is no data yet"})})),[2]}))}))}))]}))}))}function v(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/shopData/gameShopGun.json"),(function(e,r){if(e)return s("We dont find such file "+e),console.log(e);if(0!==r.length){var a=t.usercoins,i=t.itemName;if(!i)return n({message:"wrong data: You have no money",status:"false"});var o=JSON.parse(r).find((function(e){return e.title===i}));return o?o&&parseInt(a)<o.price?n({message:"you have no money it cost: "+o.price,status:"false"}):void n({data:o,status:"success",money:a-o.price}):n({message:"item not fond",status:"false"})}n({message:"there is no data yet"})})),[2]}))}))}))]}))}))}function b(e){e.url,e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(t){return[2,new Promise((function(t,n){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/playerShipsData.json"),(function(e,n){if(e)return t("We dont find such file "+e),console.log(e);if(0!==n.length){var r=JSON.parse(n).map((function(e){return{loadImage:e.hangarImage,background:e.background,price:e.price,title:e.title,description:e.description,status:e.status,armor:e.armor,minSpeed:e.minSpeed,inventoryCapacity:e.inventoryCapacity,healthPoint:e.healthPoint,firespots:e.firespot.length}}));t(r)}else t({message:"there is no data yet"})})),[2]}))}))}))]}))}))}function y(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/playerShipsData.json"),(function(e,r){if(e)return n("We dont find such file "+e),console.log(e);if(0!==r.length){var a=t.usercoins,i=t.itemname,o=t.currentshipname,s=t.shipinventoryitems,c=t.shipgunsitems;if(o==i)return n({message:"You already have that ship",status:"false"});if(!a||!i)return n({message:"wrong data: there is no coin or itemname",status:"false"});var l=JSON.parse(r).find((function(e){return e.title===i}));return l?function(e,t,n){var r=!0;(e>n.inventoryCapacity-1||n.guns.length-1<t)&&(r=!1);return r}(s,c,l)?l.price?l&&parseInt(a)<l.price?n({message:"you have no coin it cost: "+l.price,status:"false"}):void n({data:l,status:"success",money:a-l.price}):n({message:"no price",status:"false"}):n({message:"This ship has less space for yours gusn and other staff",status:"false"}):{message:"ship unavailable",status:"false"}}n({message:"there is no data yet"})})),[2]}))}))}))]}))}))}function w(e){var t=this;e.url,e.headers;return new Promise((function(e,n){return r(t,void 0,void 0,(function(){return a(this,(function(t){return i.readFile(o.join(__dirname,"./public/db/shopData/gameShopMarket.json"),(function(t,n){if(t)return e("We dont find such file "+t),console.log(t);if(0!==n.length){var r=JSON.parse(n).map((function(e){return{loadImage:e.loadImage,background:e.background,price:e.price,title:e.title,description:e.description,status:e.status}}));e(r)}else e({message:"there is no data yet"})})),[2]}))}))}))}function x(e){e.url;var t=e.headers;return r(this,void 0,void 0,(function(){var e=this;return a(this,(function(n){return[2,new Promise((function(n,s){return r(e,void 0,void 0,(function(){return a(this,(function(e){return i.readFile(o.join(__dirname,"./public/db/shopData/gameShopMarket.json"),(function(e,r){if(e)return n("We dont find such file "+e),console.log(e);if(0!==r.length){var a=t.usercoins,i=t.itemName;if(!a||!i)return n({message:"wrong data: there is no coin or itemname",status:"false"});var o=JSON.parse(r).find((function(e){return e.title===i}));return o?o&&parseInt(a)<o.price?n({message:"you have no coin it cost: "+o.price,status:"false"}):void n({data:o,status:"success",money:a-o.price}):n({message:"item not fond",status:"false"})}n({message:"there is no data yet"})})),[2]}))}))}))]}))}))}function O(e){e.url,e.headers;return r(this,void 0,void 0,(function(){return a(this,(function(e){return[2,new Promise((function(e,t){s.get("gameResults",(function(t,n){return r(this,void 0,void 0,(function(){var t,r,l;return a(this,(function(a){switch(a.label){case 0:return t=o.join(__dirname,"../../")+process.env.APP_SAVE_DIRECTORY,i.existsSync(o.join(t,"/","gameResults.json"))?[3,2]:(s.setDataPath(t),[4,c.writeElectronLocalData({fileName:"gameResults",data:"[]"})]);case 1:return a.sent(),e({message:"there is no data yet"}),[2];case 2:return 0===(r=JSON.parse(n)).length?(e({message:"there is no data yet"}),[2]):r?(l=r.sort((function(e,t){return e.gamePoints-t.gamePoints})).reverse().map((function(e){return{userName:e.userName,gamePoints:e.gamePoints,time:e.id,gameCoins:e.gameCoins,userAvatar:e.userAvatar,destroyShip:e.destroyShip?e.destroyShip:null,destroyEnemy:e.destroyEnemy?e.destroyEnemy:null}})),e(l),[2]):[2,e({message:"problem occurred in result data"})]}}))}))}))}))]}))}))}function S(e){e.url,e.headers;var t=e.saveData;return r(this,void 0,void 0,(function(){return a(this,(function(e){return[2,new Promise((function(e,n){s.get("gameResults",(function(n,l){return r(this,void 0,void 0,(function(){var n,r,u,h,d;return a(this,(function(a){switch(a.label){case 0:return n=o.join(__dirname,"../../")+process.env.APP_SAVE_DIRECTORY,i.existsSync(o.join(n,"/","gameResults.json"))?[3,2]:(s.setDataPath(n),[4,c.writeElectronLocalData({fileName:"gameResults",data:"[]"})]);case 1:a.sent(),a.label=2;case 2:if(t.id=(new Date).getTime(),r=null,u=[],!t.userName||"string"!=typeof t.userName||t.userName.length>30||t.userName.length<3)return e({message:"Name field is incorrect, must be max 30 character min 3",status:"warning"}),[2];if(!t.userEmail||"string"!=typeof t.userEmail)return e({message:"Email field is incorrect, must be max 30 character min 3",status:"warning"}),[2];if(!t.userPassword||"string"!=typeof t.userPassword)return e({message:"Password field is incorrect, must be max 30 character min 3",status:"warning"}),[2];if(!t.gamePoints||"number"!=typeof t.gamePoints)return e({message:"name too long or too short"}),[2];if(l&&t.gamePoints&&t.userPassword&&t.userEmail&&t.userName&&t.gameCoins){if(r=JSON.parse(l),"not-found"===(h=function(e,t){if(!e||!t)return!1;var n=e.find((function(e){return e.userEmail===t.userEmail})),r=e.find((function(e){return e.userName===t.userName}));return n?{data:e,status:"found-email"}:r?{data:e,status:"found-name"}:{data:null,status:"not-found"}}(r,t)).status)return u=u.concat(r,t).sort((function(e,t){return e.gamePoints-t.gamePoints})).reverse(),c.writeElectronLocalData({fileName:"gameResults",data:JSON.stringify(u)}),e({message:"Successfully save Result!!! "+t.userName+" added",status:"success"}),[2];if(!h)return[2,!1];switch(c.writeElectronLocalData({fileName:"gameResults",data:JSON.stringify(h.data)}),d="",h.status){case"found-email":d="Email already exist ";break;case"found-name":d="Name already exist "}return e({message:d,status:"warning"}),[2]}return(u=u.concat(u,e))&&0!=u.length?(c.writeElectronLocalData({fileName:"gameResults",data:JSON.stringify(u)}),e({message:"Successfully save Result!!! "+t.userName+" added",status:"success"}),[2]):[2,e({message:"there is no data to write"})]}}))}))}))}))]}))}))}function j(e){e.url,e.headers;var t=e.saveData;return r(this,void 0,void 0,(function(){return a(this,(function(e){return[2,new Promise((function(e,n){s.get("gameResults",(function(n,l){return r(this,void 0,void 0,(function(){var n,r,u,h,d;return a(this,(function(a){switch(a.label){case 0:return n=o.join(__dirname,"../../")+process.env.APP_SAVE_DIRECTORY,i.existsSync(o.join(n,"/","gameResults.json"))?[3,2]:(s.setDataPath(n),[4,c.writeElectronLocalData({fileName:"gameResults",data:"[]"})]);case 1:a.sent(),a.label=2;case 2:if(!t.userEmail||"string"!=typeof t.userEmail)return e({message:"Email field is incorrect, must be max 30 character min 3",status:"warning"}),[2];if(!t.userPassword||"string"!=typeof t.userPassword)return e({message:"Password field is incorrect, must be max 30 character min 3",status:"warning"}),[2];if(r=null,[],l&&t.gamePoints&&t.userPassword&&t.userEmail&&t.gameCoins){switch(r=JSON.parse(l),u=function(e,t){if(!e.length||!e||!t)return!1;var n=e.find((function(e){return e.userEmail===t.userEmail})),r=n?e.indexOf(n):null;return n&&n.gamePoints<t.gamePoints&&n.userPassword===t.userPassword?(n.gamePoints=t.gamePoints,n.gameCoins=t.gameCoins,n.userAvatar=t.userAvatar?t.userAvatar:n.userAvatar?n.userAvatar:null,e[r]=n,{data:e,status:"replace",name:n.userName}):n&&n.gamePoints>t.gamePoints&&n.userPassword===t.userPassword?{data:e,status:"lo-result",name:null}:n&&n.gamePoints===t.gamePoints&&n.userPassword===t.userPassword?{data:e,status:"equal-result",name:null}:n&&n.userPassword!=t.userPassword?{data:e,status:"wrong-password",name:null}:{data:e,status:"not-exist",name:null}}(r,t),h="",u.status){case"replace":h="Congratulation "+u.name+" your score is saved",d="success";break;case"lo-result":h="Your score is less than existing one",d="warning";break;case"equal-result":h="Your score the same as existing one",d="warning";break;case"wrong-password":h="Wrong password try again",d="reject";break;case"not-exist":h="There is no such email",d="reject";break;default:h="There is no such user",d="reject"}return e({message:h,status:d}),"reject"!=d&&c.writeElectronLocalData({fileName:"gameResults",data:JSON.stringify(u.data)}),[2]}return[2]}}))}))}))}))]}))}))}t.searchDataInFile=function(e){var t=e.url,n=e.headers,i=e.method,o=e.data;return r(this,void 0,void 0,(function(){var e;return a(this,(function(r){switch(r.label){case 0:switch(e=null,t){case"api/level-data":return[3,1];case"api/level-objects":return[3,3];case"api/grapple-objects":return[3,5];case"api/game-settings":return[3,7];case"api/user-ship":return[3,8];case"api/enemy-ship":return[3,10];case"api/get-ground-characters":return[3,12];case"api/get-constructor-ground-enemy":return[3,14];case"api/shop/guns":return[3,16];case"api/shop/shipyard":return[3,21];case"api/shop/store-items":return[3,26];case"api/game-result":return[3,31]}return[3,38];case 1:return[4,l({url:t,headers:n})];case 2:return e=r.sent(),[3,38];case 3:return[4,u({url:t,headers:n})];case 4:return e=r.sent(),[3,38];case 5:return[4,h({url:t,headers:n})];case 6:return e=r.sent(),[3,38];case 7:return[3,38];case 8:return[4,d({url:t,headers:n})];case 9:return e=r.sent(),[3,38];case 10:return[4,p({url:t,headers:n})];case 11:return e=r.sent(),[3,38];case 12:return[4,f({url:t,headers:n})];case 13:return e=r.sent(),[3,38];case 14:return[4,m({url:t,headers:n})];case 15:return e=r.sent(),[3,38];case 16:return"GET"!==i?[3,18]:[4,g({url:t,headers:n})];case 17:e=r.sent(),r.label=18;case 18:return"PUT"!==i?[3,20]:[4,v({url:t,headers:n})];case 19:e=r.sent(),r.label=20;case 20:return[3,38];case 21:return"GET"!==i?[3,23]:[4,b({url:t,headers:n})];case 22:e=r.sent(),r.label=23;case 23:return"PUT"!==i?[3,25]:[4,y({url:t,headers:n})];case 24:e=r.sent(),r.label=25;case 25:return[3,38];case 26:return"GET"!==i?[3,28]:[4,w({url:t,headers:n})];case 27:e=r.sent(),r.label=28;case 28:return"PUT"!==i?[3,30]:[4,x({url:t,headers:n})];case 29:e=r.sent(),r.label=30;case 30:return[3,38];case 31:return"GET"!==i?[3,33]:[4,O({url:t,headers:n})];case 32:e=r.sent(),r.label=33;case 33:return"POST"!==i?[3,35]:[4,S({url:t,headers:n,saveData:o})];case 34:e=r.sent(),r.label=35;case 35:return"PUT"!==i?[3,37]:[4,j({url:t,headers:n,saveData:o})];case 36:e=r.sent(),r.label=37;case 37:return[3,38];case 38:return e?[2,e]:[2]}}))}))}},function(e,t,n){(function(e){(function(t){"use strict";function n(e,t){t|=0;for(var n=Math.max(e.length-t,0),r=Array(n),a=0;a<n;a++)r[a]=e[t+a];return r}var r=function(e){var t=n(arguments,1);return function(){var r=n(arguments);return e.apply(null,t.concat(r))}},a=function(e){return function(){var t=n(arguments),r=t.pop();e.call(this,t,r)}};function i(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}var o="function"==typeof setImmediate&&setImmediate,s="object"==typeof process&&"function"==typeof process.nextTick;function c(e){setTimeout(e,0)}function l(e){return function(t){var r=n(arguments,1);e((function(){t.apply(null,r)}))}}var u=l(o?setImmediate:s?process.nextTick:c);function h(e){return a((function(t,n){var r;try{r=e.apply(this,t)}catch(e){return n(e)}i(r)&&"function"==typeof r.then?r.then((function(e){d(n,null,e)}),(function(e){d(n,e.message?e:new Error(e))})):n(null,r)}))}function d(e,t,n){try{e(t,n)}catch(e){u(p,e)}}function p(e){throw e}var f="function"==typeof Symbol;function m(e){return f&&"AsyncFunction"===e[Symbol.toStringTag]}function g(e){return m(e)?h(e):e}function v(e){return function(t){var r=n(arguments,1),i=a((function(n,r){var a=this;return e(t,(function(e,t){g(e).apply(a,n.concat(t))}),r)}));return r.length?i.apply(this,r):i}}var b="object"==typeof global&&global&&global.Object===Object&&global,y="object"==typeof self&&self&&self.Object===Object&&self,w=b||y||Function("return this")(),x=w.Symbol,O=Object.prototype,S=O.hasOwnProperty,j=O.toString,_=x?x.toStringTag:void 0,D=Object.prototype.toString,I=x?x.toStringTag:void 0;function k(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":I&&I in Object(e)?function(e){var t=S.call(e,_),n=e[_];try{e[_]=void 0;var r=!0}catch(e){}var a=j.call(e);return r&&(t?e[_]=n:delete e[_]),a}(e):function(e){return D.call(e)}(e)}function P(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}function E(e){return null!=e&&P(e.length)&&!function(e){if(!i(e))return!1;var t=k(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}(e)}var A={};function T(){}function G(e){return function(){if(null!==e){var t=e;e=null,t.apply(this,arguments)}}}var C="function"==typeof Symbol&&Symbol.iterator;function L(e){return null!=e&&"object"==typeof e}function M(e){return L(e)&&"[object Arguments]"==k(e)}var R=Object.prototype,N=R.hasOwnProperty,B=R.propertyIsEnumerable,W=M(function(){return arguments}())?M:function(e){return L(e)&&N.call(e,"callee")&&!B.call(e,"callee")},F=Array.isArray,U="object"==typeof t&&t&&!t.nodeType&&t,H=U&&"object"==typeof e&&e&&!e.nodeType&&e,z=H&&H.exports===U?w.Buffer:void 0,V=(z?z.isBuffer:void 0)||function(){return!1},q=/^(?:0|[1-9]\d*)$/;function Y(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&q.test(e))&&e>-1&&e%1==0&&e<t}var J={};J["[object Float32Array]"]=J["[object Float64Array]"]=J["[object Int8Array]"]=J["[object Int16Array]"]=J["[object Int32Array]"]=J["[object Uint8Array]"]=J["[object Uint8ClampedArray]"]=J["[object Uint16Array]"]=J["[object Uint32Array]"]=!0,J["[object Arguments]"]=J["[object Array]"]=J["[object ArrayBuffer]"]=J["[object Boolean]"]=J["[object DataView]"]=J["[object Date]"]=J["[object Error]"]=J["[object Function]"]=J["[object Map]"]=J["[object Number]"]=J["[object Object]"]=J["[object RegExp]"]=J["[object Set]"]=J["[object String]"]=J["[object WeakMap]"]=!1;var X,$="object"==typeof t&&t&&!t.nodeType&&t,K=$&&"object"==typeof e&&e&&!e.nodeType&&e,Z=K&&K.exports===$&&b.process,Q=function(){try{var e=K&&K.require&&K.require("util").types;return e||Z&&Z.binding&&Z.binding("util")}catch(e){}}(),ee=Q&&Q.isTypedArray,te=ee?(X=ee,function(e){return X(e)}):function(e){return L(e)&&P(e.length)&&!!J[k(e)]},ne=Object.prototype.hasOwnProperty;function re(e,t){var n=F(e),r=!n&&W(e),a=!n&&!r&&V(e),i=!n&&!r&&!a&&te(e),o=n||r||a||i,s=o?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],c=s.length;for(var l in e)!t&&!ne.call(e,l)||o&&("length"==l||a&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Y(l,c))||s.push(l);return s}var ae=Object.prototype,ie=function(e,t){return function(n){return e(t(n))}}(Object.keys,Object),oe=Object.prototype.hasOwnProperty;function se(e){if(n=(t=e)&&t.constructor,t!==("function"==typeof n&&n.prototype||ae))return ie(e);var t,n,r=[];for(var a in Object(e))oe.call(e,a)&&"constructor"!=a&&r.push(a);return r}function ce(e){return E(e)?re(e):se(e)}function le(e){if(E(e))return function(e){var t=-1,n=e.length;return function(){return++t<n?{value:e[t],key:t}:null}}(e);var t,n,r,a,i=function(e){return C&&e[C]&&e[C]()}(e);return i?function(e){var t=-1;return function(){var n=e.next();return n.done?null:(t++,{value:n.value,key:t})}}(i):(n=ce(t=e),r=-1,a=n.length,function(){var e=n[++r];return r<a?{value:t[e],key:e}:null})}function ue(e){return function(){if(null===e)throw new Error("Callback was already called.");var t=e;e=null,t.apply(this,arguments)}}function he(e){return function(t,n,r){if(r=G(r||T),e<=0||!t)return r(null);var a=le(t),i=!1,o=0,s=!1;function c(e,t){if(o-=1,e)i=!0,r(e);else{if(t===A||i&&o<=0)return i=!0,r(null);s||l()}}function l(){for(s=!0;o<e&&!i;){var t=a();if(null===t)return i=!0,void(o<=0&&r(null));o+=1,n(t.value,t.key,ue(c))}s=!1}l()}}function de(e,t,n,r){he(t)(e,g(n),r)}function pe(e,t){return function(n,r,a){return e(n,t,r,a)}}function fe(e,t,n){n=G(n||T);var r=0,a=0,i=e.length;function o(e,t){e?n(e):++a!==i&&t!==A||n(null)}for(0===i&&n(null);r<i;r++)t(e[r],r,ue(o))}var me=pe(de,1/0),ge=function(e,t,n){(E(e)?fe:me)(e,g(t),n)};function ve(e){return function(t,n,r){return e(ge,t,g(n),r)}}function be(e,t,n,r){r=r||T,t=t||[];var a=[],i=0,o=g(n);e(t,(function(e,t,n){var r=i++;o(e,(function(e,t){a[r]=t,n(e)}))}),(function(e){r(e,a)}))}var ye=ve(be),we=v(ye);function xe(e){return function(t,n,r,a){return e(he(n),t,g(r),a)}}var Oe=xe(be),Se=pe(Oe,1),je=v(Se);function _e(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}var De,Ie=function(e,t,n){for(var r=-1,a=Object(e),i=n(e),o=i.length;o--;){var s=i[De?o:++r];if(!1===t(a[s],s,a))break}return e};function ke(e,t){return e&&Ie(e,t,ce)}function Pe(e){return e!=e}function Ee(e,t,n){return t==t?function(e,t,n){for(var r=n-1,a=e.length;++r<a;)if(e[r]===t)return r;return-1}(e,t,n):function(e,t,n,r){for(var a=e.length,i=n+(r?1:-1);r?i--:++i<a;)if(t(e[i],i,e))return i;return-1}(e,Pe,n)}var Ae=function(e,t,r){"function"==typeof t&&(r=t,t=null),r=G(r||T);var a=ce(e).length;if(!a)return r(null);t||(t=a);var i={},o=0,s=!1,c=Object.create(null),l=[],u=[],h={};function d(e,t){l.push((function(){!function(e,t){if(!s){var a=ue((function(t,a){if(o--,arguments.length>2&&(a=n(arguments,1)),t){var l={};ke(i,(function(e,t){l[t]=e})),l[e]=a,s=!0,c=Object.create(null),r(t,l)}else i[e]=a,f(e)}));o++;var l=g(t[t.length-1]);t.length>1?l(i,a):l(a)}}(e,t)}))}function p(){if(0===l.length&&0===o)return r(null,i);for(;l.length&&o<t;)l.shift()()}function f(e){_e(c[e]||[],(function(e){e()})),p()}function m(t){var n=[];return ke(e,(function(e,r){F(e)&&Ee(e,t,0)>=0&&n.push(r)})),n}ke(e,(function(t,n){if(!F(t))return d(n,[t]),void u.push(n);var r=t.slice(0,t.length-1),a=r.length;if(0===a)return d(n,t),void u.push(n);h[n]=a,_e(r,(function(i){if(!e[i])throw new Error("async.auto task `"+n+"` has a non-existent dependency `"+i+"` in "+r.join(", "));var o,s,l;s=function(){0==--a&&d(n,t)},(l=c[o=i])||(l=c[o]=[]),l.push(s)}))})),function(){for(var e,t=0;u.length;)e=u.pop(),t++,_e(m(e),(function(e){0==--h[e]&&u.push(e)}));if(t!==a)throw new Error("async.auto cannot execute tasks due to a recursive dependency")}(),p()};function Te(e,t){for(var n=-1,r=null==e?0:e.length,a=Array(r);++n<r;)a[n]=t(e[n],n,e);return a}var Ge=x?x.prototype:void 0,Ce=Ge?Ge.toString:void 0;function Le(e){if("string"==typeof e)return e;if(F(e))return Te(e,Le)+"";if(function(e){return"symbol"==typeof e||L(e)&&"[object Symbol]"==k(e)}(e))return Ce?Ce.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function Me(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:function(e,t,n){var r=-1,a=e.length;t<0&&(t=-t>a?0:a+t),(n=n>a?a:n)<0&&(n+=a),a=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(a);++r<a;)i[r]=e[r+t];return i}(e,t,n)}var Re=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]"),Ne="[\\ud800-\\udfff]",Be="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",We="\\ud83c[\\udffb-\\udfff]",Fe="[^\\ud800-\\udfff]",Ue="(?:\\ud83c[\\udde6-\\uddff]){2}",He="[\\ud800-\\udbff][\\udc00-\\udfff]",ze="(?:"+Be+"|"+We+")?",Ve="[\\ufe0e\\ufe0f]?"+ze+"(?:\\u200d(?:"+[Fe,Ue,He].join("|")+")[\\ufe0e\\ufe0f]?"+ze+")*",qe="(?:"+[Fe+Be+"?",Be,Ue,He,Ne].join("|")+")",Ye=RegExp(We+"(?="+We+")|"+qe+Ve,"g");function Je(e){return function(e){return Re.test(e)}(e)?function(e){return e.match(Ye)||[]}(e):function(e){return e.split("")}(e)}var Xe=/^\s+|\s+$/g;function $e(e,t,n){var r;if((e=null==(r=e)?"":Le(r))&&(n||void 0===t))return e.replace(Xe,"");if(!e||!(t=Le(t)))return e;var a=Je(e),i=Je(t);return Me(a,function(e,t){for(var n=-1,r=e.length;++n<r&&Ee(t,e[n],0)>-1;);return n}(a,i),function(e,t){for(var n=e.length;n--&&Ee(t,e[n],0)>-1;);return n}(a,i)+1).join("")}var Ke=/^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m,Ze=/,/,Qe=/(=.+)?(\s*)$/,et=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;function tt(e,t){var n={};ke(e,(function(e,t){var r,a=m(e),i=!a&&1===e.length||a&&0===e.length;if(F(e))r=e.slice(0,-1),e=e[e.length-1],n[t]=r.concat(r.length>0?o:e);else if(i)n[t]=e;else{if(r=function(e){return e=(e=(e=(e=e.toString().replace(et,"")).match(Ke)[2].replace(" ",""))?e.split(Ze):[]).map((function(e){return $e(e.replace(Qe,""))}))}(e),0===e.length&&!a&&0===r.length)throw new Error("autoInject task functions require explicit parameters.");a||r.pop(),n[t]=r.concat(o)}function o(t,n){var a=Te(r,(function(e){return t[e]}));a.push(n),g(e).apply(null,a)}})),Ae(n,t)}function nt(){this.head=this.tail=null,this.length=0}function rt(e,t){e.length=1,e.head=e.tail=t}function at(e,t,n){if(null==t)t=1;else if(0===t)throw new Error("Concurrency must not be zero");var r=g(e),a=0,i=[],o=!1;function s(e,t,n){if(null!=n&&"function"!=typeof n)throw new Error("task callback must be a function");if(h.started=!0,F(e)||(e=[e]),0===e.length&&h.idle())return u((function(){h.drain()}));for(var r=0,a=e.length;r<a;r++){var i={data:e[r],callback:n||T};t?h._tasks.unshift(i):h._tasks.push(i)}o||(o=!0,u((function(){o=!1,h.process()})))}function c(e){return function(t){a-=1;for(var n=0,r=e.length;n<r;n++){var o=e[n],s=Ee(i,o,0);0===s?i.shift():s>0&&i.splice(s,1),o.callback.apply(o,arguments),null!=t&&h.error(t,o.data)}a<=h.concurrency-h.buffer&&h.unsaturated(),h.idle()&&h.drain(),h.process()}}var l=!1,h={_tasks:new nt,concurrency:t,payload:n,saturated:T,unsaturated:T,buffer:t/4,empty:T,drain:T,error:T,started:!1,paused:!1,push:function(e,t){s(e,!1,t)},kill:function(){h.drain=T,h._tasks.empty()},unshift:function(e,t){s(e,!0,t)},remove:function(e){h._tasks.remove(e)},process:function(){if(!l){for(l=!0;!h.paused&&a<h.concurrency&&h._tasks.length;){var e=[],t=[],n=h._tasks.length;h.payload&&(n=Math.min(n,h.payload));for(var o=0;o<n;o++){var s=h._tasks.shift();e.push(s),i.push(s),t.push(s.data)}a+=1,0===h._tasks.length&&h.empty(),a===h.concurrency&&h.saturated();var u=ue(c(e));r(t,u)}l=!1}},length:function(){return h._tasks.length},running:function(){return a},workersList:function(){return i},idle:function(){return h._tasks.length+a===0},pause:function(){h.paused=!0},resume:function(){!1!==h.paused&&(h.paused=!1,u(h.process))}};return h}function it(e,t){return at(e,1,t)}nt.prototype.removeLink=function(e){return e.prev?e.prev.next=e.next:this.head=e.next,e.next?e.next.prev=e.prev:this.tail=e.prev,e.prev=e.next=null,this.length-=1,e},nt.prototype.empty=function(){for(;this.head;)this.shift();return this},nt.prototype.insertAfter=function(e,t){t.prev=e,t.next=e.next,e.next?e.next.prev=t:this.tail=t,e.next=t,this.length+=1},nt.prototype.insertBefore=function(e,t){t.prev=e.prev,t.next=e,e.prev?e.prev.next=t:this.head=t,e.prev=t,this.length+=1},nt.prototype.unshift=function(e){this.head?this.insertBefore(this.head,e):rt(this,e)},nt.prototype.push=function(e){this.tail?this.insertAfter(this.tail,e):rt(this,e)},nt.prototype.shift=function(){return this.head&&this.removeLink(this.head)},nt.prototype.pop=function(){return this.tail&&this.removeLink(this.tail)},nt.prototype.toArray=function(){for(var e=Array(this.length),t=this.head,n=0;n<this.length;n++)e[n]=t.data,t=t.next;return e},nt.prototype.remove=function(e){for(var t=this.head;t;){var n=t.next;e(t)&&this.removeLink(t),t=n}return this};var ot=pe(de,1);function st(e,t,n,r){r=G(r||T);var a=g(n);ot(e,(function(e,n,r){a(t,e,(function(e,n){t=n,r(e)}))}),(function(e){r(e,t)}))}function ct(){var e=Te(arguments,g);return function(){var t=n(arguments),r=this,a=t[t.length-1];"function"==typeof a?t.pop():a=T,st(e,t,(function(e,t,a){t.apply(r,e.concat((function(e){var t=n(arguments,1);a(e,t)})))}),(function(e,t){a.apply(r,[e].concat(t))}))}}var lt=function(){return ct.apply(null,n(arguments).reverse())},ut=Array.prototype.concat,ht=function(e,t,r,a){a=a||T;var i=g(r);Oe(e,t,(function(e,t){i(e,(function(e){return e?t(e):t(null,n(arguments,1))}))}),(function(e,t){for(var n=[],r=0;r<t.length;r++)t[r]&&(n=ut.apply(n,t[r]));return a(e,n)}))},dt=pe(ht,1/0),pt=pe(ht,1),ft=function(){var e=n(arguments),t=[null].concat(e);return function(){var e=arguments[arguments.length-1];return e.apply(this,t)}};function mt(e){return e}function gt(e,t){return function(n,r,a,i){i=i||T;var o,s=!1;n(r,(function(n,r,i){a(n,(function(r,a){r?i(r):e(a)&&!o?(s=!0,o=t(!0,n),i(null,A)):i()}))}),(function(e){e?i(e):i(null,s?o:t(!1))}))}}function vt(e,t){return t}var bt=ve(gt(mt,vt)),yt=xe(gt(mt,vt)),wt=pe(yt,1);function xt(e){return function(t){var r=n(arguments,1);r.push((function(t){var r=n(arguments,1);"object"==typeof console&&(t?console.error&&console.error(t):console[e]&&_e(r,(function(t){console[e](t)})))})),g(t).apply(null,r)}}var Ot=xt("dir");function St(e,t,r){r=ue(r||T);var a=g(e),i=g(t);function o(e){if(e)return r(e);var t=n(arguments,1);t.push(s),i.apply(this,t)}function s(e,t){return e?r(e):t?void a(o):r(null)}s(null,!0)}function jt(e,t,r){r=ue(r||T);var a=g(e),i=function(e){if(e)return r(e);var o=n(arguments,1);if(t.apply(this,o))return a(i);r.apply(null,[null].concat(o))};a(i)}function _t(e,t,n){jt(e,(function(){return!t.apply(this,arguments)}),n)}function Dt(e,t,n){n=ue(n||T);var r=g(t),a=g(e);function i(e){if(e)return n(e);a(o)}function o(e,t){return e?n(e):t?void r(i):n(null)}a(o)}function It(e){return function(t,n,r){return e(t,r)}}function kt(e,t,n){ge(e,It(g(t)),n)}function Pt(e,t,n,r){he(t)(e,It(g(n)),r)}var Et=pe(Pt,1);function At(e){return m(e)?e:a((function(t,n){var r=!0;t.push((function(){var e=arguments;r?u((function(){n.apply(null,e)})):n.apply(null,e)})),e.apply(this,t),r=!1}))}function Tt(e){return!e}var Gt=ve(gt(Tt,Tt)),Ct=xe(gt(Tt,Tt)),Lt=pe(Ct,1);function Mt(e){return function(t){return null==t?void 0:t[e]}}function Rt(e,t,n,r){var a=new Array(t.length);e(t,(function(e,t,r){n(e,(function(e,n){a[t]=!!n,r(e)}))}),(function(e){if(e)return r(e);for(var n=[],i=0;i<t.length;i++)a[i]&&n.push(t[i]);r(null,n)}))}function Nt(e,t,n,r){var a=[];e(t,(function(e,t,r){n(e,(function(n,i){n?r(n):(i&&a.push({index:t,value:e}),r())}))}),(function(e){e?r(e):r(null,Te(a.sort((function(e,t){return e.index-t.index})),Mt("value")))}))}function Bt(e,t,n,r){(E(t)?Rt:Nt)(e,t,g(n),r||T)}var Wt=ve(Bt),Ft=xe(Bt),Ut=pe(Ft,1);function Ht(e,t){var n=ue(t||T),r=g(At(e));!function e(t){if(t)return n(t);r(e)}()}var zt=function(e,t,n,r){r=r||T;var a=g(n);Oe(e,t,(function(e,t){a(e,(function(n,r){return n?t(n):t(null,{key:r,val:e})}))}),(function(e,t){for(var n={},a=Object.prototype.hasOwnProperty,i=0;i<t.length;i++)if(t[i]){var o=t[i].key,s=t[i].val;a.call(n,o)?n[o].push(s):n[o]=[s]}return r(e,n)}))},Vt=pe(zt,1/0),qt=pe(zt,1),Yt=xt("log");function Jt(e,t,n,r){r=G(r||T);var a={},i=g(n);de(e,t,(function(e,t,n){i(e,t,(function(e,r){if(e)return n(e);a[t]=r,n()}))}),(function(e){r(e,a)}))}var Xt=pe(Jt,1/0),$t=pe(Jt,1);function Kt(e,t){return t in e}function Zt(e,t){var r=Object.create(null),i=Object.create(null);t=t||mt;var o=g(e),s=a((function(e,a){var s=t.apply(null,e);Kt(r,s)?u((function(){a.apply(null,r[s])})):Kt(i,s)?i[s].push(a):(i[s]=[a],o.apply(null,e.concat((function(){var e=n(arguments);r[s]=e;var t=i[s];delete i[s];for(var a=0,o=t.length;a<o;a++)t[a].apply(null,e)}))))}));return s.memo=r,s.unmemoized=e,s}var Qt=l(s?process.nextTick:o?setImmediate:c);function en(e,t,r){r=r||T;var a=E(t)?[]:{};e(t,(function(e,t,r){g(e)((function(e,i){arguments.length>2&&(i=n(arguments,1)),a[t]=i,r(e)}))}),(function(e){r(e,a)}))}function tn(e,t){en(ge,e,t)}function nn(e,t,n){en(he(t),e,n)}var rn=function(e,t){var n=g(e);return at((function(e,t){n(e[0],t)}),t,1)},an=function(e,t){var n=rn(e,t);return n.push=function(e,t,r){if(null==r&&(r=T),"function"!=typeof r)throw new Error("task callback must be a function");if(n.started=!0,F(e)||(e=[e]),0===e.length)return u((function(){n.drain()}));t=t||0;for(var a=n._tasks.head;a&&t>=a.priority;)a=a.next;for(var i=0,o=e.length;i<o;i++){var s={data:e[i],priority:t,callback:r};a?n._tasks.insertBefore(a,s):n._tasks.push(s)}u(n.process)},delete n.unshift,n};function on(e,t){if(t=G(t||T),!F(e))return t(new TypeError("First argument to race must be an array of functions"));if(!e.length)return t();for(var n=0,r=e.length;n<r;n++)g(e[n])(t)}function sn(e,t,r,a){st(n(e).reverse(),t,r,a)}function cn(e){var t=g(e);return a((function(e,r){return e.push((function(e,t){var a;e?r(null,{error:e}):(a=arguments.length<=2?t:n(arguments,1),r(null,{value:a}))})),t.apply(this,e)}))}function ln(e){var t;return F(e)?t=Te(e,cn):(t={},ke(e,(function(e,n){t[n]=cn.call(this,e)}))),t}function un(e,t,n,r){Bt(e,t,(function(e,t){n(e,(function(e,n){t(e,!n)}))}),r)}var hn=ve(un),dn=xe(un),pn=pe(dn,1);function fn(e){return function(){return e}}function mn(e,t,n){var r=5,a=0,i={times:r,intervalFunc:fn(a)};function o(e,t){if("object"==typeof t)e.times=+t.times||r,e.intervalFunc="function"==typeof t.interval?t.interval:fn(+t.interval||a),e.errorFilter=t.errorFilter;else{if("number"!=typeof t&&"string"!=typeof t)throw new Error("Invalid arguments for async.retry");e.times=+t||r}}if(arguments.length<3&&"function"==typeof e?(n=t||T,t=e):(o(i,e),n=n||T),"function"!=typeof t)throw new Error("Invalid arguments for async.retry");var s=g(t),c=1;function l(){s((function(e){e&&c++<i.times&&("function"!=typeof i.errorFilter||i.errorFilter(e))?setTimeout(l,i.intervalFunc(c)):n.apply(null,arguments)}))}l()}var gn=function(e,t){t||(t=e,e=null);var n=g(t);return a((function(t,r){function a(e){n.apply(null,t.concat(e))}e?mn(e,a,r):mn(a,r)}))};function vn(e,t){en(ot,e,t)}var bn=ve(gt(Boolean,mt)),yn=xe(gt(Boolean,mt)),wn=pe(yn,1);function xn(e,t,n){var r=g(t);function a(e,t){var n=e.criteria,r=t.criteria;return n<r?-1:n>r?1:0}ye(e,(function(e,t){r(e,(function(n,r){if(n)return t(n);t(null,{value:e,criteria:r})}))}),(function(e,t){if(e)return n(e);n(null,Te(t.sort(a),Mt("value")))}))}function On(e,t,n){var r=g(e);return a((function(a,i){var o,s=!1;a.push((function(){s||(i.apply(null,arguments),clearTimeout(o))})),o=setTimeout((function(){var t=e.name||"anonymous",r=new Error('Callback function "'+t+'" timed out.');r.code="ETIMEDOUT",n&&(r.info=n),s=!0,i(r)}),t),r.apply(null,a)}))}var Sn=Math.ceil,jn=Math.max;function _n(e,t,n,r){var a=g(n);Oe(function(e,t,n,r){for(var a=-1,i=jn(Sn((t-e)/(n||1)),0),o=Array(i);i--;)o[r?i:++a]=e,e+=n;return o}(0,e,1),t,a,r)}var Dn=pe(_n,1/0),In=pe(_n,1);function kn(e,t,n,r){arguments.length<=3&&(r=n,n=t,t=F(e)?[]:{}),r=G(r||T);var a=g(n);ge(e,(function(e,n,r){a(t,e,n,r)}),(function(e){r(e,t)}))}function Pn(e,t){var r,a=null;t=t||T,Et(e,(function(e,t){g(e)((function(e,i){r=arguments.length>2?n(arguments,1):i,a=e,t(!e)}))}),(function(){t(a,r)}))}function En(e){return function(){return(e.unmemoized||e).apply(null,arguments)}}function An(e,t,r){r=ue(r||T);var a=g(t);if(!e())return r(null);var i=function(t){if(t)return r(t);if(e())return a(i);var o=n(arguments,1);r.apply(null,[null].concat(o))};a(i)}function Tn(e,t,n){An((function(){return!e.apply(this,arguments)}),t,n)}var Gn=function(e,t){if(t=G(t||T),!F(e))return t(new Error("First argument to waterfall must be an array of functions"));if(!e.length)return t();var r=0;function a(t){var n=g(e[r++]);t.push(ue(i)),n.apply(null,t)}function i(i){if(i||r===e.length)return t.apply(null,arguments);a(n(arguments,1))}a([])},Cn={apply:r,applyEach:we,applyEachSeries:je,asyncify:h,auto:Ae,autoInject:tt,cargo:it,compose:lt,concat:dt,concatLimit:ht,concatSeries:pt,constant:ft,detect:bt,detectLimit:yt,detectSeries:wt,dir:Ot,doDuring:St,doUntil:_t,doWhilst:jt,during:Dt,each:kt,eachLimit:Pt,eachOf:ge,eachOfLimit:de,eachOfSeries:ot,eachSeries:Et,ensureAsync:At,every:Gt,everyLimit:Ct,everySeries:Lt,filter:Wt,filterLimit:Ft,filterSeries:Ut,forever:Ht,groupBy:Vt,groupByLimit:zt,groupBySeries:qt,log:Yt,map:ye,mapLimit:Oe,mapSeries:Se,mapValues:Xt,mapValuesLimit:Jt,mapValuesSeries:$t,memoize:Zt,nextTick:Qt,parallel:tn,parallelLimit:nn,priorityQueue:an,queue:rn,race:on,reduce:st,reduceRight:sn,reflect:cn,reflectAll:ln,reject:hn,rejectLimit:dn,rejectSeries:pn,retry:mn,retryable:gn,seq:ct,series:vn,setImmediate:u,some:bn,someLimit:yn,someSeries:wn,sortBy:xn,timeout:On,times:Dn,timesLimit:_n,timesSeries:In,transform:kn,tryEach:Pn,unmemoize:En,until:Tn,waterfall:Gn,whilst:An,all:Gt,allLimit:Ct,allSeries:Lt,any:bn,anyLimit:yn,anySeries:wn,find:bt,findLimit:yt,findSeries:wt,forEach:kt,forEachSeries:Et,forEachLimit:Pt,forEachOf:ge,forEachOfSeries:ot,forEachOfLimit:de,inject:st,foldl:st,foldr:sn,select:Wt,selectLimit:Ft,selectSeries:Ut,wrapSync:h};t.default=Cn,t.apply=r,t.applyEach=we,t.applyEachSeries=je,t.asyncify=h,t.auto=Ae,t.autoInject=tt,t.cargo=it,t.compose=lt,t.concat=dt,t.concatLimit=ht,t.concatSeries=pt,t.constant=ft,t.detect=bt,t.detectLimit=yt,t.detectSeries=wt,t.dir=Ot,t.doDuring=St,t.doUntil=_t,t.doWhilst=jt,t.during=Dt,t.each=kt,t.eachLimit=Pt,t.eachOf=ge,t.eachOfLimit=de,t.eachOfSeries=ot,t.eachSeries=Et,t.ensureAsync=At,t.every=Gt,t.everyLimit=Ct,t.everySeries=Lt,t.filter=Wt,t.filterLimit=Ft,t.filterSeries=Ut,t.forever=Ht,t.groupBy=Vt,t.groupByLimit=zt,t.groupBySeries=qt,t.log=Yt,t.map=ye,t.mapLimit=Oe,t.mapSeries=Se,t.mapValues=Xt,t.mapValuesLimit=Jt,t.mapValuesSeries=$t,t.memoize=Zt,t.nextTick=Qt,t.parallel=tn,t.parallelLimit=nn,t.priorityQueue=an,t.queue=rn,t.race=on,t.reduce=st,t.reduceRight=sn,t.reflect=cn,t.reflectAll=ln,t.reject=hn,t.rejectLimit=dn,t.rejectSeries=pn,t.retry=mn,t.retryable=gn,t.seq=ct,t.series=vn,t.setImmediate=u,t.some=bn,t.someLimit=yn,t.someSeries=wn,t.sortBy=xn,t.timeout=On,t.times=Dn,t.timesLimit=_n,t.timesSeries=In,t.transform=kn,t.tryEach=Pn,t.unmemoize=En,t.until=Tn,t.waterfall=Gn,t.whilst=An,t.all=Gt,t.allLimit=Ct,t.allSeries=Lt,t.any=bn,t.anyLimit=yn,t.anySeries=wn,t.find=bt,t.findLimit=yt,t.findSeries=wt,t.forEach=kt,t.forEachSeries=Et,t.forEachLimit=Pt,t.forEachOf=ge,t.forEachOfSeries=ot,t.forEachOfLimit=de,t.inject=st,t.foldl=st,t.foldr=sn,t.select=Wt,t.selectLimit=Ft,t.selectSeries=Ut,t.wrapSync=h,Object.defineProperty(t,"__esModule",{value:!0})})(t)}).call(this,n(37)(e))},function(e,t,n){e.exports=d,d.sync=v;var r=n(20),a=n(1),i=n(2),o=void 0;try{o=n(38)}catch(e){}var s=parseInt("666",8),c={nosort:!0,silent:!0},l=0,u="win32"===process.platform;function h(e){if(["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((function(t){e[t]=e[t]||i[t],e[t+="Sync"]=e[t]||i[t]})),e.maxBusyTries=e.maxBusyTries||3,e.emfileWait=e.emfileWait||1e3,!1===e.glob&&(e.disableGlob=!0),!0!==e.disableGlob&&void 0===o)throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");e.disableGlob=e.disableGlob||!1,e.glob=e.glob||c}function d(e,t,n){"function"==typeof t&&(n=t,t={}),r(e,"rimraf: missing path"),r.equal(typeof e,"string","rimraf: path should be a string"),r.equal(typeof n,"function","rimraf: callback function required"),r(t,"rimraf: invalid options argument provided"),r.equal(typeof t,"object","rimraf: options should be object"),h(t);var a=0,i=null,s=0;if(t.disableGlob||!o.hasMagic(e))return c(null,[e]);function c(e,r){return e?n(e):0===(s=r.length)?n():void r.forEach((function(e){p(e,t,(function r(o){if(o){if(("EBUSY"===o.code||"ENOTEMPTY"===o.code||"EPERM"===o.code)&&a<t.maxBusyTries)return a++,setTimeout((function(){p(e,t,r)}),100*a);if("EMFILE"===o.code&&l<t.emfileWait)return setTimeout((function(){p(e,t,r)}),l++);"ENOENT"===o.code&&(o=null)}l=0,function(e){i=i||e,0==--s&&n(i)}(o)}))}))}t.lstat(e,(function(n,r){if(!n)return c(null,[e]);o(e,t.glob,c)}))}function p(e,t,n){r(e),r(t),r("function"==typeof n),t.lstat(e,(function(r,a){return r&&"ENOENT"===r.code?n(null):(r&&"EPERM"===r.code&&u&&f(e,t,r,n),a&&a.isDirectory()?g(e,t,r,n):void t.unlink(e,(function(r){if(r){if("ENOENT"===r.code)return n(null);if("EPERM"===r.code)return u?f(e,t,r,n):g(e,t,r,n);if("EISDIR"===r.code)return g(e,t,r,n)}return n(r)})))}))}function f(e,t,n,a){r(e),r(t),r("function"==typeof a),n&&r(n instanceof Error),t.chmod(e,s,(function(r){r?a("ENOENT"===r.code?null:n):t.stat(e,(function(r,i){r?a("ENOENT"===r.code?null:n):i.isDirectory()?g(e,t,n,a):t.unlink(e,a)}))}))}function m(e,t,n){r(e),r(t),n&&r(n instanceof Error);try{t.chmodSync(e,s)}catch(e){if("ENOENT"===e.code)return;throw n}try{var a=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw n}a.isDirectory()?b(e,t,n):t.unlinkSync(e)}function g(e,t,n,i){r(e),r(t),n&&r(n instanceof Error),r("function"==typeof i),t.rmdir(e,(function(o){!o||"ENOTEMPTY"!==o.code&&"EEXIST"!==o.code&&"EPERM"!==o.code?o&&"ENOTDIR"===o.code?i(n):i(o):function(e,t,n){r(e),r(t),r("function"==typeof n),t.readdir(e,(function(r,i){if(r)return n(r);var o,s=i.length;if(0===s)return t.rmdir(e,n);i.forEach((function(r){d(a.join(e,r),t,(function(r){if(!o)return r?n(o=r):void(0==--s&&t.rmdir(e,n))}))}))}))}(e,t,i)}))}function v(e,t){var n;if(h(t=t||{}),r(e,"rimraf: missing path"),r.equal(typeof e,"string","rimraf: path should be a string"),r(t,"rimraf: missing options"),r.equal(typeof t,"object","rimraf: options should be object"),t.disableGlob||!o.hasMagic(e))n=[e];else try{t.lstatSync(e),n=[e]}catch(r){n=o.sync(e,t.glob)}if(n.length)for(var a=0;a<n.length;a++){e=n[a];try{var i=t.lstatSync(e)}catch(n){if("ENOENT"===n.code)return;"EPERM"===n.code&&u&&m(e,t,n)}try{i&&i.isDirectory()?b(e,t,null):t.unlinkSync(e)}catch(n){if("ENOENT"===n.code)return;if("EPERM"===n.code)return u?m(e,t,n):b(e,t,n);if("EISDIR"!==n.code)throw n;b(e,t,n)}}}function b(e,t,n){r(e),r(t),n&&r(n instanceof Error);try{t.rmdirSync(e)}catch(i){if("ENOENT"===i.code)return;if("ENOTDIR"===i.code)throw n;"ENOTEMPTY"!==i.code&&"EEXIST"!==i.code&&"EPERM"!==i.code||function(e,t){r(e),r(t),t.readdirSync(e).forEach((function(n){v(a.join(e,n),t)}));var n=u?100:1,i=0;for(;;){var o=!0;try{var s=t.rmdirSync(e,t);return o=!1,s}finally{if(++i<n&&o)continue}}}(e,t)}}},function(e,t,n){var r=n(1),a="win32"===process.platform,i=n(2),o=process.env.NODE_DEBUG&&/fs/.test(process.env.NODE_DEBUG);function s(e){return"function"==typeof e?e:function(){var e;if(o){var t=new Error;e=function(e){e&&(t.message=e.message,n(e=t))}}else e=n;return e;function n(e){if(e){if(process.throwDeprecation)throw e;if(!process.noDeprecation){var t="fs: missing callback "+(e.stack||e.message);process.traceDeprecation?console.trace(t):console.error(t)}}}}()}r.normalize;if(a)var c=/(.*?)(?:[\/\\]+|$)/g;else c=/(.*?)(?:[\/]+|$)/g;if(a)var l=/^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;else l=/^[\/]*/;t.realpathSync=function(e,t){if(e=r.resolve(e),t&&Object.prototype.hasOwnProperty.call(t,e))return t[e];var n,o,s,u,h=e,d={},p={};function f(){var t=l.exec(e);n=t[0].length,o=t[0],s=t[0],u="",a&&!p[s]&&(i.lstatSync(s),p[s]=!0)}for(f();n<e.length;){c.lastIndex=n;var m=c.exec(e);if(u=o,o+=m[0],s=u+m[1],n=c.lastIndex,!(p[s]||t&&t[s]===s)){var g;if(t&&Object.prototype.hasOwnProperty.call(t,s))g=t[s];else{var v=i.lstatSync(s);if(!v.isSymbolicLink()){p[s]=!0,t&&(t[s]=s);continue}var b=null;if(!a){var y=v.dev.toString(32)+":"+v.ino.toString(32);d.hasOwnProperty(y)&&(b=d[y])}null===b&&(i.statSync(s),b=i.readlinkSync(s)),g=r.resolve(u,b),t&&(t[s]=g),a||(d[y]=b)}e=r.resolve(g,e.slice(n)),f()}}return t&&(t[h]=e),e},t.realpath=function(e,t,n){if("function"!=typeof n&&(n=s(t),t=null),e=r.resolve(e),t&&Object.prototype.hasOwnProperty.call(t,e))return process.nextTick(n.bind(null,null,t[e]));var o,u,h,d,p=e,f={},m={};function g(){var t=l.exec(e);o=t[0].length,u=t[0],h=t[0],d="",a&&!m[h]?i.lstat(h,(function(e){if(e)return n(e);m[h]=!0,v()})):process.nextTick(v)}function v(){if(o>=e.length)return t&&(t[p]=e),n(null,e);c.lastIndex=o;var r=c.exec(e);return d=u,u+=r[0],h=d+r[1],o=c.lastIndex,m[h]||t&&t[h]===h?process.nextTick(v):t&&Object.prototype.hasOwnProperty.call(t,h)?w(t[h]):i.lstat(h,b)}function b(e,r){if(e)return n(e);if(!r.isSymbolicLink())return m[h]=!0,t&&(t[h]=h),process.nextTick(v);if(!a){var o=r.dev.toString(32)+":"+r.ino.toString(32);if(f.hasOwnProperty(o))return y(null,f[o],h)}i.stat(h,(function(e){if(e)return n(e);i.readlink(h,(function(e,t){a||(f[o]=t),y(e,t)}))}))}function y(e,a,i){if(e)return n(e);var o=r.resolve(d,a);t&&(t[i]=o),w(o)}function w(t){e=r.resolve(t,e.slice(o)),g()}g()}},function(e,t,n){var r=n(66),a=n(67);e.exports=function(e){if(!e)return[];"{}"===e.substr(0,2)&&(e="\\{\\}"+e.substr(2));return function e(t,n){var i=[],o=a("{","}",t);if(!o||/\$$/.test(o.pre))return[t];var c,l=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(o.body),h=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(o.body),g=l||h,v=o.body.indexOf(",")>=0;if(!g&&!v)return o.post.match(/,.*\}/)?(t=o.pre+"{"+o.body+s+o.post,e(t)):[t];if(g)c=o.body.split(/\.\./);else{if(1===(c=function e(t){if(!t)return[""];var n=[],r=a("{","}",t);if(!r)return t.split(",");var i=r.pre,o=r.body,s=r.post,c=i.split(",");c[c.length-1]+="{"+o+"}";var l=e(s);s.length&&(c[c.length-1]+=l.shift(),c.push.apply(c,l));return n.push.apply(n,c),n}(o.body)).length)if(1===(c=e(c[0],!1).map(d)).length)return(w=o.post.length?e(o.post,!1):[""]).map((function(e){return o.pre+c[0]+e}))}var b,y=o.pre,w=o.post.length?e(o.post,!1):[""];if(g){var x=u(c[0]),O=u(c[1]),S=Math.max(c[0].length,c[1].length),j=3==c.length?Math.abs(u(c[2])):1,_=f;O<x&&(j*=-1,_=m);var D=c.some(p);b=[];for(var I=x;_(I,O);I+=j){var k;if(h)"\\"===(k=String.fromCharCode(I))&&(k="");else if(k=String(I),D){var P=S-k.length;if(P>0){var E=new Array(P+1).join("0");k=I<0?"-"+E+k.slice(1):E+k}}b.push(k)}}else b=r(c,(function(t){return e(t,!1)}));for(var A=0;A<b.length;A++)for(var T=0;T<w.length;T++){var G=y+b[A]+w[T];(!n||g||G)&&i.push(G)}return i}(function(e){return e.split("\\\\").join(i).split("\\{").join(o).split("\\}").join(s).split("\\,").join(c).split("\\.").join(l)}(e),!0).map(h)};var i="\0SLASH"+Math.random()+"\0",o="\0OPEN"+Math.random()+"\0",s="\0CLOSE"+Math.random()+"\0",c="\0COMMA"+Math.random()+"\0",l="\0PERIOD"+Math.random()+"\0";function u(e){return parseInt(e,10)==e?parseInt(e,10):e.charCodeAt(0)}function h(e){return e.split(i).join("\\").split(o).join("{").split(s).join("}").split(c).join(",").split(l).join(".")}function d(e){return"{"+e+"}"}function p(e){return/^-?0\d/.test(e)}function f(e,t){return e<=t}function m(e,t){return e>=t}},function(e,t){e.exports=function(e,t){for(var r=[],a=0;a<e.length;a++){var i=t(e[a],a);n(i)?r.push.apply(r,i):r.push(i)}return r};var n=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,n){"use strict";function r(e,t,n){e instanceof RegExp&&(e=a(e,n)),t instanceof RegExp&&(t=a(t,n));var r=i(e,t,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+e.length,r[1]),post:n.slice(r[1]+t.length)}}function a(e,t){var n=t.match(e);return n?n[0]:null}function i(e,t,n){var r,a,i,o,s,c=n.indexOf(e),l=n.indexOf(t,c+1),u=c;if(c>=0&&l>0){for(r=[],i=n.length;u>=0&&!s;)u==c?(r.push(u),c=n.indexOf(e,u+1)):1==r.length?s=[r.pop(),l]:((a=r.pop())<i&&(i=a,o=l),l=n.indexOf(t,u+1)),u=c<l&&c>=0?c:l;r.length&&(s=[i,o])}return s}e.exports=r,r.range=i},function(e,t,n){try{var r=n(21);if("function"!=typeof r.inherits)throw"";e.exports=r.inherits}catch(t){e.exports=n(69)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){e.exports=f,f.GlobSync=m;var r=n(2),a=n(39),i=n(30),o=(i.Minimatch,n(38).Glob,n(21),n(1)),s=n(20),c=n(31),l=n(41),u=(l.alphasort,l.alphasorti,l.setopts),h=l.ownProp,d=l.childrenIgnored,p=l.isIgnored;function f(e,t){if("function"==typeof t||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");return new m(e,t).found}function m(e,t){if(!e)throw new Error("must provide pattern");if("function"==typeof t||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");if(!(this instanceof m))return new m(e,t);if(u(this,e,t),this.noprocess)return this;var n=this.minimatch.set.length;this.matches=new Array(n);for(var r=0;r<n;r++)this._process(this.minimatch.set[r],r,!1);this._finish()}m.prototype._finish=function(){if(s(this instanceof m),this.realpath){var e=this;this.matches.forEach((function(t,n){var r=e.matches[n]=Object.create(null);for(var i in t)try{i=e._makeAbs(i),r[a.realpathSync(i,e.realpathCache)]=!0}catch(t){if("stat"!==t.syscall)throw t;r[e._makeAbs(i)]=!0}}))}l.finish(this)},m.prototype._process=function(e,t,n){s(this instanceof m);for(var r,a=0;"string"==typeof e[a];)a++;switch(a){case e.length:return void this._processSimple(e.join("/"),t);case 0:r=null;break;default:r=e.slice(0,a).join("/")}var o,l=e.slice(a);null===r?o=".":c(r)||c(e.join("/"))?(r&&c(r)||(r="/"+r),o=r):o=r;var u=this._makeAbs(o);d(this,o)||(l[0]===i.GLOBSTAR?this._processGlobStar(r,o,u,l,t,n):this._processReaddir(r,o,u,l,t,n))},m.prototype._processReaddir=function(e,t,n,r,a,i){var s=this._readdir(n,i);if(s){for(var c=r[0],l=!!this.minimatch.negate,u=c._glob,h=this.dot||"."===u.charAt(0),d=[],p=0;p<s.length;p++){if("."!==(g=s[p]).charAt(0)||h)(l&&!e?!g.match(c):g.match(c))&&d.push(g)}var f=d.length;if(0!==f)if(1!==r.length||this.mark||this.stat){r.shift();for(p=0;p<f;p++){var m;g=d[p];m=e?[e,g]:[g],this._process(m.concat(r),a,i)}}else{this.matches[a]||(this.matches[a]=Object.create(null));for(var p=0;p<f;p++){var g=d[p];e&&(g="/"!==e.slice(-1)?e+"/"+g:e+g),"/"!==g.charAt(0)||this.nomount||(g=o.join(this.root,g)),this._emitMatch(a,g)}}}},m.prototype._emitMatch=function(e,t){if(!p(this,t)){var n=this._makeAbs(t);if(this.mark&&(t=this._mark(t)),this.absolute&&(t=n),!this.matches[e][t]){if(this.nodir){var r=this.cache[n];if("DIR"===r||Array.isArray(r))return}this.matches[e][t]=!0,this.stat&&this._stat(t)}}},m.prototype._readdirInGlobStar=function(e){if(this.follow)return this._readdir(e,!1);var t,n;try{n=r.lstatSync(e)}catch(e){if("ENOENT"===e.code)return null}var a=n&&n.isSymbolicLink();return this.symlinks[e]=a,a||!n||n.isDirectory()?t=this._readdir(e,!1):this.cache[e]="FILE",t},m.prototype._readdir=function(e,t){if(t&&!h(this.symlinks,e))return this._readdirInGlobStar(e);if(h(this.cache,e)){var n=this.cache[e];if(!n||"FILE"===n)return null;if(Array.isArray(n))return n}try{return this._readdirEntries(e,r.readdirSync(e))}catch(t){return this._readdirError(e,t),null}},m.prototype._readdirEntries=function(e,t){if(!this.mark&&!this.stat)for(var n=0;n<t.length;n++){var r=t[n];r="/"===e?e+r:e+"/"+r,this.cache[r]=!0}return this.cache[e]=t,t},m.prototype._readdirError=function(e,t){switch(t.code){case"ENOTSUP":case"ENOTDIR":var n=this._makeAbs(e);if(this.cache[n]="FILE",n===this.cwdAbs){var r=new Error(t.code+" invalid cwd "+this.cwd);throw r.path=this.cwd,r.code=t.code,r}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(e)]=!1;break;default:if(this.cache[this._makeAbs(e)]=!1,this.strict)throw t;this.silent||console.error("glob error",t)}},m.prototype._processGlobStar=function(e,t,n,r,a,i){var o=this._readdir(n,i);if(o){var s=r.slice(1),c=e?[e]:[],l=c.concat(s);this._process(l,a,!1);var u=o.length;if(!this.symlinks[n]||!i)for(var h=0;h<u;h++){if("."!==o[h].charAt(0)||this.dot){var d=c.concat(o[h],s);this._process(d,a,!0);var p=c.concat(o[h],r);this._process(p,a,!0)}}}},m.prototype._processSimple=function(e,t){var n=this._stat(e);if(this.matches[t]||(this.matches[t]=Object.create(null)),n){if(e&&c(e)&&!this.nomount){var r=/[\/\\]$/.test(e);"/"===e.charAt(0)?e=o.join(this.root,e):(e=o.resolve(this.root,e),r&&(e+="/"))}"win32"===process.platform&&(e=e.replace(/\\/g,"/")),this._emitMatch(t,e)}},m.prototype._stat=function(e){var t=this._makeAbs(e),n="/"===e.slice(-1);if(e.length>this.maxLength)return!1;if(!this.stat&&h(this.cache,t)){var a=this.cache[t];if(Array.isArray(a)&&(a="DIR"),!n||"DIR"===a)return a;if(n&&"FILE"===a)return!1}var i=this.statCache[t];if(!i){var o;try{o=r.lstatSync(t)}catch(e){if(e&&("ENOENT"===e.code||"ENOTDIR"===e.code))return this.statCache[t]=!1,!1}if(o&&o.isSymbolicLink())try{i=r.statSync(t)}catch(e){i=o}else i=o}this.statCache[t]=i;a=!0;return i&&(a=i.isDirectory()?"DIR":"FILE"),this.cache[t]=this.cache[t]||a,(!n||"FILE"!==a)&&a},m.prototype._mark=function(e){return l.mark(this,e)},m.prototype._makeAbs=function(e){return l.makeAbs(this,e)}},function(e,t,n){var r=n(42),a=Object.create(null),i=n(43);function o(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r]=e[r];return n}e.exports=r((function(e,t){return a[e]?(a[e].push(t),null):(a[e]=[t],function(e){return i((function t(){var n=a[e],r=n.length,i=o(arguments);try{for(var s=0;s<r;s++)n[s].apply(null,i)}finally{n.length>r?(n.splice(0,r),process.nextTick((function(){t.apply(null,i)}))):delete a[e]}}))}(e))}))},function(e,t,n){var r=n(1),a=n(2),i=parseInt("0777",8);function o(e,t,n,s){"function"==typeof t?(n=t,t={}):t&&"object"==typeof t||(t={mode:t});var c=t.mode,l=t.fs||a;void 0===c&&(c=i),s||(s=null);var u=n||function(){};e=r.resolve(e),l.mkdir(e,c,(function(n){if(!n)return u(null,s=s||e);switch(n.code){case"ENOENT":if(r.dirname(e)===e)return u(n);o(r.dirname(e),t,(function(n,r){n?u(n,r):o(e,t,u,r)}));break;default:l.stat(e,(function(e,t){e||!t.isDirectory()?u(n,s):u(null,s)}))}}))}e.exports=o.mkdirp=o.mkdirP=o,o.sync=function e(t,n,o){n&&"object"==typeof n||(n={mode:n});var s=n.mode,c=n.fs||a;void 0===s&&(s=i),o||(o=null),t=r.resolve(t);try{c.mkdirSync(t,s),o=o||t}catch(a){switch(a.code){case"ENOENT":o=e(r.dirname(t),n,o),e(t,n,o);break;default:var l;try{l=c.statSync(t)}catch(e){throw a}if(!l.isDirectory())throw a}}return o}},function(e,t,n){"use strict";(function(t){e.exports=function(e,t,n,a){n?n instanceof Function?(a=n,n={}):"string"==typeof n&&(n={encoding:n}):n={};var c,l,d,p=n.Promise||global.Promise,f=i(h(()=>d)),m=o.resolve(e);new p((function(e){s[m]||(s[m]=[]),s[m].push(e),1===s[m].length&&e()})).then((function(){return new p((function(t){r.realpath(e,(function(n,r){d=u(c=r||e),t()}))}))})).then((function(){return new p((function(e){n.mode&&n.chown?e():r.stat(c,(function(t,r){t||!r||(null==(n=Object.assign({},n)).mode&&(n.mode=r.mode),null==n.chown&&process.getuid&&(n.chown={uid:r.uid,gid:r.gid})),e()}))}))})).then((function(){return new p((function(e,t){r.open(d,"w",n.mode,(function(n,r){l=r,n?t(n):e()}))}))})).then((function(){return new p((function(e,a){Buffer.isBuffer(t)?r.write(l,t,0,t.length,0,(function(t){t?a(t):e()})):null!=t?r.write(l,String(t),0,String(n.encoding||"utf8"),(function(t){t?a(t):e()})):e()}))})).then((function(){return new p((function(e,t){!1!==n.fsync?r.fsync(l,(function(n){n?r.close(l,()=>t(n)):r.close(l,e)})):r.close(l,e)}))})).then((function(){if(l=null,n.chown)return new p((function(e,t){r.chown(d,n.chown.uid,n.chown.gid,(function(n){n?t(n):e()}))}))})).then((function(){if(n.mode)return new p((function(e,t){r.chmod(d,n.mode,(function(n){n?t(n):e()}))}))})).then((function(){return new p((function(e,t){r.rename(d,c,(function(n){n?t(n):e()}))}))})).then((function(){f(),a()}),(function(e){return new p(e=>l?r.close(l,e):e()).then(()=>{f(),r.unlink(d,(function(){a(e)}))})})).then((function(){s[m].shift(),s[m].length>0?s[m][0]():delete s[m]}))},e.exports.sync=function(e,t,n){"string"==typeof n?n={encoding:n}:n||(n={});try{e=r.realpathSync(e)}catch(e){}var a,o=u(e);if(!n.mode||!n.chown)try{var s=r.statSync(e);(n=Object.assign({},n)).mode||(n.mode=s.mode),!n.chown&&process.getuid&&(n.chown={uid:s.uid,gid:s.gid})}catch(e){}var c=h(o),l=i(c);try{a=r.openSync(o,"w",n.mode),Buffer.isBuffer(t)?r.writeSync(a,t,0,t.length,0):null!=t&&r.writeSync(a,String(t),0,String(n.encoding||"utf8")),!1!==n.fsync&&r.fsyncSync(a),r.closeSync(a),n.chown&&r.chownSync(o,n.chown.uid,n.chown.gid),n.mode&&r.chmodSync(o,n.mode),r.renameSync(o,e),l()}catch(e){if(a)try{r.closeSync(a)}catch(e){}throw l(),c(),e}},e.exports._getTmpname=u,e.exports._cleanupOnExit=h;var r=n(74),a=n(79),i=n(45),o=n(1),s={},c=function(){try{return n(81).threadId}catch(e){return 0}}(),l=0;function u(e){return e+"."+a(t).hash(String(process.pid)).hash(String(c)).hash(String(++l)).result()}function h(e){return function(){try{r.unlinkSync("function"==typeof e?e():e)}catch(e){}}}}).call(this,"/index.js")},function(e,t,n){var r,a,i=n(2),o=n(75),s=n(76),c=n(78),l=n(21);"function"==typeof Symbol&&"function"==typeof Symbol.for?(r=Symbol.for("graceful-fs.queue"),a=Symbol.for("graceful-fs.previous")):(r="___graceful-fs.queue",a="___graceful-fs.previous");var u=function(){};if(l.debuglog?u=l.debuglog("gfs4"):/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&(u=function(){var e=l.format.apply(l,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),!global[r]){var h=[];Object.defineProperty(global,r,{get:function(){return h}}),i.close=function(e){function t(t,n){return e.call(i,t,(function(e){e||f(),"function"==typeof n&&n.apply(this,arguments)}))}return Object.defineProperty(t,a,{value:e}),t}(i.close),i.closeSync=function(e){function t(t){e.apply(i,arguments),f()}return Object.defineProperty(t,a,{value:e}),t}(i.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",(function(){u(global[r]),n(20).equal(global[r].length,0)}))}function d(e){o(e),e.gracefulify=d,e.createReadStream=function(t,n){return new e.ReadStream(t,n)},e.createWriteStream=function(t,n){return new e.WriteStream(t,n)};var t=e.readFile;e.readFile=function(e,n,r){"function"==typeof n&&(r=n,n=null);return function e(n,r,a){return t(n,r,(function(t){!t||"EMFILE"!==t.code&&"ENFILE"!==t.code?("function"==typeof a&&a.apply(this,arguments),f()):p([e,[n,r,a]])}))}(e,n,r)};var n=e.writeFile;e.writeFile=function(e,t,r,a){"function"==typeof r&&(a=r,r=null);return function e(t,r,a,i){return n(t,r,a,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?("function"==typeof i&&i.apply(this,arguments),f()):p([e,[t,r,a,i]])}))}(e,t,r,a)};var r=e.appendFile;r&&(e.appendFile=function(e,t,n,a){"function"==typeof n&&(a=n,n=null);return function e(t,n,a,i){return r(t,n,a,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?("function"==typeof i&&i.apply(this,arguments),f()):p([e,[t,n,a,i]])}))}(e,t,n,a)});var a=e.readdir;function i(t){return a.apply(e,t)}if(e.readdir=function(e,t,n){var r=[e];"function"!=typeof t?r.push(t):n=t;return r.push((function(e,t){t&&t.sort&&t.sort();!e||"EMFILE"!==e.code&&"ENFILE"!==e.code?("function"==typeof n&&n.apply(this,arguments),f()):p([i,[r]])})),i(r)},"v0.8"===process.version.substr(0,4)){var c=s(e);g=c.ReadStream,v=c.WriteStream}var l=e.ReadStream;l&&(g.prototype=Object.create(l.prototype),g.prototype.open=function(){var e=this;y(e.path,e.flags,e.mode,(function(t,n){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=n,e.emit("open",n),e.read())}))});var u=e.WriteStream;u&&(v.prototype=Object.create(u.prototype),v.prototype.open=function(){var e=this;y(e.path,e.flags,e.mode,(function(t,n){t?(e.destroy(),e.emit("error",t)):(e.fd=n,e.emit("open",n))}))}),Object.defineProperty(e,"ReadStream",{get:function(){return g},set:function(e){g=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"WriteStream",{get:function(){return v},set:function(e){v=e},enumerable:!0,configurable:!0});var h=g;Object.defineProperty(e,"FileReadStream",{get:function(){return h},set:function(e){h=e},enumerable:!0,configurable:!0});var m=v;function g(e,t){return this instanceof g?(l.apply(this,arguments),this):g.apply(Object.create(g.prototype),arguments)}function v(e,t){return this instanceof v?(u.apply(this,arguments),this):v.apply(Object.create(v.prototype),arguments)}Object.defineProperty(e,"FileWriteStream",{get:function(){return m},set:function(e){m=e},enumerable:!0,configurable:!0});var b=e.open;function y(e,t,n,r){return"function"==typeof n&&(r=n,n=null),function e(t,n,r,a){return b(t,n,r,(function(i,o){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?("function"==typeof a&&a.apply(this,arguments),f()):p([e,[t,n,r,a]])}))}(e,t,n,r)}return e.open=y,e}function p(e){u("ENQUEUE",e[0].name,e[1]),global[r].push(e)}function f(){var e=global[r].shift();e&&(u("RETRY",e[0].name,e[1]),e[0].apply(null,e[1]))}e.exports=d(c(i)),process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!i.__patched&&(e.exports=d(i),i.__patched=!0)},function(e,t,n){var r=n(44),a=process.cwd,i=null,o=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return i||(i=a.call(process)),i};try{process.cwd()}catch(e){}var s=process.chdir;process.chdir=function(e){i=null,s.call(process,e)},e.exports=function(e){r.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&function(e){e.lchmod=function(t,n,a){e.open(t,r.O_WRONLY|r.O_SYMLINK,n,(function(t,r){t?a&&a(t):e.fchmod(r,n,(function(t){e.close(r,(function(e){a&&a(t||e)}))}))}))},e.lchmodSync=function(t,n){var a,i=e.openSync(t,r.O_WRONLY|r.O_SYMLINK,n),o=!0;try{a=e.fchmodSync(i,n),o=!1}finally{if(o)try{e.closeSync(i)}catch(e){}else e.closeSync(i)}return a}}(e);e.lutimes||function(e){r.hasOwnProperty("O_SYMLINK")?(e.lutimes=function(t,n,a,i){e.open(t,r.O_SYMLINK,(function(t,r){t?i&&i(t):e.futimes(r,n,a,(function(t){e.close(r,(function(e){i&&i(t||e)}))}))}))},e.lutimesSync=function(t,n,a){var i,o=e.openSync(t,r.O_SYMLINK),s=!0;try{i=e.futimesSync(o,n,a),s=!1}finally{if(s)try{e.closeSync(o)}catch(e){}else e.closeSync(o)}return i}):(e.lutimes=function(e,t,n,r){r&&process.nextTick(r)},e.lutimesSync=function(){})}(e);e.chown=i(e.chown),e.fchown=i(e.fchown),e.lchown=i(e.lchown),e.chmod=n(e.chmod),e.fchmod=n(e.fchmod),e.lchmod=n(e.lchmod),e.chownSync=s(e.chownSync),e.fchownSync=s(e.fchownSync),e.lchownSync=s(e.lchownSync),e.chmodSync=a(e.chmodSync),e.fchmodSync=a(e.fchmodSync),e.lchmodSync=a(e.lchmodSync),e.stat=c(e.stat),e.fstat=c(e.fstat),e.lstat=c(e.lstat),e.statSync=l(e.statSync),e.fstatSync=l(e.fstatSync),e.lstatSync=l(e.lstatSync),e.lchmod||(e.lchmod=function(e,t,n){n&&process.nextTick(n)},e.lchmodSync=function(){});e.lchown||(e.lchown=function(e,t,n,r){r&&process.nextTick(r)},e.lchownSync=function(){});"win32"===o&&(e.rename=(t=e.rename,function(n,r,a){var i=Date.now(),o=0;t(n,r,(function s(c){if(c&&("EACCES"===c.code||"EPERM"===c.code)&&Date.now()-i<6e4)return setTimeout((function(){e.stat(r,(function(e,i){e&&"ENOENT"===e.code?t(n,r,s):a(c)}))}),o),void(o<100&&(o+=10));a&&a(c)}))}));var t;function n(t){return t?function(n,r,a){return t.call(e,n,r,(function(e){u(e)&&(e=null),a&&a.apply(this,arguments)}))}:t}function a(t){return t?function(n,r){try{return t.call(e,n,r)}catch(e){if(!u(e))throw e}}:t}function i(t){return t?function(n,r,a,i){return t.call(e,n,r,a,(function(e){u(e)&&(e=null),i&&i.apply(this,arguments)}))}:t}function s(t){return t?function(n,r,a){try{return t.call(e,n,r,a)}catch(e){if(!u(e))throw e}}:t}function c(t){return t?function(n,r,a){function i(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),a&&a.apply(this,arguments)}return"function"==typeof r&&(a=r,r=null),r?t.call(e,n,r,i):t.call(e,n,i)}:t}function l(t){return t?function(n,r){var a=r?t.call(e,n,r):t.call(e,n);return a.uid<0&&(a.uid+=4294967296),a.gid<0&&(a.gid+=4294967296),a}:t}function u(e){return!e||("ENOSYS"===e.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code))}e.read=function(t){function n(n,r,a,i,o,s){var c;if(s&&"function"==typeof s){var l=0;c=function(u,h,d){if(u&&"EAGAIN"===u.code&&l<10)return l++,t.call(e,n,r,a,i,o,c);s.apply(this,arguments)}}return t.call(e,n,r,a,i,o,c)}return n.__proto__=t,n}(e.read),e.readSync=(h=e.readSync,function(t,n,r,a,i){for(var o=0;;)try{return h.call(e,t,n,r,a,i)}catch(e){if("EAGAIN"===e.code&&o<10){o++;continue}throw e}});var h}},function(e,t,n){var r=n(77).Stream;e.exports=function(e){return{ReadStream:function t(n,a){if(!(this instanceof t))return new t(n,a);r.call(this);var i=this;this.path=n,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,a=a||{};for(var o=Object.keys(a),s=0,c=o.length;s<c;s++){var l=o[s];this[l]=a[l]}this.encoding&&this.setEncoding(this.encoding);if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(null!==this.fd)return void process.nextTick((function(){i._read()}));e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return i.emit("error",e),void(i.readable=!1);i.fd=t,i.emit("open",t),i._read()}))},WriteStream:function t(n,a){if(!(this instanceof t))return new t(n,a);r.call(this),this.path=n,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,a=a||{};for(var i=Object.keys(a),o=0,s=i.length;o<s;o++){var c=i[o];this[c]=a[c]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}}},function(e,t){e.exports=require("stream")},function(e,t,n){"use strict";e.exports=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var t={__proto__:e.__proto__};else t=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))})),t}},function(e,t,n){
/**
 * @preserve
 * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)
 *
 * @author <a href="mailto:jensyt@gmail.com">Jens Taylor</a>
 * @see http://github.com/homebrewing/brauhaus-diff
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 */
!function(){var t;function n(e,r){var a=this instanceof n?this:t;if(a.reset(r),"string"==typeof e&&e.length>0&&a.hash(e),a!==this)return a}n.prototype.hash=function(e){var t,n,r,a,i;switch(i=e.length,this.len+=i,n=this.k1,r=0,this.rem){case 0:n^=i>r?65535&e.charCodeAt(r++):0;case 1:n^=i>r?(65535&e.charCodeAt(r++))<<8:0;case 2:n^=i>r?(65535&e.charCodeAt(r++))<<16:0;case 3:n^=i>r?(255&e.charCodeAt(r))<<24:0,n^=i>r?(65280&e.charCodeAt(r++))>>8:0}if(this.rem=i+this.rem&3,(i-=this.rem)>0){for(t=this.h1;t=5*(t=(t^=n=13715*(n=(n=11601*n+3432906752*(65535&n)&4294967295)<<15|n>>>17)+461832192*(65535&n)&4294967295)<<13|t>>>19)+3864292196&4294967295,!(r>=i);)n=65535&e.charCodeAt(r++)^(65535&e.charCodeAt(r++))<<8^(65535&e.charCodeAt(r++))<<16,n^=(255&(a=e.charCodeAt(r++)))<<24^(65280&a)>>8;switch(n=0,this.rem){case 3:n^=(65535&e.charCodeAt(r+2))<<16;case 2:n^=(65535&e.charCodeAt(r+1))<<8;case 1:n^=65535&e.charCodeAt(r)}this.h1=t}return this.k1=n,this},n.prototype.result=function(){var e,t;return e=this.k1,t=this.h1,e>0&&(t^=e=13715*(e=(e=11601*e+3432906752*(65535&e)&4294967295)<<15|e>>>17)+461832192*(65535&e)&4294967295),t^=this.len,t=51819*(t^=t>>>16)+2246770688*(65535&t)&4294967295,t=44597*(t^=t>>>13)+3266445312*(65535&t)&4294967295,(t^=t>>>16)>>>0},n.prototype.reset=function(e){return this.h1="number"==typeof e?e:0,this.rem=this.k1=this.len=0,this},t=new n,e.exports=n}()},function(e,t){e.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"],"win32"!==process.platform&&e.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT"),"linux"===process.platform&&e.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")},function(e,t){e.exports=require("worker_threads")},function(e,t,n){"use strict";const r=n(36),a=n(1),i=n(18),o=i.app||i.remote.app;var s;t.getDefaultDataPath=function(){return a.join(o.getPath("userData"),"storage")},t.setDataPath=function(e){if(r.isNil(e))s=void 0;else{if(!a.isAbsolute(e))throw new Error("The user data path should be an absolute directory");s=a.normalize(e)}},t.getDataPath=function(){return s||t.getDefaultDataPath()},t.getFileName=function(e,n){if(n=n||{},!e)throw new Error("Missing key");if(!r.isString(e)||0===e.trim().length)throw new Error("Invalid key");const i=a.basename(e,".json")+".json",o=encodeURIComponent(i).replace(/\*/g,"-").replace(/%20/g," ");return a.join(n.dataPath||t.getDataPath(),o)},t.getLockFileName=function(e){return e+".lock"}},function(e,t,n){"use strict";const r=n(84),a={stale:1e4,retries:1e3,retryWait:50};t.lock=function(e,n,i){i=i||0,r.lock(e,a,(function(r){if(!(r&&"EPERM"===r.code&&i<10))return n(r);setTimeout((function(){t.unlock(e,n,i+1)}),1e3)}))},t.unlock=function(e,n,a){a=a||0,r.unlock(e,(function(r){if(!(r&&"EPERM"===r.code&&a<10))return n(r);setTimeout((function(){t.unlock(e,n,a+1)}),1e3)}))}},function(e,t,n){var r=n(2),a="wx";if(process.version.match(/^v0\.[0-6]/)){var i=n(44);a=i.O_TRUNC|i.O_CREAT|i.O_WRONLY|i.O_EXCL}var o,s=n(85);t.filetime="ctime","win32"==s.platform()&&(t.filetime="mtime");var c=n(21);o=c.debuglog?c.debuglog("LOCKFILE"):/\blockfile\b/i.test(process.env.NODE_DEBUG)?function(){var e=c.format.apply(c,arguments);console.error("LOCKFILE %d %s",process.pid,e)}:function(){};var l={};n(45)((function(){o("exit listener"),Object.keys(l).forEach(t.unlockSync)})),/^v0\.[0-8]\./.test(process.version)&&(o("uncaughtException, version = %s",process.version),process.on("uncaughtException",(function e(n){if(o("uncaughtException"),!process.listeners("uncaughtException").filter((function(t){return t!==e})).length){try{Object.keys(l).forEach(t.unlockSync)}catch(e){}throw process.removeListener("uncaughtException",e),n}}))),t.unlock=function(e,t){o("unlock",e),delete l[e],r.unlink(e,(function(e){t&&t()}))},t.unlockSync=function(e){o("unlockSync",e);try{r.unlinkSync(e)}catch(e){}delete l[e]},t.check=function(e,n,a){"function"==typeof n&&(a=n,n={}),o("check",e,n),r.open(e,"r",(function(e,i){return e?"ENOENT"!==e.code?a(e):a(null,!1):n.stale?void r.fstat(i,(function(e,o){if(e)return r.close(i,(function(t){return a(e)}));r.close(i,(function(e){var r=Date.now()-o[t.filetime].getTime();return a(e,r<=n.stale)}))})):r.close(i,(function(e){return a(e,!0)}))}))},t.checkSync=function(e,n){if(o("checkSync",e,n=n||{}),n.wait)throw new Error("opts.wait not supported sync for obvious reasons");try{var a=r.openSync(e,"r")}catch(e){if("ENOENT"!==e.code)throw e;return!1}if(!n.stale){try{r.closeSync(a)}catch(e){}return!0}if(n.stale){try{var i=r.fstatSync(a)}finally{r.closeSync(a)}return Date.now()-i[t.filetime].getTime()<=n.stale}};var u=1;function h(e,n,r,a){if(o("notStale",n,r),"number"!=typeof r.wait||r.wait<=0)return o("notStale, wait is not a number"),a(e);var i=Date.now(),s=r.start||i,c=s+r.wait;if(c<=i)return a(e);o("now=%d, wait until %d (delta=%d)",s,c,c-s);var l=Math.min(c-s,r.pollPeriod||100);setTimeout((function(){o("notStale, polling",n,r),t.lock(n,r,a)}),l)}function d(e,n,r){if("number"==typeof n.retries&&n.retries>0){var a=n.retries-1;return o("retryThrow",e,n,a),n.retries=a,t.lockSync(e,n)}throw r}t.lock=function(e,n,i){if("function"==typeof n&&(i=n,n={}),n.req=n.req||u++,o("lock",e,n),n.start=n.start||Date.now(),"number"==typeof n.retries&&n.retries>0){o("has retries",n.retries);var s=n.retries;n.retries=0,c=i,i=function r(a,i){if(o("retry-mutated callback"),s-=1,!a||s<0)return c(a,i);function l(){n.start=Date.now(),o("retrying",n.start),t.lock(e,n,r)}o("lock retry",e,n),n.retryWait?setTimeout(l,n.retryWait):l()}}var c;r.open(e,a,(function(a,s){return a?(o("failed to acquire lock",a),"EEXIST"!==a.code?(o("not EEXIST error",a),i(a)):n.stale?function e(n,a,i,s,c){r.stat(a,(function(l,u){return l?"ENOENT"===l.code?(i.stale=!1,o("lock stale enoent retry",a,i),void t.lock(a,i,c)):c(l):Date.now()-u[t.filetime].getTime()<=i.stale?h(n,a,i,c):(o("lock stale",a,i),void(s?t.unlock(a,(function(e){if(e)return c(e);o("lock stale retry",a,i),r.link(a+".STALE",a,(function(e){r.unlink(a+".STALE",(function(){c(e)}))}))})):(o("acquire .STALE file lock",i),t.lock(a+".STALE",i,(function(t){if(t)return c(t);e(n,a,i,!0,c)})))))}))}(a,e,n,!1,i):h(a,e,n,i)):(o("locked",e,s),l[e]=s,r.close(s,(function(){return i()})))})),o("lock return")},t.lockSync=function(e,n){if((n=n||{}).req=n.req||u++,o("lockSync",e,n),n.wait||n.retryWait)throw new Error("opts.wait not supported sync for obvious reasons");try{var i=r.openSync(e,a);l[e]=i;try{r.closeSync(i)}catch(e){}return void o("locked sync!",e,i)}catch(a){if("EEXIST"!==a.code)return d(e,n,a);if(n.stale){var s=r.statSync(e)[t.filetime].getTime();!(s%1e3)&&n.stale%1e3&&(n.stale=1e3*Math.ceil(n.stale/1e3));var c=Date.now()-s;if(c>n.stale)return o("lockSync stale",e,n,c),t.unlockSync(e),t.lockSync(e,n)}return o("failed to lock",e,n,a),d(e,n,a)}}},function(e,t){e.exports=require("os")},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),o=n(9);function s(e){var t=e.avatarBoxSelector,n=e.formState,r=t;n.avatarSectionShowState=!n.avatarSectionShowState,n.avatarSectionShowState?i.addClassList(r,"opened-avatar-box"):i.removeClassList(r,"opened-avatar-box")}function c(e){var t=e.picture,n=e.displaySelector;if(!t||!n)return!1;n.src=t}function l(e){var t=e.avatarAreaSelectors,n=e.picture,i=e.formState;return r(this,void 0,void 0,(function(){function e(){var e=new FileReader;if(e.addEventListener("load",(function(){return c({picture:e.result,displaySelector:t.displaySelector}),s({avatarBoxSelector:t.avatarBox,formState:i}),i.avatarPicture=e.result,e.result}),!1),this.files)e.readAsDataURL(this.files[0]);else if("string"==typeof n){var r=document.createElement("canvas");r.width=100,r.height=100;var a=r.getContext("2d"),o=new Image;o.src=n,o.onload=function(){a.drawImage(o,0,0,o.width,o.height,0,0,r.width,r.height);var e="data:image/png;base64,"+r.toDataURL().replace(/^data:image\/(png|jpg);base64,/,"");return c({picture:e,displaySelector:t.displaySelector}),i.avatarPicture=e,e}}}return a(this,(function(t){return e.call(n),[2]}))}))}t.avatarButton=function(e){var t=e.newAvatarSelectors,n=e.formState,r=document.querySelector(t.buttonSelector),a=document.querySelector(t.avatarCloseSelector),i=document.querySelector(t.playerAvatarLoadSelector),c=document.querySelector(t.avatarBoxSelector),u=document.querySelector(t.avatarInnerBoxSelector),h=document.querySelector(t.displaySelector),d={mainAvatarButton:r,avatarClose:a,playerAvatarLoad:i,avatarBox:c,avatarInnerBox:u,displaySelector:h};r.addEventListener("click",(function(e){e.preventDefault(),s({avatarBoxSelector:c,formState:n}),function(e){var t=e.avatarInnerBoxSelector,n=e.formState,r=e.avatarAreaSelectors,a=t.avatarInnerBox;a.innerHTML="";for(var i=function(e){var i="/public/images/misc/avatars/"+e,c=o.createElements({tagName:"img",styleClass:"avatar-item",inlineStyle:null,pictureUrl:i,linkUrl:null,text:null,innerContent:"",attributeName:null,attribute:null,attributeName1:null,attribute1:null});c.addEventListener("click",(function(e){e.preventDefault(),l({picture:__dirname+i,formState:n,avatarAreaSelectors:r}),s({avatarBoxSelector:t.avatarBox,formState:n})})),a.appendChild(c)},c=0,u=["av1.png","av2.png","av3.png","av4.png","av5.png","av6.png"];c<u.length;c++){i(u[c])}}({avatarInnerBoxSelector:d,formState:n,avatarAreaSelectors:d})})),a.addEventListener("click",(function(e){e.preventDefault(),s({avatarBoxSelector:c,formState:n})})),i.addEventListener("change",(function(){l({avatarAreaSelectors:d,picture:this,formState:n})}))},t.convertPictureToData=l},function(e,t,n){"use strict";n.r(t);var r={format:"image/png",quality:.92,width:void 0,height:void 0,Canvas:void 0,crossOrigin:void 0};t.default=function(e,t){return void 0===e&&(e=[]),void 0===t&&(t={}),new Promise((function(n){var a=(t=Object.assign({},r,t)).Canvas?new t.Canvas:window.document.createElement("canvas"),i=t.Image||window.Image,o=e.map((function(e){return new Promise((function(n,r){"Object"!==e.constructor.name&&(e={src:e});var a=new i;a.crossOrigin=t.crossOrigin,a.onerror=function(){return r(new Error("Couldn't load image"))},a.onload=function(){return n(Object.assign({},e,{img:a}))},a.src=e.src}))})),s=a.getContext("2d");n(Promise.all(o).then((function(e){var n=function(n){return t[n]||Math.max.apply(Math,e.map((function(e){return e.img[n]})))};return a.width=n("width"),a.height=n("height"),e.forEach((function(e){return s.globalAlpha=e.opacity?e.opacity:1,s.drawImage(e.img,e.x||0,e.y||0)})),t.Canvas&&"image/jpeg"===t.format?new Promise((function(e,n){a.toDataURL(t.format,{quality:t.quality,progressive:!1},(function(t,r){t?n(t):e(r)}))})):a.toDataURL(t.format,t.quality)})))}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createWindow=function(e,t){e.fillRect(t.x,t.y,t.width,t.height)},t.createShapeRoundBorder=function(e){var t=e.properties;if(t.ctx.fillStyle=t.background,t.gradient){var n=t.ctx.createLinearGradient(t.topX,t.topY,t.bottomX,t.bottomY);n.addColorStop(0,t.background),n.addColorStop(1,t.backGroundFinal),t.ctx.fillStyle=n}t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.stroke()),t.ctx.closePath(),t.ctx.fill()},t.createRoundButton=function(e){var t=e.properties,n=t.ctx.measureText(e.text).width/3.2,r=t.textProperty.leftPadding+n+t.textProperty.rightPadding;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+r-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+r,t.y,t.x+r,t.y+t.radius),t.ctx.lineTo(t.x+r,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+r,t.y+t.height,t.x+r-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill(),t.isBorder&&(t.ctx.strokeStyle=t.borderColor,t.ctx.lineWidth=t.borderRadius,t.ctx.stroke()),t.ctx.font=e.fontSize,t.ctx.fillStyle=t.textProperty.textColor,t.ctx.shadowColor=t.textProperty.shadowColor,t.ctx.shadowBlur=8,t.ctx.fillText(e.text,t.x+t.textProperty.leftPadding,t.y+t.height/2+t.textProperty.topPadding)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(33),a=n(0),i=n(22),o=n(6),s=n(29),c=n(91),l=n(13),u=n(5),h=n(24),d=n(100),p=n(15),f=function(){function e(e){this.gameInitData=e}return e.prototype.changeLevel=function(e){return this.gameInitData.gameData.currentLevel=e,this.gameInitData.gameData.currentLevel},e.prototype.showGameInfo=function(){return{levelToChange:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint,gameData:this.gameInitData.gameData,settings:this.gameInitData.gameData.gameSetings,levelSounds:this.gameInitData.gameData.levelSounds,playerObject:this.gameInitData.gameData.playerObject,imageDirrection:__dirname+"/public/images/"}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameDialogField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameDialogField:this.gameInitData.ctxGameDialogField,gameUIField:this.gameInitData.gameUIField}:null},e}();t.Game=f,f.prototype.createContext=o.createContext,f.prototype.initField=o.initField,f.prototype.levelInit=o.levelInit,f.prototype.setGameFields=o.setGameFields,f.prototype.warpEffect=o.warpEffect,f.prototype.getScreenSize=o.getScreenSize,f.prototype.getLevelUserData=o.getLevelUserData,f.prototype.levelTimer=o.levelTimer,f.prototype.getSecondMeasure=o.getSecondMeasure,f.prototype.gameSecondsIncrease=o.gameSecondsIncrease,f.prototype.initPlayerShip=s.initPlayerShip,f.prototype.deleteBullet=o.deleteBullet,f.prototype.deleteObjects=o.deleteObjects,f.prototype.delateSideObject=o.delateSideObject,f.prototype.hitDetection=a.hitDetection,f.prototype.collectPoints=o.collectPoints,f.prototype.spawnEnemyLogic=r.spawnEnemyLogic,f.prototype.createNewEnemy=r.createNewEnemy,f.prototype.gameRandomizer=r.gameRandomizer,f.prototype.uiController=c.uiController,f.prototype.gameUiPause=c.gameUiPause,f.prototype.gameUiMenu=c.gameUiMenu,f.prototype.showMenuWindow=c.showMenuWindow,f.prototype.showUiPopupWindow=c.showUiPopupWindow,f.prototype.showStartWindow=c.showStartWindow,f.prototype.showPauseWindow=c.showPauseWindow,f.prototype.levelChangeWindow=c.levelChangeWindow,f.prototype.gameOverWindow=c.gameOverWindow,f.prototype.gameWinWindow=c.gameWinWindow,f.prototype.showGameStats=c.showGameStats,f.prototype.initUiElements=c.initUiElements,f.prototype.mapSoundChanger=l.mapSoundChanger,f.prototype.gameStart=l.gameStart,f.prototype.backToStartScreen=l.backToStartScreen,f.prototype.exitTheGame=l.exitTheGame,f.prototype.nextLevelDataReload=i.nextLevelDataReload,f.prototype.changeLevelProcedure=o.changeLevelProcedure,f.prototype.getRandomColor=o.getRandomColor,f.prototype.mapRandomObjectSpawn=u.mapRandomObjectSpawn,f.prototype.initGrappleObject=h.initGrappleObject,f.prototype.gameSettingsMenuInit=d.gameSettingsMenuInit,f.prototype.createSound=p.createSound,f.prototype.getImageFromFields=o.getImageFromFields},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),a=n(17),i=n(34),o=n(11);function s(e){var t=e.mainGameObject,n=e.shopArea;t.shopArea.selectedShopItem.inventorySelectedItem=null,t.shopArea.selectedShopItem.hangarSelectedItem=null,process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="false",process.env.SHOP_STORE_WINDOW="false",t.shopArea.shopPageInformation.currentPage=1,o.showShopData({element:n,url:process.env.SHOP_GUNS_URL,mainGameObject:t,customWrapperClass:null,shopPageInformation:t.shopArea.shopPageInformation})}function c(e){var t=e.mainGameObject,n=e.shopArea;t.shopArea.selectedShopItem.inventorySelectedItem=null,t.shopArea.selectedShopItem.hangarSelectedItem=null,process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="true",process.env.SHOP_STORE_WINDOW="false",t.shopArea.shopPageInformation.currentPage=1,o.showShopData({element:n,url:process.env.SHOP_SHIPYARD_URL,mainGameObject:t,customWrapperClass:"shipyard-item",shopPageInformation:t.shopArea.shopPageInformation})}function l(e){var t=e.mainGameObject,n=e.shopArea;t.shopArea.selectedShopItem.inventorySelectedItem=null,t.shopArea.selectedShopItem.hangarSelectedItem=null,process.env.SHOP_STORE_WINDOW="true",process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="false",t.shopArea.shopPageInformation.currentPage=1,o.showShopData({element:n,url:process.env.SHOP_STORE_ITEMS,mainGameObject:t,customWrapperClass:null,shopPageInformation:t.shopArea.shopPageInformation})}function u(e,t,n){r.hide(n.shopArea.shopDialog),t(e)}function h(e){var t=Array.prototype.slice.apply(document.querySelectorAll(".shop-upper-button"));!function(e,n){for(var r=0,a=t;r<a.length;r++){var i=a[r];e(i,n)}}(r.removeClassList,"selected-shop-btn"),e?r.addClassList(e,"selected-shop-btn"):r.addClassList(t[0],"selected-shop-btn")}t.shopDialogActivity=function(e){var t=e.mainGameObject,n=e.shopArea;"false"===process.env.SHOP_ACTIVE_WINDOW?(process.env.SHOP_SALE_WINDOW="false",process.env.SHOP_ACTIVE_WINDOW="false",t.gameInitData.gamePause=!!t.gameInitData.gameUiPause,t.gameInitData.inventoryActive=!1,t.gameInitData.shopActive=!1,t.shopArea.selectedShopItem={title:"",price:"",inventorySelectedItem:null,hangarSelectedItem:null,hangarElements:[],tradePropertyes:null},r.hide(n.shopWrapper),r.hide(this)):"true"===process.env.SHOP_ACTIVE_WINDOW&&"false"===process.env.SHOP_SALE_WINDOW&&"false"===process.env.SHOP_SHIPYARD_ACTIVE_WINDOW&&"false"===process.env.SHOP_STORE_WINDOW?o.buyItem({url:process.env.SHOP_GUNS_URL,mainGameObject:t}):"true"===process.env.SHOP_SALE_WINDOW&&"true"===process.env.SHOP_ACTIVE_WINDOW?(process.env.SHOP_SALE_WINDOW="false",process.env.SHOP_ACTIVE_WINDOW="false",a.saleItem({mainGameObject:t}),a.shopInventory({element:n,mainGameObject:t}),i.loadHangar({element:t.shopArea,mainGameObject:t}),r.hide(this)):"true"===process.env.SHOP_SHIPYARD_ACTIVE_WINDOW&&"true"===process.env.SHOP_ACTIVE_WINDOW?o.buyShip({mainGameObject:t,url:process.env.SHOP_SHIPYARD_URL}):"true"===process.env.SHOP_STORE_WINDOW&&"false"===process.env.SHOP_SHIPYARD_ACTIVE_WINDOW&&"true"===process.env.SHOP_ACTIVE_WINDOW&&o.buyItem({url:process.env.SHOP_STORE_ITEMS,mainGameObject:t})},t.shopWeaponsActivity=s,t.toggleShopButtonStyle=h,t.shopMenuActivity=function(e){var t=e.mainGameObject,n=e.shopArea;switch(event.target.dataset.targetBtnId){case"weapons":h(event.target),u({mainGameObject:t,shopArea:n},s,t);break;case"ship":h(event.target),u({mainGameObject:t,shopArea:n},c,t);break;case"market":h(event.target),u({mainGameObject:t,shopArea:n},l,t);break;case"to-hangar":u({state:"to-hangar",element:n},o.switchShopHangar,t),i.loadHangar({element:n,mainGameObject:t});break;case"to-shop":u({state:"to-shop",element:n},o.switchShopHangar,t);break;case"previous-items":r.hide(t.shopArea.shopDialog),o.changePage({mainGameObject:t,flag:"back"});break;case"next-items":r.hide(t.shopArea.shopDialog),o.changePage({mainGameObject:t,flag:"next"});break;case"exit":r.hide(t.shopArea.shopDialog),function(e){var t=e.mainGameObject,n=e.shopArea;t.shopArea.selectedShopItem.inventorySelectedItem=null,t.shopArea.selectedShopItem.hangarSelectedItem=null,process.env.SHOP_ACTIVE_WINDOW="false",o.leaveShop({element:n,mainGameObject:t,text:"back to the game"})}({mainGameObject:t,shopArea:n})}}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var i=arguments[t],o=0,s=i.length;o<s;o++,a++)r[a]=i[o];return r};Object.defineProperty(t,"__esModule",{value:!0});var a=n(23),i=n(92),o=n(93),s=n(94),c=n(95),l=n(96),u=n(97),h=n(98),d=n(0),p=n(99),f=n(4);function m(e){var t=e.event,n=e.gameObject,r=e.data;if("CANVAS"===t.target.tagName){var a=t.clientX-t.target.offsetLeft,s=t.clientY-t.target.offsetTop,c=null,l=this.gameInitData.ctxUIField,h={width:window.innerWidth,height:window.innerHeight};this.gameInitData.gameStatus||(c=i.gameLoadMenu(null,l,h.width,h.height,null),g.call(this,{x:a,y:s,gameObject:n,elementsOnScreen:c})),this.gameInitData.gameUiPause&&(c=o.gameSettingsMenu(null,l,h.width,h.height),g.call(this,{x:a,y:s,gameObject:n,elementsOnScreen:c})),this.gameInitData.gameWin&&(c=u.gameWinScreen(null,l,h.width,h.height,null,r),g.call(this,{x:a,y:s,gameObject:n,elementsOnScreen:c}))}}function g(e){var t=e.x,n=e.y,r=e.gameObject,a=e.elementsOnScreen;for(var i in a){if(d.hitDetection({object1:a[i],objectsArr:[].concat({x:t,y:n,width:10,height:10,name:"cursor"}),mainGameObject:this,GrappleObject:null})&&a[i].action){a[i].action.call(this,r);break}}}t.gameUiPause=function(){if(this.gameInitData.shopActive||this.gameInitData.inventoryActive)return!1;!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},t.gameUiMenu=function(e){if(document.querySelector("#backpack-wrapper"),this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,f.hideInventory(),process.env.GROUND_CHARACTERS_INVENTORY="false",this.gameInitData.shopActive&&this.gameInitData.inventoryActive||this.gameInitData.inventoryActive)return!1;this.gameInitData.gamePause=!e},t.uiController=function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,n=this;document.addEventListener("keydown",(function(r){if("false"===process.env.GROUND_PLAYER_ALLOW_MOVE)return!1;t.escape.some((function(e){return r.keyCode==e}))&&n.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return r.keyCode==e}))&&n.gameUiPause()})),document.addEventListener("click",(function(t){var r=e.getLevelUserData();m.call(e,{event:t,gameObject:n,data:r})}))},t.showUiPopupWindow=function(){a.createWindow.call(this)},t.showStartWindow=function(){var e=[a.createRoundButton,h.uiImage,h.uiText,h.uiText];this.initUiElements(e,i.gameLoadMenu)},t.showMenuWindow=function(){var e=[a.createShapeRoundBorder,a.createRoundButton,h.uiText];this.initUiElements(e,o.gameSettingsMenu)},t.showPauseWindow=function(){var e=[h.uiText];this.initUiElements(e,s.gamePause)},t.showGameStats=function(e){var t=e.playerObject,n=e.mainGameObject,r=this.getLevelUserData();r.playerObject=t,r.mainGameObject=n;var a=[h.uiImage,h.uiText,h.uiText,h.uiText,h.uiImage,h.uiText,h.uiImage,h.uiText,h.uiText];this.initUiElements(a,c.gameInformationScreen,r)},t.levelChangeWindow=function(){var e=this.getLevelUserData(),t=[h.uiText,h.uiText,h.uiText];this.initUiElements(t,p.levelChangeScreen,e)},t.gameOverWindow=function(){var e=[h.uiText,h.uiText,h.uiText];this.initUiElements(e,l.gameOverScreen)},t.gameWinWindow=function(){var e=this.getLevelUserData(),t=[h.uiText,h.uiText,h.uiText,a.createRoundButton,a.createRoundButton,a.createRoundButton];this.initUiElements(t,u.gameWinScreen,e)},t.initUiElements=function(e,t){for(var n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];for(var i=this.gameInitData.ctxUIField,o={width:window.innerWidth,height:window.innerHeight},s=this.showGameInfo().imageDirrection,c=t.apply(void 0,r([null,i,o.width,o.height,s],n)),l=0;l<c.length;l++)c[l].hasOwnProperty("loadPicture")&&c[l].loadPicture(),c[l].init(e[l])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.gameLoadMenu=function(e,t,n,a,i){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,properties:{ctx:t,width:400,height:90,x:n/2-165,y:a/2+150,background:"rgba(255, 255, 255, 1)",isBorder:!0,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 0)",textProperty:{textColor:"#251536",topPadding:10,rightPadding:40,bottomPadding:10,leftPadding:40},radius:45},action:function(){this.gameStart()},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,shadowColor:"rgba(37, 21, 54, 1)",properties:{ctx:t,width:150,height:150,sWidth:1024,sHeight:1024,x:n/2-75,y:90,background:new Image,borderColor:!1,shadowColor:"rgba(37, 21, 54, 1)",radius:null},loadPicture:function(){this.properties.background.src=i+"misc/logo-1024x1024.png"},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:-290,height:0,x:n/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:0,height:0,x:n/2,y:370,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(89, 0, 255, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition}]}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),i=r(n(8)),o=n(3);t.gameSettingsMenu=function(e,t,n,r){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:n,height:450,x:0,y:100,gradient:!0,backGroundFinal:"rgba(56, 2, 64, .1)",topX:0,topY:0,bottomX:n,bottomY:100,background:"rgba(47, 34, 49, .7)",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(0, 0, 0, 1)",radius:5},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"Restart the game",description:"back to start screen",fontSize:"20px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:200,height:50,x:n/2-150,y:r/2+50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 0)",textProperty:{textColor:"#251536",topPadding:7,rightPadding:50,bottomPadding:10,leftPadding:40},radius:15},action:function(){o.dialogWindow({textData:"restart the game?",rejectText:"cancel",acceptText:"restart"},this.backToStartScreen,null,this,i)},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 0)",properties:{ctx:t,width:-45,height:0,x:n/2,y:150,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.gamePause=function(e,t,n,a,i){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"60px Arial",clicked:!1,properties:{ctx:t,width:400,height:90,x:n/2-150,y:100,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:r.init,getObjectPosition:r.getUIObjectPosition}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.gameInformationScreen=function(e,t,n,a,i,o){return[{name:"lifePoint",text:"",number:o.life,step:[o.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,properties:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,shadowColor:"rgba(0, 0, 0, 1)",radius:null},loadPicture:function(){this.properties.background.src=i+"misc/ruby.png"},init:function(e,t){if(t=t||this,!o.life||o.life<0)return!1;for(var n=Array(o.life).fill(0).map((function(e,t){return 30*t})),r=0;r<this.number;r++)this.properties.x=0==r?30:0+n[r]+(0!=r?30:0),e(t)},getObjectPosition:r.getUIObjectPosition},{name:"level",text:" "+(o.currentLevel<=o.allLevels?"Current Level "+o.currentLevel:"end of the game")+" ",description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",properties:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"Time to end level",text:function(){var e=o.mainGameObject.gameInitData.dynamicLevelsActive,t="true"===process.env.BOSS_LOAD_AT_LEVEL,n="";if(o.minutes||0===o.minutes||o.seconds||0===o.seconds){var r=o.minutes-10>=0?"":0,a=o.seconds-10>=0?"":0;n="Time to level end "+r+o.minutes+":"+a+o.seconds}return t&&(n="Boss level"),e&&(n=""+o.source.levelData.description.name),n}(),description:"Game part the name",clicked:!1,fontSize:"light 16px Roboto",properties:{ctx:t,width:50,height:0,x:n-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"Game points",text:"score: "+o.points,description:"Game part the name",clicked:!1,fontSize:"light 18px Roboto",properties:{ctx:t,width:-50,height:0,x:n/2,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"coins",text:"",number:o.source.gameCoins,step:[o.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,properties:{ctx:t,width:100,height:100,sWidth:500,sHeight:500,x:n/2-50,y:25,background:new Image,borderColor:!1,shadowColor:"rgba(0, 0, 0, 0)",radius:null},loadPicture:function(){this.properties.background.src=i+"misc/grapple-objects/coin.png"},init:function(e,t){t=t||this;for(var n=Math.floor(this.number/5e3),r=n>0&&n<10?n:n>=10?10:1,a=Array(r).fill(0).map((function(e,t){return 5*t})),i=this.properties.x,o=0;o<r;o++)this.properties.x=0==o?i:0+a[o]+(0!=o?i:0),e(t)},getObjectPosition:r.getUIObjectPosition},{name:"Game coins",text:"X"+o.source.gameCoins,description:"Game part the name",clicked:!1,fontSize:"light 18px Roboto",properties:{ctx:t,width:-50,height:0,x:n/2,y:20,background:!1,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"object",text:"",info:o,step:[o.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,properties:{ctx:t,width:100,height:100,sWidth:500,sHeight:500,x:n/2-50,y:window.innerHeight-50,background:new Image,borderColor:!1,shadowColor:"rgba(0, 0, 0, 0)",radius:null},loadPicture:function(){this.properties.background.src=i+"misc/grapple-objects/coin.png"},init:function(e,n){var r=(n=n||this).info.playerObject.data.inventory.filter((function(e){if(e)return"inventory static"===e.status}));if(!r)return!1;var a=r.map((function(e,t){return e.img=new Image,e.img.src=process.env.HOST+e.displayImage,{data:e,marginLeft:50*t,activateButton:e.grapplePower.value.activateButton}}));if(o.mainGameObject.gameInitData.dynamicLevelsActive)return!1;for(var i=0;i<a.length;i++)if(a[i].data){var s=a[i];"inventory static"===s.data.status&&(this.properties.background=s.data.img,this.properties.x+=50,e(n),t.fillText(s.data.grapplePower.number,this.properties.x,window.innerHeight-40),t.fillText(s.activateButton,this.properties.x+30,window.innerHeight-10))}},getObjectPosition:r.getUIObjectPosition},{name:"Game controls part 1",text:(s=o.mainGameObject,c=s.gameInitData.dynamicLevelsActive,l=s.gameInitData.levelChange,u=s.gameInitData.gamePause,l||u?c&&!u?"esc - menu P - pause LMB(hold) - shot  W - jump  D - right  S - down  A - left":u?c&&u?"esc - back to game P - pause  W - jump  D - right  S - down  A - left  J - journal  M - map  I - inventory":"esc - menu   P - pause  I - inventory  J - journal":"esc - menu P - pause  LMB - shot  I - inventory  J -journal":""),description:"Game controll button tips part 1",clicked:!1,fontSize:"thin 12px Roboto",properties:{ctx:t,width:50,height:0,x:0,y:a-50,background:!1,borderColor:"rgba(196, 198, 201, 1)",shadowColor:"rgba(0, 0, 0, 1)",radius:null},init:r.init,getObjectPosition:r.getUIObjectPosition}];var s,c,l,u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.gameOverScreen=function(e,t,n,a,i){return e||[{name:"Pause text",text:"Game Over",description:"text for game over window",fontSize:"110px Arial",clicked:!1,properties:{ctx:t,width:0,height:90,x:n/2-250,y:a/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 1)",radius:45},init:r.init,getObjectPosition:r.getUIObjectPosition}]}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),i=r(n(8)),o=n(3),s=n(46);t.gameWinScreen=function(e,t,n,r,c,l){return e||[{name:"screen title",text:"YOU WIN ",description:"text for game over window",fontSize:" bold 120px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:0,height:90,x:n/2-250,y:r/2-r/4,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"screen text",text:"Congratulation ",description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:0,height:90,x:n/2-250,y:r/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"score",text:"You score is "+l.points,description:"text for game over window",fontSize:" bold 30px Roboto",clicked:!1,shadowColor:"rgba(255, 255, 255, 1)",properties:{ctx:t,width:0,height:90,x:n/2-250,y:r/2,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(37, 21, 54, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"Save results",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,properties:{ctx:t,width:300,height:50,x:n/2+n/3,y:r/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){s.initResultScreen(this),this.gameUiMenu(this.gameInitData.gameUiPause)},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"to start",description:"back to start screen",fontSize:"25px Roboto",clicked:!1,properties:{ctx:t,width:200,height:50,x:20,y:r/2+150,background:"#251536",isBorder:!1,borderRadius:2,borderColor:"#251536",shadowColor:"rgba(37, 21, 54, 1)",textProperty:{textColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(255, 255, 255, 0)",topPadding:7,rightPadding:100,bottomPadding:10,leftPadding:20},radius:15},action:function(){o.dialogWindow({textData:"restart the game?",rejectText:"cancel",acceptText:"restart"},this.backToStartScreen,null,this,i),this.gameUiMenu(this.gameInitData.gameUiPause)},init:a.init,getObjectPosition:a.getUIObjectPosition}]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uiImage=function(e){var t=e.properties;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},t.uiText=function(e){var t=e.properties;t.ctx.shadowColor=t.shadowColor,t.ctx.shadowBlur=8,t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.levelChangeScreen=function(e,t,n,a,i,o){var s=o.source.levelData;return e||[{name:"Screen name",text:"Warp to the next level",description:"text for game over window",fontSize:"30px Roboto",clicked:!1,properties:{ctx:t,width:0,height:50,x:n/2-250,y:a/3-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, .4)",radius:45},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"wrap head",text:function(){var e=s.description?s.description.name:"";e.split("\n");return""+e}(),description:"text for game over window",fontSize:"70px Roboto",clicked:!1,properties:{ctx:t,width:0,height:50,x:n/2-250,y:a/2-50,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, .4)",radius:45},init:r.init,getObjectPosition:r.getUIObjectPosition},{name:"rwarp description",text:""+(s.description?s.description.description:""),description:"text for game over window",fontSize:"20px Roboto",clicked:!1,properties:{ctx:t,width:0,height:90,x:n/2-250,y:a/2,background:"rgba(255, 255, 255, 1)",isBorder:!1,borderRadius:2,borderColor:"rgba(255, 255, 255, 1)",shadowColor:"rgba(0, 0, 0, .4)",radius:45},init:r.init,getObjectPosition:r.getUIObjectPosition}]}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{c(r.next(e))}catch(e){i(e)}}function s(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}c((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var o=n(7),s=n(3),c=n(6),l=n(32);function u(e){var t=i(e,[]),n={volumeDisplay:document.querySelector("#volume-display"),soundLevel:document.querySelector("#soundLevel"),volumeEffectDisplay:document.querySelector("#volume-effect-display"),soundEffectLevel:document.querySelector("#soundEffect"),soundOnSwitcher:document.querySelector("#soundOn"),fullScreenSwitcher:document.querySelector("#fullScreen")};n.volumeDisplay.innerHTML=t.soundLevel?t.soundLevel:"",n.soundLevel.value=t.soundLevel?t.soundLevel:0,n.volumeEffectDisplay.innerHTML=t.soundEffect?t.soundEffect:"",n.soundEffectLevel.value=t.soundEffect?t.soundEffect:0,n.soundOnSwitcher.checked=t.soundOn,n.fullScreenSwitcher.checked=t.fullScreen,c.fullScreenSwitch({fullscreen:t.fullScreen}),process.env.MAIN_GAME_SOUND_ON=t.soundOn.toString(),process.env.MAIN_GAME_SOUND=t.soundLevel.toString(),process.env.MAIN_GAME_SOUND_EFFECTS=t.soundEffect.toString()}function h(e){if(!e)throw Error("No data to transform");for(var t={soundLevel:null,soundOn:null,soundEffect:null,fullScreen:null},n=0,r=e;n<r.length;n++){var a=r[n];a.name&&a.value&&("on"===a.value?t[a.name]=a.checked:t[a.name]=a.value)}return t}t.gameSettingsMenu=u,t.gameSettingsMenuInit=function(){return r(this,void 0,void 0,(function(){function e(e){var t=e.message,n=document.querySelector("#settings-message");n.innerText=t,s.show(n),s.removeClassList(n,"show-message"),s.addClassList(n,"show-message"),setTimeout((function(){n.innerText="",s.hide(n)}),5e3)}var t,n,i,c,d;return a(this,(function(s){switch(s.label){case 0:return t=document.querySelector("#menu-settings-form"),this,[4,this.showGameInfo()];case 1:return i=s.sent(),c=i.settings,d={soundLevel:c.soundLevel,soundEffect:c.soundEffect,soundOn:c.soundOn,autoshoot:c.autoshoot,fullScreen:c.fullScreen,keyControls:c.keyControls,screenResolution:c.screenResolution,screenVariaton:c.screenVariaton},n=d,u(d),t.addEventListener("change",(function(e){e.preventDefault();var t=h(this);u(t),i.gameData.levelSounds.changeVolume({volume:process.env.MAIN_GAME_SOUND}),i.gameData.levelSounds.turnSoundOff({value:t.soundOn})})),t.addEventListener("submit",(function(t){return r(this,void 0,void 0,(function(){var r,i;return a(this,(function(a){switch(a.label){case 0:return t.preventDefault(),r=h(this),i=function(e){for(var t=e.newData,n=e.settingsData,r=0,a=Object.entries(t);r<a.length;r++){var i=a[r],o=i[0],s=i[1];(o&&s||o&&"boolean"==typeof s)&&(n[o]=s)}return n}({newData:r,settingsData:d}),n=i,[4,o.writeElectronLocalData({fileName:"game-settings.json",data:JSON.stringify(i)})];case 1:return e({message:a.sent().message}),[2]}}))}))})),t.addEventListener("click",(function(t){"cancel-settings"===t.target.dataset.buttonId&&(t.preventDefault(),u(n),i.gameData.levelSounds.changeVolume({volume:process.env.MAIN_GAME_SOUND}),i.gameData.levelSounds.turnSoundOff({value:n.soundOn}),e({message:"Return to previus settings"}))})),l.reloadPage("#settings-reload-btn"),[2]}}))}))}},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(6),i=n(49),o=n(0),s=n(5),c=function(e){var t=r(e,[]);this.x=0,this.y=0,this.texture=__dirname+t.texture,this.speed=t.speed,this.defaultSpeed=t.speed,this.screenData=t.screenData,this.ctx=t.ctx,this.x=t.partOfScreenStatus?-1:window.innerWidth+1,this.y=t.y?t.y:0,this.defaultY=t.y?t.y:0,this.defaultX=t.x?t.x:0,this.img=new Image,this.extraMap=t.extraMap,this.timeToEressLevel=4,this.warpObjects=[],this.timeToExtraMapSeconds=t.timeToExtraMapSeconds,this.timeToExtraMapMinutes=t.timeToExtraMapMinutes,this.partOfScreenStatus=t.partOfScreenStatus?t.partOfScreenStatus:null,this.alwaysMove=!!t.alwaysMove&&t.alwaysMove,this.picturesWidth=t.imageWidth,this.imageHeight=t.imageHeight,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.numberOfVerticalItems=t.numberOfVerticalItems,this.detectFrame=0,this.sx=0,this.sy=0,this.sWidth=t.imageWidth/t.numberOfItems,this.sHeight=t.imageHeight,this.width=t.partOfScreenStatus?window.innerWidth+2:window.innerWidth,this.height=t.height?t.height:window.innerHeight};t.GameBackground=c,c.prototype.updateMap=i.updateMap,c.prototype.warpEffect=a.warpEffect,c.prototype.changePartOfTexture=i.changePartOfTexture,c.prototype.spriteObjectsAnimation=o.spriteObjectsAnimation,c.prototype.moveEnemyes=o.moveEnemyes,c.prototype.placeBackground=o.placeBackground,c.prototype.loadTexture=s.loadTexture},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(33),i=n(0),o=n(103),s=n(5),c=function(e){var t=r(e,[]);this.id=(new Date).getTime(),this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.picturesWidth=t.picturesWidth,this.numberOfItems=t.numberOfItems,this.width=t.width,this.height=t.height,this.texture=__dirname+t.texture,this.img=new Image,this.speed=t.speed,this.defaultSpeed=t.speed,this.status=t.status,this.name=t.name,this.bulletTypeNumber=t.bulletTypeNumber,this.rapidFire=t.rapidFire,this.pointsPerUnit=t.pointsPerUnit,this.healthPoint=t.healthPoint,this.animationSteps=t.animationSteps,this.damage=t.damage,this.guns=t.guns,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=t.objectOwner,this.guns=t.guns,this.explosion=t.explosion,this.numberOfVerticalItems=t.numberOfVerticalItems,this.originalHealthPoint=t.healthPoint,this.isMove=t.isMove,this.isShot=t.isShot,this.verticalSpeed=t.verticalSpeed?t.verticalSpeed:Math.floor(Math.random()*t.speed+1),this.spotDistance=t.isBoss?t.spotDistance:Math.floor(Math.random()*t.spotDistance),this.yFinal=0,this.xFinal=0,this.behavior=t.behavior,this.direction=null,this.isBoss=t.isBoss,this.isSubBoss=!!t.isSubBoss&&t.isSubBoss,this.extraObjects=t.extraObjects,this.collideExplosionAnimation=t.collideExplosionAnimation,this.shotAngle=180,this.defaultAngle=t.defaultAngle?t.defaultAngle:null,this.hitShape=t.hitShape?t.hitShape:null,this.atBackground=!1};t.EnemyObject=c,c.prototype.displayObjectAtScene=i.displayObjectAtScene,c.prototype.moveEnemyes=i.moveEnemyes,c.prototype.shot=i.shot,c.prototype.spriteObjectsAnimation=i.spriteObjectsAnimation,c.prototype.getObjectPosition=o.getObjectPosition,c.prototype.enemyDamageAnimation=i.enemyDamageAnimation,c.prototype.enemyShipLogicVertical=a.enemyShipLogicVertical,c.prototype.enemyVerticalMoveCalculation=a.enemyVerticalMoveCalculation,c.prototype.takeDamage=i.takeDamage,c.prototype.spawnCoin=i.spawnCoin,c.prototype.bulletSpeed=o.bulletSpeed,c.prototype.loadTexture=s.loadTexture},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(5)),r(n(29)),r(n(6)),r(n(25)),r(n(49)),r(n(24))},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(29),i=n(6),o=n(0),s=n(25),c=function(){function e(e){var t=r(e,[]);this.data=t.data,this.points=t.points,this.numberOflife=t.numberOflife,this.maxOfLife=t.numberOflife,this.healthPoint=t.healthPoint+t.armor,this.maxHealth=t.healthPoint+t.armor,this.x=t.x-t.width/2,this.y=t.y-t.height/2,this.xFinal=t.x,this.yFinal=t.y,this.collisionAllow=!0,this.objectOwner="player",this.width=t.width,this.height=t.height,this.xAdj=0,this.speed=t.speed,this.explosion=t.explosion,this.damage=t.damage,this.sx=t.sx,this.sy=t.sy,this.picturesWidth=t.picturesWidth,this.imageHeight=t.imageHeight,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.numberOfVerticalItems=t.numberOfVerticalItems,this.detectFrame=0,this.collideExplosionAnimation=t.collideExplosionAnimation,this.isShot=!0,this.shotAngle=0,this.defaultSpeed=t.data.minSpeed,this.img=new Image,this.journal={defaultData:{numberFlyOfEnemy:0,numberOfGroundEnemy:0},levelTasks:[]}}return e.prototype.getPlayerInformation=function(){return{health:this.healthPoint,maxHealthPoint:this.maxHealth}},e}();t.PlayerShip=c,c.prototype.initPlayerShip=a.initPlayerShip,c.prototype.shipControl=a.shipControl,c.prototype.moveShip=a.moveShip,c.prototype.placeShip=a.placeShip,c.prototype.setContext=a.setContext,c.prototype.getObjectPosition=i.getObjectPosition,c.prototype.takeDamage=o.takeDamage,c.prototype.spriteObjectsAnimation=o.spriteObjectsAnimation,c.prototype.displayObjectAtScene=o.displayObjectAtScene,c.prototype.bulletSpeed=s.bulletSpeed,c.prototype.playerShipTextureChange=a.playerShipTextureChange,c.prototype.addVehicleSpeed=a.addVehicleSpeed},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(25),i=n(6),o=n(0),s=n(5),c=function(e){var t=r(e,[]);this.x=t.x,this.y=t.y,this.bulletType=t.bulletType,this.bulletTexture=t.bulletTexture,this.objectOwner=t.objectOwner,this.bulletSpeed=t.bulletSpeed,this.defaultSpeed=t.speed,this.width=t.width,this.height=t.height,this.damage=t.damage,this.id=(new Date).getTime(),this.objectPresent=!0,this.type=t.type,this.img=new Image,this.texture=__dirname+t.texture,this.sx=t.sx,this.sy=t.sy,this.explosion=t.explosion,this.smoke=t.smoke?t.smoke:null,this.picturesWidth=t.imageWidth,this.imageHeight=t.imageHeight,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.numberOfVerticalItems=t.numberOfVerticalItems,this.detectFrame=0,this.atBackground=!1,this.sWidth=t.sWidth,this.sHeight=t.sHeight,this.sound=t.sound?t.sound:null,this.verticalSpeed=t.verticalSpeed?t.verticalSpeed:0,this.degree=t.degree?t.degree:0,this.objectNameFlag="bullet",this.radius=t.radius?t.radius:null,this.bulletOriginOwner={objectOwner:t.originOwner?t.originOwner.objectOwner:null}};t.BulletConstruct=c,c.prototype.moveBullets=a.moveBullets,c.prototype.getObjectPosition=i.getObjectPosition,c.prototype.takeDamage=o.takeDamage,c.prototype.spriteObjectsAnimation=o.spriteObjectsAnimation,c.prototype.displayObjectAtScene=o.displayObjectAtScene,c.prototype.loadTexture=s.loadTexture},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(0))},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},o=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var s=n(50),c=n(24),l=n(4),u=function(e){function t(t){var n=o(t,[]),r=e.call(this,i({},n))||this;return r.isGrapple=n.isGrapple,r.grapplePower=n.grapplePower,r}return a(t,e),t}(s.SideObject);t.GrappleObject=u,u.prototype.addPlayerLife=c.addPlayerLife,u.prototype.collectCoin=c.collectCoin,u.prototype.collectObjectsToInventory=c.collectObjectsToInventory,u.prototype.groundPlayerCollectable=l.groundPlayerCollectable},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(15),i=function(e){var t=r(e,[]);this.soundObject=new Audio,this.soundUrl=__dirname+t.soundUrl,this.soundLoop=t.soundLoop,this.soundOn=t.soundOn,this.volume=process.env.MAIN_GAME_SOUND,this.defaultUrl=t.defaultUrl?t.defaultUrl:null};t.SoundCreator=i,i.prototype.changeVolume=a.changeVolume,i.prototype.changeTrack=a.changeTrack,i.prototype.initSound=a.initSound,i.prototype.soundPlay=a.soundPlay,i.prototype.soundPause=a.soundPause,i.prototype.makeLoop=a.makeLoop,i.prototype.turnSoundOff=a.turnSoundOff},function(e,t,n){"use strict";var r=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),i=n(5),o=n(10),s=n(0),c=function(e){var t=r(e,[]);this.x=t.x,this.y=t.y,this.defaultMapX=t.defaultMapX,this.defaultMapY=t.defaultMapY,this.xTarget=t.x,this.yTarget=t.y,this.mapSizeHorizontal=t.mapSizeHorizontal?t.mapSizeHorizontal:0,this.mapSizeVertical=t.mapSizeVertical?t.mapSizeVertical:0,this.xMove=t.x,this.yMove=t.y,this.width=parseInt(t.width),this.height=parseInt(t.height),this.details=t.details,this.degree=t.details.degree?t.details.degree:0,this.texture=process.env.HOST+t.details.texture,this.img=new Image,this.img.src=process.env.HOST+t.details.texture,this.backgroundTextureImg=new Image,this.backgroundImageLink=!!t.backgroundTexture&&process.env.HOST+t.backgroundTexture.texture,this.backgroundTextureImg.src=t.backgroundTexture?process.env.HOST+t.backgroundTexture.texture:"#",this.sx=0,this.sy=0,this.backgroundSx=0,this.backgroundSy=0,this.sWidth=t.details.sWidth?t.details.sWidth:t.details.imageWidth,this.sHeight=t.details.sHeight?t.details.sHeight:t.details.imageHeight,this.verticalSpeed=0,this.horizontalSpeed=0,this.defaultSpeed=t.speed,this.index=t.index,this.backgroundTexture=t.backgroundTexture?t.backgroundTexture:null,this.blockRelativeXPos=t.blockRelativeXPos?parseInt(t.blockRelativeXPos):0,this.blockRelativeYPos=t.blockRelativeYPos?parseInt(t.blockRelativeYPos):0,this.detectFrame=0,this.animationSteps=t.details.animationSteps?t.details.animationSteps:0,this.numberOfVerticalItems=t.details.numberOfVerticalItems?t.details.numberOfVerticalItems:0,this.numberOfItems=t.details.numberOfItems?t.details.numberOfItems:0,this.picturesWidth=t.details.picturesWidth?t.details.picturesWidth:0,this.explosionAnimation=t.details.explosionAnimation?t.details.explosionAnimation:null,this.defaultHealth=t.details.healthPoint?t.details.healthPoint:null};t.DynamicBlockConstructor=c,c.prototype.displayObjectAtScene=a.displayObjectAtScene,c.prototype.loadTexture=i.loadTexture,c.prototype.elevatorMove=o.elevatorMove,c.prototype.spriteObjectsAnimation=s.spriteObjectsAnimation,c.prototype.takeDamage=a.takeDamage,c.prototype.solidColorFill=s.solidColorFill},function(e,t,n){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},o=this&&this.__rest||function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n};Object.defineProperty(t,"__esModule",{value:!0});var s=n(51),c=n(0),l=n(16),u=n(16),h=n(5),d=function(e){function t(t){var n=o(t,[]),r=e.call(this,i({},n))||this;return r.objectOwner="enemy_spawner"===n.details.type||"hidden_enemy_spawner"===n.details.type?"groundEnemy":"groundNPC",r.detectRange=n.detectRange,r.behavior=n.details.behavior?n.details.behavior:n.behavior[Math.floor(Math.random()*n.behavior.length)],r.currentBehavior=r.behavior,r.defaultSpeed=n.speed,r.unitRandomize=Math.floor(50*Math.random()+10),r.changeModeRandomizer=10,r.jumpSpeed=n.jumpSpeed,r.details=n.details,r.shotProbability=n.shotProbability,r.objectPresent=!0,r.isJump=!1,r.isJumpDown=!1,r.extraObjects=n.extraObjects?n.extraObjects:null,r.damage=n.damage?n.damage:0,r.explosionAnimation=n.explosionAnimation?n.explosionAnimation:null,r.pointsPerUnit=n.pointsPerUnit?n.pointsPerUnit:null,r.idStartDialog=0,r}return a(t,e),t}(s.DynamicUserConstructor);t.DynamicEnemyConstructor=d,d.prototype.groundEnemyMove=l.groundEnemyMove,d.prototype.detectPlayer=u.detectPlayer,d.prototype.findAngleToShip=h.findAngleToShip,d.prototype.groundEnemyDecided=u.groundEnemyDecided,d.prototype.groundEnemyPathFinder=u.groundEnemyPathFinder,d.prototype.groundEnemyShot=u.groundEnemyShot,d.prototype.takeDamage=c.takeDamage,d.prototype.groundPlayerJump=u.groundPlayerJump,d.prototype.spawnCoin=c.spawnCoin,d.prototype.enemyDetectNpc=u.enemyDetectNpc,d.prototype.jumpDown=u.jumpDown},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initAppGlobalVariable=function(){process.env.MAX_NUMBER_OF_EXPLOSION="20",process.env.MAX_NUMBER_OF_BULLETS="150",process.env.SAVE_DATA_FILE="game-saves",process.env.LEVEL_DATA_URL="api/level-data",process.env.LEVEL_OBJECT_URL="api/level-objects",process.env.LEVEL_GRAPPLE_OBJECTS_URL="api/grapple-objects",process.env.GAME_SETTINGS_URL="api/game-settings",process.env.USER_SHIP_URL="api/user-ship",process.env.ENEMY_SHIP_URL="api/enemy-ship",process.env.DYNAMIC_LEVEL_BLOCKS="level-creator/complete-maps",process.env.GROUND_CHARACTERS_URL="api/get-ground-characters",process.env.DYNAMIC_LEVEL_ENEMY_COLLECTION_URL="api/get-constructor-ground-enemy",process.env.GROUND_CHARACTERS_INVENTORY="false",process.env.GROUND_ACTIVE_BLOCK_IN_RANGE="false",process.env.GROUND_NPC_DIALOG_ACTIVE="false",process.env.GROUND_PLAYER_ALLOW_MOVE="false",process.env.SHOP_GUNS_URL="api/shop/guns",process.env.SHOP_SHIPYARD_URL="api/shop/shipyard",process.env.SHOP_STORE_ITEMS="api/shop/store-items",process.env.APP_SAVE_DIRECTORY="/appData/saves",process.env.APP_SCREENSHOTS_DIRECTORY="/appData/saves/screenshots",process.env.MAIN_GAME_SOUND="",process.env.MAIN_GAME_SOUND_EFFECTS="",process.env.MAIN_GAME_SOUND_ON="",process.env.SHOP_ACTIVE_WINDOW="false",process.env.SHOP_SHIPYARD_ACTIVE_WINDOW="false",process.env.SHOP_SALE_WINDOW="false",process.env.SHOP_STORE_WINDOW="false",process.env.BOSS_LOAD_AT_LEVEL="false",process.env.SUB_LOAD_AT_LEVEL="false",process.env.OVERWRITE_SAVE="false",process.env.NUMBER_OF_SAVES="0",process.env.GROUND_PLAYER_STAIRS_GROUND_TOUCH="false",process.env.HOST=__dirname+"/",console.log("production mode check HOST")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZW1pZXMvYW5pbWF0aW9uSGl0Qm94TW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZnNcIiIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwTWVudS9hcHBNZW51LnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZHluYW1pY0xldmVscy9wbGF5ZXJVbml0TW9kdWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZ2FtZVNpZGVPYmplY3RzTW9kdWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZW5naW5lTW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL3NlcnZlclJlcXVlc3RNb2R1bGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25zdHJ1Y3RvcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcE1lbnUvcGFnZXNCdWlsZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL3Nob3AvZ2FtZVNob3BNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2dhbWVVaU1vZGVscy91aU1vZGVsTWV0aG9kcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL2dhbWVNb2R1bGVzL3NhdGFydEdhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZlci9nYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9zb3VuZE1vZHVsZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9keW5hbWljTGV2ZWxzL2R5bmFtaWNMZXZlbEVuZW15TW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvc2hvcC9nYW1lSW52ZW50b3J5TW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZXF1aXJlKCdlbGVjdHJvbicpXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZWN0cm9uLWpzb24tc3RvcmFnZS9saWIvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhc3NlcnRcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1dGlsXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9nYW1lTW9kdWxlcy9jaGFuZ2VMZXZlbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvZGlzcGxheU1vZHVsZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9nYW1lR3JhcHBsZU9iamVjdHNNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9idWxsZXRzTW9kdWxlLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljRGlhbG9nLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZHluYW1pY0xldmVscy9qb3VybmFsTW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL3BsYXllclNoaXBNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmltYXRjaC9taW5pbWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtaXMtYWJzb2x1dGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2xvYWRTY3JlZW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FpL3JlZ3VsYXJFbmVteUFpTW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvc2hvcC9nYW1lSGFuZ2FyTW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvc2hvcC9zaG9wRXZlbnRzL3Nob3BFdmVudHNNb2R1bGVzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2IvZ2xvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnMucmVhbHBhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZXZlbnRzXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2IvY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93cmFwcHkvd3JhcHB5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vbmNlL29uY2UuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiY29uc3RhbnRzXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZ25hbC1leGl0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHBNZW51L2dhbWVSZXN1bHRNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL3Nob3AvZ2FtZVNob3BTaGlweWFyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL2R5bmFtaWNMZXZlbHMvbWluaW1hcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL2JhY2tncm91bmRNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy9nYW1lU2lkZU9iamVjdENvbnN0cnVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25zdHJ1Y3RvcnMvZHluYW1pY1VzZXJDb25zdHJ1Y3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwTWVudS9zYXZlTG9hZE1lbnUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VuZ2luZS9nYW1lTW9kdWxlcy9zYXZlX2xvYWQvc2F2ZUdhbWVNb2R1bGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvZ2FtZU1vZHVsZXMvc2F2ZV9sb2FkL2xvYWRHYW1lRGF0YS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc2Fzcy9tYWluLnNhc3M/MTliMCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vc2Fzcy9tYWluLnNhc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5naW5lL2dhbWVNb2R1bGVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2ZXIvc3RhbmRBbG9uZVdvcmtldHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jL2Rpc3QvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JpbXJhZi9yaW1yYWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZzLnJlYWxwYXRoL29sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnJhY2UtZXhwYW5zaW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25jYXQtbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWxhbmNlZC1tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2Ivc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5mbGlnaHQvaW5mbGlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21rZGlycC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3JpdGUtZmlsZS1hdG9taWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYWNlZnVsLWZzL2dyYWNlZnVsLWZzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFjZWZ1bC1mcy9wb2x5ZmlsbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYWNlZnVsLWZzL2xlZ2FjeS1zdHJlYW1zLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInN0cmVhbVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFjZWZ1bC1mcy9jbG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW11cm11cmhhc2gvaW11cm11cmhhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZ25hbC1leGl0L3NpZ25hbHMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwid29ya2VyX3RocmVhZHNcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlY3Ryb24tanNvbi1zdG9yYWdlL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlY3Ryb24tanNvbi1zdG9yYWdlL2xpYi9sb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2NrZmlsZS9sb2NrZmlsZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJvc1wiIiwid2VicGFjazovLy8uL3NyYy9hcHBNZW51L3VzZXJBdmF0YXJNb2R1bGVzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZXJnZS1pbWFnZXMvZGlzdC9pbmRleC5lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvd2luZG93L2Rpc3BsYXlVaVdpbmRvd01vZHVsZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy9tYWluR2FtZUNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvc2hvcC9zaG9wRXZlbnRzL3Nob3BBY3Rpdml0eURldGVjdG9yTW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvZ2FtZVVpTW9kdWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvZ2FtZVVpTW9kZWxzL2dhbWVVaUxvYWRNZW51LnRzIiwid2VicGFjazovLy8uL3NyYy91aS9nYW1lVWlNb2RlbHMvZ2FtZVVpU2V0dGluZ3NNZW51LnRzIiwid2VicGFjazovLy8uL3NyYy91aS9nYW1lVWlNb2RlbHMvZ2FtZVBhdXNlU2NyZWVuLnRzIiwid2VicGFjazovLy8uL3NyYy91aS9nYW1lVWlNb2RlbHMvZ2FtZVN0YXRzU2NyZWVuLnRzIiwid2VicGFjazovLy8uL3NyYy91aS9nYW1lVWlNb2RlbHMvZ2FtZUdhbWVPdmVyU2NyZWVuLnRzIiwid2VicGFjazovLy8uL3NyYy91aS9nYW1lVWlNb2RlbHMvZ2FtZVdpblNjcmVlbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9lbGVtZW50cy91aUVsZW1lbnRNb2R1bGVzLnRzIiwid2VicGFjazovLy8uL3NyYy91aS9nYW1lVWlNb2RlbHMvbGV2ZWxDaGFuZ2VTY3JlZW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcE1lbnUvbWVudVNldHRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25zdHJ1Y3RvcnMvbGV2ZWxDb25zdHJ1Y3RvcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy9lbmVteUNvbnN0cnVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9lbmdpbmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy91c2VyQ29uc3RydWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy9idWxsZXRDb25zdHJ1Y3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW5lbWllcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RydWN0b3JzL2dhbWVHcmFwcGxlT2JqZWN0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uc3RydWN0b3JzL3NvdW5kQ29uc3RydWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy9keW5hbWljTWFwQmxvY2tzQ29uc3RydWN0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0cnVjdG9ycy9keW5hbWljRW5lbXlDb25zdHJ1Y3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL2dsb2JhbFZhcmlhYmxlcy50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fYXdhaXRlciIsInRoaXMiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsIl9faW1wb3J0U3RhciIsIm1vZCIsImsiLCJjb25zdHJ1Y3RvcnMiLCJkaXNwbGF5TW9kdWxlc18xIiwiZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEiLCJleHBsb3Npb25GaXJlIiwiZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXzEiLCJzb3VuZE1vZHVsZXNfMSIsImdhbWVTaG9wTW9kdWxlXzEiLCJlbmdpbmVNb2R1bGVzXzEiLCJkcmF3UmVjdGFuZ2xlIiwiX2EiLCJjdHgiLCJ4Iiwid2lkdGgiLCJoZWlnaHQiLCJjb2xvciIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZmlsbCIsImJ1bGxldHNDcmVhdGVNb2R1bGUiLCJpdGVtIiwibWFpbkdhbWVPYmplY3QiLCJvd25lciIsIkJ1bGxldENvbnN0cnVjdCIsIlNvdW5kQ3JlYXRvciIsImJ1bGxldEFycmF5IiwiYW5nbGUiLCJkZWZhdWx0QW5nbGUiLCJnYW1lUmFuZG9taXplciIsIm1heCIsIm1pbiIsInNob3RBbmdsZSIsImJ1bGxldFNldHRpbmdzIiwiYnVsbGV0U3BlZWQiLCJzcGVlZCIsInRvdGFsU3BlZWQiLCJNYXRoIiwic2lnbiIsImhvcml6b250YWxTcGVlZCIsImZpcmVQb3NpdGlvblgiLCJidWxsZXQiLCJmaXJlUG9zaXRpb24iLCJidWxsZXRUeXBlIiwiYnVsbGV0VGV4dHVyZSIsIm9iamVjdE93bmVyIiwieEFkaiIsImRhbWFnZSIsInR5cGUiLCJ0ZXh0dXJlIiwic3giLCJzeSIsInNXaWR0aCIsInNIZWlnaHQiLCJleHBsb3Npb24iLCJleHBsb3Npb25BbmltYXRpb24iLCJzbW9rZSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsImFuaW1hdGlvblN0ZXBzIiwibnVtYmVyT2ZJdGVtcyIsIm51bWJlck9mVmVydGljYWxJdGVtcyIsInNvdW5kIiwidmVydGljYWxTcGVlZCIsImRlZ3JlZSIsInJhZGl1cyIsIm9yaWdpbk93bmVyIiwic291bmRQcm9wcyIsInNvdW5kVXJsIiwibGV2ZWxTb3VuZCIsInNvdW5kTG9vcCIsImxvYWRUZXh0dXJlIiwic291bmRPYmplY3QiLCJpbml0U291bmRPYmplY3QiLCJpbWciLCJvbmxvYWQiLCJnYW1lSW5pdERhdGEiLCJjb25jYXQiLCJidWxsZXRDb2xsaXNpb24iLCJoaXRPYmplY3QiLCJvYmplY3RQcmVzZW50IiwidGFyZ2V0RGF0YSIsIlNpZGVPYmplY3QiLCJncm91bmRCdWxsZXRDb2xsaXNpb24iLCJidWxsZXRFeHBsb3Npb24iLCJkeW5hbWljTGV2ZWxzQWN0aXZlIiwiZGV0YWlscyIsImNvbGxpc2lvbiIsImN1cnJlbnRCZWhhdmlvciIsImFuZ2xlRmluZGVyXzEiLCJyb2xlIiwicGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCIsInBsYXllckluUmFuZ2UiLCJ0YXJnZXRBbmdsZSIsImdyb3VuZExldmVsQmFja2dyb3VuZEJ1bGxldERldGVjdCIsIkdyYXBwbGVPYmplY3QiLCJhdEJhY2tncm91bmQiLCJfaSIsImFsbEJsb2Nrc18xIiwiZHluYW1pY0xldmVsTWFwQmxvY2tzIiwiYmFja2dyb3VuZCIsIm9iamVjdE5hbWVGbGFnIiwib2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0IiwidGFyZ2V0IiwiZ3JvdW5kVW5pdHNEYW1hZ2UiLCJsZXZlbERhdGEiLCJnZXRMZXZlbFVzZXJEYXRhIiwiaXNEZXN0cm95IiwiaGVhbHRoUG9pbnQiLCJvYmplY3RXaXRoRmlyZSIsImFzc2lnbiIsImJ1bGxldE9yaWdpbk93bmVyIiwiZ2FtZVdpbiIsImNvbGxlY3RQb2ludHMiLCJwb2ludHNQZXJVbml0IiwiZ2FtZU5wY1VuaXRzQ291bnRpbmciLCJzcGF3bkNvaW4iLCJtYWluUGxheWVyRGF0YSIsInNvdXJjZSIsInBsYXllck9iamVjdCIsIm51bWJlck9mbGlmZSIsImRlZmF1bHRIZWFsdGgiLCJnYW1lT3ZlcldpbmRvdyIsImdhbWVPdmVyIiwibWFwU291bmRDaGFuZ2VyIiwic291bmRTdGF0dXMiLCJzZXRUaW1lb3V0IiwiYmFja1RvU3RhcnRTY3JlZW4iLCJncmFwcGxlT2JqZWN0Q29sbGlzaW9uIiwiZ3JhcHBsZU9iamVjdE9uU2NyZWVuIiwiZ3JhcHBsZVBvd2VyIiwibWV0aG9kTmFtZSIsImFsbEdhbWVTaWRlT2JqZWN0cyIsInBsYXllclNoaXBEYXRhIiwiZW50ZXJUb1RoZVNob3BIYW5nYXIiLCJzaG9wQWN0aXZlIiwidHJhZGVTaGlwVGltZVRvVW5kb2NrIiwiZW50ZXJUb1RoZVNob3BEaWFsb2ciLCJ0cmFkZVByb3BlcnR5ZXMiLCJwbGF5ZXJEYW1hZ2UiLCJjb2xsaXNpb25BbGxvdyIsInVuaXREYW1hZ2UiLCJkYXRhIiwibGlmZSIsIm1heEhlYWx0aCIsIm9iamVjdEJsb2NrUmVsYXRpdmVYUG9zIiwiYmxvY2tSZWxhdGl2ZVhQb3MiLCJvYmplY3RCbG9ja1JlbGF0aXZlWVBvcyIsImJsb2NrUmVsYXRpdmVZUG9zIiwidGFyZ2V0QmxvY2tSZWxhdGl2ZVhQb3MiLCJ0YXJnZXRCbG9ja1JlbGF0aXZlWVBvcyIsInhNaW4iLCJ5TWluIiwieE1heCIsInlNYXgiLCJ4MiIsInkyIiwiZGlzdGFuY2UiLCJzcXJ0Iiwib3JpZ2luT2JqZWN0IiwicmVzWSIsInJlc1giLCJkaXNwbGF5T2JqZWN0QXRTY2VuZSIsInNlY29uZFRleHR1cmUiLCJ3aW5kb3ciLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJjdHhBY3Rpb25GaWVsZCIsInNhdmUiLCJ0cmFuc2xhdGVJbmRleEFkanVzdFgiLCJ0cmFuc2xhdGVJbmRleEFkanVzdFkiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJQSSIsImJhY2tncm91bmRUZXh0dXJlIiwiY3JlYXRlSW1hZ2UiLCJpbWFnZVJlbmRlciIsInBhcnNlSW50IiwicmVzdG9yZSIsInNvbGlkQ29sb3JGaWxsIiwibWFwQ29sb3IiLCJkaXNwbGF5T2JqZWN0TGlmZVNpZ24iLCJ0YXJnZXRPYmplY3QiLCJsaWZlU2lnbldpZHRoIiwibGlmZVdpZHRoIiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0IiwiZHJhd0ZyYW1lIiwicGxhY2VCYWNrZ3JvdW5kIiwibW92ZUVuZW15ZXMiLCJtb3ZlWCIsIm1vdmVZIiwic3ByaXRlT2JqZWN0c0FuaW1hdGlvbiIsInN0YXRlIiwiYmxvY2tUZXh0dXJlUG9zaXRpb25YIiwiZGV0ZWN0RnJhbWUiLCJiYWNrZ3JvdW5kU3giLCJyb3VuZCIsInBpY3R1cmVzV2lkdGgiLCJlbmVteURhbWFnZUFuaW1hdGlvbiIsImRhbWFnZUFuaW1hdGlvblBvaW50XzEiLCJvcmlnaW5hbEhlYWx0aFBvaW50IiwiZGFtYWdlUG9pbnQiLCJBcnJheSIsIm1hcCIsImluZGV4Iiwic29ydCIsImEiLCJiIiwicmV2ZXJzZSIsInNob3QiLCJnYW1lUGF1c2UiLCJpc1Nob3QiLCJndW5zXzEiLCJndW5zIiwiZmlyZVJlcGVhZCIsInRha2VEYW1hZ2UiLCJnYW1lU2Vjb25kcyIsImdyb3VuZEJ1bGxldFN0b3AiLCJiYWNrZ3JvdW5kVGV4dHVyZURldGVjdCIsImdhbWVFeHRyYVNlY29uZHMiLCJpc0Jvc3MiLCJsZXZlbENoYW5nZSIsImJvc3NFbmVteURlc3RydWN0aW9uIiwiZXh0cmFPYmplY3RzIiwiY29pbiIsImxvYWRHcmFiYmxlVG9TaWRlT2JqZWN0IiwiZXhwbG9zaW9uRGFtYWdlIiwiZW5lbXlDbG9zZXN0TGlzdCIsImVuZW15Q2xvc2VzdExpc3RfMSIsImVuZW15IiwiX2IiLCJhbGxHYW1lRW5lbWllcyIsImZpbHRlciIsImRpc3RhbmNlWG1heCIsImRpc3RhbmNlWG1pbiIsInlSYW5nZSIsImhpdERldGVjdGlvbiIsIm9iamVjdDEiLCJvYmplY3RzQXJyIiwib2JqZWN0c0Fycl8xIiwib2JqZWN0MiIsIm9iamVjdDFQb3NpdGlvbiIsImdldE9iamVjdFBvc2l0aW9uIiwicmVxdWlyZSIsInBhZ2VzQnVpbGRlcl8xIiwic2VydmVyUmVxdWVzdE1vZHVsZXNfMSIsImdhbWVSZXN1bHRNb2R1bGVfMSIsInNhdGFydEdhbWVfMSIsInNob3ciLCJlbCIsInN0eWxlIiwiZGlzcGxheSIsImhpZGUiLCJ0b2dnbGVyIiwiYWRkQ2xhc3NMaXN0IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ2xhc3NMaXN0IiwicmVtb3ZlIiwiYXBwTWVudSIsImdhbWVPYmplY3QiLCJkaWFsb2dXaW5kb3ciLCJzZWxlY3RlZE1lbnVJdGVtIiwibmF2aWdhdGlvbiIsInNob3dTZWxlY3RlZEl0ZW0iLCJtZW51IiwiY29uc3RhbnRzIiwic2VjdGlvblRlbXBsYXRlIiwiY29udGVudENvbnRhaW5lciIsInNpZGVNZW51V3JhcHBlciIsImltcG9ydFNlY3Rpb25zVG9ET00iLCJsaW5rcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJsaW5rIiwidGVtcGxhdGUiLCJpbXBvcnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xvbmUiLCJpbXBvcnROb2RlIiwiY29udGVudCIsImFwcGVuZENoaWxkIiwic2V0TWVudU9uQ2xpY2tFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImRhdGFzZXQiLCJzZWN0aW9uIiwiaGlkZUFsbFNlY3Rpb25zIiwic2hvd1NlY3Rpb24iLCJwYXJlbnRFbGVtZW50IiwidGFnTmFtZSIsIm1lbnVBcmVhIiwic2xpY2UiLCJtZW51QXJlYV8xIiwiYnV0dG9uSWQiLCJtZW51U2VsZWN0aW9uIiwic2hvd1Jlc3VsdFNjcmVlbiIsInRleHREYXRhIiwicmVqZWN0VGV4dCIsImFjY2VwdFRleHQiLCJleGl0VGhlR2FtZSIsInNlY3Rpb25JZCIsIm1lbnVBcmVhXzIiLCJwYWdlQnVpbGRlciIsImdldExvY2FsRGF0YSIsImZpbGVOYW1lIiwic2VjdGlvbk5vZGVzXzEiLCJtZW51QmFja2dyb3VuZEFyZWFfMSIsIm1lbnVBcmVhXzMiLCJpbml0IiwiaGlkZVNob3dNZW51IiwibWFpbk1lbnUiLCJuYXZpZ2F0aW9uTWVudSIsImdhbWVTdGF0dXMiLCJnYW1lVWlQYXVzZSIsImNhbGxiYWNrIiwicmVzdCIsImFyZ3VtZW50cyIsIndpbmRvd0VsZW1lbnQiLCJkaWFsb2dCb2R5IiwiZGlhbG9nQnV0dG9uRXZlbnQiLCJtZW51QXJlYV80IiwiaW5uZXJIVE1MIiwiZGlhbG9nRGF0YSIsImNyZWF0ZUVsZW1lbnRzIiwic3R5bGVDbGFzcyIsImlubGluZVN0eWxlIiwicGljdHVyZVVybCIsImxpbmtVcmwiLCJ0ZXh0IiwiaW5uZXJDb250ZW50IiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUxIiwiYXR0cmlidXRlMSIsImRpYWxvZ0RhdGFfMSIsImRpYWxvZ0J1dHRvbkFyZWEiLCJfX2Fzc2lnbiIsImdhbWVEYXRhUmVxdWVzdHNTZXJ2aWNlc01vZHVsZV8xIiwiYXBwTWVudV8xIiwiZHluYW1pY0RpYWxvZ18xIiwib3BlbkludmVudG9yeSIsImludmVudG9yeVdyYXBwZXIiLCJwcm9jZXNzIiwiZW52IiwiR1JPVU5EX0NIQVJBQ1RFUlNfSU5WRU5UT1JZIiwiaGlkZUludmVudG9yeSIsImxvYWRQbGF5ZXJDaGFyYWN0ZXIiLCJpdGVtcyIsInBsYXllckludmVudG9yeV8xIiwicGxheWVySW52ZW50b3J5Iiwib2JqZWN0UGljdHVyZSIsImlubmVyRGF0YSIsInNwbGl0Iiwiam9pbiIsInJ1bkFuaW1hdGlvbiIsInJlbmV3QW5pbWF0aW9uIiwibGF5ZXJEZWZhdWx0U2l6ZSIsInNob3RBbmdsZUFuaW1hdGlvbiIsImFuaW1hdGlvbnMiLCJydW4iLCJwbGF5ZXJEaXJlY3Rpb25WZXJ0aWNhbCIsIm9uTGVhZGVyIiwic3JjIiwiX19kaXJuYW1lIiwiaW5uZXJUZXh0dXJlIiwicmVwbGFjZXJPZlZhbHVlIiwib3JpZ2luYWxPYmplY3QiLCJkYXRhVG9SZXBsYWNlIiwic2l0aW5nQW5pbWF0aW9uIiwic2l0IiwibGVhZGVyQW5pbWF0aW9uIiwibGVhZGVyIiwic3RhbmRpbmdBbmltYXRpb24iLCJzdGFuZCIsImp1bXBBbmltYXRpb24iLCJqdW1wIiwiZW50cmllcyIsIl9jIiwiZ3JvdW5kUGxheWVyTWludXNMaWZlIiwicG9zaXRpb25Ub1NwYXduZXIiLCJhbGxCbG9ja3MiLCJhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzIiwibWFwQmFja2dyb3VuZE9iamVjdHMiLCJhbGxHYW1lc09iamVjdCIsInNwYXduUG9pbnQiLCJncm91bmRQbGF5ZXIiLCJnYW1lRGF0YSIsImdyb3VuZFBsYXllckNoYXJhY3RlciIsIm5lYXJlc3RTcGF3blBvaW50IiwibmVhcmVzdEJsb2NrWCIsIkluZmluaXR5IiwibmVhcmVzdEJsb2NrWSIsImFsbFNwYXduZXIiLCJvYmoiLCJhY3RpdmUiLCJhbGxTcGF3bmVyXzEiLCJzcGF3bmVyIiwicG9zWCIsInBvc1kiLCJmaW5kIiwiZmluZFNwYXduUG9pbnQiLCJwbGF5ZXJDaGFuZ2VNYXBQb3NpdGlvbiIsIm5ld1NwYXduUG9pbnQiLCJhbGxHYW1lc09iamVjdF8xIiwiZGVmYXVsdFkiLCJhbGxFbmVteSIsImR5bmFtaWNMZXZlbEVuZW15IiwiYWxsR3JvdW5kR2FtZUJ1bGxldHMiLCJ4UmFuZ2VDb21wZW5zYXRpb24iLCJ5UmFuZ2VDb21wZW5zYXRpb24iLCJibG9jayIsImFsbEdhbWVzT2JqZWN0XzIiLCJhbGxFbmVteV8xIiwiaXNSdW4iLCJncm91bmRUb3VjaCIsImluaXRHcm91bmRQbGF5ZXIiLCJEeW5hbWljVXNlckNvbnN0cnVjdG9yIiwiY2hhcmFjdGVyIiwibG9hZEdyb3VuZFBsYXllciIsInNob3dHcm91bmRQbGF5ZXJJbnZlbnRvcnkiLCJpbnZlbnRvcnkiLCJvYmplY3RUb1JlbmRlciIsImFsbElubmVyT2JqZWN0IiwibG9hZEl0ZW1zVG9Hcm91bmRJbnZlbnRvcnkiLCJwbGF5ZXJBbmltYXRpb24iLCJjaGFuZ2VBbmltYXRpb25QYXJhbWV0ZXJzIiwiZGVmYXVsdFdpZHRoIiwiZGVmYXVsdEhlaWdodCIsImltYWdlSGVpZ2h0RGVmYXVsdCIsImltYWdlV2lkdGhEZWZhdWx0IiwiYW5pbWF0aW9uTmFtZVRvcCIsImFuaW1hdGlvbk5hbWVCb3R0b20iLCJhbmltYXRpb25OYW1lU3RhbmQiLCJzaG90U3RhdGUiLCJvbkVsZXZhdG9yIiwiZGVhdGgiLCJsZWFkZXJDbGltYiIsImNoYW5nZVZlcnRpY2FsQW5pbWF0aW9uUGljdHVyZSIsImJhY2tUb1RoZU1hcEFnYWluIiwicGxheWVyIiwiZ3JvdW5kUGxheWVyU2hvdCIsImFuZ2xlRmluZGVyIiwiY2xpZW50WCIsImNsaWVudFkiLCJncm91bmRQbGF5ZXJDb2xsZWN0YWJsZSIsInNhdmVPYmplY3RUb0JhY2tQYWNrIiwiZ3JhcHBsZUl0ZW0iLCJwcmV2aWV3UGljdHVyZSIsImdyb3VuZFBsYXllckNoZWNrcG9pbnRBY3RpdmF0ZSIsImFsbEJsb2Nrc18yIiwiYmxvY2tfMSIsInJlZ3VsYXJFbmVteUFpTW9kdWxlc18xIiwiYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xIiwiZmluZENsb3NlT2JqZWN0IiwiY2xvc2VzdFVuaXQiLCJjbG9zZXN0VW5pdFhyYW5nZSIsImNsb3Nlc3RVbml0WXJhbmdlIiwiYWxsR2FtZUVuZW1pZXNfMSIsInNoaXAiLCJkaXN0YW5jZVgiLCJtaW54IiwibWF4eCIsIm1pbnkiLCJtYXh5IiwiZmluZEFuZ2xlVG9TaGlwIiwic2VhcmNoRXhwbG9zaW9uT2JqZWN0IiwiTUFYX05VTUJFUl9PRl9FWFBMT1NJT04iLCJmbGFtZVNwZWVkIiwiZXhwbG9zaW9uRGF0YSIsInNpZGVPYmplY3QiLCJmaXJlQW5pbWF0aW9uRW5kZWQiLCJhbmltYXRpb25TdGF0ZSIsIm1hcE9iamVjdE1vdmUiLCJtYXBSYW5kb21PYmplY3RTcGF3biIsImxldmVsT2JqZWN0cyIsIm1hcE9iamVjdFNwYXduZXIiLCJzcGF3blByb2JhYmlsaXR5IiwiY29udGV4dCIsImxldmVsTWludXRlcyIsImxldmVsU2Vjb25kcyIsImxldmVsT2JqZWN0UHJvcHMiLCJ5UG9zaXRpb24iLCJwcm9iYWJpbGl0eSIsImV4dHJhT2JqZWN0T2JqZWN0c0RhdGEiLCJzaWRlT2JqZWN0XzEiLCJfdGhpcyIsInNob3dHYW1lSW5mbyIsIm9iamVjdFByb2JhYmlsaXR5IiwibGV2ZWxEZXRhaWxzIiwib2JqZWN0TWluVGltZVNwYXduIiwiZ2V0U2NyZWVuU2l6ZSIsInNwYXduRGV0YWlscyIsInBvc2l0aW9uIiwidHJhZGVwb3N0SW5SYW5nZSIsIm1pbnV0ZXMiLCJ0aW1pbmciLCJnYXRlUHJlc2VudCIsImxvYWRFeHRyYU9iamVjdCIsImFic29sdXRlTGluayIsInNraW5OYW1lIiwiaXNCYWNrZ3JvdW5kIiwiY29sbGlkZUV4cGxvc2lvbkFuaW1hdGlvbiIsInNpZGUiLCJyYXBpZEZpcmUiLCJ0aW1pbmdNaW51dGVzUGxhY2VkIiwidGltaW5nU2Vjb25kc1BsYWNlZCIsImdldFNlY29uZE1lYXN1cmUiLCJzaWRlT2JqZWN0U2hvdCIsIl9fc3ByZWFkQXJyYXlzIiwiaWwiLCJqIiwiamwiLCJfX2ltcG9ydERlZmF1bHQiLCJmcyIsInBhdGgiLCJtZXJnZV9pbWFnZXNfMSIsImR5bmFtaWNMZXZlbE1vZHVsZV8xIiwiaXBjUmVuZGVyZXIiLCJyZW1vdGUiLCJkZXN0cm95QWxFbmVteSIsImVuZW15ZXMiLCJlbmVteWVzXzEiLCJnZXRJbWFnZUZyb21GaWVsZHMiLCJzYXZlR2FtZURhdGEiLCJzY3JlZW5zaG90IiwiZ2FtZUZpZWxkIiwiZ2FtZVRleHQiLCJkaXIiLCJfZCIsIl9lIiwiX2YiLCJ0b0RhdGFVUkwiLCJnYW1lQWN0aW9uRmllbGQiLCJnYW1lRGlhbG9nRmllbGQiLCJBUFBfU0NSRUVOU0hPVFNfRElSRUNUT1JZIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsInNhdmVQaWN0dXJlcyIsInJlcGxhY2UiLCJwaWN0dXJlXzY0IiwiZmlsZW5hbWUiLCJkZWZhdWx0IiwicGljIiwiRGF0ZSIsImdldFRpbWUiLCJyZWR1Y2VQcmV2aWV3SW1hZ2VTaXplIiwicGljVXJsIiwid3JpdGVGaWxlIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJJbWFnZSIsImRyYXdJbWFnZSIsInBpY3R1cmVCYXNlVXJsIiwidXNlclNoaXBKb3VybmFsIiwiam91cm5hbCIsImRlZmF1bHREYXRhIiwibnVtYmVyT2ZHcm91bmRFbmVteSIsIm51bWJlckZseU9mRW5lbXkiLCJpbml0RmllbGQiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsImdhbWVVSUZpZWxkIiwiRXJyb3IiLCJnYW1lRmllbGRfMSIsInNjcmVlbl8xIiwic2V0R2FtZUZpZWxkcyIsImNyZWF0ZUNvbnRleHQiLCJpbml0UGxheWVyU2hpcCIsIndhcnBFZmZlY3QiLCJnYW1lV2FycE9iamVjdHMiLCJ3YXJwT2JqZWN0cyIsImxldmVDaGFuZ2VTdGF0dXMiLCJ0aW1lVG9FcmVzc0xldmVsIiwibGV2ZWxXaW5kb3dEZXNjcmlwdGlvbiIsImNoYW5nZUxldmVsUHJvY2VkdXJlIiwic2NyZWVuU2l6IiwiZ2V0UmFuZG9tQ29sb3IiLCJnYW1lV2FycE9iamVjdHNfMSIsIndhcnBlciIsImRyYXciLCJsZXZlbEluaXQiLCJHYW1lQmFja2dyb3VuZCIsImxvYWRNYXBCYWNrZ3JvdWQiLCJiYWNrZ3JvdW5kRWxlbWVudHNBcnIiLCJiYWNrZ3JvdW5kRWxlbWVudHNBcnJfMSIsIm1hcE9iamVjdCIsIm1hcEl0ZW0iLCJsZXZlbE1hcCIsInNjcmVlbkRhdGEiLCJzY3JlZW4iLCJwYXJ0T2ZTY3JlZW5TdGF0dXMiLCJleHRyYU1hcCIsInRpbWVUb0V4dHJhTWFwU2Vjb25kcyIsInRpbWVUb0V4dHJhTWFwTWludXRlcyIsImxldmVsU3RhbmRhcnRNYXAiLCJhbHdheXNNb3ZlIiwiYWxsQmFja2dyb3VuZEVsZW1lbnRzIiwic2hvd0xldmVsRGF0YSIsImxldmVsQmFja2dyb3VuZEVsZW1lbnRzIiwiYmFja1NjcmVlblBhdXNlIiwibGV2ZWxCb3R0b21QYXJ0IiwiYmFja2dyb3VuZEFkanVzdG1lbnQiLCJjdHhHYW1lRGlhbG9nRmllbGQiLCJjdHhVSUZpZWxkIiwiY2hhbmdlTGV2ZWwiLCJjdXJyZW50TGV2ZWwiLCJhbGxMZXZlbHMiLCJuZXh0TGV2ZWxEYXRhUmVsb2FkIiwibGV2ZWxUaW1lciIsImJvc3NQcmVzZW50IiwidGltZSIsImdhbWVTZWNvbmQiLCJpbnRlcnZhbENvdW50IiwiZ2FtZVNlY29uZHNJbmNyZWFzZSIsImRhdGFTb3Vyc2UiLCJsZXZlbFRpbWUiLCJwbGF5ZXJPYmplY3REYXRhIiwicG9pbnRzIiwiY3VycmVudFBvaW50IiwiZ2FtZUNvaW5zIiwic2Vjb25kcyIsImRlbGV0ZUJ1bGxldCIsImluZGV4T2YiLCJzcGxpY2UiLCJkZWxldGVPYmplY3RzIiwibWF4aW11bU9iamVjdCIsImV4cGxvc2lvbk9iamVjdCIsImxhc3REZWxldGVJbmRleCIsImxpbWl0YXRpb25PZlNpZGVPYmplY3RzIiwiaXNTdWJCb3NzIiwiU1VCX0xPQURfQVRfTEVWRUwiLCJkZWxldGVPYmplY3RzT25EZW1hbmQiLCJkZWxhdGVTaWRlT2JqZWN0IiwiTUFYX05VTUJFUl9PRl9CVUxMRVRTIiwiYnVsbGV0T2JqZWN0IiwiYWxsR2FtZUJ1bGxldHMiLCJsaW1pdGF0aW9uT2ZidWxsZXRzIiwicG9pbnQiLCJjcmVhdGVTY3JlZW5zaG90cyIsInNjcmVlblNob3RNZXNzYWdlQm94IiwiZmxvb3IiLCJyYW5kb20iLCJwcmVsb2FkSW1hZ2UiLCJpbWFnZSIsImFzc2lnbmltYWdlIiwidmFsIiwibG9vcFZlcnRpY2FsIiwiZnVsbFNjcmVlblN3aXRjaCIsImZ1bGxzY3JlZW4iLCJvbiIsImFyZyIsInNlbmQiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsIm9iamVjdFgiLCJvYmplY3RZIiwicm90YXRlQW5nbGUiLCJhdGFuIiwieDEiLCJ5MSIsImZpbmFsQW5nbGUiLCJzdGFuZEFsb25lV29ya2V0c18xIiwic3RvcmFnZSIsImdldERlZmF1bHRTZXR0aW5ncyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3cml0ZUVsZWN0cm9uTG9jYWxEYXRhIiwic2V0IiwibWVzc2FnZSIsImdldERhdGEiLCJ1cmwiLCJtZXRob2QiLCJoZWFkZXJzIiwicmVzdWx0SGVhZGVyIiwic2VhcmNoRGF0YUluRmlsZSIsImZldGNoIiwicmVzIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJjYXRjaCIsImxvZyIsInJlc3BvbnNlIiwicmVhZEZpbGUiLCJpbmZvIiwicGFyc2UiLCJnZXRFbGVjdHJvbkxvY2FsU2F2ZXMiLCJBUFBfU0FWRV9ESVJFQ1RPUlkiLCJzZXREYXRhUGF0aCIsImtleXMiLCJnZXRFbGVjdHJvbkxvY2FsRGF0YSIsIndyaXRlTG9jYWxEYXRhIiwicG9zdERhdGEiLCJjYWNoZSIsIl9fZXhwb3J0IiwiZWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVyVGV4dCIsInNldEF0dHJpYnV0ZSIsInRhcmdldE5vZGUiLCJkYXRhXzEiLCJuZXdPYmplY3QiLCJ0YWciLCJjbGFzc2xpc3QiLCJpbWFnZUxpbmsiLCJodG1sIiwiY3JlYXRlU2ltcGxlRWxlbWVudHMiLCJ0YWduYW1lIiwiaWROYW1lIiwibmV3RG9jdW1lbnQiLCJwbGF5ZXJVbml0TW9kdWxlXzEiLCJkeW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXzEiLCJzdGFpcnNNb3ZlIiwiZWxldmF0b3JNb3ZlIiwiaW50ZXJhY3RXaXRoT2JqZWN0cyIsImR5bmFtaWNMZXZlbEVuZW15TW9kdWxlc18xIiwibnBjQ29sbGlzaW9uRGV0ZWN0IiwidXNlT2JqZWN0IiwiZmluZFBvaW50T2ZDb2xsaXNpb24iLCJsZXZlbEluZm9ybWF0aW9uIiwiaXNXYWxsIiwiaXNCb3R0b21XYWxsIiwiY3VycmVudEJsb2NrIiwiY3VycmVudEJsb2NrSW5kZXgiLCJjbG9zZUJsb2NrcyIsInVwcGVyQmxvY2tzIiwid2FsbEZpbmRlciIsImJvdHRvbUJsb2NrcyIsIndhbGxCb3R0b21GaW5kZXIiLCJtb3ZlRGlyZWN0aW9uIiwicHJlcGFyZVRhcmdldCIsInNjcmlwdHMiLCJyZXNwYXduRW5lbXkiLCJjb3N0dW1lQmxvY2tzIiwiSE9TVCIsInByZXZpZXdUZXh0dXJlIiwib2JqZWN0TmFtZSIsImR5bmFtaWNMZXZlbEdyYXBwbGVPYmplY3RzIiwic3RhaXJzIiwiaXNKdW1wIiwianVtcEltcHVscyIsIm9uU3RhaXJzIiwiZGVhZGx5QmxvY2tzIiwiY3VyZW50QmxvY2siLCJkZWFkbHkiLCJncm91bmRCbG9ja0NvbGxpc2lvbiIsImNlaWxpbmdUb3VjaCIsImxlZnRSaWdodEJsb2NrSW50ZXJhY3QiLCJyaWdodFdhbGxUb3VjaCIsImxlZnRXYWxsVG91Y2giLCJyaWdodFNpZGVCbG9ja0NvbGxpc2lvbiIsImxlZnRTaWRlQmxvY2tDb2xsaXNpb24iLCJwbGF5ZXJNZWVkbGUiLCJlbGV2YXRvclBsYXllck1vdmUiLCJlbGV2YXRvciIsImdyYXZpdHlJbmRleCIsImN1cnJlbnRHcm91bmRCbG9jayIsInN0ZWFyc1N0YXRlUHJvcHMiLCJncmF2aXR5IiwicmlnaHRTaWRlIiwiY3VycmVudFdhbGxCbG9jayIsImxlZnRTaWRlIiwiYmFja2dyb3VuZE1vdmVEdXJpbmdNb3ZlIiwieFBvcyIsImFsbEJ1bGxldHMiLCJhbGxHYW1lRmx5RW5lbXllcyIsInhQb3NHcm91bmQiLCJkZWZhdWx0U3BlZWQiLCJlbGV2YXRvclNwZWVkIiwiY3VycmVudERpcmVjdGlvbiIsIkVuZW15T2JqZWN0IiwibG9hZExldmVsTWFwIiwibGV2ZWxNYXBOYW1lIiwiZHluYW1pY01hcCIsInJlc3VsdERhdGEiLCJEWU5BTUlDX0xFVkVMX0JMT0NLUyIsIkRZTkFNSUNfTEVWRUxfRU5FTVlfQ09MTEVDVElPTl9VUkwiLCJhbGxNYXBPYmplY3RzIiwibWFwU2l6ZUhvcml6b250YWwiLCJtYXBTaXplIiwibWFwU2l6ZVZlcnRpY2FsIiwiRHluYW1pY0Jsb2NrQ29uc3RydWN0b3IiLCJtYXBHcmF2aXR5SW5pdCIsIm1hcE9iamVjdHMiLCJleHRyYVNlY29uZHMiLCJtYXBPYmplY3RzXzEiLCJvbkVsZXZhdG9yU3BlZWQiLCJjb21wdXRlcnNEaWFsb2ciLCJuZWFyZXN0QmxvY2tzXzEiLCJibG9ja0NvbGxpc2lvbiIsIm9iamVjdHNUb0NvbGxpZGUiLCJuZWFyTWFwT2JqZWN0cyIsIm5lYXJNYXBPYmplY3RzXzEiLCJzcGFjZSIsInVwcGVyT2JqZWN0WU51bWJlciIsInVzZXJVcHBlcldpZHRoIiwiYWxsR2FtZUJhY2tncm91bmRFbGVtZW50c18xIiwiZ2FtZUludmVudG9yeU1vZHVsZXNfMSIsInNob3BJbnZlbnRvcnkiLCJzaG93RGVzY3JpcHRpb25BcmVhIiwiZ2FtZVNob3BTaGlweWFyZF8xIiwic2hvcEV2ZW50c01vZHVsZXNfMSIsInNob3BBY3Rpdml0eURldGVjdG9yTW9kdWxlc18xIiwibGVhdmVTaG9wIiwic2hvcERpYWxvZ1RleHQiLCJzaG9wRXJyb3JNZXNzYWdlIiwic2hvcERpYWxvZyIsInNhbGVCb3hMYWJlbENoYW5nZSIsImludmVudG9yeUJveCIsImludmVudG9yeUFjdGl2ZSIsInNob3BIaXRPYmplY3RzRGV0ZWN0aW9uIiwiaGFuZ2FyRWxlbWVudHMiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwiYnV5U3RvcmVJdGVtIiwiaW52ZW50b3J5SXRlbUd1bnNBc3NpZ24iLCJidXlpbmciLCJhZGRQbGF5ZXJMaWZlIiwicHJpY2UiLCJtYXhOdW1iZXIiLCJudW1iZXIiLCJzaG9wQXJlYSIsInNob3dTaG9wRGF0YSIsImN1c3RvbVdyYXBwZXJDbGFzcyIsInNob3BQYWdlSW5mb3JtYXRpb24iLCJjYXJkIiwiY2FyZFJlbmRlciIsImxpc3ROb3RUb0Rpc3BsYXkiLCJldmVyeSIsInRpdGxlIiwiY29tcGFyZVRpdGxlIiwiY2FyZERhdGFDcmVhdG9yIiwiY3VycmVudFNob3BVcmwiLCJtYXhJdGVtUGVyUGFnZSIsInRvdGFsUGFnZXMiLCJjZWlsIiwiY3VycmVudFBhZ2VDYXJkSW5kZXgiLCJjdXJyZW50UGFnZSIsImRpc3BsYXlTaG9wSXRlbSIsImNyZWF0ZUNhcmQiLCJzaGlwRGVzY3JpcHRpb24iLCJzaGlwRGF0YSIsImFybW9yIiwibWluU3BlZWQiLCJpbnZlbnRvcnlDYXBhY2l0eSIsImZpcmVzcG90cyIsInNoaXBDYXJkRGVzY3JpcHRpb24iLCJ3ZWFwb25zQ2FyZERlc2NyaXB0aW9uIiwiY3VycmVudFNoaXAiLCJTSE9QX1NISVBZQVJEX0FDVElWRV9XSU5ET1ciLCJzYWxlUGVyY2VudEFkZFRvUHJpY2UiLCJsYWJlbFNoaXAiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJsb2FkSW1hZ2UiLCJkZXNjcmlwdGlvbiIsIlNIT1BfQUNUSVZFX1dJTkRPVyIsInNlbGVjdGVkU2hvcEl0ZW0iLCJzd2l0Y2hTaG9wSGFuZ2FyIiwiaGFuZ2FyQXJlYSIsInNlbGVjdGVkSXRlbXNQaWN0dXJlIiwicGljdHVyZSIsImRpc3BsYXlFbGVtZW50Iiwic2hvcFVpSXRlbXMiLCJzYWxlUGVyY2VudGFnZSIsImJ1eVByaWNlUGVyY2VudCIsInNob3BXZWFwb25zQWN0aXZpdHkiLCJ0b2dnbGVTaG9wQnV0dG9uU3R5bGUiLCJzaG9wV3JhcHBlciIsImxvYWRTaG9wQXJlYSIsImludmVudG9yeVNlbGVjdGVkSXRlbSIsImhhbmdhclNlbGVjdGVkSXRlbSIsImhhbmdhclNoaXBBcmVhIiwic2hvcEludmVudG9yeVdyYXBwZXIiLCJTSE9QX0dVTlNfVVJMIiwiaGFuZ2FyTW91c2VNb3ZlRXZlbnQiLCJoaWRlRGVzY3JpcHRpb25BcmVhIiwic2hvcEFyZWFJdGVtcyIsImludmVudG9yeUNvbGlzaW9uRXZlbnQiLCJzaG9wTWVudUFjdGl2aXR5Iiwic2VsZWN0SW52ZW50b3J5SXRlbSIsInRhcmdldEJ0bklkIiwic2hvcERpYWxvZ0FjdGl2aXR5IiwiU0hPUF9TQUxFX1dJTkRPVyIsInNob3BFdmVudERldGVjdG9yIiwiY2hhbmdlUGFnZSIsImZsYWciLCJidXlTaGlwIiwic2hpcEludmVudG9yeUxhc3RJdGVtcyIsInNoaXBHdW5zTGFzdEl0ZW1zIiwibW9uZXkiLCJyZXBsYWNlU2hpcERhdGEiLCJidXlTaGlwRGF0YSIsIlNIT1BfU0hJUFlBUkRfVVJMIiwiYnV5SXRlbSIsImludmVudG9yeUluZm9ybWF0aW9uIiwic2VhcmNoSXRlbSIsImludmVudG9yeUZyZWVJdGVtIiwiZmluZEludEludmVudG9yeSIsInNlYXJjaE9iamVjdCIsInB1dEluc2lkZUludmVudG9yeSIsInNhdmVJdGVtIiwiaW52ZW50b3J5SXRlbSIsImdldFVJT2JqZWN0UG9zaXRpb24iLCJwcm9wZXJ0aWVzIiwibG9hZFNjcmVlbl8xIiwiY2hhbmdlTGV2ZWxzXzEiLCJwbGF5ZXJVbml0TW9kdWxlXzIiLCJzZXJ2ZXJSZXF1ZXN0IiwiZ2FtZUluZm9ybWF0aW9uIiwic2VydmVyRGF0YVJlcXVlc3QiLCJuZXdQbGF5ZXJTaGlwQ29uc3RydWN0IiwiUGxheWVyU2hpcCIsInVzZXJEYXRhIiwic2hpcExpZmUiLCJtYXhPZkxpZmUiLCJ4RmluYWwiLCJ5RmluYWwiLCJnYW1lRGF0YUluaXQiLCJsZXZlbCIsImdhbWVVSWZpZWxkIiwiZ3JhcHBsZU9iamVjdHMiLCJwcmVsb2FkRGF0YSIsImdhbWVTZXRpbmdzIiwiZW5lbXlEYXRhIiwibG9hZFdpbmRvdyIsImxvYWRTdGF0dXMiLCJzaGlwQ29uZmlndXJhdGlvbiIsIkdST1VORF9QTEFZRVJfQUxMT1dfTU9WRSIsInJlbmV3UGxheWVyU2hpcCIsIm9yaWdpbkRhdGEiLCJuZXdEYXRhIiwicGxheWVyU2hpcFRleHR1cmVDaGFuZ2UiLCJsb2FkTGV2ZWxFbmVteSIsImxldmVsRHluYW1pY01hcEJsb2NrcyIsImxldmVsU291bmRzIiwiY29udHJvbGxlcnMiLCJlbmVteVR5cGUiLCJtYXBLZXlDb2RlIiwic3ViQm9zc1ByZXNlbnQiLCJnYW1lU3RhcnQiLCJCT1NTX0xPQURfQVRfTEVWRUwiLCJTSE9QX1NUT1JFX1dJTkRPVyIsIm1hcFNvdW5kIiwiZ2FtZVNvdW5kT2JqZWN0Iiwic3RhcnRTb3VuZCIsImdhbWVPdmVyU291bmQiLCJnYW1lV2luU291bmQiLCJjaGFuZ2VUcmFjayIsInNvdW5kUGxheSIsIm5ld0luaXRkYXRhIiwiZ2V0Q3VycmVudFdpbmRvdyIsImNsb3NlIiwiZ2V0RXh0cmFPYmplY3RzIiwicmFuZG9tT2JqZWN0IiwiZ2V0R2FtZVJlc3VsdERhdGEiLCJnZXRTaG9wU2VydmVyRGF0YSIsInNob3BVcmwiLCJsb2FkR3JvdW5kRW5lbXkiLCJkeW5hbWljRW5lbXlDb2xsZWN0aW9uIiwiR1JPVU5EX0NIQVJBQ1RFUlNfVVJMIiwiTEVWRUxfREFUQV9VUkwiLCJMRVZFTF9PQkpFQ1RfVVJMIiwiTEVWRUxfR1JBUFBMRV9PQkpFQ1RTX1VSTCIsIlVTRVJfU0hJUF9VUkwiLCJFTkVNWV9TSElQX1VSTCIsInBhZ2VTZXR0aW5ncyIsInNvdW5kT24iLCJ2b2x1bWUiLCJpbml0U291bmQiLCJjcmVhdGVTb3VuZCIsInNvdW5kTGV2ZWwiLCJNQUlOX0dBTUVfU09VTkQiLCJ0b1N0cmluZyIsImNoYW5nZVZvbHVtZSIsIk1BSU5fR0FNRV9TT1VORF9FRkZFQ1RTIiwiTUFJTl9HQU1FX1NPVU5EX09OIiwicGxheSIsInNvdW5kUGF1c2UiLCJwYXVzZSIsIm1ha2VMb29wIiwibG9vcCIsInR1cm5Tb3VuZE9mZiIsImxvYWRFeHRyYU9iamVjdFRvR3JvdW5kRW5lbXkiLCJsb2FkUHJvYmFiaWxpdHkiLCJudW1iZXJPZkVsZW1lbnQiLCJleHRyYU9iamVjdCIsImNhbGxPYmplY3QiLCJyYW5kb21pemVyIiwicnVsZXMiLCJjb250YWluIiwiZGV0ZWN0UGxheWVyIiwiZGlzdGFuY2VZIiwiZmluZEJhcnJpZXIiLCJkaXJlY3Rpb25YIiwiZGlyZWN0aW9uWSIsInJhbmRvbWl6ZXJDaGVjayIsImxvY2FsWFJheV8xIiwibG9jYWxZUmF5XzEiLCJkZWNyZWFzZVZhbHVlIiwiZGV0ZWN0UmFuZ2UiLCJncm91bmRFbmVteUZpbmQiLCJmaW5kQm90dG9tQmxvY2siLCJuZXh0R3JvdW5kQmxvY2siLCJncm91bmRFbmVteVB1cnN1aXQiLCJjaGFyYWN0ZXJTZWxlY3RvciIsImR5bmFtaWNFbmVteSIsInJlc3VsdEdyb3VuZEVuZW15RGF0YSIsImFsbEVuZW15T25NYXAiLCJkeW5hbWljRW5lbXlfMiIsImVuZW15QmxvY2siLCJjdXJyZW50RW5lbXlTZXJ2ZXJEYXRhIiwiaWQiLCJwcmVwYXJlRGF0YSIsIm5ld0NoYXJhY3RlciIsIkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yIiwibG9hZEVuZW15VG9PYmplY3RBcnJheSIsImR5bmFtaWNFbmVteV8xIiwiZ3JvdW5kRW5lbXlNb3ZlIiwiZ3JvdW5kUGxheWVySnVtcCIsImxlYWRlckJsb2NrIiwiYmxvY2tIZWlnaHQiLCJib3R0b21CbG9ja0luZGV4IiwiaXNKdW1wRG93biIsImp1bXBCbG9jayIsImp1bXBTcGVlZCIsImp1bXBEb3duIiwiZW5lbXlEZXRlY3ROcGMiLCJucGNEYXRhIiwibnBjRGF0YV8xIiwicGVyc29uIiwiZmluZFVuaXQiLCJkZXRhaWxzdHlwZSIsImdyb3VuZEVuZW15RGVjaWRlZCIsImdyb3VuZEVuZW15UGF0aEZpbmRlciIsIm1heEJveFRvTW92ZSIsImRlYWRseUJsb2NrIiwiaW5kZXhPZk5leHRCbG9ja18xIiwiZmluZEJhY2tCbG9jayIsImJsb2NrVW5kZXJUaGVKdW1wIiwiY3VycmVudEJsb2NrSW5kZXhfMSIsImNoYW5nZU1vZGVSYW5kb21pemVyIiwiZmluZEhvcml6b250YWxCbG9jayIsImJhY2tCbG9ja0luZGV4XzEiLCJfbG9vcF8xIiwiYmxvY2tOdW1iZXIiLCJuZXh0Qm90dG9tQmxvY2siLCJ1bml0UmFuZG9taXplIiwiX2xvb3BfMiIsImRlYWRseUJsb2NrSW5kZXgiLCJncm91bmRFbmVteVNob3QiLCJyZXNwYXduRW5lbXlCeVRpbWVyIiwic3Bhd25TZWNvbmRzIiwibWF4TnVtYmVyT2ZJdGVtIiwidGFyZ2V0SWRfMSIsInRhcmdldFNwYXduZXJJZCIsInNvbWUiLCJzcGF3bmVySGlkZGVuSWQiLCJzaGlmdCIsImRlbGV0ZU9sZEVuZW15IiwiZ2FtZUhhbmdhck1vZHVsZXNfMSIsInJlcGxhY2VJdGVtRnJvbVN0b3JhZ2UiLCJwdXRJdGVtVG9TdG9yYWdlIiwicHV0SW5kZXgiLCJzZWxlY3RlZEluZGV4Iiwic2VsZWN0ZWRTdG9yYWdlIiwic2hvcFN0b3JhZ2VSZXBsYWNlciIsImZpcmVzcG90Iiwic2VsZWN0R3VuIiwiYXNzaWduR3Vuc1Bvc2l0aW9uIiwiZ3VuIiwiZGlzYWJsZUVmZmVjdHMiLCJhZGRWZWhpY2xlU3BlZWQiLCJzaGlwWFBvc2l0aW9uIiwic2hpcFlQb3NpdGlvbiIsInNlbGVjdE9iamVjdCIsIml0ZW1SZW5kZXIiLCJwcmV2aXVzSW52ZW50b3J5U2VsZWN0ZWRJdGVtIiwibG9hZEhhbmdhciIsInByZXBlbmQiLCJmaW5hbFByaWNlUGVyY2VudCIsInNhbGVQcmljZSIsImhhbmdhckl0ZW0iLCJzYWxlQm94IiwiaW52ZW50b3J5SXRlbXMiLCJpbnZlbnRvcnlJdGVtc18xIiwic2luZ2xlSXRlbSIsImVtcHR5SXRlbXMiLCJmdWxsSXRlbXMiLCJmaXJzdEVtcHR5SXRlbSIsInNhbGVJdGVtIiwic2VsUHJpY2UiLCJhc3NpZ25FZmZlY3RzVG9TaGlwIiwiYXN5bmMiLCJyaW1yYWYiLCJta2RpcnAiLCJ3cml0ZUZpbGVBdG9taWMiLCJ1dGlscyIsImxvY2siLCJ0aW1lcyIsImNvZGUiLCJnZXREZWZhdWx0RGF0YVBhdGgiLCJnZXREYXRhUGF0aCIsIm9wdGlvbnMiLCJpc0Z1bmN0aW9uIiwibm9vcCIsIndhdGVyZmFsbCIsImFzeW5jaWZ5IiwicGFydGlhbCIsImdldEZpbGVOYW1lIiwiZGF0YVBhdGgiLCJkaXJuYW1lIiwibWFkZSIsImdldExvY2tGaWxlTmFtZSIsIm9iamVjdEpTT04iLCJ1bmxvY2siLCJsb2NrRXJyb3IiLCJnZXRNYW55IiwicmVkdWNlIiwicmVkdWNlciIsImdldEFsbCIsImNvbnRlbnRzIiwiaGFzIiwic3RhdCIsInVzZXJEYXRhUGF0aCIsInJlYWRkaXIiLCJleHRuYW1lIiwiYmFzZW5hbWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjbGVhciIsImpzb25GaWxlcyIsImR5bmFtaWNMZXZlbE1vZHVsZV8yIiwiam91cm5hbE1vZHVsZXNfMSIsImhvcml6b250YWxWZXJ0aWNhbFNlYXJjaCIsIm1haW5PYmplY3QiLCJyZWZyZXNoTGV2ZWwiLCJhc3NpZ25WYWx1ZSIsImluY29tZUtleSIsIm1haW5EYXRhIiwibmV4dExldmVsIiwic2VydmVyTmV3RGF0YSIsIl9nIiwiZmlsbEpvdXJuYWxEZWZhdWx0RGF0YSIsImR5bmFtaWNCbG9ja01hcCIsImRpc3BsYXlVaVdpbmRvd01vZHVsZXNfMSIsImNyZWF0ZVdpbmRvdyIsImNyZWF0ZVNoYXBlUm91bmRCb3JkZXIiLCJjcmVhdGVSb3VuZEJ1dHRvbiIsInBpY3R1cmVOYW1lIiwicHJvcHMiLCJjbGVhckZpZWxkIiwicmFuZG9tQXBlYXIiLCJvYmplY3RTcGVlZCIsIm9iamVjdERhdGEiLCJncmFwcGxlT2JqZWN0IiwiaXNHcmFwcGxlIiwiaW5pdEdyYXBwbGVPYmplY3QiLCJnYW1lSW5mbyIsImdyYXBwbGVEYXRhIiwiZ3JhcGxlT2JqZWN0UHJvYmFiaWxpdHkiLCJjb2xsZWN0Q29pbiIsImNvbGxlY3RPYmplY3RzVG9JbnZlbnRvcnkiLCJzdG9yZSIsIlNIT1BfU1RPUkVfSVRFTVMiLCJnYW1lU2lkZU9iamVjdHNNb2R1bGVfMiIsImNyZWF0ZVJvY2tldFNtb2NrIiwic2VjdG9yIiwic2VjdG9ySW5kZXgiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsImFuZ2xlQ29tcGVuc2F0aW9uIiwic2VjdG9ySW5kZXgyIiwiYnVsbGV0QW5nbGVDb21wZW5zYXRpb24iLCJtb3ZlQnVsbGV0cyIsIm1vdmUiLCJsYXN0U3BlZWQiLCJyb2NrZXRTcGVlZCIsImJsYXN0RGVzdHJveUJ1bGxldHMiLCJzaGllbGRUaW1pbmciLCJidWxsZXRzQXJyIiwiYnVsbGV0c0Fycl8xIiwibnBjRGlhbG9nIiwiY3VycmVudERpYWxvZ0NoYXJhY3RlciIsInNlYXJjaFRhcmdldCIsInJlcXVpcmVEYXRhIiwiZGlhbG9nIiwiZGlzcGxheURpYWxvZyIsImN1cnJlbnREaWFsb2ciLCJkZWZhdWx0TnBjRGF0YSIsImRpYWxvZ0Fuc3dlcnNOcGNEYXRhIiwiZGlhbG9nQW5zd2VycyIsImJhY2twYWNrQm9keSIsImxvY2FsSWQiLCJpZFN0YXJ0RGlhbG9nIiwiZGlhbG9nSGVhZGVyIiwiZmFjZVBpY3R1cmVBYnNvbHV0ZSIsImZhY2VQaWN0dXJlIiwic2VsZWN0ZURpYWxvZyIsInF1ZXN0aW9ucyIsImlubmVyRGlhbG9nIiwiYW5zd2VyQnV0dG9ucyIsInF1ZXN0aW9uc0J1dHRvbiIsInRhcmdldERpYWxvZyIsImRpYWxvZ1RleHRJZCIsImRpYWxvZ1RleHRBcmVhIiwibnBjRGV0YWlscyIsInJlcXVpcmVPYmplY3QiLCJkaWFsb2dBcmVhIiwic2VhcmNoSW5QbGF5ZXJJbnZlbnRvcnkiLCJ0YXNrQ29tcGxlYXRlIiwibnVtYmVyT2ZSZXF1aXJlSXRlbXMiLCJ3cml0ZURhdGFUb0pvdXJuYWwiLCJkZWZhdWx0UmVxdWVzdERpYWxvZ0lkIiwiam91cm5hbFRhc2siLCJhY3Rpb24iLCJjaGVja0RpYWxvZ1Rhc2tDb25kaXRpb25zIiwiZGVmYXVsdFN1Y2Nlc3NEaWFsb2dJZCIsIm1hcE5lYXJBY3RpdmVFbGVtZW50IiwiYWN0aXZhdGVJbnRlcmFjdE9iamVjdERhdGEiLCJkaXNwbGF5VGV4dCIsImNvbnRleHRzIiwicmV0dXJuQ29udGV4dCIsInJlcXVpcmVUZXh0IiwicmVuZGVyVGV4dCIsInN1Y2Nlc3NUZXh0IiwidGlwcyIsIkdST1VORF9BQ1RJVkVfQkxPQ0tfSU5fUkFOR0UiLCJzaGFkb3dDb2xvciIsInNoYWRvd0JsdXIiLCJmb250IiwidGV4dEFsaWduIiwiZmlsbFRleHQiLCJsZXZlbFJlc3RvcmUiLCJvYmplY3REZXRhaWxzIiwiZGVsZXRlSW52ZW50b3J5T2JqZWN0IiwiZGVsZXRlRnJvbUl0ZW1zUmVxdWVzdCIsImRlbGV0ZVNpbmdsZUl0ZW0iLCJzZWFyY2hEYXRhTmFtZSIsImFsbFJlcXVpcmVPYmplY3RzIiwiY29tcGxldGVKb3VybmFsVGFzayIsImRlbGV0ZVNpbmdsZU9iamVjdEZyb21JbnZlbnRvcnkiLCJmaW5kT2JqZWN0QXRJbnZlbnRvcnkiLCJzdGFja0l0ZW1BdEludmVudG9yeSIsImN1cnJlbnRBY3RpdmVCbG9jayIsIkdST1VORF9OUENfRElBTE9HX0FDVElWRSIsImRvb3JGdW5jdGlvbmFsaXR5IiwidGVsZXBvcnRGdW5jdGlvbmFsaXR5IiwiZG9vclNvdW5kIiwiZG9vciIsIm1haW4iLCJjdXJyZW50VmFsdWUiLCJjdXJyZW50VmFsdWVPZk1vdmUiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZU9mTW92ZSIsInN0YWlyc1ZlcnRpY2FsSW5kZXgiLCJjb21wYXJlQmxvY2siLCJzZWNvbmQiLCJ0ZWxlcG9ydERvb3IiLCJwb3NpdGlvblJhbmdlIiwiZG9vcklkIiwidGFyZ2V0SWQiLCJiYWNrZ3JvdW5kQ2hhbmdlIiwib3BlbkNsb3NlZERvb3JBbmltYXRpb24iLCJkb29yU3RhdGUiLCJkb29yQW5pbWF0aW9uSXRlbXMiLCJkb29yUGljdHVyZVdpZHRoIiwibGVhZGVyc0Z1bmN0aW9uYWxpdHkiLCJsZXZlbFRhc2tzIiwibGV2ZWxEYXRhRGVzY3JpcHRpb24iLCJjdXJlZW50TGV2YWxUYXNrcyIsImxldmVsTmFtZSIsImxldmVsRGVzY3JpcHRpb24iLCJsZXZlbE1haW5UYXNrIiwidGFza0FjdGl2ZSIsIm9wZW5Kb3VybmFsIiwidXNlclNoaXBEYXRhIiwiam91cm5hbExldmVsRWxlbWVudCIsImpvdXJuYWxEYXRhIiwiam91cm5hbERhdGFfMSIsInRhc2siLCJqb3VybmFsRGV0YWlscyIsImlubmVyVGFza3MiLCJsZXZlbFRhc2tzXzEiLCJkZXRhaWxUYXNrIiwibG9jYWxUYXNrIiwiZGlhbG9nT3duZXIiLCJkaXNwbGF5Sm91cm5hbERhdGEiLCJqb3VybmFsRGV0YWlsIiwibGV2ZSIsIm1pbmltYXBfMSIsInVzZXJLZXlBY3Rpb24iLCJjb250cm9sS2V5cyIsImtleUNvZGUiLCJ1c2VLZXkiLCJtaW5pTWFwIiwiY3JlYXRlTWFwUmVuZGVyRmllbGQiLCJkb3duIiwibW92ZVNoaXAiLCJ5UG9zIiwibGVmdCIsInJpZ2h0IiwidXAiLCJyb2NrZXQiLCJhY3RpdmVJbnZlbnRvcnlFZmZlY3RzIiwiaG9taW5nUm9ja2V0IiwiZGVzdHJveUVuZW15Iiwic2hpZWxkIiwicHJldmVudFNpdE1vdmUiLCJyb2NrZXRQcmVzZW50IiwicGxheWVyR3Vuc09wZXJhdGUiLCJtb3ZlVW5pdCIsInBsYXllckRpcmVjdGlvbiIsImFsbEdhbWVTY2VuZU9iamVjdHMiLCJsYXN0QWN0aW9uVmVydGljYWwiLCJjaGFyYWN0ZXJTb3VuZCIsImFsbEdhbWVTY2VuZU9iamVjdHNfMSIsImRvd25CbG9jayIsInBsYWNlUGxheWVyU2hpcCIsInN5bmNLZXlDb250cm9sIiwic3RhdGVfMSIsImtleUNvbnRyb2xzIiwic2hpcENvbnRyb2wiLCJncm91bmRQbGF5ZXJfMSIsInNldENvbnRleHQiLCJwbGFjZVNoaXAiLCJ5QWRqIiwic2hpcEluU3BhY2UiLCJwbGF5ZXJTaGlwIiwibWluaW1hdGNoIiwiTWluaW1hdGNoIiwic2VwIiwiZXIiLCJHTE9CU1RBUiIsImV4cGFuZCIsInBsVHlwZXMiLCJvcGVuIiwicmVTcGVjaWFscyIsInNsYXNoU3BsaXQiLCJleHQiLCJwYXR0ZXJuIiwibm9jb21tZW50IiwiY2hhckF0IiwidHJpbSIsIm1hdGNoIiwicmVnZXhwIiwibmVnYXRlIiwiY29tbWVudCIsImVtcHR5IiwibWFrZSIsImJyYWNlRXhwYW5kIiwibm9icmFjZSIsImxpc3QiLCJkZWZhdWx0cyIsImRlZiIsIm9yaWciLCJkZWJ1ZyIsIl9tYWRlIiwicGFyc2VOZWdhdGUiLCJnbG9iU2V0IiwiZ2xvYlBhcnRzIiwic2kiLCJuZWdhdGVPZmZzZXQiLCJub25lZ2F0ZSIsInN1YnN0ciIsImlzU3ViIiwibm9nbG9ic3RhciIsInN0YXRlQ2hhciIsInJlIiwiaGFzTWFnaWMiLCJub2Nhc2UiLCJlc2NhcGluZyIsInBhdHRlcm5MaXN0U3RhY2siLCJuZWdhdGl2ZUxpc3RzIiwiaW5DbGFzcyIsInJlQ2xhc3NTdGFydCIsImNsYXNzU3RhcnQiLCJwYXR0ZXJuU3RhcnQiLCJkb3QiLCJzZWxmIiwiY2xlYXJTdGF0ZUNoYXIiLCJxbWFyayIsImxlbiIsIm5vZXh0Iiwic3RhcnQiLCJyZVN0YXJ0IiwicGwiLCJyZUVuZCIsImNzIiwic3Vic3RyaW5nIiwiUmVnRXhwIiwic3AiLCJTVUJQQVJTRSIsInRhaWwiLCIkMSIsIiQyIiwiYWRkUGF0dGVyblN0YXJ0IiwibmwiLCJubEJlZm9yZSIsIm5sRmlyc3QiLCJubExhc3QiLCJubEFmdGVyIiwib3BlblBhcmVuc0JlZm9yZSIsImNsZWFuQWZ0ZXIiLCJkb2xsYXIiLCJnbG9iVW5lc2NhcGUiLCJmbGFncyIsInJlZ0V4cCIsIl9nbG9iIiwiX3NyYyIsIm1ha2VSZSIsInR3b1N0YXIiLCJyZWdFeHBFc2NhcGUiLCJleCIsIm1tIiwibm9udWxsIiwiZmlsZSIsIm1hdGNoQmFzZSIsIm1hdGNoT25lIiwiZmxpcE5lZ2F0ZSIsImZpIiwicGkiLCJmbCIsImhpdCIsImZyIiwicHIiLCJzd2FsbG93ZWUiLCJ0b0xvd2VyQ2FzZSIsInBvc2l4Iiwid2luMzIiLCJleGVjIiwiZGV2aWNlIiwiaXNVbmMiLCJCb29sZWFuIiwicGxhdGZvcm0iLCJyZWxvYWRQYWdlIiwic2VsZWN0b3IiLCJsb2NhdGlvbiIsInJlbG9hZCIsImhpZGVMb2FkU2NyZWVuIiwibG9hZFNjcmVlbiIsInByZXZlbnREZWZhdWx0IiwiZW5lbXlTaGlwTG9naWNWZXJ0aWNhbCIsIm1heFBvc2l0aW9uWCIsIm1pblBvc2l0aW9uWCIsIm1heFBvc2l0aW9uWSIsIm1pblBvc2l0aW9uWSIsImRpc3RhbmNlVG9UYXJnZXRYIiwiZGlzdGFuY2VUb1RhcmdldFkiLCJpc01vdmUiLCJiZWhhdmlvciIsImRpcmVjdGlvbiIsImRpcnJlY3Rpb25SYW5kb20iLCJlbmVteVZlcnRpY2FsTW92ZUNhbGN1bGF0aW9uIiwic3RyYWZlIiwidW5pdFN0b3AiLCJnb0JhY2tBbkZvcndhcmQiLCJyYW5kb21BdHRhY2siLCJydXNoQXRhY2siLCJzZWFyY2hVc2VyIiwicnVzaERhdGEiLCJjaGFuZ2VYcG9zaXRpb24iLCJyYW5kb21Qb2ludCIsInJhbmdlIiwiY2FobmdlRGlycmVjdGlvbiIsInN0b3BSYW5nZSIsImNoYW5nZVNwZWVkIiwiY2hhbmdlU3RyYWZlU3BlZWQiLCJjb2VmaWNpZW50Iiwic3BvdERpc3RhbmNlIiwic3Bhd25FbmVteUxvZ2ljIiwiZW5lbXlTcGF3biIsIm51bWJlckVuZW15UGVyU3Bhd24iLCJlbmVteVNoaXAiLCJlbmVteVNoaXBPYmplY3QiLCJlbmVteVByb2JhYmlsaXR5IiwiZW5lbXlSYW5kb21pemVySW5kZXgiLCJlbmVteU1heE51bWJlciIsInN1YkJvc3MiLCJjcmVhdGVOZXdFbmVteSIsImxldmVsVXNlckRhdGEiLCJsZXZlbFN0YXR1cyIsInNoaXBEZXRhaWxzIiwiYnVsbGV0VHlwZU51bWJlciIsImlzU2hvb3QiLCJoaXRTaGFwZSIsIm1pbk51bWJlciIsImhhbmdhclRleHRBcmVhIiwiY3JlYXRlQ2xpY2FibGVBcmVhIiwiaW1nXzEiLCJoYW5nYXJJbWFnZSIsImRhdGFPYmplY3QiLCJjaGVja0l0ZW1zIiwic2FsZUJveEV2ZW50IiwiRlVOQ19FUlJPUl9URVhUIiwiUExBQ0VIT0xERVIiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNBc3RyYWwiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJlT3B0TW9kIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwiYmluZGluZyIsIm5vZGVJc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJpc0RhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1JlZ0V4cCIsImlzUmVnRXhwIiwibm9kZUlzU2V0IiwiaXNTZXQiLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiZnVuYyIsImFyZ3MiLCJhcnJheUFnZ3JlZ2F0b3IiLCJhcnJheSIsInNldHRlciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJwcmVkaWNhdGUiLCJhcnJheUZpbHRlciIsInJlc0luZGV4IiwiYXJyYXlJbmNsdWRlcyIsImJhc2VJbmRleE9mIiwiYXJyYXlJbmNsdWRlc1dpdGgiLCJjb21wYXJhdG9yIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwidW5kZWZpbmVkIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJjYWNoZUhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImNvdW50SG9sZGVycyIsInBsYWNlaG9sZGVyIiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsInN0cmluZyIsInRlc3QiLCJtYXBUb0FycmF5Iiwic2l6ZSIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJyZXBsYWNlSG9sZGVycyIsInNldFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsImxhc3RJbmRleCIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsInJ1bkluQ29udGV4dCIsInVpZCIsInBpY2siLCJTdHJpbmciLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdENyZWF0ZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsIm5hdGl2ZUZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJuYXRpdmVNaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJEYXRhVmlldyIsIk1hcCIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJpc0FycmF5IiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJlbnRyeSIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsIlN0YWNrIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJiYXNlQXQiLCJwYXRocyIsInNraXAiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJzdGFjayIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImNvbnN0cnVjdG9yIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJjbG9uZVJlZ0V4cCIsInN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJnZXRNYXBEYXRhIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJzZWVuIiwiYmFzZUludm9rZSIsInBhcmVudCIsImxhc3QiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJiYXNlSXNOYXRpdmUiLCJiYXNlSXRlcmF0ZWUiLCJpZGVudGl0eSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsImJhc2VTb3J0QnkiLCJvYmpDcml0ZXJpYSIsImNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwib3JkZXIiLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJlbmQiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwiTUFYX0FSUkFZX0xFTkdUSCIsIm1pZCIsImJhc2VTb3J0ZWRJbmRleEJ5IiwidmFsSXNOYU4iLCJ2YWxJc051bGwiLCJ2YWxJc1N5bWJvbCIsInZhbElzVW5kZWZpbmVkIiwib3RoSXNEZWZpbmVkIiwib3RoSXNOdWxsIiwib3RoSXNSZWZsZXhpdmUiLCJvdGhJc1N5bWJvbCIsInNldExvdyIsImJhc2VTb3J0ZWRVbmlxIiwiYmFzZVRvTnVtYmVyIiwiYmFzZVRvU3RyaW5nIiwiYmFzZVVuaXEiLCJjcmVhdGVTZXQiLCJzZWVuSW5kZXgiLCJiYXNlVXBkYXRlIiwidXBkYXRlciIsImJhc2VXaGlsZSIsImlzRHJvcCIsImJhc2VXcmFwcGVyVmFsdWUiLCJhY3Rpb25zIiwiYmFzZVhvciIsImJhc2VaaXBPYmplY3QiLCJhc3NpZ25GdW5jIiwidmFsc0xlbmd0aCIsImNhc3RBcnJheUxpa2VPYmplY3QiLCJjYXN0RnVuY3Rpb24iLCJzdHJpbmdUb1BhdGgiLCJjYXN0UmVzdCIsImNhc3RTbGljZSIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwid29yZHMiLCJkZWJ1cnIiLCJjcmVhdGVDdG9yIiwidGhpc0JpbmRpbmciLCJjcmVhdGVGaW5kIiwiZmluZEluZGV4RnVuYyIsImNyZWF0ZUZsb3ciLCJmbGF0UmVzdCIsImZ1bmNzIiwicHJlcmVxIiwidGhydSIsIndyYXBwZXIiLCJnZXRGdW5jTmFtZSIsImZ1bmNOYW1lIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwicmVvcmRlciIsImNyZWF0ZUludmVydGVyIiwidG9JdGVyYXRlZSIsImJhc2VJbnZlcnRlciIsImNyZWF0ZU1hdGhPcGVyYXRpb24iLCJvcGVyYXRvciIsImNyZWF0ZU92ZXIiLCJhcnJheUZ1bmMiLCJjcmVhdGVQYWRkaW5nIiwiY2hhcnMiLCJjaGFyc0xlbmd0aCIsImNyZWF0ZVJhbmdlIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJzZXREYXRhIiwic2V0V3JhcFRvU3RyaW5nIiwiY3JlYXRlUm91bmQiLCJwcmVjaXNpb24iLCJ0b0ludGVnZXIiLCJwYWlyIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyckxlbmd0aCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJvbGRBcnJheSIsInNob3J0T3V0IiwicmVmZXJlbmNlIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUJ5IiwiZGlmZmVyZW5jZVdpdGgiLCJmaW5kSW5kZXgiLCJmaW5kTGFzdEluZGV4IiwiaGVhZCIsImludGVyc2VjdGlvbiIsIm1hcHBlZCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsInB1bGwiLCJwdWxsQWxsIiwicHVsbEF0IiwidW5pb24iLCJ1bmlvbkJ5IiwidW5pb25XaXRoIiwidW56aXAiLCJncm91cCIsInVuemlwV2l0aCIsIndpdGhvdXQiLCJ4b3IiLCJ4b3JCeSIsInhvcldpdGgiLCJ6aXAiLCJ6aXBXaXRoIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsIndyYXBwZXJBdCIsImNvdW50QnkiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmRLZXkiLCJXUkFQX0JJTkRfRkxBRyIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsInRvQXJyYXkiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsIkNMT05FX0RFRVBfRkxBRyIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwidG9VcHBlckNhc2UiLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJzZXBhcmF0b3IiLCJsaW1pdCIsInNwcmVhZCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsImVzY2FwZSIsImVzY2FwZVJlZ0V4cCIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmFOIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJmaXJzdCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJjaGlsZHJlbiIsImdsb2IiLCJycCIsImluaGVyaXRzIiwiRUUiLCJFdmVudEVtaXR0ZXIiLCJhc3NlcnQiLCJpc0Fic29sdXRlIiwiZ2xvYlN5bmMiLCJjb21tb24iLCJzZXRvcHRzIiwiYWxwaGFzb3J0IiwiYWxwaGFzb3J0aSIsIm93blByb3AiLCJpbmZsaWdodCIsImNoaWxkcmVuSWdub3JlZCIsImlzSWdub3JlZCIsImNiIiwic3luYyIsIkdsb2IiLCJHbG9iU3luYyIsIl9kaWRSZWFsUGF0aCIsIl9wcm9jZXNzaW5nIiwiX2VtaXRRdWV1ZSIsIl9wcm9jZXNzUXVldWUiLCJwYXVzZWQiLCJub3Byb2Nlc3MiLCJfcHJvY2VzcyIsIl9maW5pc2giLCJvcHRpb25zXyIsIm9yaWdpbiIsImFib3J0ZWQiLCJyZWFscGF0aCIsIl9kaWRSZWFscGF0aCIsIl9yZWFscGF0aCIsImZpbmlzaCIsImVtaXQiLCJmb3VuZCIsIl9yZWFscGF0aFNldCIsIm1hdGNoc2V0IiwiX21ha2VBYnMiLCJyZWFscGF0aENhY2hlIiwicmVhbCIsInN5c2NhbGwiLCJfbWFyayIsIm1hcmsiLCJtYWtlQWJzIiwiYWJvcnQiLCJyZXN1bWUiLCJfZW1pdE1hdGNoIiwicHEiLCJpbkdsb2JTdGFyIiwiX3Byb2Nlc3NTaW1wbGUiLCJyZWFkIiwicmVtYWluIiwiYWJzIiwiX3Byb2Nlc3NHbG9iU3RhciIsIl9wcm9jZXNzUmVhZGRpciIsIl9yZWFkZGlyIiwiX3Byb2Nlc3NSZWFkZGlyMiIsInBuIiwicmF3R2xvYiIsImRvdE9rIiwibWF0Y2hlZEVudHJpZXMiLCJub21vdW50IiwiYWJzb2x1dGUiLCJub2RpciIsInN0Iiwic3RhdENhY2hlIiwiX3JlYWRkaXJJbkdsb2JTdGFyIiwiZm9sbG93IiwibHN0YXRjYiIsImxzdGF0IiwiaXNTeW0iLCJpc1N5bWJvbGljTGluayIsInN5bWxpbmtzIiwiaXNEaXJlY3RvcnkiLCJfcmVhZGRpckVycm9yIiwiX3JlYWRkaXJFbnRyaWVzIiwicmVhZGRpckNiIiwiY3dkQWJzIiwiY3dkIiwic3RyaWN0Iiwic2lsZW50IiwiX3Byb2Nlc3NHbG9iU3RhcjIiLCJyZW1haW5XaXRob3V0R2xvYlN0YXIiLCJnc3ByZWYiLCJub0dsb2JTdGFyIiwiaW5zdGVhZCIsImJlbG93IiwiX3N0YXQiLCJleGlzdHMiLCJfcHJvY2Vzc1NpbXBsZTIiLCJ0cmFpbCIsIm5lZWREaXIiLCJzdGF0Y2IiLCJfc3RhdDIiLCJyZWFscGF0aFN5bmMiLCJtb25rZXlwYXRjaCIsInVubW9ua2V5cGF0Y2giLCJvcmlnUmVhbHBhdGgiLCJvcmlnUmVhbHBhdGhTeW5jIiwidmVyc2lvbiIsIm9rIiwib2xkIiwibmV3RXJyb3IiLCJmaWVsZCIsIm5vdW5pcXVlIiwibm9zb3J0IiwiaWdub3JlIiwiaWdub3JlTWFwIiwic2V0dXBJZ25vcmVzIiwiY2hhbmdlZEN3ZCIsIm5vdSIsImFsbCIsImxpdGVyYWwiLCJub3REaXIiLCJpc0RpciIsInNsYXNoIiwibWFicyIsImdtYXRjaGVyIiwibG9jYWxlQ29tcGFyZSIsImdwYXR0ZXJuIiwibWF0Y2hlciIsIndyYXBweSIsInJldCIsImNhbGxlZCIsIm9uY2VTdHJpY3QiLCJvbmNlRXJyb3IiLCJjb25maWd1cmFibGUiLCJlbWl0dGVyIiwic2lnbmFscyIsImlzV2luIiwidW5sb2FkIiwibG9hZGVkIiwic2lnIiwicmVtb3ZlTGlzdGVuZXIiLCJzaWdMaXN0ZW5lcnMiLCJvcmlnaW5hbFByb2Nlc3NFbWl0IiwicmVhbGx5RXhpdCIsIm9yaWdpbmFsUHJvY2Vzc1JlYWxseUV4aXQiLCJzaWduYWwiLCJlbWl0dGVkIiwiX19zaWduYWxfZXhpdF9lbWl0dGVyX18iLCJpbmZpbml0ZSIsInNldE1heExpc3RlbmVycyIsIm9wdHMiLCJlcXVhbCIsImxvYWQiLCJldiIsImFsd2F5c0xhc3QiLCJsaXN0ZW5lcnMiLCJraWxsIiwicGlkIiwicHJvY2Vzc0VtaXQiLCJwcm9jZXNzUmVhbGx5RXhpdCIsImV4aXRDb2RlIiwidXNlckF2YXRhck1vZHVsZXNfMSIsInRyYW5zZmVyRGF0YVRvT2JqZWN0IiwiZm9ybVN0YXRlIiwidXNlck5hbWUiLCJ1c2VyRW1haWwiLCJ1c2VyQXZhdGFyIiwiZ2FtZVBvaW50cyIsInVzZXJQYXNzd29yZCIsImRlc3Ryb3lTaGlwIiwiYXZhdGFyUGljdHVyZSIsImRpc3BsYXlEYXRhIiwiZGlzcGxheURhdGFfMSIsInllYXIiLCJtb250aCIsImRheSIsImF2YXRhckltYWdlIiwibmV3RWxlbWVudCIsImdldEZ1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXREYXRlIiwiaW5pdFJlc3VsdFNjcmVlbiIsImZvcm1CdG5Td2l0Y2hlckFyZWEiLCJmb3JtTG9hZEFyZWEiLCJidXR0b25Td2l0Y2hlcl8xIiwiYXZhdGFyU2VjdGlvblNob3dTdGF0ZSIsImZvcm0iLCJmb3JtcyIsInJld3JpdGVGb3JtIiwiZm9ybUJ0bkFyZWEiLCJyZW1vdmVCdXR0b25DbGFzcyIsImJ1dHRvbnMiLCJmb3JtQWN0aW9uV3JpdGUiLCJmb3JtUmVzdWx0IiwiZXJyb3JGb3JtTWVzc2FnZSIsImVsZW1lbnRzIiwiYWxlcnRUZXh0IiwicmVzZXQiLCJhdmF0YXJCdXR0b24iLCJuZXdBdmF0YXJTZWxlY3RvcnMiLCJidXR0b25TZWxlY3RvciIsImF2YXRhckNsb3NlU2VsZWN0b3IiLCJwbGF5ZXJBdmF0YXJMb2FkU2VsZWN0b3IiLCJhdmF0YXJCb3hTZWxlY3RvciIsImF2YXRhcklubmVyQm94U2VsZWN0b3IiLCJkaXNwbGF5U2VsZWN0b3IiLCJidG5JZCIsImJ1dHRvbiIsImRhdGFOb3RUb1JlcGxhY2UiLCJuZXdTaGlwIiwiZGV0ZWN0T2JqZWN0c0FzTWFwIiwibmV3QmxvY2siLCJ0aGlzXzEiLCJtYXBGaW5kZXIiLCJkZWZhdWx0TWFwWCIsImRlZmF1bHRNYXBZIiwibWFwUHJvcHMiLCJibG9ja1NpemUiLCJpbnZlbnRvcnlNYXAiLCJjb3VudGluZyIsInBsYXllclNob3ciLCJtYXBOYW1lIiwiYmxvY2tJbmRleCIsIm1hcFBpeGVsSW5kZXgiLCJtYXBFbmdpbmUiLCJzZXRJbnRlcnZhbCIsIm1hcEJsb2NrIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyUmVjdCIsIm1hcEJsb2NrXzEiLCJwbGF5ZXJQb3NpdGlvblgiLCJwbGF5ZXJQb3NpdGlvblkiLCJjcmVhdGVNYXBDb250ZXh0IiwidXBkYXRlTWFwIiwiY2hhbmdlUGFydE9mVGV4dHVyZSIsImJhY2tncm91bmRBcnJheSIsIl9fcmVzdCIsImVuZW15TW9kdWxlcyIsImJ1bGxldHNNb2R1bGVfMSIsImFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMiIsInNXaWR0aERlZmF1bHQiLCJzSGVpZ2h0RGVmYXVsdCIsIm51bWJlck9mSnVtcCIsInNhdmVHYW1lTW9kdWxlc18xIiwibG9hZEdhbWVEYXRhXzEiLCJpbml0U2F2ZUxvYWRTY3JlZW4iLCJtZW51T2JqZWN0cyIsInNhdmVEYXRhIiwic2F2ZUZvcm0iLCJzYXZlU2NyZWVuIiwic2hvd1NhdmVEYXRhIiwiZGlzcGxheVNhdmVzT25TY3JlZW4iLCJzYXZlR2FtZUV2ZW50cyIsInNhdmVOYW1lIiwiY29sbGVjdERhdGEiLCJjcmVhdGVTYXZlIiwic2F2ZUxvYWRNZW51XzEiLCJzYXZlRGlhbG9nIiwidHlwZU9mV2FybmluZyIsIndyaXRlSW5zaWRlRWxlbWVudHMiLCJzYXZlVGltZSIsInBsZXllckluZm9ybWF0aW9uIiwiaW5mb3JtYXRpb25Ub1Nob3ciLCJhbGxEYXRhIiwiTlVNQkVSX09GX1NBVkVTIiwibG9hZGVkU2NyZWVuRGVhY3RpdmUiLCJsb2FkZWRTY3JlZW5BY3RpdmUiLCJjb2lucyIsInBsYXllckxpZmUiLCJzYXZlUGljdHVyZSIsInBsYXllckluZm9ybWF0aW9uIiwic2F2ZUZvbU5hbWUiLCJmaWVsZERhdGEiLCJkZWxldGVTYXZlRGF0YSIsImN1cnJlbnRTYXZlIiwicGljdHVyZVVSTCIsInRhcmdldEl0ZW0iLCJ1bmxpbmtTeW5jIiwib3ZlcndyaXRlU2F2ZURhdGEiLCJsb2FkU2F2ZXNGcm9tRm9sZGVyIiwibnVtYmVyT2ZTYXZlcyIsImZpbGVzIiwiYWxsRmlsZXMiLCJmaWxlRGF0YSIsImNsZWFyQ2xhc3NTZWxlY3RvckZpZWxkIiwidGFyZ2V0XzEiLCJzaG93QWNjZXB0QnV0dG9ucyIsInNhdmVEYXRhSXRlbSIsInRhcmdldF8yIiwiZGVsYXRlQ2xhc3NTZWxlY3RvckZpZWxkIiwiY29udGV4dEVsZW1lbnQiLCJwYXJyZW50RWxlbWVudCIsImNyZWF0ZU5ld0RpYWxvZ1dpbmRvdyIsImxvYWRTYXZlUHJvY2VkdXJlIiwiT1ZFUldSSVRFX1NBVkUiLCJiYWNrVG9PYmplY3QiLCJkYXRhbm90VG9DaGFuZ2UiLCJsb2FkTWFwRWxlbWVudCIsImJhY2tncm91bmRUZXh0dXJlSW1nIiwiR2FtZSIsImNoYW5nZWRTaGlwIiwiYWx0ZXJuYXRlRGF0YSIsImFsbEZpbGVzXzEiLCJhbHREYXRhIiwibG9jYWxBbHREYXRhIiwiY3VzdG9tUGFnZUZsYWdzIiwiaW5kZXhGbGFnIiwic2F2ZURhdGFfMSIsImhvdXJzIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdhbWVEYXRhTW9kdWxlcyIsInBsYXllclNoaXBNb2R1bGVfMSIsImdsb2JhbFZhcmlhYmxlc18xIiwic2lkZU9iamVjdEJlaGF2aW91ciIsImdhbWVCYWNrZ3JvdW5kRW5naW5lRnVuY3Rpb24iLCJiYWNrZ3JvdW5kTWFwIiwibGV2ZWxDaGFuZ2VXaW5kb3ciLCJsZXZlbENoYW5nZXNFbmdpbmVGdW5jdGlvbiIsImdhbWVEeW5hbWljTGV2ZWxCb3hSZW5kZXIiLCJhbGxFbGV2YXRvcnMiLCJhbGxCYWNrZ3JvdW5kc18xIiwiYmFja2dyb3VuZFN5IiwiYWxsRWxldmF0b3JzXzEiLCJpbml0R2FtZU9iamVjdCIsImdhbWVTdGF0ZSIsImFwcE1lbnVBbmRTb3VuZEluaXQiLCJhcHBTb3VuZEluaXQiLCJnYW1lU2V0dGluZ3NNZW51SW5pdCIsImdhbWVPYmplY3RTdGFydCIsInVpQ29udHJvbGxlciIsImdhbWVJbnRlcnZhbCIsImVuZW15RW5naW5lRnVuY3Rpb24iLCJidWxsZXRFbmdpbmVGdW5jdGlvbiIsIm5lYXJHcm91bmRFbmVteSIsIm5lYXJNYXBCbG9jayIsImdyb3VuZEJ1bGxldEVuZ2luZUZ1bmN0aW9uIiwiYW5nbGVyYW5kaW1pemUiLCJnYW1lRHluYW1pY1BsYXllciIsImdhbWVEeW5hbWljRW5lbXlSZW5kZXIiLCJzcGFjZVNoaXBFbmdpbmVGdW5jdGlvbiIsInNpZGVPYmplY3RzRW5naW5lRnVuY3Rpb24iLCJnYW1lQ2hhbmdlRW5naW5lRnVuY3Rpb24iLCJzaG93U3RhcnRXaW5kb3ciLCJzaG93R2FtZVN0YXRzIiwic2hvd1BhdXNlV2luZG93Iiwic2hvd01lbnVXaW5kb3ciLCJnYW1lVWlHYW1lU3RhdHMiLCJnYW1lV2luV2luZG93IiwiZ2FtZVVpRW5naW5lRnVuY3Rpb24iLCJpbml0QXBwR2xvYmFsVmFyaWFibGUiLCJhcGkiLCJleHBvcnRlZCIsImxvY2FscyIsIm1lbW8iLCJpc09sZElFIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImluc2VydCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsImVuY29kZVVSSUNvbXBvbmVudCIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIiwidXNlU291cmNlTWFwIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxldmVsRGF0YVdvcmtlciIsInJlYWRPYmplY3QiLCJyZXNwb25zZUl0ZW0iLCJsZXZlbE9iamVjdHNXb3JrZXIiLCJvYmplY3RUeXBlIiwiZ3JhcHBsZU9iamVjdHNXb3JrZXIiLCJ1c2VyU2hpcFdvcmtlciIsInVzZXJzaGlwIiwiZW5lbXlTaGlwV29ya2VyIiwiZ3JvdW5kQ2hhcmFjdGVyc1dvcmtlciIsInNlYXJjaFJlc3VsdCIsImdyb3VuZEVuZW15Q29uc3RydWN0b3JXb3JrZXIiLCJzaG9wR3Vuc1dvcmtlciIsInNob3BHdW5zV29ya2VyUHV0IiwidXNlckNvaW5zIiwiaXRlbU5hbWUiLCJzaGlwWWFyZFdvcmtlciIsInNoaXBZYXJkV29ya2VyUHV0IiwiY3VycmVudFNoaXBOYW1lIiwicGxheWVyT2JqZWN0RGF0YUludmVudG9yeSIsInBsYXllck9iamVjdERhdGFHdW5zIiwiYWNjZXNpYmlsaXR5IiwiY29tcGFyZUl0ZW1zIiwic3RvcmVJdGVtc1dvcmtlckdldCIsInN0b3JlSXRlbXNXb3JrZXJQdXQiLCJnZXRSZXN1bHRsRGF0YSIsInB1YmxpY0RhdGEiLCJwb3N0UmVzdWx0bERhdGEiLCJkYXRhQXJyIiwiZmluZFVzZXIiLCJtZXNzYWdlVGV4dCIsImZpbmRlckRhdGEiLCJyZXN1bGV0RW1haWwiLCJyZXN1bGV0TmFtZSIsImRhdGFGaW5kZXIiLCJ1cGRhdGVSZXN1bHRsRGF0YSIsInN0YXR1c18xIiwicmVzdWxldCIsImRhdGFVcGRhdGVyIiwiYXJyYXlMaWtlIiwibmV3TGVuIiwibmV3QXJyIiwiaWR4IiwiY2FsbEFyZ3MiLCJpbml0aWFsUGFyYW1zIiwiaGFzU2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlIiwiaGFzTmV4dFRpY2siLCJuZXh0VGljayIsImZhbGxiYWNrIiwic2V0SW1tZWRpYXRlJDEiLCJpbnZva2VDYWxsYmFjayIsInJldGhyb3ciLCJzdXBwb3J0c1N5bWJvbCIsImlzQXN5bmMiLCJ3cmFwQXN5bmMiLCJhc3luY0ZuIiwiYXBwbHlFYWNoJDEiLCJlYWNoZm4iLCJmbnMiLCJnbyIsInRoYXQiLCJTeW1ib2wkMSIsInN5bVRvU3RyaW5nVGFnJDEiLCJuYXRpdmVPYmplY3RUb1N0cmluZyQxIiwiYnJlYWtMb29wIiwiY2FsbEZuIiwiaXRlcmF0b3JTeW1ib2wiLCJvYmplY3RQcm90byQzIiwiaGFzT3duUHJvcGVydHkkMiIsImZyZWVFeHBvcnRzJDEiLCJmcmVlTW9kdWxlJDEiLCJoYXNPd25Qcm9wZXJ0eSQxIiwib2JqZWN0UHJvdG8kNSIsImhhc093blByb3BlcnR5JDMiLCJjb2xsIiwiY3JlYXRlQXJyYXlJdGVyYXRvciIsIm9rZXlzIiwiZ2V0SXRlcmF0b3IiLCJjcmVhdGVFUzIwMTVJdGVyYXRvciIsIm9ubHlPbmNlIiwiX2VhY2hPZkxpbWl0IiwibmV4dEVsZW0iLCJydW5uaW5nIiwibG9vcGluZyIsIml0ZXJhdGVlQ2FsbGJhY2siLCJyZXBsZW5pc2giLCJlbGVtIiwiZWFjaE9mTGltaXQiLCJkb0xpbWl0IiwiZWFjaE9mQXJyYXlMaWtlIiwiY29tcGxldGVkIiwiaXRlcmF0b3JDYWxsYmFjayIsImVhY2hPZkdlbmVyaWMiLCJlYWNoT2YiLCJkb1BhcmFsbGVsIiwiX2FzeW5jTWFwIiwiYXJyIiwicmVzdWx0cyIsImNvdW50ZXIiLCJfaXRlcmF0ZWUiLCJhcHBseUVhY2giLCJkb1BhcmFsbGVsTGltaXQiLCJtYXBMaW1pdCIsIm1hcFNlcmllcyIsImFwcGx5RWFjaFNlcmllcyIsImF1dG8iLCJ0YXNrcyIsImNvbmN1cnJlbmN5IiwibnVtVGFza3MiLCJydW5uaW5nVGFza3MiLCJoYXNFcnJvciIsInJlYWR5VGFza3MiLCJyZWFkeVRvQ2hlY2siLCJ1bmNoZWNrZWREZXBlbmRlbmNpZXMiLCJlbnF1ZXVlVGFzayIsInRhc2tDYWxsYmFjayIsInNhZmVSZXN1bHRzIiwicmtleSIsInRhc2tDb21wbGV0ZSIsInRhc2tGbiIsInJ1blRhc2siLCJwcm9jZXNzUXVldWUiLCJ0YXNrTmFtZSIsImdldERlcGVuZGVudHMiLCJkZXBlbmRlbmNpZXMiLCJyZW1haW5pbmdEZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5TmFtZSIsInRhc2tMaXN0ZW5lcnMiLCJjdXJyZW50VGFzayIsImRlcGVuZGVudCIsImNoZWNrRm9yRGVhZGxvY2tzIiwicnNNb2RpZmllciIsIkZOX0FSR1MiLCJGTl9BUkdfU1BMSVQiLCJGTl9BUkciLCJTVFJJUF9DT01NRU5UUyIsImF1dG9JbmplY3QiLCJuZXdUYXNrcyIsInBhcmFtcyIsImZuSXNBc3luYyIsImhhc05vRGVwcyIsIm5ld1Rhc2siLCJwYXJzZVBhcmFtcyIsInRhc2tDYiIsIm5ld0FyZ3MiLCJETEwiLCJzZXRJbml0aWFsIiwiZGxsIiwibm9kZSIsInF1ZXVlIiwid29ya2VyIiwicGF5bG9hZCIsIl93b3JrZXIiLCJudW1SdW5uaW5nIiwid29ya2Vyc0xpc3QiLCJwcm9jZXNzaW5nU2NoZWR1bGVkIiwiX2luc2VydCIsImluc2VydEF0RnJvbnQiLCJxIiwic3RhcnRlZCIsImlkbGUiLCJkcmFpbiIsIl90YXNrcyIsInVuc2hpZnQiLCJfbmV4dCIsInVuc2F0dXJhdGVkIiwiaXNQcm9jZXNzaW5nIiwic2F0dXJhdGVkIiwidGVzdEZuIiwiY2FyZ28iLCJyZW1vdmVMaW5rIiwicHJldiIsImluc2VydEFmdGVyIiwibmV3Tm9kZSIsImN1cnIiLCJlYWNoT2ZTZXJpZXMiLCJzZXEiLCJfZnVuY3Rpb25zIiwibmV3YXJncyIsIm5leHRhcmdzIiwiY29tcG9zZSIsIl9jb25jYXQiLCJjb25jYXRMaW1pdCIsIm1hcFJlc3VsdHMiLCJjb25jYXRTZXJpZXMiLCJfY3JlYXRlVGVzdGVyIiwiY2hlY2siLCJnZXRSZXN1bHQiLCJ0ZXN0UmVzdWx0IiwidGVzdFBhc3NlZCIsIl9maW5kR2V0UmVzdWx0IiwiZGV0ZWN0IiwiZGV0ZWN0TGltaXQiLCJkZXRlY3RTZXJpZXMiLCJjb25zb2xlRnVuYyIsImRvRHVyaW5nIiwiX2ZuIiwiX3Rlc3QiLCJ0cnV0aCIsImRvV2hpbHN0IiwiZG9VbnRpbCIsImR1cmluZyIsIl93aXRob3V0SW5kZXgiLCJlYWNoTGltaXQiLCJlYWNoTGltaXQkMSIsImVhY2hTZXJpZXMiLCJlbnN1cmVBc3luYyIsImlubmVyQXJncyIsIm5vdElkIiwiZXZlcnlMaW1pdCIsImV2ZXJ5U2VyaWVzIiwiZmlsdGVyQXJyYXkiLCJ0cnV0aFZhbHVlcyIsImZpbHRlckdlbmVyaWMiLCJfZmlsdGVyIiwiZmlsdGVyTGltaXQiLCJmaWx0ZXJTZXJpZXMiLCJmb3JldmVyIiwiZXJyYmFjayIsImdyb3VwQnlMaW1pdCIsImdyb3VwQnlTZXJpZXMiLCJtYXBWYWx1ZXNMaW1pdCIsIm1hcFZhbHVlc1NlcmllcyIsImhhc2hlciIsInF1ZXVlcyIsInVubWVtb2l6ZWQiLCJfcGFyYWxsZWwiLCJwYXJhbGxlbExpbWl0IiwicGFyYWxsZWxMaW1pdCQxIiwicXVldWUkMSIsInByaW9yaXR5UXVldWUiLCJwcmlvcml0eSIsIm5leHROb2RlIiwicmFjZSIsInJlZmxlY3QiLCJyZWZsZWN0Q2FsbGJhY2siLCJjYkFyZyIsInJlZmxlY3RBbGwiLCJyZWplY3QkMSIsInJlamVjdExpbWl0IiwicmVqZWN0U2VyaWVzIiwiY29uc3RhbnQkMSIsInJldHJ5IiwiREVGQVVMVF9USU1FUyIsIkRFRkFVTFRfSU5URVJWQUwiLCJpbnRlcnZhbEZ1bmMiLCJwYXJzZVRpbWVzIiwiYWNjIiwiaW50ZXJ2YWwiLCJlcnJvckZpbHRlciIsIl90YXNrIiwicmV0cnlBdHRlbXB0IiwicmV0cnlhYmxlIiwic2VyaWVzIiwic29tZUxpbWl0Iiwic29tZVNlcmllcyIsInRpbWVvdXQiLCJtaWxsaXNlY29uZHMiLCJ0aW1lciIsInRpbWVkT3V0IiwidGltZUxpbWl0IiwidGltZXNTZXJpZXMiLCJ0cnlFYWNoIiwidW5tZW1vaXplIiwid2hpbHN0IiwidW50aWwiLCJ0YXNrSW5kZXgiLCJuZXh0VGFzayIsInBhcmFsbGVsIiwidGltZXNMaW1pdCIsImFsbExpbWl0IiwiYWxsU2VyaWVzIiwiYW55IiwiYW55TGltaXQiLCJhbnlTZXJpZXMiLCJmaW5kTGltaXQiLCJmaW5kU2VyaWVzIiwiZm9yRWFjaFNlcmllcyIsImZvckVhY2hMaW1pdCIsImZvckVhY2hPZiIsImZvckVhY2hPZlNlcmllcyIsImZvckVhY2hPZkxpbWl0IiwiaW5qZWN0IiwiZm9sZGwiLCJmb2xkciIsInNlbGVjdCIsInNlbGVjdExpbWl0Iiwic2VsZWN0U2VyaWVzIiwid3JhcFN5bmMiLCJmYWN0b3J5IiwicmltcmFmU3luYyIsIl9lcnIiLCJfMDY2NiIsImRlZmF1bHRHbG9iT3B0cyIsImlzV2luZG93cyIsIm1heEJ1c3lUcmllcyIsImVtZmlsZVdhaXQiLCJkaXNhYmxlR2xvYiIsImJ1c3lUcmllcyIsImVyclN0YXRlIiwiYWZ0ZXJHbG9iIiwicmltcmFmXyIsIkNCIiwiZml4V2luRVBFUk0iLCJybWRpciIsInVubGluayIsImNobW9kIiwiZXIyIiwiZXIzIiwic3RhdHMiLCJmaXhXaW5FUEVSTVN5bmMiLCJjaG1vZFN5bmMiLCJzdGF0U3luYyIsInJtZGlyU3luYyIsIm9yaWdpbmFsRXIiLCJybWtpZHMiLCJsc3RhdFN5bmMiLCJyZWFkZGlyU3luYyIsInJldHJpZXMiLCJ0aHJldyIsInJta2lkc1N5bmMiLCJwYXRoTW9kdWxlIiwiREVCVUciLCJOT0RFX0RFQlVHIiwibWF5YmVDYWxsYmFjayIsImJhY2t0cmFjZSIsIm1pc3NpbmdDYWxsYmFjayIsInRocm93RGVwcmVjYXRpb24iLCJub0RlcHJlY2F0aW9uIiwibXNnIiwidHJhY2VEZXByZWNhdGlvbiIsInRyYWNlIiwibm9ybWFsaXplIiwibmV4dFBhcnRSZSIsInNwbGl0Um9vdFJlIiwicG9zIiwib3JpZ2luYWwiLCJzZWVuTGlua3MiLCJrbm93bkhhcmQiLCJyZXNvbHZlZExpbmsiLCJsaW5rVGFyZ2V0IiwiZGV2IiwiaW5vIiwicmVhZGxpbmtTeW5jIiwiTE9PUCIsImdvdFJlc29sdmVkTGluayIsImdvdFN0YXQiLCJnb3RUYXJnZXQiLCJyZWFkbGluayIsImNvbmNhdE1hcCIsImJhbGFuY2VkIiwic3RyIiwiaXNUb3AiLCJleHBhbnNpb25zIiwicHJlIiwiaXNOdW1lcmljU2VxdWVuY2UiLCJpc0FscGhhU2VxdWVuY2UiLCJpc1NlcXVlbmNlIiwiaXNPcHRpb25zIiwicG9zdCIsImVzY0Nsb3NlIiwicGFyc2VDb21tYVBhcnRzIiwicGFydHMiLCJwb3N0UGFydHMiLCJlbWJyYWNlIiwiTiIsIm51bWVyaWMiLCJpbmNyIiwiaXNQYWRkZWQiLCJmcm9tQ2hhckNvZGUiLCJuZWVkIiwieiIsImV4cGFuc2lvbiIsImVzY1NsYXNoIiwiZXNjT3BlbiIsImVzY0NvbW1hIiwiZXNjUGVyaW9kIiwiZXNjYXBlQnJhY2VzIiwidW5lc2NhcGVCcmFjZXMiLCJ4cyIsIm1heWJlTWF0Y2giLCJyZWciLCJiZWdzIiwiYmVnIiwiYWkiLCJiaSIsInV0aWwiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwid3JpdGFibGUiLCJUZW1wQ3RvciIsIm5ld1BhdHRlcm4iLCJyZXFzIiwiUkVTIiwiY2JzIiwibWFrZXJlcyIsIl8wNzc3IiwibWtkaXJQIiwieGZzIiwibWtkaXIiLCJlcnIwIiwiZXJyMSIsImVuY29kaW5nIiwidHJ1ZW5hbWUiLCJmZCIsInRtcGZpbGUiLCJyZW1vdmVPbkV4aXRIYW5kbGVyIiwib25FeGl0IiwiY2xlYW51cE9uRXhpdCIsImFic29sdXRlTmFtZSIsImFjdGl2ZUZpbGVzIiwicmVhbG5hbWUiLCJnZXRUbXBuYW1lIiwiY2hvd24iLCJnZXR1aWQiLCJnaWQiLCJfZmQiLCJ3cml0ZSIsImZzeW5jIiwicmVuYW1lIiwiY2xlYW51cCIsIm9wZW5TeW5jIiwid3JpdGVTeW5jIiwiZnN5bmNTeW5jIiwiY2xvc2VTeW5jIiwiY2hvd25TeW5jIiwicmVuYW1lU3luYyIsIl9nZXRUbXBuYW1lIiwiX2NsZWFudXBPbkV4aXQiLCJNdXJtdXJIYXNoMyIsInRocmVhZElkIiwiaW52b2NhdGlvbnMiLCJfX2ZpbGVuYW1lIiwiaGFzaCIsImdyYWNlZnVsUXVldWUiLCJwcmV2aW91c1N5bWJvbCIsInBvbHlmaWxscyIsImxlZ2FjeSIsImZvciIsImRlYnVnbG9nIiwiZm9ybWF0IiwiZnMkY2xvc2UiLCJmcyRjbG9zZVN5bmMiLCJwYXRjaCIsImdyYWNlZnVsaWZ5IiwiY3JlYXRlUmVhZFN0cmVhbSIsIlJlYWRTdHJlYW0iLCJjcmVhdGVXcml0ZVN0cmVhbSIsIldyaXRlU3RyZWFtIiwiZnMkcmVhZEZpbGUiLCJnbyRyZWFkRmlsZSIsImVucXVldWUiLCJmcyR3cml0ZUZpbGUiLCJnbyR3cml0ZUZpbGUiLCJmcyRhcHBlbmRGaWxlIiwiYXBwZW5kRmlsZSIsImdvJGFwcGVuZEZpbGUiLCJmcyRyZWFkZGlyIiwiZ28kcmVhZGRpciIsImxlZ1N0cmVhbXMiLCJmcyRSZWFkU3RyZWFtIiwiYXV0b0Nsb3NlIiwiZGVzdHJveSIsImZzJFdyaXRlU3RyZWFtIiwiRmlsZVJlYWRTdHJlYW0iLCJGaWxlV3JpdGVTdHJlYW0iLCJmcyRvcGVuIiwiZ28kb3BlbiIsIlRFU1RfR1JBQ0VGVUxfRlNfR0xPQkFMX1BBVENIIiwiX19wYXRjaGVkIiwib3JpZ0N3ZCIsIkdSQUNFRlVMX0ZTX1BMQVRGT1JNIiwiY2hkaXIiLCJsY2htb2QiLCJPX1dST05MWSIsIk9fU1lNTElOSyIsImZjaG1vZCIsImVycjIiLCJsY2htb2RTeW5jIiwiZmNobW9kU3luYyIsInBhdGNoTGNobW9kIiwibHV0aW1lcyIsIm10IiwiZnV0aW1lcyIsImx1dGltZXNTeW5jIiwiZnV0aW1lc1N5bmMiLCJwYXRjaEx1dGltZXMiLCJjaG93bkZpeCIsImZjaG93biIsImxjaG93biIsImNobW9kRml4IiwiY2hvd25GaXhTeW5jIiwiZmNob3duU3luYyIsImxjaG93blN5bmMiLCJjaG1vZEZpeFN5bmMiLCJzdGF0Rml4IiwiZnN0YXQiLCJzdGF0Rml4U3luYyIsImZzdGF0U3luYyIsImZzJHJlbmFtZSIsImZyb20iLCJ0byIsImJhY2tvZmYiLCJzdGF0ZXIiLCJjaG93bkVyT2siLCJmcyRyZWFkIiwiY2FsbGJhY2tfIiwiZWFnQ291bnRlciIsIl9fIiwiX19wcm90b19fIiwicmVhZFN5bmMiLCJmcyRyZWFkU3luYyIsIlN0cmVhbSIsInJlYWRhYmxlIiwiYnVmZmVyU2l6ZSIsInNldEVuY29kaW5nIiwiX3JlYWQiLCJieXRlc1dyaXR0ZW4iLCJidXN5IiwiX3F1ZXVlIiwiX29wZW4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwic2VlZCIsImgxIiwiazEiLCJ0b3AiLCJyZW0iLCJlbGVjdHJvbiIsImFwcCIsImN1cnJlbnREYXRhUGF0aCIsImdldFBhdGgiLCJkaXJlY3RvcnkiLCJrZXlGaWxlTmFtZSIsImVzY2FwZWRGaWxlTmFtZSIsImxvY2tGaWxlIiwibG9ja09wdGlvbnMiLCJzdGFsZSIsInJldHJ5V2FpdCIsInd4IiwiT19UUlVOQyIsIk9fQ1JFQVQiLCJPX0VYQ0wiLCJvcyIsImZpbGV0aW1lIiwibG9ja3MiLCJ1bmxvY2tTeW5jIiwiSCIsImgiLCJ1bmxpbmtFciIsImFnZSIsImNoZWNrU3luYyIsInJlcSIsIm5vdFN0YWxlIiwicG9sbFBlcmlvZCIsInJldHJ5VGhyb3ciLCJuZXdSVCIsImxvY2tTeW5jIiwibWF5YmVTdGFsZSIsImhhc1N0YWxlTG9jayIsInN0YXRFciIsImN0IiwidG9nZ2xlQXZhdGFyQXJlYSIsImF2YXRhckJveCIsImRpc3BsYXlDdXJyZW50QXZhdGFyIiwiY29udmVydFBpY3R1cmVUb0RhdGEiLCJhdmF0YXJBcmVhU2VsZWN0b3JzIiwibG9hZFBpY3R1cmUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsImNhbnZhc18xIiwiY3R4XzEiLCJtYWluQXZhdGFyQnV0dG9uIiwiYXZhdGFyQ2xvc2UiLCJwbGF5ZXJBdmF0YXJMb2FkIiwiYXZhdGFySW5uZXJCb3giLCJjdXJyZW50SW1hZ2UiLCJhdmF0YXJFbGVtZW50IiwiYXZhdGFyUGljdHVyZXNfMSIsInNob3dBbGxBdmF0YXJzIiwiZGVmYXVsdE9wdGlvbnMiLCJxdWFsaXR5IiwiQ2FudmFzIiwiY3Jvc3NPcmlnaW4iLCJpbWFnZXMiLCJvbmVycm9yIiwiZ2V0U2l6ZSIsImRpbSIsImdsb2JhbEFscGhhIiwib3BhY2l0eSIsInByb2dyZXNzaXZlIiwianBlZyIsInNoYXBlUHJvcGVydHllcyIsImdyYWRpZW50IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJ0b3BYIiwidG9wWSIsImJvdHRvbVgiLCJib3R0b21ZIiwiYWRkQ29sb3JTdG9wIiwiYmFja0dyb3VuZEZpbmFsIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImlzQm9yZGVyIiwiYm9yZGVyQ29sb3IiLCJzdHJva2UiLCJjbG9zZVBhdGgiLCJ0ZXh0V2lkdGgiLCJtZWFzdXJlVGV4dCIsImJ1dHRvbldpZHRoIiwidGV4dFByb3BlcnR5IiwibGVmdFBhZGRpbmciLCJyaWdodFBhZGRpbmciLCJsaW5lV2lkdGgiLCJib3JkZXJSYWRpdXMiLCJmb250U2l6ZSIsInRleHRDb2xvciIsInRvcFBhZGRpbmciLCJnYW1lVWlNb2R1bGVzXzEiLCJtZW51U2V0dGluZ3NfMSIsImxldmVsVG9DaGFuZ2UiLCJpbWFnZURpcnJlY3Rpb24iLCJnYW1lVWlNZW51Iiwic2hvd1VpUG9wdXBXaW5kb3ciLCJpbml0VWlFbGVtZW50cyIsInNob3BTaGlwQWN0aXZpdHkiLCJzaG9wTWFya2V0QWN0aXZpdHkiLCJzaG9wTWVudU9wZXJhdGlvbSIsImN1cnJlbnRCdXR0b24iLCJidXR0b25zXzEiLCJidXR0b25TdHlsZU9wZXJhdGlvbiIsInNob3BFeGl0QWN0aXZpdHkiLCJnYW1lVWlMb2FkTWVudV8xIiwiZ2FtZVVpU2V0dGluZ3NNZW51XzEiLCJnYW1lUGF1c2VTY3JlZW5fMSIsImdhbWVTdGF0c1NjcmVlbl8xIiwiZ2FtZUdhbWVPdmVyU2NyZWVuXzEiLCJnYW1lV2luU2NyZWVuXzEiLCJ1aUVsZW1lbnRNb2R1bGVzXzEiLCJsZXZlbENoYW5nZVNjcmVlbl8xIiwiY2FudmFzTWVudUNsaWNrRXZlbnQiLCJlbGVtZW50c09uU2NyZWVuIiwic2NyZWVuU2l6ZSIsImdhbWVMb2FkTWVudSIsImNsaWNrRGV0ZWN0aW9uIiwiZ2FtZVNldHRpbmdzTWVudSIsImdhbWVXaW5TY3JlZW4iLCJkcmF3TWV0aG9kcyIsInVpSW1hZ2UiLCJ1aVRleHQiLCJnYW1lSW5mb3JtYXRpb25TY3JlZW4iLCJsZXZlbENoYW5nZVNjcmVlbiIsImdhbWVPdmVyU2NyZWVuIiwicGljRGlyZWN0aW9uIiwic2NyZWVuT2JqZWN0cyIsIml0ZW1JbmRleCIsInVpTW9kZWxNZXRob2RzXzEiLCJwaWN0dXJlRGlyZWN0aW9uIiwiY2xpY2tlZCIsImJvdHRvbVBhZGRpbmciLCJwaWN0dXJlRGlycmVjdGlvbiIsImV4dHJhIiwic3RlcHMiLCJpc0Jvc3NMZXZlbCIsImNvaW50SW5kZXgiLCJudW1iZXJPZkNvaW4iLCJtYXJnaW5MZWZ0Iiwib2JqZWN0c1dpdGhQcm9wZXJ0aWVzIiwiZGlzcGxheUltYWdlIiwiYWN0aXZhdGVCdXR0b24iLCJjYXJkT2JqZWN0Iiwic2V0dGluZ3NNZW51Iiwidm9sdW1lRGlzcGxheSIsInZvbHVtZUVmZmVjdERpc3BsYXkiLCJzb3VuZEVmZmVjdExldmVsIiwic291bmRPblN3aXRjaGVyIiwiZnVsbFNjcmVlblN3aXRjaGVyIiwic291bmRFZmZlY3QiLCJmdWxsU2NyZWVuIiwidHJhbnNmb3JtTWVudURhdGEiLCJjaGVja2VkIiwic2F2ZVNldHRpbmdzVGV4dCIsInNldHRpbmdzTWVzc2FnZSIsIm1lbnVTZXR0aW5nc0Zvcm0iLCJwcmV2aXVzU2V0dGluZ3MiLCJzZXR0aW5nc0RhdGEiLCJhdXRvc2hvb3QiLCJzY3JlZW5SZXNvbHV0aW9uIiwic2NyZWVuVmFyaWF0b24iLCJtZW51RGF0YSIsInNldHRpbmdzUmVzdWx0IiwicmVwbGFjZURhdGEiLCJiYWNrZ3JvdW5kTW9kdWxlXzEiLCJkZWZhdWx0WCIsImVuZ2luZV8xIiwiZ2V0UGxheWVySW5mb3JtYXRpb24iLCJoZWFsdGgiLCJtYXhIZWFsdGhQb2ludCIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJzZXRQcm90b3R5cGVPZiIsImdhbWVTaWRlT2JqZWN0Q29uc3RydWN0b3JfMSIsIl9zdXBlciIsIkF1ZGlvIiwiZGVmYXVsdFVybCIsInhUYXJnZXQiLCJ5VGFyZ2V0IiwieE1vdmUiLCJ5TW92ZSIsImJhY2tncm91bmRJbWFnZUxpbmsiLCJkeW5hbWljVXNlckNvbnN0cnVjdG9yXzEiLCJkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMiIsInNob3RQcm9iYWJpbGl0eSIsIlNBVkVfREFUQV9GSUxFIiwiR0FNRV9TRVRUSU5HU19VUkwiLCJHUk9VTkRfUExBWUVSX1NUQUlSU19HUk9VTkRfVE9VQ0giXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYs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USxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJ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SW9iLHFCQUF1Qiw4QkFDbkNyYixRQUFRQyxJQUFJOG1CLHNCQUF3Qiw0QkFDcEMvbUIsUUFBUUMsSUFBSXFiLG1DQUFxQyxtQ0FDakR0YixRQUFRQyxJQUFJQyw0QkFBOEIsUUFDMUNGLFFBQVFDLElBQUl3M0IsNkJBQStCLFFBQzNDejNCLFFBQVFDLElBQUkwNEIseUJBQTJCLFFBQ3ZDMzRCLFFBQVFDLElBQUk4a0IseUJBQTJCLFFBQ3ZDL2tCLFFBQVFDLElBQUl3aEIsY0FBZ0IsZ0JBQzVCemhCLFFBQVFDLElBQUkyaUIsa0JBQW9CLG9CQUNoQzVpQixRQUFRQyxJQUFJeXpCLGlCQUFtQix1QkFDL0IxekIsUUFBUUMsSUFBSTRWLG1CQUFxQixpQkFDakM3VixRQUFRQyxJQUFJK0wsMEJBQTRCLDZCQUN4Q2hNLFFBQVFDLElBQUkwbkIsZ0JBQWtCLEdBQzlCM25CLFFBQVFDLElBQUk2bkIsd0JBQTBCLEdBQ3RDOW5CLFFBQVFDLElBQUk4bkIsbUJBQXFCLEdBQ2pDL25CLFFBQVFDLElBQUlzZ0IsbUJBQXFCLFFBQ2pDdmdCLFFBQVFDLElBQUlnZ0IsNEJBQThCLFFBQzFDamdCLFFBQVFDLElBQUlpaUIsaUJBQW1CLFFBQy9CbGlCLFFBQVFDLElBQUk0bEIsa0JBQW9CLFFBQ2hDN2xCLFFBQVFDLElBQUkybEIsbUJBQXFCLFFBQ2pDNWxCLFFBQVFDLElBQUltUyxrQkFBb0IsUUFDaENwUyxRQUFRQyxJQUFJbzRFLGVBQWlCLFFBQzdCcjRFLFFBQVFDLElBQUlzMkUsZ0JBQWtCLElBQzlCdjJFLFFBQVFDLElBQUk2c0csa0NBQW9DLFFBSTVDOXNHLFFBQVFDLElBQUkyWSxLQUFPdlgsVUFBWSxJQUMvQjBMLFFBQVF3SSxJQUFJIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9wdWJsaWMvZGlzdFwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNTUpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNvbnN0cnVjdG9ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL2luZGV4XCIpKTtcclxudmFyIGRpc3BsYXlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vdmlldy9kaXNwbGF5TW9kdWxlc1wiKTtcclxudmFyIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lU2lkZU9iamVjdHNNb2R1bGVcIik7XHJcbmV4cG9ydHMuZXhwbG9zaW9uRmlyZSA9IGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLmV4cGxvc2lvbkZpcmU7XHJcbnZhciBnYW1lR3JhcHBsZU9iamVjdHNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXCIpO1xyXG52YXIgc291bmRNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL3NvdW5kTW9kdWxlc1wiKTtcclxudmFyIGdhbWVTaG9wTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vdWkvc2hvcC9nYW1lU2hvcE1vZHVsZVwiKTtcclxudmFyIGVuZ2luZU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZW5naW5lTW9kdWxlc1wiKTtcclxuLyogZGlzcGxheSBkZXZlbG9wbWVudCBib3ggYW5kIGN5cmNsZSBhdCBhY3RpdmUgb2JqZWN0cyAqL1xyXG5mdW5jdGlvbiBkcmF3Q2lyY2xlKF9hKSB7XHJcbiAgICB2YXIgY3R4ID0gX2EuY3R4LCB4ID0gX2EueCwgeSA9IF9hLnksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodCwgY29sb3IgPSBfYS5jb2xvcjtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmMoeCwgeSwgd2lkdGggLyAyLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICBjdHguZmlsbCgpO1xyXG59XHJcbmZ1bmN0aW9uIGRyYXdSZWN0YW5nbGUoX2EpIHtcclxuICAgIHZhciBjdHggPSBfYS5jdHgsIHggPSBfYS54LCB5ID0gX2EueSwgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0LCBjb2xvciA9IF9hLmNvbG9yO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgY3R4LmZpbGxSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxufVxyXG5leHBvcnRzLmRyYXdSZWN0YW5nbGUgPSBkcmF3UmVjdGFuZ2xlO1xyXG5mdW5jdGlvbiBkcmF3RnJhbWUoX2EpIHtcclxuICAgIHZhciBjdHggPSBfYS5jdHgsIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodCwgeCA9IF9hLngsIHkgPSBfYS55LCBjb2xvciA9IF9hLmNvbG9yO1xyXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XHJcbiAgICBjdHguc3Ryb2tlUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxufVxyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTWFpbiBvYmplY3QgZGlzcGxheSBmdW5jdGlvbiAoIGRhaXNwbGF5IG9iamVjdCB3aXRoIHRleHR1cmUgYW5kIGFuZ2VsLCBtZXRob2Qgb2Ygb2JqZWN0KVxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gZGlzcGxheU9iamVjdEF0U2NlbmUobWFpbkdhbWVPYmplY3QsIHNlY29uZFRleHR1cmUpIHtcclxuICAgIGlmICh0aGlzLnkgPiAwIC0gdGhpcy5oZWlnaHQgJiYgdGhpcy54ID4gKDAgLSB0aGlzLndpZHRoKSAmJiB0aGlzLnkgPCB3aW5kb3cuaW5uZXJIZWlnaHQgKyB0aGlzLmhlaWdodCAmJiB0aGlzLnggPCB3aW5kb3cuaW5uZXJXaWR0aCArIHRoaXMud2lkdGggfHwgdGhpcy5vYmplY3ROYW1lRmxhZyA9PT0gXCJidWxsZXRcIikge1xyXG4gICAgICAgIC8vaWYodGhpcy55ID4gMTAwICYmIHRoaXMueCA+IDEwMCAmJiB0aGlzLnkgPCB3aW5kb3cuaW5uZXJIZWlnaHQgLSAzMDAgJiYgdGhpcy54IDwgd2luZG93LmlubmVyV2lkdGggLSAzMDApe1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZC5zYXZlKCk7XHJcbiAgICAgICAgdmFyIHRyYW5zbGF0ZUluZGV4QWRqdXN0WCA9ICh0aGlzLmRlZ3JlZSA8IDE4MCkgPyAodGhpcy53aWR0aCAvIDE4MCkgKiB0aGlzLmRlZ3JlZSA6ICh0aGlzLndpZHRoIC8gMTgwKSAqICgzNjAgLSB0aGlzLmRlZ3JlZSk7XHJcbiAgICAgICAgdmFyIHRyYW5zbGF0ZUluZGV4QWRqdXN0WSA9ICh0aGlzLmRlZ3JlZSA8IDE4MCkgPyAodGhpcy5oZWlnaHQgLyAxODApICogdGhpcy5kZWdyZWUgOiAodGhpcy5oZWlnaHQgLyAxODApICogKDM2MCAtIHRoaXMuZGVncmVlKTtcclxuICAgICAgICB0cmFuc2xhdGVJbmRleEFkanVzdFggPSAodHJhbnNsYXRlSW5kZXhBZGp1c3RYICYmIHRoaXMub2JqZWN0TmFtZUZsYWcgPT09IFwiYnVsbGV0XCIpID8gdHJhbnNsYXRlSW5kZXhBZGp1c3RYIDogMDtcclxuICAgICAgICB0cmFuc2xhdGVJbmRleEFkanVzdFkgPSAodHJhbnNsYXRlSW5kZXhBZGp1c3RZICYmIHRoaXMub2JqZWN0TmFtZUZsYWcgPT09IFwiYnVsbGV0XCIpID8gdHJhbnNsYXRlSW5kZXhBZGp1c3RZIDogMDtcclxuICAgICAgICAvLyBEZXZlbG9wbWVudCBib3hcclxuICAgICAgICAvKm1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZC5maWxsU3R5bGUgPSAncmdiYSg0MSwgMjAxLCA3LCAuMiknO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXHJcbiAgICAgICAgLy9pZih0aGlzLm9iamVjdE5hbWVGbGFnICE9IFwiYnVsbGV0XCIpe1xyXG4gICAgICAgICAgICBkcmF3Q2lyY2xlKHtcclxuICAgICAgICAgICAgICAgIGN0eDogbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eEFjdGlvbkZpZWxkLFxyXG4gICAgICAgICAgICAgICAgeDogdGhpcy54ICsgdGhpcy53aWR0aC8yLFxyXG4gICAgICAgICAgICAgICAgeTogdGhpcy55ICsgdGhpcy5oZWlnaHQvMixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogJ3JnYmEoMjAxLCA5NywgMjgsIC40KSdcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAvL30qL1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZC50cmFuc2xhdGUodGhpcy54ICsgdHJhbnNsYXRlSW5kZXhBZGp1c3RYLCB0aGlzLnkgKyB0cmFuc2xhdGVJbmRleEFkanVzdFkpO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZC5yb3RhdGUoKCh0aGlzLmRlZ3JlZSkgPyB0aGlzLmRlZ3JlZSA6IDApICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgdmFyIHNXaWR0aCA9IChzZWNvbmRUZXh0dXJlICYmIHRoaXMuYmFja2dyb3VuZFRleHR1cmUpID8gdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZS5zV2lkdGggOiB0aGlzLnNXaWR0aDtcclxuICAgICAgICB2YXIgc0hlaWdodCA9IChzZWNvbmRUZXh0dXJlICYmIHRoaXMuYmFja2dyb3VuZFRleHR1cmUpID8gdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZS5zSGVpZ2h0IDogdGhpcy5zSGVpZ2h0O1xyXG4gICAgICAgIGltYWdlUmVuZGVyKHtcclxuICAgICAgICAgICAgY3R4OiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuY3R4QWN0aW9uRmllbGQsXHJcbiAgICAgICAgICAgIGltZzogdGhpcy5pbWcsXHJcbiAgICAgICAgICAgIHN4OiB0aGlzLnN4LFxyXG4gICAgICAgICAgICBzeTogdGhpcy5zeSxcclxuICAgICAgICAgICAgc1dpZHRoOiBzV2lkdGgsXHJcbiAgICAgICAgICAgIHNIZWlnaHQ6IHNIZWlnaHQsXHJcbiAgICAgICAgICAgIHg6IDAgKyAodGhpcy5ibG9ja1JlbGF0aXZlWFBvcykgPyBwYXJzZUludCh0aGlzLmJsb2NrUmVsYXRpdmVYUG9zKSA6IDAsXHJcbiAgICAgICAgICAgIHk6IDAgKyAodGhpcy5ibG9ja1JlbGF0aXZlWVBvcykgPyBwYXJzZUludCh0aGlzLmJsb2NrUmVsYXRpdmVZUG9zKSA6IDAsXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eEFjdGlvbkZpZWxkLnJlc3RvcmUoKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmdW5jdGlvbiBpbWFnZVJlbmRlcihfYSkge1xyXG4gICAgICAgIHZhciBjdHggPSBfYS5jdHgsIGltZyA9IF9hLmltZywgc3ggPSBfYS5zeCwgc3kgPSBfYS5zeSwgc1dpZHRoID0gX2Euc1dpZHRoLCBzSGVpZ2h0ID0gX2Euc0hlaWdodCwgeCA9IF9hLngsIHkgPSBfYS55LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jcmVhdGVJbWFnZShjdHgsIGltZywgc3gsIHN5LCBzV2lkdGgsIHNIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGlzcGxheU9iamVjdEF0U2NlbmUgPSBkaXNwbGF5T2JqZWN0QXRTY2VuZTtcclxuZnVuY3Rpb24gc29saWRDb2xvckZpbGwoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGN0eCA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZDtcclxuICAgIGRyYXdSZWN0YW5nbGUoe1xyXG4gICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgIHg6IHRoaXMueCxcclxuICAgICAgICB5OiB0aGlzLnksXHJcbiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGggKyAxLFxyXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQgKyAxLFxyXG4gICAgICAgIGNvbG9yOiAodGhpcy5kZXRhaWxzLm1hcENvbG9yKSA/IHRoaXMuZGV0YWlscy5tYXBDb2xvciA6ICcjMDAwMDAwJ1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zb2xpZENvbG9yRmlsbCA9IHNvbGlkQ29sb3JGaWxsO1xyXG5mdW5jdGlvbiBkaXNwbGF5T2JqZWN0TGlmZVNpZ24oX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCB0YXJnZXRPYmplY3QgPSBfYS50YXJnZXRPYmplY3Q7XHJcbiAgICBpZiAodGFyZ2V0T2JqZWN0LmhlYWx0aFBvaW50IHx8IHRhcmdldE9iamVjdC5kZXRhaWxzLmlzRGVzdHJveSkge1xyXG4gICAgICAgIGlmICh0YXJnZXRPYmplY3QuaGVhbHRoUG9pbnQgPiAwICYmIHRhcmdldE9iamVjdC5oZWFsdGhQb2ludCA8IHRhcmdldE9iamVjdC5kZWZhdWx0SGVhbHRoIHx8XHJcbiAgICAgICAgICAgIHRhcmdldE9iamVjdC5kZXRhaWxzLmhlYWx0aFBvaW50IDwgdGFyZ2V0T2JqZWN0LmRlZmF1bHRIZWFsdGgpIHtcclxuICAgICAgICAgICAgdmFyIGN0eCA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZDtcclxuICAgICAgICAgICAgdmFyIGxpZmVTaWduV2lkdGggPSB0YXJnZXRPYmplY3Qud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBsaWZlV2lkdGggPSBsaWZlU2lnbldpZHRoIC8gdGFyZ2V0T2JqZWN0LmRlZmF1bHRIZWFsdGg7XHJcbiAgICAgICAgICAgIGRyYXdGcmFtZSh7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHg6IHRhcmdldE9iamVjdC54LFxyXG4gICAgICAgICAgICAgICAgeTogdGFyZ2V0T2JqZWN0LnkgLSAxMCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBsaWZlU2lnbldpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1LFxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjNjkxNTAwJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZHJhd1JlY3RhbmdsZSh7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHg6IHRhcmdldE9iamVjdC54LFxyXG4gICAgICAgICAgICAgICAgeTogdGFyZ2V0T2JqZWN0LnkgLSAxMCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBsaWZlV2lkdGggKiAoKHRhcmdldE9iamVjdC5oZWFsdGhQb2ludCkgPyB0YXJnZXRPYmplY3QuaGVhbHRoUG9pbnQgOiB0YXJnZXRPYmplY3QuZGV0YWlscy5oZWFsdGhQb2ludCksXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogdGFyZ2V0T2JqZWN0LmRldGFpbHMubWFwQ29sb3JcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGlzcGxheU9iamVjdExpZmVTaWduID0gZGlzcGxheU9iamVjdExpZmVTaWduO1xyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIGZvciBiYWNrZ3JvdW5kIHBpY3R1cmUgdG8gZGlzcGxheSBpdFxyXG5Vc2VkIG9ubHkgYXQgR2FtZUJhY2tncm91bmQgY29uc3RydWN0b3JcclxuXHJcbj09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIHBsYWNlQmFja2dyb3VuZCgpIHtcclxuICAgIGRpc3BsYXlNb2R1bGVzXzEuY3JlYXRlSW1hZ2UodGhpcy5jdHgsIHRoaXMuaW1nLCB0aGlzLnN4LCB0aGlzLnN5LCB0aGlzLnNXaWR0aCwgdGhpcy5zSGVpZ2h0LCB0aGlzLngsIHRoaXMueSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG59XHJcbmV4cG9ydHMucGxhY2VCYWNrZ3JvdW5kID0gcGxhY2VCYWNrZ3JvdW5kO1xyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIGZvciBtb3ZlIGZseWluZyBFbmVteVxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gbW92ZUVuZW15ZXMobW92ZVgsIG1vdmVZKSB7XHJcbiAgICBpZiAobW92ZVkgPT09IHZvaWQgMCkgeyBtb3ZlWSA9IDA7IH1cclxuICAgIHRoaXMueCAtPSB0aGlzLnNwZWVkO1xyXG4gICAgdGhpcy55IC09IG1vdmVZO1xyXG59XHJcbmV4cG9ydHMubW92ZUVuZW15ZXMgPSBtb3ZlRW5lbXllcztcclxuLyo9PT09PT09PT09PT09PT1cclxuXHJcbk1haW4gYW5pbWF0aW9uIG1ldGhvZCBtb3ZlIHBpY3R1cmUgYnkgdGltZSBzdGVwcyBhdCBzeCBjb29yZGluYXRzXHJcbmRldGVjdEZyYW1lIC0gT2JqZWN0IGFuaW1hdGlvbiB0aW1lclxyXG5hbmltYXRpb25TdGVwcyAtIGtleSBvZiBhbmltYXRpb24gdGltZSBhbmltYXRpb24gY2hhbmdpbmcgd2hlbiBkZXRlY3RGcmFtZSAlIGFuaW1hdGlvblN0ZXBzID09PSAwXHJcbnN4IC0gcGljdHVyZSBjdXJyZW50IGZyYW1lXHJcbnNXaWR0aCAtIHdpZHRoIG9mIHBpY3R1cmUgZnJhbWVcclxucGljdHVyZXNXaWR0aCAtIHRvdGFsIHdpZHRoIG9mIGFsbCBwaWN0dXJlIGZyYW1lc1xyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gc3ByaXRlT2JqZWN0c0FuaW1hdGlvbihzdGF0ZSkge1xyXG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSB0cnVlOyB9XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGJsb2NrVGV4dHVyZVBvc2l0aW9uWDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnggPiB3aW5kb3cuaW5uZXJXaWR0aCArIHRoaXMud2lkdGggfHwgdGhpcy54IDwgdGhpcy53aWR0aCAqIC0xIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKyB0aGlzLmhlaWdodCB8fCB0aGlzLnkgPCB0aGlzLmhlaWdodCAqIC0xKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZFRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZFRleHR1cmUuZGV0ZWN0RnJhbWUgKz0gMTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRUZXh0dXJlLmRldGVjdEZyYW1lICUgdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZS5hbmltYXRpb25TdGVwcyA9PSAwICYmIHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZS5kZXRlY3RGcmFtZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tUZXh0dXJlUG9zaXRpb25YID0gdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZS5zV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kU3ggKz0gcGFyc2VJbnQoYmxvY2tUZXh0dXJlUG9zaXRpb25YKTsgLy90aGlzLmJhY2tncm91bmRUZXh0dXJlLnN4ICsgdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZS5zV2lkdGggO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnJvdW5kKHRoaXMuYmFja2dyb3VuZFN4KSA+PSB0aGlzLmJhY2tncm91bmRUZXh0dXJlLnBpY3R1cmVzV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kU3ggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRldGVjdEZyYW1lICs9IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRldGVjdEZyYW1lICUgdGhpcy5hbmltYXRpb25TdGVwcyA9PSAwICYmIHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldGVjdEZyYW1lID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ggKz0gdGhpcy5zV2lkdGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5yb3VuZCh0aGlzLnN4KSA+PSB0aGlzLnBpY3R1cmVzV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN4ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNwcml0ZU9iamVjdHNBbmltYXRpb24gPSBzcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuQ2hhbmdlIHBpY3R1cmUgb2YgZmx5aW5nIHVuaXRzIGFuaW1hdGlvbiB3aGVuIGl0IHRha2VuIGRhbWFnZVxyXG5tb3ZlIHBpY3R1cmUgYnkgbnVtYmVyIG9mIHZlcnRpY2FsIGltYWdlXHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBlbmVteURhbWFnZUFuaW1hdGlvbigpIHtcclxuICAgIGlmICh0aGlzLm51bWJlck9mVmVydGljYWxJdGVtcyA+IDEpIHtcclxuICAgICAgICB2YXIgZGFtYWdlQW5pbWF0aW9uUG9pbnRfMSA9IHRoaXMub3JpZ2luYWxIZWFsdGhQb2ludCAvIHRoaXMubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zO1xyXG4gICAgICAgIHZhciBkYW1hZ2VQb2ludCA9IG5ldyBBcnJheSh0aGlzLm51bWJlck9mVmVydGljYWxJdGVtcykuZmlsbChudWxsKTtcclxuICAgICAgICBkYW1hZ2VQb2ludCA9IGRhbWFnZVBvaW50Lm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsgcmV0dXJuIGRhbWFnZUFuaW1hdGlvblBvaW50XzEgKiAoaW5kZXggKyAxKTsgfSkuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSAtIGI7IH0pLnJldmVyc2UoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhbWFnZVBvaW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhlYWx0aFBvaW50IDwgZGFtYWdlUG9pbnRbaV0gJiYgdGhpcy5oZWFsdGhQb2ludCA+IGRhbWFnZVBvaW50W2kgKyAxXSAmJiBkYW1hZ2VQb2ludFtpICsgMV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3kgPSB0aGlzLnNIZWlnaHQgKiAoaSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghZGFtYWdlUG9pbnRbaSArIDFdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN5ID0gdGhpcy5zSGVpZ2h0ICogKHRoaXMubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5lbmVteURhbWFnZUFuaW1hdGlvbiA9IGVuZW15RGFtYWdlQW5pbWF0aW9uO1xyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTWFpbiBtZXRob2QgdG8gY3JlYXRlIGEgYnVsbGV0IGFuZCBzaW5nbGUgc2hvdFxyXG5CdWxsZXRDb25zdHJ1Y3QgLSBtYWluIGJ1bGxldCBjb25zdHJ1Y3RvclxyXG5idWxsZXRBcnJheSAtIGRpZmZlcmVudCBhcnJheSB0byBzdG9yZSBidWxsZXRzIG9iamVjdHNcclxuYWxsR2FtZUJ1bGxldHM6IFtdICAtIGFsbCBidWxsZXRzIGF0IGZseWluZyBtb2RlXHJcbmFsbEdyb3VuZEdhbWVCdWxsZXRzOiBbXSAgICAtIGFsbCBidWxsZXRzIGF0IGdyb3VuZCBtb2RlXHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBzaG90KEJ1bGxldENvbnN0cnVjdCwgbWFpbkdhbWVPYmplY3QsIFNvdW5kQ3JlYXRvciwgb3duZXIsIGJ1bGxldEFycmF5KSB7XHJcbiAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSB8fCAhdGhpcy5pc1Nob3QpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGd1bnMgPSAodGhpcy5ndW5zKSA/IHRoaXMuZ3VucyA6IHRoaXMuZGF0YS5ndW5zO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBndW5zXzEgPSBndW5zOyBfaSA8IGd1bnNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgaXRlbSA9IGd1bnNfMVtfaV07XHJcbiAgICAgICAgaWYgKCFpdGVtIHx8IGl0ZW0udHlwZSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBzaG90UmFuZG9taXplciA9IG1haW5HYW1lT2JqZWN0LmdhbWVSYW5kb21pemVyKGl0ZW0uZmlyZVJlcGVhZCk7XHJcbiAgICAgICAgaWYgKDEgPiBzaG90UmFuZG9taXplciB8fCBvd25lciA9PSAncGxheWVyJyAmJiBpdGVtKSB7XHJcbiAgICAgICAgICAgIGJ1bGxldHNDcmVhdGVNb2R1bGUuY2FsbCh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgb3duZXI6IG93bmVyLFxyXG4gICAgICAgICAgICAgICAgQnVsbGV0Q29uc3RydWN0OiBCdWxsZXRDb25zdHJ1Y3QsXHJcbiAgICAgICAgICAgICAgICBTb3VuZENyZWF0b3I6IFNvdW5kQ3JlYXRvcixcclxuICAgICAgICAgICAgICAgIGJ1bGxldEFycmF5OiBidWxsZXRBcnJheVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zaG90ID0gc2hvdDtcclxuZnVuY3Rpb24gYnVsbGV0c0NyZWF0ZU1vZHVsZShfYSkge1xyXG4gICAgdmFyIGl0ZW0gPSBfYS5pdGVtLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBvd25lciA9IF9hLm93bmVyLCBCdWxsZXRDb25zdHJ1Y3QgPSBfYS5CdWxsZXRDb25zdHJ1Y3QsIFNvdW5kQ3JlYXRvciA9IF9hLlNvdW5kQ3JlYXRvciwgYnVsbGV0QXJyYXkgPSBfYS5idWxsZXRBcnJheTtcclxuICAgIHZhciBhbmdsZSA9IChpdGVtLmRlZmF1bHRBbmdsZSkgP1xyXG4gICAgICAgIChpdGVtLmRlZmF1bHRBbmdsZS5pc1JhbmRvbSkgP1xyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lUmFuZG9taXplcihpdGVtLmRlZmF1bHRBbmdsZS5tYXggLSBpdGVtLmRlZmF1bHRBbmdsZS5taW4sIGl0ZW0uZGVmYXVsdEFuZ2xlLm1pbikgOiBpdGVtLmRlZmF1bHRBbmdsZS5hbmdsZVxyXG4gICAgICAgIDogdGhpcy5zaG90QW5nbGU7XHJcbiAgICB2YXIgY29udGV4dCA9IHRoaXM7XHJcbiAgICB2YXIgYnVsbGV0U2V0dGluZ3MgPSB0aGlzLmJ1bGxldFNwZWVkKHsgYnVsbGV0U3BlZWQ6IGl0ZW0uc3BlZWQsXHJcbiAgICAgICAgYW5nbGU6IGFuZ2xlIH0pO1xyXG4gICAgdmFyIHRvdGFsU3BlZWQgPSAoTWF0aC5zaWduKGJ1bGxldFNldHRpbmdzLmhvcml6b250YWxTcGVlZCkgPiAwKSA/IHRoaXMuc3BlZWQgOiB0aGlzLnNwZWVkICogLTE7XHJcbiAgICB2YXIgZmlyZVBvc2l0aW9uWCA9IChpdGVtLmZpcmVQb3NpdGlvblgpID8gaXRlbS5maXJlUG9zaXRpb25YIDogMDtcclxuICAgIHZhciBidWxsZXQgPSBuZXcgQnVsbGV0Q29uc3RydWN0KHtcclxuICAgICAgICB4OiBjb250ZXh0LnggKyBmaXJlUG9zaXRpb25YLCB5OiBjb250ZXh0LnkgKyAoKGl0ZW0uZmlyZVBvc2l0aW9uKSA/IGl0ZW0uZmlyZVBvc2l0aW9uIDogbWFpbkdhbWVPYmplY3QuZ2FtZVJhbmRvbWl6ZXIoY29udGV4dC5oZWlnaHQpKSxcclxuICAgICAgICBidWxsZXRUeXBlOiBpdGVtLm5hbWUsIGJ1bGxldFRleHR1cmU6IGl0ZW0uY29sb3IsXHJcbiAgICAgICAgb2JqZWN0T3duZXI6IG93bmVyLCBidWxsZXRTcGVlZDogKG93bmVyID09PSAnZW5lbXknIHx8IG93bmVyID09PSAnaGFuZ2FyJykgPyBidWxsZXRTZXR0aW5ncy5ob3Jpem9udGFsU3BlZWQgKyB0b3RhbFNwZWVkIDogKG93bmVyID09ICdwbGF5ZXInKSA/IGJ1bGxldFNldHRpbmdzLmhvcml6b250YWxTcGVlZCArIGNvbnRleHQueEFkaiA6IGJ1bGxldFNldHRpbmdzLmhvcml6b250YWxTcGVlZCxcclxuICAgICAgICB3aWR0aDogaXRlbS53aWR0aCwgaGVpZ2h0OiBpdGVtLmhlaWdodCxcclxuICAgICAgICBkYW1hZ2U6IGl0ZW0uZGFtYWdlLCB0eXBlOiBpdGVtLnR5cGUsIHRleHR1cmU6IGl0ZW0udGV4dHVyZSxcclxuICAgICAgICBzeDogKGl0ZW0uc3gpID8gaXRlbS5zeCA6IDAsIHN5OiAoaXRlbS5zeSkgPyBpdGVtLnN5IDogMCwgc1dpZHRoOiBpdGVtLnNXaWR0aCwgc0hlaWdodDogaXRlbS5zSGVpZ2h0LFxyXG4gICAgICAgIGV4cGxvc2lvbjogaXRlbS5leHBsb3Npb25BbmltYXRpb24sIHNtb2tlOiAoaXRlbS5zbW9rZSkgPyBpdGVtLnNtb2tlIDogbnVsbCwgaW1hZ2VXaWR0aDogaXRlbS5pbWFnZVdpZHRoLCBpbWFnZUhlaWdodDogaXRlbS5pbWFnZUhlaWdodCxcclxuICAgICAgICBhbmltYXRpb25TdGVwczogaXRlbS5hbmltYXRpb25TdGVwcywgbnVtYmVyT2ZJdGVtczogaXRlbS5udW1iZXJPZkl0ZW1zLCBudW1iZXJPZlZlcnRpY2FsSXRlbXM6IGl0ZW0ubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zLFxyXG4gICAgICAgIHNvdW5kOiAoaXRlbS5zb3VuZCkgPyBpdGVtLnNvdW5kIDogbnVsbCwgdmVydGljYWxTcGVlZDogKGJ1bGxldFNldHRpbmdzLnZlcnRpY2FsU3BlZWQpID8gYnVsbGV0U2V0dGluZ3MudmVydGljYWxTcGVlZCA6IDAsXHJcbiAgICAgICAgZGVncmVlOiAoYnVsbGV0U2V0dGluZ3MuYW5nbGUpID8gYnVsbGV0U2V0dGluZ3MuYW5nbGUgOiAwLCByYWRpdXM6IChpdGVtLnJhZGl1cykgPyBpdGVtLnJhZGl1cyA6IG51bGwsXHJcbiAgICAgICAgb3JpZ2luT3duZXI6IHRoaXNcclxuICAgIH0pO1xyXG4gICAgdmFyIHNvdW5kUHJvcHMgPSB7XHJcbiAgICAgICAgc291bmRVcmw6IGJ1bGxldC5zb3VuZC5sZXZlbFNvdW5kLFxyXG4gICAgICAgIHNvdW5kTG9vcDogYnVsbGV0LnNvdW5kLnNvdW5kTG9vcCxcclxuICAgIH07XHJcbiAgICBidWxsZXQubG9hZFRleHR1cmUoKTtcclxuICAgIGJ1bGxldC5zb3VuZC5zb3VuZE9iamVjdCA9IChidWxsZXQuc291bmQpID8gc291bmRNb2R1bGVzXzEuaW5pdFNvdW5kT2JqZWN0KHsgU291bmRDcmVhdG9yOiBTb3VuZENyZWF0b3IsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgc291bmRQcm9wczogc291bmRQcm9wcyB9KSA6IG51bGw7XHJcbiAgICBidWxsZXQuaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGFbYnVsbGV0QXJyYXldID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhW2J1bGxldEFycmF5XS5jb25jYXQoYnVsbGV0KTtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5idWxsZXRzQ3JlYXRlTW9kdWxlID0gYnVsbGV0c0NyZWF0ZU1vZHVsZTtcclxuLyo9PT09PT09PT09PT09PT1cclxuXHJcbkJ1bGxldCBjb2xpc2lvbiBmb3IgZmx5aW5nIGVuZW15XHJcbmNvbXBhcmUgb2JqZWN0cyBwb3NpdGlvbiBhbmQgb2JqZWN0IG93bmVyIGlmIGJ1bGxldCBpbnRlcmNlcHQgb2JqZWN0IGNvbGlzaW9uIGRldGVjdGVkXHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBidWxsZXRDb2xsaXNpb24oX2EpIHtcclxuICAgIHZhciBoaXRPYmplY3QgPSBfYS5oaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBpZiAodGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZW5lbXlcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJwbGF5ZXJcIiB8fFxyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdidWxsZXRUeXBlJykgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcInBsYXllclwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImVuZW15XCIgfHxcclxuICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImhhbmdhclwiIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiaGFuZ2FyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZW5lbXlcIiB8fFxyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdidWxsZXRUeXBlJykgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcImVuZW15XCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiaGFuZ2FyYnVsbGV0XCIgfHxcclxuICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJoYW5nYXJidWxsZXRcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwicGxheWVyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZW52aXJvbm1lbnRcIiAmJiBoaXRPYmplY3QuaGFzT3duUHJvcGVydHkoJ2hlYWx0aFBvaW50JykgfHxcclxuICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImVudmlyb25tZW50XCIgJiYgaGl0T2JqZWN0Lmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwicGxheWVyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiY29sbGlkZVwiICYmIGhpdE9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnaGVhbHRoUG9pbnQnKSB8fFxyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdidWxsZXRUeXBlJykgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcImVuZW15XCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiY29sbGlkZVwiICYmIGhpdE9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnaGVhbHRoUG9pbnQnKSkge1xyXG4gICAgICAgIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLmV4cGxvc2lvbkZpcmUoe1xyXG4gICAgICAgICAgICB0YXJnZXREYXRhOiB0aGlzLFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgIGhpdE9iamVjdDogaGl0T2JqZWN0LFxyXG4gICAgICAgICAgICBTaWRlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuU2lkZU9iamVjdCxcclxuICAgICAgICAgICAgZXhwbG9zaW9uOiBcImV4cGxvc2lvblwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJudWNsZWFyX2JsYXN0XCIgfHwgdGhpcy50eXBlID09PSBcImRlZmVuY2Vfc2hpZWxkXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuQnVsbGV0IGNvbGlzaW9uIGZvciBncm91bmQgZW5lbXlcclxuY29tcGFyZSBvYmplY3RzIHBvc2l0aW9uIGFuZCBvYmplY3Qgb3duZXIgaWYgYnVsbGV0IGludGVyY2VwdCBvYmplY3QgY29saXNpb24gZGV0ZWN0ZWRcclxuZm9yIGdyb3VuZE5QQywgZ3JvdW5kRW5lbXksIGdyb3VuZFBsYXllclxyXG5hbmQgYnVsbGV0cyBwbGF5ZXIsIGdyb3VuZEVuZW15QnVsbGV0XHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBncm91bmRCdWxsZXRDb2xsaXNpb24oX2EpIHtcclxuICAgIHZhciBoaXRPYmplY3QgPSBfYS5oaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBpZiAoIWhpdE9iamVjdC5vYmplY3RQcmVzZW50ICYmIGhpdE9iamVjdC5vYmplY3RPd25lcilcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZ3JvdW5kRW5lbXlCdWxsZXRcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJncm91bmRQbGF5ZXJcIikge1xyXG4gICAgICAgIHJldHVybiBidWxsZXRFeHBsb3Npb24uY2FsbCh0aGlzKTtcclxuICAgIH1cclxuICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgfHwgIWhpdE9iamVjdC5kZXRhaWxzICYmIGhpdE9iamVjdC5vYmplY3RPd25lciAhPSBcImdyb3VuZEVuZW15XCIgfHwgIWhpdE9iamVjdC5kZXRhaWxzICYmIGhpdE9iamVjdC5vYmplY3RPd25lciAhPSBcImdyb3VuZE5QQ1wiIHx8XHJcbiAgICAgICAgIWhpdE9iamVjdC5kZXRhaWxzICYmIGhpdE9iamVjdC5vYmplY3RPd25lciAhPSBcImdyb3VuZEVuZW15QnVsbGV0XCIpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAodGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwicGxheWVyXCIgJiYgaGl0T2JqZWN0LmRldGFpbHMuY29sbGlzaW9uIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwicGxheWVyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZ3JvdW5kRW5lbXlcIiB8fFxyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdidWxsZXRUeXBlJykgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcImdyb3VuZEVuZW15QnVsbGV0XCIgJiYgaGl0T2JqZWN0LmRldGFpbHMuY29sbGlzaW9uICYmIGhpdE9iamVjdC5vYmplY3RPd25lciAhPSBcImdyb3VuZEVuZW15XCIgfHxcclxuICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJncm91bmRFbmVteUJ1bGxldFwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImdyb3VuZE5QQ1wiKSB7IC8vIGdyb3VuZE5QQ1xyXG4gICAgICAgIGlmIChoaXRPYmplY3QuZGV0YWlscykge1xyXG4gICAgICAgICAgICBpZiAoaGl0T2JqZWN0LmRldGFpbHMudHlwZSA9PSBcImhpZGRlbl9lbmVteV9zcGF3bmVyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZ3JvdW5kRW5lbXlcIlxyXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcImdyb3VuZEVuZW15QnVsbGV0XCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBidWxsZXRFeHBsb3Npb24uY2FsbCh0aGlzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gICAgZnVuY3Rpb24gYnVsbGV0RXhwbG9zaW9uKCkge1xyXG4gICAgICAgIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLmV4cGxvc2lvbkZpcmUoe1xyXG4gICAgICAgICAgICB0YXJnZXREYXRhOiB0aGlzLFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgIGhpdE9iamVjdDogaGl0T2JqZWN0LFxyXG4gICAgICAgICAgICBTaWRlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuU2lkZU9iamVjdCxcclxuICAgICAgICAgICAgZXhwbG9zaW9uOiBcImV4cGxvc2lvblwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImdyb3VuZEVuZW15XCIgfHwgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZ3JvdW5kTlBDXCIpIHtcclxuICAgICAgICAgICAgaGl0T2JqZWN0LmN1cnJlbnRCZWhhdmlvciA9IChoaXRPYmplY3QuY3VycmVudEJlaGF2aW9yID09PSBcInN0YXRpY1wiKSA/IFwic3RhdGljXCIgOiBcImRlc3Ryb3lcIjtcclxuICAgICAgICAgICAgLy9oaXRPYmplY3QucGxheWVySW5SYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciBhbmdsZUZpbmRlcl8xID0gdGhpcy5kZWdyZWUgLSAxODA7XHJcbiAgICAgICAgICAgIGlmIChoaXRPYmplY3QuZGV0YWlscy5yb2xlICE9IFwibWlsaXRhcnlcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgIT0gXCJncm91bmRFbmVteVwiKSB7XHJcbiAgICAgICAgICAgICAgICBoaXRPYmplY3QucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9IChhbmdsZUZpbmRlcl8xID4gOTAgJiYgYW5nbGVGaW5kZXJfMSA8IDI3MCkgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4gICAgICAgICAgICAgICAgaGl0T2JqZWN0LmN1cnJlbnRCZWhhdmlvciA9IChoaXRPYmplY3QuY3VycmVudEJlaGF2aW9yID09PSBcInN0YXRpY1wiKSA/IFwic3RhdGljXCIgOiBcInBhdHJvbFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGl0T2JqZWN0LmN1cnJlbnRCZWhhdmlvciA9IChoaXRPYmplY3QuY3VycmVudEJlaGF2aW9yID09PSBcInN0YXRpY1wiKSA/IFwic3RhdGljXCIgOiBcImRlc3Ryb3lcIjtcclxuICAgICAgICAgICAgICAgIGhpdE9iamVjdC5wbGF5ZXJJblJhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGhpdE9iamVjdC5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID0gKGFuZ2xlRmluZGVyXzEgPiA5MCAmJiBhbmdsZUZpbmRlcl8xIDwgMjcwKSA/ICdyaWdodCcgOiAnbGVmdHQnO1xyXG4gICAgICAgICAgICAgICAgaGl0T2JqZWN0LnRhcmdldEFuZ2xlID0gKE1hdGguc2lnbihhbmdsZUZpbmRlcl8xKSA8IDApID8gMzYwICsgYW5nbGVGaW5kZXJfMSA6IGFuZ2xlRmluZGVyXzE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcbi8qPT09PT09PT09PT09PT09XHJcblxyXG5EZXRlY3QgYXJlIHRoZSBjdXJyZW50IGJsb2NrIGJhY2tncm91bmQgb3Igbm90XHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBncm91bmRMZXZlbEJhY2tncm91bmRCdWxsZXREZXRlY3QoX2EpIHtcclxuICAgIHZhciBoaXRPYmplY3QgPSBfYS5oaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIEdyYXBwbGVPYmplY3QgPSBfYS5HcmFwcGxlT2JqZWN0O1xyXG4gICAgaWYgKCFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSkge1xyXG4gICAgICAgIHRoaXMuYXRCYWNrZ3JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdmFyIGFsbEJsb2NrcyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3M7XHJcbiAgICB2YXIgY29sbGlzaW9uO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxCbG9ja3NfMSA9IGFsbEJsb2NrczsgX2kgPCBhbGxCbG9ja3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGFsbEJsb2Nrc18xW19pXTtcclxuICAgICAgICBpZiAoTWF0aC5tYXgoYmFja2dyb3VuZC54LCB0aGlzLngpIC0gTWF0aC5taW4oYmFja2dyb3VuZC54LCB0aGlzLngpID4gMjAwIHx8XHJcbiAgICAgICAgICAgIE1hdGgubWF4KGJhY2tncm91bmQueSwgdGhpcy55KSAtIE1hdGgubWluKGJhY2tncm91bmQueSwgdGhpcy55KSA+IDIwMCkge1xyXG4gICAgICAgICAgICBpZiAoIWJhY2tncm91bmQub2JqZWN0TmFtZUZsYWcgJiYgIXRoaXMub2JqZWN0TmFtZUZsYWcpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29sbGlzaW9uID0gb2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0KHtcclxuICAgICAgICAgICAgb2JqZWN0OiB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aGlzLngsXHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnksXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFyZ2V0OiB7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrZ3JvdW5kLngsXHJcbiAgICAgICAgICAgICAgICB5OiBiYWNrZ3JvdW5kLnksXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogYmFja2dyb3VuZC53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogYmFja2dyb3VuZC5oZWlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChjb2xsaXNpb24pXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hdEJhY2tncm91bmQgPSAoY29sbGlzaW9uKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIGhpdE9iamVjdC5hdEJhY2tncm91bmQgPSAoY29sbGlzaW9uKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIHJldHVybiAoY29sbGlzaW9uKSA/IHRydWUgOiBmYWxzZTtcclxufVxyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIEJ1bGxldCBjb2xpc2lvbiBmb3IgZ3JvdW5kIGVuZW15XHJcbnVzaW5nIGhlYWx0aFBvaW50IGFuZCBkYW1hZ2UgdG8gbWFrZSBvYmplY3RzIGFjdGl2ZSBvciBkZWFjdGl2ZVxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gZ3JvdW5kVW5pdHNEYW1hZ2UoX2EpIHtcclxuICAgIHZhciBoaXRPYmplY3QgPSBfYS5oaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGxldmVsRGF0YSA9IG1haW5HYW1lT2JqZWN0LmdldExldmVsVXNlckRhdGEoKTtcclxuICAgIGlmICh0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnaGVhbHRoUG9pbnQnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZ3JvdW5kUGxheWVyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZ3JvdW5kRW5lbXlCdWxsZXRcIiB8fFxyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJncm91bmRQbGF5ZXJcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJncm91bmRFbmVteVwiIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2hlYWx0aFBvaW50JykgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcImdyb3VuZEVuZW15XCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwicGxheWVyXCIgfHxcclxuICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnaGVhbHRoUG9pbnQnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZ3JvdW5kRW5lbXlcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJncm91bmROUENcIiB8fFxyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJncm91bmROUENcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJncm91bmRFbmVteUJ1bGxldFwiIHx8XHJcbiAgICAgICAgIXRoaXMub2JqZWN0T3duZXIgJiYgdGhpcy5kZXRhaWxzICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcInBsYXllclwiIHx8XHJcbiAgICAgICAgIXRoaXMub2JqZWN0T3duZXIgJiYgdGhpcy5kZXRhaWxzICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImdyb3VuZE5QQ1wiIHx8XHJcbiAgICAgICAgIXRoaXMub2JqZWN0T3duZXIgJiYgdGhpcy5kZXRhaWxzICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImdyb3VuZEVuZW15QnVsbGV0XCIpIHtcclxuICAgICAgICBpZiAodGhpcy5kZXRhaWxzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRldGFpbHMudHlwZSA9PSBcImhpZGRlbl9lbmVteV9zcGF3bmVyXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZ3JvdW5kRW5lbXlCdWxsZXRcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGV0YWlscy5pc0Rlc3Ryb3kgJiYgdGhpcy5kZXRhaWxzLmhlYWx0aFBvaW50ID49IDAgJiYgdGhpcy5kZXRhaWxzLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscy5oZWFsdGhQb2ludCAtPSBoaXRPYmplY3QuZGFtYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaGVhbHRoUG9pbnQgPj0gMClcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVhbHRoUG9pbnQgLT0gaGl0T2JqZWN0LmRhbWFnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmhlYWx0aFBvaW50IC09IGhpdE9iamVjdC5kYW1hZ2U7XHJcbiAgICAgICAgZGFtYWdlUHJvY2VkdXJlLmNhbGwodGhpcyk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkYW1hZ2VQcm9jZWR1cmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlscykge1xyXG4gICAgICAgICAgICBpZiAoKHRoaXMuZGV0YWlscy5oZWFsdGhQb2ludCB8fCB0aGlzLmRldGFpbHMuaGVhbHRoUG9pbnQgPT0gMCkgJiYgdGhpcy5kZXRhaWxzLmlzRGVzdHJveSAmJiB0aGlzLmRldGFpbHMudHlwZSA9PT0gXCJncm91bmQtZGVzdHJ1Y3RcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGV0YWlscy5oZWFsdGhQb2ludCA8PSAwICYmIHRoaXMuZGV0YWlscy5pc0Rlc3Ryb3kgJiYgdGhpcy5kZXRhaWxzLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0V2l0aEZpcmUgPSBPYmplY3QuYXNzaWduKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwbG9zaW9uOiB0aGlzLmV4cGxvc2lvbkFuaW1hdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICh0aGlzLndpZHRoKSA/IHRoaXMud2lkdGggOiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogKHRoaXMuaGVpZ2h0KSA/IHRoaXMuaGVpZ2h0IDogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLmV4cGxvc2lvbkZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREYXRhOiBvYmplY3RXaXRoRmlyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXRPYmplY3Q6IGhpdE9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2lkZU9iamVjdDogY29uc3RydWN0b3JzLlNpZGVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxvc2lvbjogXCJleHBsb3Npb25cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscy50eXBlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFpbHMuY29sbGlzaW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMub2JqZWN0T3duZXIgIT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0aGlzLmhlYWx0aFBvaW50IDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChoaXRPYmplY3QuYnVsbGV0T3JpZ2luT3duZXIub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kUGxheWVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVXaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5jb2xsZWN0UG9pbnRzKHRoaXMucG9pbnRzUGVyVW5pdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lTW9kdWxlc18xLmdhbWVOcGNVbml0c0NvdW50aW5nKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCB0YXJnZXQ6IHRoaXMgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3Bhd25Db2luKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwYXduQ29pbihtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm9iamVjdE93bmVyID09IFwiZ3JvdW5kUGxheWVyXCIgJiYgdGhpcy5oZWFsdGhQb2ludCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciBtYWluUGxheWVyRGF0YSA9IGxldmVsRGF0YS5zb3VyY2UucGxheWVyT2JqZWN0O1xyXG4gICAgICAgICAgICBtYWluUGxheWVyRGF0YS5udW1iZXJPZmxpZmUgLT0gMTtcclxuICAgICAgICAgICAgaWYgKG1haW5QbGF5ZXJEYXRhLm51bWJlck9mbGlmZSA+IDApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWx0aFBvaW50ID0gdGhpcy5kZWZhdWx0SGVhbHRoO1xyXG4gICAgICAgICAgICBpZiAobGV2ZWxEYXRhLnNvdXJjZS5wbGF5ZXJPYmplY3QubnVtYmVyT2ZsaWZlIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVPdmVyV2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZU92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QubWFwU291bmRDaGFuZ2VyKHsgc291bmRTdGF0dXM6ICdnYW1lX292ZXJfc2NyZWVuJyB9KTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmJhY2tUb1N0YXJ0U2NyZWVuKGNvbnN0cnVjdG9ycyk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIGRldGVjdCB3aGVuIHBsYXllciBjb2xsaWRlIHdpdGggJ2V4dHJhIG9iamVjdCdcclxuJ2V4dHJhIG9iamVjdCcgLSBzcGF3biB3aGVuIG90aGVyIG9iamVjdCBpcyBkZXN0cm95ZWRcclxuXHJcbj09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIGdyYXBwbGVPYmplY3RDb2xsaXNpb24oX2EpIHtcclxuICAgIHZhciBoaXRPYmplY3QgPSBfYS5oaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwicGxheWVyXCIpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZ3JhcHBsZU9iamVjdFwiICYmXHJcbiAgICAgICAgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwicGxheWVyXCIgJiYgIWhpdE9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJncmFwcGxlT2JqZWN0XCIgJiZcclxuICAgICAgICAgICAgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiZ3JvdW5kUGxheWVyXCIgJiYgIWhpdE9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJudWNsZWFyX2JsYXN0XCIgfHwgdGhpcy50eXBlID09PSBcImRlZmVuY2Vfc2hpZWxkXCIpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgPSBmYWxzZTtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ3JhcHBsZU9iamVjdE9uU2NyZWVuID0gZmFsc2U7XHJcbiAgICAgICAgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEuZXhwbG9zaW9uRmlyZSh7XHJcbiAgICAgICAgICAgIHRhcmdldERhdGE6IHRoaXMsXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgaGl0T2JqZWN0OiBoaXRPYmplY3QsXHJcbiAgICAgICAgICAgIFNpZGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5TaWRlT2JqZWN0LFxyXG4gICAgICAgICAgICBleHBsb3Npb246IFwiZXhwbG9zaW9uXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzW3RoaXMuZ3JhcHBsZVBvd2VyLm1ldGhvZE5hbWVdKHsgYWxsR2FtZVNpZGVPYmplY3RzOiBtYWluR2FtZU9iamVjdCwgcGxheWVyU2hpcERhdGE6IGhpdE9iamVjdCwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVudGVyVG9UaGVTaG9wSGFuZ2FyKF9hKSB7XHJcbiAgICB2YXIgaGl0T2JqZWN0ID0gX2EuaGl0T2JqZWN0LCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgaWYgKHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiaGFuZ2FyXCIgJiZcclxuICAgICAgICBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJwbGF5ZXJcIiAmJlxyXG4gICAgICAgICFoaXRPYmplY3QuaGFzT3duUHJvcGVydHkoJ2J1bGxldFR5cGUnKSAmJiAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUgJiZcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEudHJhZGVTaGlwVGltZVRvVW5kb2NrIDw9IDApIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEudHJhZGVTaGlwVGltZVRvVW5kb2NrID0gMTA7XHJcbiAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5lbnRlclRvVGhlU2hvcERpYWxvZyh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgdHJhZGVQcm9wZXJ0eWVzOiB0aGlzLnRyYWRlUHJvcGVydHllcyB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwbGF5ZXJEYW1hZ2UoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBkYW1hZ2UgPSBfYS5kYW1hZ2UsIGhpdE9iamVjdCA9IF9hLmhpdE9iamVjdDtcclxuICAgIGlmIChtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVdpbilcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodGhpcy5jb2xsaXNpb25BbGxvdyAmJiAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpIHtcclxuICAgICAgICB1bml0RGFtYWdlLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICBkYXRhOiBtYWluR2FtZU9iamVjdC5nZXRMZXZlbFVzZXJEYXRhKCksXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgZGFtYWdlOiBkYW1hZ2UsXHJcbiAgICAgICAgICAgIGhpdE9iamVjdDogaGl0T2JqZWN0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8gY29tcGxleCBlbmVteSBhbmltYXRpb24gZm9yIGRhbWFnZVxyXG5mdW5jdGlvbiB0YWtlRGFtYWdlKGRhbWFnZSwgaGl0T2JqZWN0LCBtYWluR2FtZU9iamVjdCwgR3JhcHBsZU9iamVjdCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBnYW1lU2Vjb25kcywgZ3JvdW5kQnVsbGV0U3RvcCwgYmFja2dyb3VuZFRleHR1cmVEZXRlY3QsIGJ1bGxldFN0b3A7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgICAgICAgICAgICAgICAgICBncm91bmRCdWxsZXRTdG9wID0gZ3JvdW5kQnVsbGV0Q29sbGlzaW9uLmNhbGwodGhpcywgeyBoaXRPYmplY3Q6IGhpdE9iamVjdCwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdyb3VuZExldmVsQmFja2dyb3VuZEJ1bGxldERldGVjdC5jYWxsKHRoaXMsIHsgaGl0T2JqZWN0OiBoaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFRleHR1cmVEZXRlY3QgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kVW5pdHNEYW1hZ2UuY2FsbCh0aGlzLCB7IGhpdE9iamVjdDogaGl0T2JqZWN0LCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyYXBwbGVPYmplY3RDb2xsaXNpb24uY2FsbCh0aGlzLCB7IGhpdE9iamVjdDogaGl0T2JqZWN0LCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tncm91bmRUZXh0dXJlRGV0ZWN0IHx8IHRoaXMuYXRCYWNrZ3JvdW5kIHx8IGhpdE9iamVjdC5hdEJhY2tncm91bmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0U3RvcCA9IGJ1bGxldENvbGxpc2lvbi5jYWxsKHRoaXMsIHsgaGl0T2JqZWN0OiBoaXRPYmplY3QsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1bGxldFN0b3AgJiYgIWdyb3VuZEJ1bGxldFN0b3ApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgZW50ZXJUb1RoZVNob3BIYW5nYXIuY2FsbCh0aGlzLCB7IGhpdE9iamVjdDogaGl0T2JqZWN0LCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogSGl0IGRldGVjdGlvbiBjb2xsaXNpb24gKi9cclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwicGxheWVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcInBsYXllclwiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImhhbmdhcmJ1bGxldFwiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJjb2xsaWRlXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwicGxheWVyXCIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2hlYWx0aFBvaW50JykgJiYgdGhpcy5vYmplY3RPd25lciA9PSBcImNvbGxpZGVcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCAmJiB0aGlzLmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIHRoaXMub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PSBcImNvbGxpZGVcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnaGVhbHRoUG9pbnQnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZW52aXJvbm1lbnRcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJwbGF5ZXJcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgJiYgdGhpcy5oYXNPd25Qcm9wZXJ0eSgnaGVhbHRoUG9pbnQnKSAmJiB0aGlzLm9iamVjdE93bmVyID09IFwiZW52aXJvbm1lbnRcIiAmJiBoaXRPYmplY3Qub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaXRPYmplY3Qub2JqZWN0T3duZXIgPT09IFwicGxheWVyXCIgJiYgaGl0T2JqZWN0LnR5cGUgIT0gXCJudWNsZWFyX2JsYXN0XCIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdE9iamVjdC5vYmplY3RPd25lciA9PT0gXCJwbGF5ZXJcIiAmJiBoaXRPYmplY3QudHlwZSAhPSBcImRlZmVuY2Vfc2hpZWxkXCIgJiYgaGl0T2JqZWN0Lm9iamVjdE5hbWVGbGFnICE9IFwiYnVsbGV0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnggPCBoaXRPYmplY3QueCArIChoaXRPYmplY3Qud2lkdGggLyAyKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdE9iamVjdC54ICsgaGl0T2JqZWN0LndpZHRoIC8gMiA8IHRoaXMueCArICh0aGlzLndpZHRoKSAmJiAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRPYmplY3QueCAtPSBoaXRPYmplY3Quc3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChoaXRPYmplY3QueCA+IHRoaXMueCArICh0aGlzLndpZHRoKSAmJiAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRPYmplY3QueCArPSBoaXRPYmplY3Quc3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5zaG9wQWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRPYmplY3QueCAtPSBoaXRPYmplY3Quc3BlZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pdERhbWFnZS5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGRhbWFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdE9iamVjdDogaGl0T2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZW15RGFtYWdlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhlYWx0aFBvaW50IDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEuZXhwbG9zaW9uRmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RGF0YTogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0T2JqZWN0OiBoaXRPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2lkZU9iamVjdDogY29uc3RydWN0b3JzLlNpZGVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwbG9zaW9uOiBcImNvbGxpZGVFeHBsb3Npb25BbmltYXRpb25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5leHBsb3Npb25GaXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREYXRhOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXRPYmplY3Q6IGhpdE9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaWRlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuU2lkZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3Npb246IFwiZXhwbG9zaW9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIGxvYWQgY29pbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNwYXduQ29pbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNwYXduQ29pbihtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNCb3NzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvc3NFbmVteURlc3RydWN0aW9uKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ2hlYWx0aFBvaW50JykgJiYgdGhpcy5vYmplY3RPd25lciA9PT0gXCJwbGF5ZXJcIiAmJiAoaGl0T2JqZWN0Lm9iamVjdE93bmVyID09PSBcImVuZW15XCIgfHwgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09IFwiY29sbGlkZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgfHwgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVXaW4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0T2JqZWN0Lm9iamVjdE93bmVyID09PSBcImNvbGxpZGVcIiAmJiBnYW1lU2Vjb25kcyAlIDEwMDAgIT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0T2JqZWN0Lmhhc093blByb3BlcnR5KCdoZWFsdGhQb2ludCcpICYmIGhpdE9iamVjdC5vYmplY3RPd25lciA9PT0gXCJlbmVteVwiICYmIGdhbWVTZWNvbmRzICUgMTAwMCAhPSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyRGFtYWdlLmNhbGwodGhpcywgeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGRhbWFnZTogZGFtYWdlLCBoaXRPYmplY3Q6IGhpdE9iamVjdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEuZXhwbG9zaW9uRmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREYXRhOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0T2JqZWN0OiBoaXRPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaWRlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuU2lkZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxvc2lvbjogXCJjb2xsaWRlRXhwbG9zaW9uQW5pbWF0aW9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMudGFrZURhbWFnZSA9IHRha2VEYW1hZ2U7XHJcbmZ1bmN0aW9uIHVuaXREYW1hZ2UoX2EpIHtcclxuICAgIHZhciBkYXRhID0gX2EuZGF0YSwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgZGFtYWdlID0gX2EuZGFtYWdlLCBoaXRPYmplY3QgPSBfYS5oaXRPYmplY3Q7XHJcbiAgICB0aGlzLmhlYWx0aFBvaW50IC09IGRhbWFnZTtcclxuICAgIGlmICh0aGlzLmhlYWx0aFBvaW50IDw9IDApIHtcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxpZmUgPiAwICYmICFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVdpbikge1xyXG4gICAgICAgICAgICBkYXRhLnNvdXJjZS5wbGF5ZXJPYmplY3QubnVtYmVyT2ZsaWZlIC09IDE7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnNvdXJjZS5wbGF5ZXJPYmplY3QubnVtYmVyT2ZsaWZlIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVPdmVyV2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZU92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QubWFwU291bmRDaGFuZ2VyKHsgc291bmRTdGF0dXM6ICdnYW1lX292ZXJfc2NyZWVuJyB9KTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmJhY2tUb1N0YXJ0U2NyZWVuKGNvbnN0cnVjdG9ycyk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmhlYWx0aFBvaW50ID0gZGF0YS5zb3VyY2UucGxheWVyT2JqZWN0Lm1heEhlYWx0aDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGl0T2JqZWN0LmJ1bGxldE9yaWdpbk93bmVyKSB7XHJcbiAgICAgICAgICAgIGlmIChoaXRPYmplY3QuYnVsbGV0T3JpZ2luT3duZXIub2JqZWN0T3duZXIgPT09ICdwbGF5ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lV2luKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuY29sbGVjdFBvaW50cyh0aGlzLnBvaW50c1BlclVuaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZU1vZHVsZXNfMS5nYW1lTnBjVW5pdHNDb3VudGluZyh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgdGFyZ2V0OiB0aGlzIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdFByZXNlbnQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnVuaXREYW1hZ2UgPSB1bml0RGFtYWdlO1xyXG5mdW5jdGlvbiBib3NzRW5lbXlEZXN0cnVjdGlvbihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubGV2ZWxDaGFuZ2UgPSB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIHNwYXduQ29pbihtYWluR2FtZU9iamVjdCwgR3JhcHBsZU9iamVjdCkge1xyXG4gICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoJ2V4dHJhT2JqZWN0cycpKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZXh0cmFPYmplY3RzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgY29pbiA9IF9hW19pXTtcclxuICAgICAgICAgICAgY29pbi54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICBjb2luLnkgPSB0aGlzLnk7XHJcbiAgICAgICAgICAgIGdhbWVHcmFwcGxlT2JqZWN0c01vZHVsZV8xLmxvYWRHcmFiYmxlVG9TaWRlT2JqZWN0LmNhbGwodGhpcywgbWFpbkdhbWVPYmplY3QsIGNvaW4sIEdyYXBwbGVPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNwYXduQ29pbiA9IHNwYXduQ29pbjtcclxuZnVuY3Rpb24gZXhwbG9zaW9uRGFtYWdlKF9hKSB7XHJcbiAgICB2YXIgaGl0T2JqZWN0ID0gX2EuaGl0T2JqZWN0LCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbmVteUNsb3Nlc3RMaXN0LCBfaSwgZW5lbXlDbG9zZXN0TGlzdF8xLCBlbmVteTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBlbmVteUNsb3Nlc3RMaXN0ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVFbmVtaWVzLmZpbHRlcihmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZVhtYXggPSBNYXRoLm1heChvYmplY3QueCwgaGl0T2JqZWN0LngpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzdGFuY2VYbWluID0gTWF0aC5taW4ob2JqZWN0LngsIGhpdE9iamVjdC54KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlWW1heCA9IE1hdGgubWF4KG9iamVjdC55LCBoaXRPYmplY3QueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZVltaW4gPSBNYXRoLm1pbihvYmplY3QueSwgaGl0T2JqZWN0LnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeFJhbmdlID0gZGlzdGFuY2VYbWF4IC0gZGlzdGFuY2VYbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeVJhbmdlID0gZGlzdGFuY2VZbWF4IC0gZGlzdGFuY2VZbWluO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeFJhbmdlIDw9IGhpdE9iamVjdC5yYWRpdXMgJiYgeVJhbmdlIDw9IGhpdE9iamVjdC5yYWRpdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZW15Q2xvc2VzdExpc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBlbmVteUNsb3Nlc3RMaXN0XzEgPSBlbmVteUNsb3Nlc3RMaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShfaSA8IGVuZW15Q2xvc2VzdExpc3RfMS5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteSA9IGVuZW15Q2xvc2VzdExpc3RfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdW5pdERhbWFnZS5jYWxsKGVuZW15LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBlbmVteSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZTogaGl0T2JqZWN0LmRhbWFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdE9iamVjdDogaGl0T2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZW15LmhlYWx0aFBvaW50IDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEuZXhwbG9zaW9uRmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREYXRhOiBlbmVteSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdE9iamVjdDogZW5lbXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaWRlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuU2lkZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGxvc2lvbjogXCJleHBsb3Npb25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXkub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmV4cGxvc2lvbkRhbWFnZSA9IGV4cGxvc2lvbkRhbWFnZTtcclxuZnVuY3Rpb24gb2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0KF9hKSB7XHJcbiAgICB2YXIgb2JqZWN0ID0gX2Eub2JqZWN0LCB0YXJnZXQgPSBfYS50YXJnZXQ7XHJcbiAgICB2YXIgb2JqZWN0QmxvY2tSZWxhdGl2ZVhQb3MgPSAob2JqZWN0LmJsb2NrUmVsYXRpdmVYUG9zKSA/IG9iamVjdC5ibG9ja1JlbGF0aXZlWFBvcyA6IDA7XHJcbiAgICB2YXIgb2JqZWN0QmxvY2tSZWxhdGl2ZVlQb3MgPSAob2JqZWN0LmJsb2NrUmVsYXRpdmVZUG9zKSA/IG9iamVjdC5ibG9ja1JlbGF0aXZlWVBvcyA6IDA7XHJcbiAgICB2YXIgdGFyZ2V0QmxvY2tSZWxhdGl2ZVhQb3MgPSAodGFyZ2V0LmJsb2NrUmVsYXRpdmVYUG9zKSA/IHRhcmdldC5ibG9ja1JlbGF0aXZlWFBvcyA6IDA7XHJcbiAgICB2YXIgdGFyZ2V0QmxvY2tSZWxhdGl2ZVlQb3MgPSAodGFyZ2V0LmJsb2NrUmVsYXRpdmVZUG9zKSA/IHRhcmdldC5ibG9ja1JlbGF0aXZlWVBvcyA6IDA7XHJcbiAgICB2YXIgY29sbGlzaW9uID0gbnVsbDtcclxuICAgIHZhciB4TWluID0gTWF0aC5tYXgob2JqZWN0LnggKyBvYmplY3RCbG9ja1JlbGF0aXZlWFBvcywgdGFyZ2V0LnggKyB0YXJnZXRCbG9ja1JlbGF0aXZlWFBvcyk7XHJcbiAgICB2YXIgeU1pbiA9IE1hdGgubWF4KG9iamVjdC55ICsgb2JqZWN0QmxvY2tSZWxhdGl2ZVlQb3MsIHRhcmdldC55ICsgdGFyZ2V0QmxvY2tSZWxhdGl2ZVlQb3MpO1xyXG4gICAgdmFyIHhNYXggPSBNYXRoLm1pbihvYmplY3QueCArIG9iamVjdEJsb2NrUmVsYXRpdmVYUG9zICsgb2JqZWN0LndpZHRoLCB0YXJnZXQueCArIHRhcmdldEJsb2NrUmVsYXRpdmVYUG9zICsgdGFyZ2V0LndpZHRoKTtcclxuICAgIHZhciB5TWF4ID0gTWF0aC5taW4ob2JqZWN0LnkgKyBvYmplY3RCbG9ja1JlbGF0aXZlWVBvcyArIG9iamVjdC5oZWlnaHQsIHRhcmdldC55ICsgdGFyZ2V0QmxvY2tSZWxhdGl2ZVlQb3MgKyB0YXJnZXQuaGVpZ2h0KTtcclxuICAgIHZhciB4MiA9IHRhcmdldC54ICsgdGFyZ2V0QmxvY2tSZWxhdGl2ZVhQb3MgKyAoKHRhcmdldC5oYXNPd25Qcm9wZXJ0eSgnYnVsbGV0VHlwZScpKSA/IHRhcmdldC53aWR0aCA6IHRhcmdldC53aWR0aCAvIDIpO1xyXG4gICAgdmFyIHkyID0gdGFyZ2V0LnkgKyB0YXJnZXRCbG9ja1JlbGF0aXZlWVBvcyArIHRhcmdldC5oZWlnaHQgLyAyO1xyXG4gICAgdmFyIHgxID0gb2JqZWN0LnggKyBvYmplY3RCbG9ja1JlbGF0aXZlWFBvcyArICgob2JqZWN0Lmhhc093blByb3BlcnR5KCdidWxsZXRUeXBlJykpID8gb2JqZWN0LndpZHRoIDogb2JqZWN0LndpZHRoIC8gMik7XHJcbiAgICB2YXIgeTEgPSBvYmplY3QueSArIG9iamVjdEJsb2NrUmVsYXRpdmVZUG9zICsgb2JqZWN0LmhlaWdodCAvIDI7XHJcbiAgICB2YXIgeCA9IHgyIC0geDE7XHJcbiAgICB2YXIgeSA9IHkyIC0geTE7XHJcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSkgLSAob2JqZWN0LmhlaWdodCAvIDIgKyB0YXJnZXQuaGVpZ2h0IC8gMik7XHJcbiAgICBpZiAodGFyZ2V0Lm9yaWdpbk9iamVjdCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQub3JpZ2luT2JqZWN0Lm9iamVjdE93bmVyICE9IFwiYnVsbGV0XCIgJiYgZGlzdGFuY2UgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJjb2xsaXNpb25cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXRhcmdldC5vcmlnaW5PYmplY3QgfHwgdGFyZ2V0Lm9yaWdpbk9iamVjdC5vYmplY3RPd25lciAhPSBcInBsYXllclwiKSB7XHJcbiAgICAgICAgdmFyIHJlc1kgPSB5TWF4IC0geU1pbjtcclxuICAgICAgICB2YXIgcmVzWCA9IHhNYXggLSB4TWluO1xyXG4gICAgICAgIGNvbGxpc2lvbiA9IChNYXRoLnNpZ24ocmVzWCkgPCAwIHx8IE1hdGguc2lnbihyZXNZKSA8IDApID8gZmFsc2UgOiBcImNvbGxpc2lvblwiO1xyXG4gICAgICAgIHJldHVybiBjb2xsaXNpb247XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5vYmplY3RJbnRlcnNlY3Rpb25EZXRlY3QgPSBvYmplY3RJbnRlcnNlY3Rpb25EZXRlY3Q7XHJcbmZ1bmN0aW9uIGhpdERldGVjdGlvbihfYSkge1xyXG4gICAgdmFyIG9iamVjdDEgPSBfYS5vYmplY3QxLCBvYmplY3RzQXJyID0gX2Eub2JqZWN0c0FyciwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgR3JhcHBsZU9iamVjdCA9IF9hLkdyYXBwbGVPYmplY3Q7XHJcbiAgICB2YXIgY29sbGlzaW9uID0gbnVsbDtcclxuICAgIGZvciAodmFyIF9pID0gMCwgb2JqZWN0c0Fycl8xID0gb2JqZWN0c0FycjsgX2kgPCBvYmplY3RzQXJyXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIG9iamVjdDIgPSBvYmplY3RzQXJyXzFbX2ldO1xyXG4gICAgICAgIGlmIChvYmplY3QyLnggPiB3aW5kb3cuaW5uZXJXaWR0aCArIG9iamVjdDIud2lkdGggfHwgb2JqZWN0Mi54IDwgb2JqZWN0Mi53aWR0aCAqIC0xIHx8XHJcbiAgICAgICAgICAgIG9iamVjdDIueSA+IHdpbmRvdy5pbm5lckhlaWdodCArIG9iamVjdDIuaGVpZ2h0IHx8IG9iamVjdDIueSA8IG9iamVjdDIuaGVpZ2h0ICogLTEpIHtcclxuICAgICAgICAgICAgaWYgKCFvYmplY3QyLm9iamVjdE5hbWVGbGFnICYmICFvYmplY3QxLm9iamVjdE5hbWVGbGFnKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLm1heChvYmplY3QyLngsIG9iamVjdDEueCkgLSBNYXRoLm1pbihvYmplY3QyLngsIG9iamVjdDEueCkgPiAyMDAgfHxcclxuICAgICAgICAgICAgTWF0aC5tYXgob2JqZWN0Mi55LCBvYmplY3QxLnkpIC0gTWF0aC5taW4ob2JqZWN0Mi55LCBvYmplY3QxLnkpID4gMjAwKSB7XHJcbiAgICAgICAgICAgIGlmICghb2JqZWN0Mi5vYmplY3ROYW1lRmxhZyAmJiAhb2JqZWN0MS5vYmplY3ROYW1lRmxhZylcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JqZWN0MVBvc2l0aW9uID0gb2JqZWN0MS5nZXRPYmplY3RQb3NpdGlvbi5jYWxsKG9iamVjdDEpO1xyXG4gICAgICAgIGNvbGxpc2lvbiA9IG9iamVjdEludGVyc2VjdGlvbkRldGVjdCh7IG9iamVjdDoge1xyXG4gICAgICAgICAgICAgICAgeDogb2JqZWN0MVBvc2l0aW9uLngsXHJcbiAgICAgICAgICAgICAgICB5OiBvYmplY3QxUG9zaXRpb24ueSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBvYmplY3QxLndpZHRoIHx8IG9iamVjdDFQb3NpdGlvbi53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogb2JqZWN0MS5oZWlnaHQgfHwgb2JqZWN0MVBvc2l0aW9uLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIG9yaWdpbk9iamVjdDogb2JqZWN0MVxyXG4gICAgICAgICAgICB9LCB0YXJnZXQ6IHtcclxuICAgICAgICAgICAgICAgIHg6IG9iamVjdDIueCxcclxuICAgICAgICAgICAgICAgIHk6IG9iamVjdDIueSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBvYmplY3QyLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvYmplY3QyLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIG9yaWdpbk9iamVjdDogb2JqZWN0MVxyXG4gICAgICAgICAgICB9IH0pO1xyXG4gICAgICAgIGlmIChjb2xsaXNpb24gPT0gXCJjb2xsaXNpb25cIikge1xyXG4gICAgICAgICAgICBpZiAob2JqZWN0MS50YWtlRGFtYWdlICYmIG9iamVjdDIudGFrZURhbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0MS50YWtlRGFtYWdlKChvYmplY3QyLmRhbWFnZSkgPyBvYmplY3QyLmRhbWFnZSA6IDAsIG9iamVjdDIsIG1haW5HYW1lT2JqZWN0LCBHcmFwcGxlT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIG9iamVjdDIudGFrZURhbWFnZSgob2JqZWN0MS5kYW1hZ2UpID8gb2JqZWN0MS5kYW1hZ2UgOiAwLCBvYmplY3QxLCBtYWluR2FtZU9iamVjdCwgR3JhcHBsZU9iamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChjb2xsaXNpb24gPT0gXCJjb2xsaXNpb25cIikgPyBvYmplY3QxIDogZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5oaXREZXRlY3Rpb24gPSBoaXREZXRlY3Rpb247XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHBhZ2VzQnVpbGRlcl8xID0gcmVxdWlyZShcIi4vcGFnZXNCdWlsZGVyXCIpO1xyXG52YXIgc2VydmVyUmVxdWVzdE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9zZXJ2ZXIvc2VydmVyUmVxdWVzdE1vZHVsZXNcIik7XHJcbnZhciBnYW1lUmVzdWx0TW9kdWxlXzEgPSByZXF1aXJlKFwiLi9nYW1lUmVzdWx0TW9kdWxlXCIpO1xyXG52YXIgc2F0YXJ0R2FtZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lTW9kdWxlcy9zYXRhcnRHYW1lXCIpO1xyXG5mdW5jdGlvbiBzaG93KGVsKSB7XHJcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxufVxyXG5leHBvcnRzLnNob3cgPSBzaG93O1xyXG5mdW5jdGlvbiBoaWRlKGVsKSB7XHJcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG59XHJcbmV4cG9ydHMuaGlkZSA9IGhpZGU7XHJcbmZ1bmN0aW9uIHRvZ2dsZXIoZWwpIHtcclxuICAgIChlbC5zdHlsZS5kaXNwbGF5ID09ICdub25lJykgPyBzaG93KGVsKSA6IGhpZGUoZWwpO1xyXG59XHJcbmV4cG9ydHMudG9nZ2xlciA9IHRvZ2dsZXI7XHJcbmZ1bmN0aW9uIGFkZENsYXNzTGlzdChlbCwgY2xhc3NMaXN0KSB7XHJcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTGlzdCk7XHJcbn1cclxuZXhwb3J0cy5hZGRDbGFzc0xpc3QgPSBhZGRDbGFzc0xpc3Q7XHJcbmZ1bmN0aW9uIHJlbW92ZUNsYXNzTGlzdChlbCwgY2xhc3NMaXN0KSB7XHJcbiAgICBpZiAoIWVsLmNsYXNzTGlzdClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTGlzdCk7XHJcbn1cclxuZXhwb3J0cy5yZW1vdmVDbGFzc0xpc3QgPSByZW1vdmVDbGFzc0xpc3Q7XHJcbmZ1bmN0aW9uIGFwcE1lbnUoZ2FtZU9iamVjdCwgZGlhbG9nV2luZG93KSB7XHJcbiAgICB2YXIgc2VsZWN0ZWRNZW51SXRlbSA9IG51bGw7XHJcbiAgICB2YXIgbmF2aWdhdGlvbiA9IHtcclxuICAgICAgICBzaG93U2VsZWN0ZWRJdGVtOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNlbGVjdGVkTWVudUl0ZW06IHNlbGVjdGVkTWVudUl0ZW0gfTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1lbnU6IHtcclxuICAgICAgICAgICAgY29uc3RhbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uVGVtcGxhdGU6ICcuc2VjdGlvbi10ZW1wbGF0ZScsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50Q29udGFpbmVyOiAnI3dyYXBwZXInLFxyXG4gICAgICAgICAgICAgICAgc2lkZU1lbnVXcmFwcGVyOiAnI21haW4tbWVudSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1wb3J0U2VjdGlvbnNUb0RPTTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGlua1tyZWw9XCJpbXBvcnRcIl0nKTtcclxuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwobGlua3MsIGZ1bmN0aW9uIChsaW5rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbGluay5pbXBvcnQucXVlcnlTZWxlY3RvcihuYXZpZ2F0aW9uLm1lbnUuY29uc3RhbnRzLnNlY3Rpb25UZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lID0gZG9jdW1lbnQuaW1wb3J0Tm9kZSh0ZW1wbGF0ZS5jb250ZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hdmlnYXRpb24ubWVudS5jb25zdGFudHMuY29udGVudENvbnRhaW5lcikuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldE1lbnVPbkNsaWNrRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGlhbG9nLWJveFwiKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBidXR0b25BY3Rvbik7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBidXR0b25BY3RvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuZGF0YXNldC5zZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uLm1lbnUuaGlkZUFsbFNlY3Rpb25zKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uLm1lbnUuc2hvd1NlY3Rpb24uY2FsbCh0aGlzLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVudVNlbGVjdGlvbihldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudGFyZ2V0LmRhdGFzZXQuc2VjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZ2FtZS1yZXN1bHRzJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lUmVzdWx0TW9kdWxlXzEuc2hvd1Jlc3VsdFNjcmVlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnRhcmdldC5kYXRhc2V0LmJ1dHRvbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdnYW1lLXJlc3VsdHMnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXhpdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlcihlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nV2luZG93KHsgdGV4dERhdGE6ICdFeGl0IHRoZSBnYW1lPycsIHJlamVjdFRleHQ6ICdjYW5jZWwnLCBhY2NlcHRUZXh0OiAnb2snIH0sIHNhdGFydEdhbWVfMS5leGl0VGhlR2FtZSwgbmF2aWdhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjbG9zZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbi5tZW51LmhpZGVBbGxTZWN0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkTWVudUl0ZW0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1lbnVTZWxlY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnRhZ05hbWUgIT0gXCJMSVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lbnVBcmVhID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zZWxlY3RlZC1pdGVtc1wiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZW51QXJlYV8xID0gbWVudUFyZWE7IF9pIDwgbWVudUFyZWFfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lbnVJdGVtID0gbWVudUFyZWFfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzTGlzdChtZW51SXRlbSwgXCJzZWxlY3RlZC1pdGVtc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRNZW51SXRlbSA9IChldmVudC50YXJnZXQuZGF0YXNldC5idXR0b25JZCAhPSBcImNsb3NlXCIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmRhdGFzZXQuYnV0dG9uSWQgIT0gXCJjYW5jZWxcIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuZGF0YXNldC5idXR0b25JZCAhPSBcImV4aXRcIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuZGF0YXNldCkgPyBldmVudC50YXJnZXQucGFyZW50RWxlbWVudCA6IHNlbGVjdGVkTWVudUl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3NMaXN0KGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LCBcInNlbGVjdGVkLWl0ZW1zXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaG93U2VjdGlvbjogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbklkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuc2VjdGlvbjtcclxuICAgICAgICAgICAgICAgIHNob3coZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNcIiArIHNlY3Rpb25JZCkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1lbnVBcmVhID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tZW51LXdyYXBwZXJcIikpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZW51QXJlYV8yID0gbWVudUFyZWE7IF9pIDwgbWVudUFyZWFfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IG1lbnVBcmVhXzJbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzTGlzdChpdGVtLCBcIm1lbnUtYmFja2dyb3VkXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFnZXNCdWlsZGVyXzEucGFnZUJ1aWxkZXIoeyB0YXJnZXQ6IFwiI2Fib3V0LXNlY3Rpb24tY29udGVudFwiLCBkYXRhOiBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLmdldExvY2FsRGF0YSh7IGZpbGVOYW1lOiAnYWJvdXQtcGFnZS5qc29uJyB9KSB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGlkZUFsbFNlY3Rpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VjdGlvbk5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmNvbnN0YW50cy5jb250ZW50Q29udGFpbmVyICsgXCIgc2VjdGlvblwiKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlY3Rpb25Ob2Rlc18xID0gc2VjdGlvbk5vZGVzOyBfaSA8IHNlY3Rpb25Ob2Rlc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gc2VjdGlvbk5vZGVzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGhpZGUoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgbWVudUJhY2tncm91bmRBcmVhID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tZW51LXdyYXBwZXJcIikpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtZW51QmFja2dyb3VuZEFyZWFfMSA9IG1lbnVCYWNrZ3JvdW5kQXJlYTsgX2EgPCBtZW51QmFja2dyb3VuZEFyZWFfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IG1lbnVCYWNrZ3JvdW5kQXJlYV8xW19hXTtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzc0xpc3QoaXRlbSwgXCJtZW51LWJhY2tncm91ZFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtZW51QXJlYSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2VsZWN0ZWQtaXRlbXNcIikpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBtZW51QXJlYV8zID0gbWVudUFyZWE7IF9iIDwgbWVudUFyZWFfMy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVudUl0ZW0gPSBtZW51QXJlYV8zW19iXTtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzc0xpc3QobWVudUl0ZW0sIFwic2VsZWN0ZWQtaXRlbXNcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1wb3J0U2VjdGlvbnNUb0RPTSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNZW51T25DbGlja0V2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVBbGxTZWN0aW9ucygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xyXG59XHJcbmV4cG9ydHMuYXBwTWVudSA9IGFwcE1lbnU7XHJcbmZ1bmN0aW9uIGhpZGVTaG93TWVudShtYWluTWVudSwgbmF2aWdhdGlvbk1lbnUsIGdhbWVXaW4sIGdhbWVTdGF0dXMsIGdhbWVVaVBhdXNlKSB7XHJcbiAgICBpZiAoIWdhbWVTdGF0dXMgfHwgZ2FtZVVpUGF1c2UpIHtcclxuICAgICAgICBtYWluTWVudS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZS1tZW51XCIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbWFpbk1lbnUuY2xhc3NMaXN0LmFkZChcImhpZGUtbWVudVwiKTtcclxuICAgICAgICBuYXZpZ2F0aW9uTWVudS5oaWRlQWxsU2VjdGlvbnMoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmhpZGVTaG93TWVudSA9IGhpZGVTaG93TWVudTtcclxuZnVuY3Rpb24gZGlhbG9nV2luZG93KF9hLCBjYWxsYmFjaywgbmF2aWdhdGlvbikge1xyXG4gICAgdmFyIHRleHREYXRhID0gX2EudGV4dERhdGEsIHJlamVjdFRleHQgPSBfYS5yZWplY3RUZXh0LCBhY2NlcHRUZXh0ID0gX2EuYWNjZXB0VGV4dDtcclxuICAgIHZhciByZXN0ID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHJlc3RbX2kgLSAzXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgd2luZG93RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZGlhbG9nLWJveFwiKTtcclxuICAgIHZhciBkaWFsb2dCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RpYWxvZy1ib2R5Jyk7XHJcbiAgICBkaWFsb2dCb2R5LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBmdW5jdGlvbiBkaWFsb2dCdXR0b25FdmVudChldmVudCkge1xyXG4gICAgICAgIHZhciBzZWxlY3RlZE1lbnVJdGVtID0gKG5hdmlnYXRpb24pID8gbmF2aWdhdGlvbi5zaG93U2VsZWN0ZWRJdGVtKCkgOiBmYWxzZTtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LnRhcmdldC5kYXRhc2V0LmJ1dHRvbklkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ29rJzpcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdjYW5jZWwnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd0VsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZSh3aW5kb3dFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHZhciBtZW51QXJlYSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2VsZWN0ZWQtaXRlbXNcIikpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtZW51QXJlYV80ID0gbWVudUFyZWE7IF9pIDwgbWVudUFyZWFfNC5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVudUl0ZW0gPSBtZW51QXJlYV80W19pXTtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzc0xpc3QobWVudUl0ZW0sIFwic2VsZWN0ZWQtaXRlbXNcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRNZW51SXRlbS5zZWxlY3RlZE1lbnVJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3NMaXN0KHNlbGVjdGVkTWVudUl0ZW0uc2VsZWN0ZWRNZW51SXRlbSwgXCJzZWxlY3RlZC1pdGVtc1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyZXN0YXJ0JzpcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwuYXBwbHkoY2FsbGJhY2ssIHJlc3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd0VsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZSh3aW5kb3dFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvd0VsZW1lbnQpXHJcbiAgICAgICAgc2hvdyh3aW5kb3dFbGVtZW50KTtcclxuICAgIHZhciBkaWFsb2dEYXRhID0gW1xyXG4gICAgICAgIHBhZ2VzQnVpbGRlcl8xLmNyZWF0ZUVsZW1lbnRzKHtcclxuICAgICAgICAgICAgdGFnTmFtZTogXCJkaXZcIixcclxuICAgICAgICAgICAgc3R5bGVDbGFzczogXCJkaWFsb2ctYXJlYS13cmFwcGVyXCIsXHJcbiAgICAgICAgICAgIGlubGluZVN0eWxlOiBudWxsLFxyXG4gICAgICAgICAgICBwaWN0dXJlVXJsOiBudWxsLFxyXG4gICAgICAgICAgICBsaW5rVXJsOiBudWxsLFxyXG4gICAgICAgICAgICB0ZXh0OiBhY2NlcHRUZXh0LFxyXG4gICAgICAgICAgICBpbm5lckNvbnRlbnQ6IFwiXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGlhbG9nLXRleHRcXFwiPlwiICsgdGV4dERhdGEgKyBcIjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgaWQ9XFxcImRpYWxvZy1idXR0b24tYXJlYVxcXCIgY2xhc3M9XFxcImRpYWxvZy1idG4tYXJlYVxcXCI+XFxuICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWJ1dHRvbi1pZD1cIiArIGFjY2VwdFRleHQgKyBcIiBjbGFzcz1cXFwiIGJ0bi1tYWluXFxcIj5cIiArIGFjY2VwdFRleHQgKyBcIjwvYnV0dG9uPlxcbiAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWJ1dHRvbi1pZD1cXFwiY2FuY2VsXFxcIiBjbGFzcz1cXFwicmVqZWN0LWJ0biBidG4tbWFpbiBidG4tb3JhbmdlLXJlamVjdFxcXCI+Y2FuY2VsPC9idXR0b24+XFxuICAgICAgIDwvZGl2PlwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGF0YS1idXR0b24taWQnLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IGFjY2VwdFRleHQsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgfSlcclxuICAgIF07XHJcbiAgICBmb3IgKHZhciBfYiA9IDAsIGRpYWxvZ0RhdGFfMSA9IGRpYWxvZ0RhdGE7IF9iIDwgZGlhbG9nRGF0YV8xLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gZGlhbG9nRGF0YV8xW19iXTtcclxuICAgICAgICBkaWFsb2dCb2R5LmFwcGVuZENoaWxkKGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgdmFyIGRpYWxvZ0J1dHRvbkFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGlhbG9nLWJ1dHRvbi1hcmVhJyk7XHJcbiAgICBkaWFsb2dCdXR0b25BcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlhbG9nQnV0dG9uRXZlbnQpO1xyXG59XHJcbmV4cG9ydHMuZGlhbG9nV2luZG93ID0gZGlhbG9nV2luZG93O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL2dhbWVEYXRhUmVxdWVzdHNTZXJ2aWNlc01vZHVsZVwiKTtcclxudmFyIGFwcE1lbnVfMSA9IHJlcXVpcmUoXCIuLi8uLi9hcHBNZW51L2FwcE1lbnVcIik7XHJcbnZhciBlbmdpbmVNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lTW9kdWxlc1wiKTtcclxudmFyIGR5bmFtaWNEaWFsb2dfMSA9IHJlcXVpcmUoXCIuL2R5bmFtaWNEaWFsb2dcIik7XHJcbi8vaW1wb3J0ICogYXMgY29uc3RydWN0b3JzIGZyb20gJy4uLy4uL2NvbnN0cnVjdG9ycy9pbmRleCc7XHJcbmZ1bmN0aW9uIGluaXRHcm91bmRQbGF5ZXIoX2EpIHtcclxuICAgIHZhciBEeW5hbWljVXNlckNvbnN0cnVjdG9yID0gX2EuRHluYW1pY1VzZXJDb25zdHJ1Y3RvcjtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2hhcmFjdGVyLCB1c2VyO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVfMS5sb2FkR3JvdW5kUGxheWVyKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoYXJhY3RlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyID0gbmV3IER5bmFtaWNVc2VyQ29uc3RydWN0b3IoX19hc3NpZ24oe30sIGNoYXJhY3RlclswXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB1c2VyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5pbml0R3JvdW5kUGxheWVyID0gaW5pdEdyb3VuZFBsYXllcjtcclxuZnVuY3Rpb24gc2hvd0dyb3VuZFBsYXllckludmVudG9yeShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgZ3JvdW5kUGxheWVyID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdyb3VuZFBsYXllckNoYXJhY3RlcjtcclxuICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPT09ICdmYWxzZScpIHtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVPdmVyIHx8ICFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSB8fFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlIHx8ICFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cylcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIG9wZW5JbnZlbnRvcnkoKTtcclxuICAgICAgICBsb2FkSXRlbXNUb0dyb3VuZEludmVudG9yeSh7IGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaGlkZUludmVudG9yeSgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2hvd0dyb3VuZFBsYXllckludmVudG9yeSA9IHNob3dHcm91bmRQbGF5ZXJJbnZlbnRvcnk7XHJcbmZ1bmN0aW9uIG9wZW5JbnZlbnRvcnkoKSB7XHJcbiAgICB2YXIgaW52ZW50b3J5V3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiYWNrcGFjay13cmFwcGVyJyk7XHJcbiAgICBhcHBNZW51XzEuc2hvdyhpbnZlbnRvcnlXcmFwcGVyKTtcclxuICAgIHByb2Nlc3MuZW52LkdST1VORF9DSEFSQUNURVJTX0lOVkVOVE9SWSA9ICd0cnVlJztcclxufVxyXG5leHBvcnRzLm9wZW5JbnZlbnRvcnkgPSBvcGVuSW52ZW50b3J5O1xyXG5mdW5jdGlvbiBoaWRlSW52ZW50b3J5KCkge1xyXG4gICAgdmFyIGludmVudG9yeVdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYmFja3BhY2std3JhcHBlcicpO1xyXG4gICAgYXBwTWVudV8xLmhpZGUoaW52ZW50b3J5V3JhcHBlcik7XHJcbiAgICBwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPSAnZmFsc2UnO1xyXG59XHJcbmV4cG9ydHMuaGlkZUludmVudG9yeSA9IGhpZGVJbnZlbnRvcnk7XHJcbmZ1bmN0aW9uIGxvYWRJdGVtc1RvR3JvdW5kSW52ZW50b3J5KF9hKSB7XHJcbiAgICB2YXIgZ3JvdW5kUGxheWVyID0gX2EuZ3JvdW5kUGxheWVyO1xyXG4gICAgdmFyIHBsYXllckludmVudG9yeSA9IGdyb3VuZFBsYXllci5pbnZlbnRvcnk7XHJcbiAgICB2YXIgb2JqZWN0VG9SZW5kZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JhY2twYWNrLWJvZHlcIik7XHJcbiAgICBvYmplY3RUb1JlbmRlclsnd2lkdGgnXSA9IFwiYXV0b1wiO1xyXG4gICAgaWYgKHBsYXllckludmVudG9yeS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIGFsbElubmVyT2JqZWN0ID0gbG9hZFBsYXllckNoYXJhY3Rlcih7IHBsYXllckludmVudG9yeTogcGxheWVySW52ZW50b3J5IH0pO1xyXG4gICAgICAgIG9iamVjdFRvUmVuZGVyLmlubmVySFRNTCA9IGFsbElubmVyT2JqZWN0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgb2JqZWN0VG9SZW5kZXIuaW5uZXJIVE1MID0gXCI8cD5ObyBpdGVtcyBpbiB0aGlzIGludmVudG9yeTwvcD5cIjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBsb2FkUGxheWVyQ2hhcmFjdGVyKF9hKSB7XHJcbiAgICB2YXIgcGxheWVySW52ZW50b3J5ID0gX2EucGxheWVySW52ZW50b3J5O1xyXG4gICAgdmFyIGl0ZW1zID0gJzxoMyBjbGFzcz1cInNpZGUtcGFuZWwtbmFtZVwiPkludmVudG9yeTxwPlByZXNzIEkgdG8gY2xvc2U8L3A+PC9oMz4nO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBwbGF5ZXJJbnZlbnRvcnlfMSA9IHBsYXllckludmVudG9yeTsgX2kgPCBwbGF5ZXJJbnZlbnRvcnlfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgaXRlbSA9IHBsYXllckludmVudG9yeV8xW19pXTtcclxuICAgICAgICBpdGVtcyArPSBcIjxkaXYgY2xhc3M9XFxcImJhY2twYWNrLWl0ZW0td3JhcHBlclxcXCI+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwibnVtYmVyLW9mLWl0ZW1zXFxcIj5cIiArIGl0ZW0ubnVtYmVyT2ZJdGVtcyArIFwiPC9zcGFuPlxcbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcImJhY2stcGFjay1pdGVtLXBpY3R1cmVcXFwiIHNyYz1cXFwiXCIgKyAoKGl0ZW0ub2JqZWN0UGljdHVyZSkgPyBpdGVtLm9iamVjdFBpY3R1cmUgOiBpdGVtLnRleHR1cmUpICsgXCJcXFwiPlxcblxcbiAgICAgICAgICAgIDxwPlwiICsgKChpdGVtLm5hbWUpID8gaXRlbS5uYW1lIDogaXRlbS5pbm5lckRhdGEuc3BsaXQoXCJfXCIpLmpvaW4oXCIgXCIpKSArIFwiPC9wPlxcbiAgICAgICAgPC9kaXY+XCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXRlbXM7XHJcbn1cclxuZXhwb3J0cy5sb2FkUGxheWVyQ2hhcmFjdGVyID0gbG9hZFBsYXllckNoYXJhY3RlcjtcclxuZnVuY3Rpb24gcGxheWVyQW5pbWF0aW9uKF9hKSB7XHJcbiAgICB2YXIgZ3JvdW5kUGxheWVyID0gX2EuZ3JvdW5kUGxheWVyLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGV4dHJhU2Vjb25kcyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRXh0cmFTZWNvbmRzO1xyXG59XHJcbmV4cG9ydHMucGxheWVyQW5pbWF0aW9uID0gcGxheWVyQW5pbWF0aW9uO1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIHRvIGNoYW5nZSB1bml0IGFuaW1hdGlvbnMsIGJhc2VkIG9uIGpzb24gZGF0YVxyXG5cclxuID09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIHJ1bkFuaW1hdGlvbihfYSkge1xyXG4gICAgdmFyIHJlbmV3QW5pbWF0aW9uID0gX2EucmVuZXdBbmltYXRpb24sIGxheWVyRGVmYXVsdFNpemUgPSBfYS5sYXllckRlZmF1bHRTaXplLCBzaG90QW5nbGVBbmltYXRpb24gPSBfYS5zaG90QW5nbGVBbmltYXRpb247XHJcbiAgICBpZiAodGhpcy5udW1iZXJPZkl0ZW1zICE9IHRoaXMuYW5pbWF0aW9ucy5ydW4ubnVtYmVyT2ZJdGVtcylcclxuICAgICAgICByZW5ld0FuaW1hdGlvbi5jYWxsKHRoaXMpO1xyXG4gICAgbGF5ZXJEZWZhdWx0U2l6ZS5jYWxsKHRoaXMpO1xyXG4gICAgdGhpcy5wbGF5ZXJEaXJlY3Rpb25WZXJ0aWNhbCA9ICdzdGFuZCc7XHJcbiAgICB0aGlzLm9uTGVhZGVyID0gZmFsc2U7XHJcbiAgICB0aGlzLmltZy5zcmMgPSBfX2Rpcm5hbWUgKyB0aGlzLmFuaW1hdGlvbnMucnVuLmlubmVyVGV4dHVyZTtcclxuICAgIHJlcGxhY2VyT2ZWYWx1ZSh7IG9yaWdpbmFsT2JqZWN0OiB0aGlzLCBkYXRhVG9SZXBsYWNlOiB0aGlzLmFuaW1hdGlvbnMucnVuIH0pO1xyXG4gICAgaWYgKHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kUGxheWVyXCIgJiYgdGhpcy5pc1Nob3QpIHtcclxuICAgICAgICBzaG90QW5nbGVBbmltYXRpb24uY2FsbCh0aGlzLCAncnVuQW5kU2hvdFRvcCcsICdydW5BbmRTaG90Qm90dG9tJywgJ3J1bkFuZFNob3RGb3J3YXJkJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2l0aW5nQW5pbWF0aW9uKF9hKSB7XHJcbiAgICB2YXIgcmVuZXdBbmltYXRpb24gPSBfYS5yZW5ld0FuaW1hdGlvbiwgc2hvdEFuZ2xlQW5pbWF0aW9uID0gX2Euc2hvdEFuZ2xlQW5pbWF0aW9uO1xyXG4gICAgaWYgKHRoaXMubnVtYmVyT2ZJdGVtcyAhPSB0aGlzLmFuaW1hdGlvbnMuc2l0Lm51bWJlck9mSXRlbXMpXHJcbiAgICAgICAgcmVuZXdBbmltYXRpb24uY2FsbCh0aGlzKTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5hbmltYXRpb25zLnNpdC5oZWlnaHQ7XHJcbiAgICB0aGlzLnNIZWlnaHQgPSB0aGlzLmFuaW1hdGlvbnMuc2l0LmltYWdlSGVpZ2h0IC8gMjtcclxuICAgIHRoaXMuaW1nLnNyYyA9IF9fZGlybmFtZSArIHRoaXMuYW5pbWF0aW9ucy5zaXQuaW5uZXJUZXh0dXJlO1xyXG4gICAgcmVwbGFjZXJPZlZhbHVlKHsgb3JpZ2luYWxPYmplY3Q6IHRoaXMsIGRhdGFUb1JlcGxhY2U6IHRoaXMuYW5pbWF0aW9ucy5zaXQgfSk7XHJcbiAgICBpZiAodGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0aGlzLmlzU2hvdCkge1xyXG4gICAgICAgIHNob3RBbmdsZUFuaW1hdGlvbi5jYWxsKHRoaXMsICdzaXRTaG90VG9wJywgJ3NpdFNob3RCb3R0b20nLCAnc2l0Jyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbGVhZGVyQW5pbWF0aW9uKF9hKSB7XHJcbiAgICB2YXIgcmVuZXdBbmltYXRpb24gPSBfYS5yZW5ld0FuaW1hdGlvbiwgc2hvdEFuZ2xlQW5pbWF0aW9uID0gX2Euc2hvdEFuZ2xlQW5pbWF0aW9uO1xyXG4gICAgaWYgKHRoaXMubnVtYmVyT2ZJdGVtcyAhPSB0aGlzLmFuaW1hdGlvbnMubGVhZGVyLm51bWJlck9mSXRlbXMpXHJcbiAgICAgICAgcmVuZXdBbmltYXRpb24uY2FsbCh0aGlzKTtcclxuICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5hbmltYXRpb25zLmxlYWRlci5oZWlnaHQ7XHJcbiAgICB0aGlzLnNXaWR0aCA9IHRoaXMuYW5pbWF0aW9ucy5sZWFkZXIuaW1hZ2VXaWR0aCAvIHRoaXMuYW5pbWF0aW9ucy5sZWFkZXIubnVtYmVyT2ZJdGVtcztcclxuICAgIHRoaXMuc0hlaWdodCA9IHRoaXMuYW5pbWF0aW9ucy5sZWFkZXIuaW1hZ2VIZWlnaHQgLyAyO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gX19kaXJuYW1lICsgdGhpcy5hbmltYXRpb25zLmxlYWRlci5pbm5lclRleHR1cmU7XHJcbiAgICByZXBsYWNlck9mVmFsdWUoeyBvcmlnaW5hbE9iamVjdDogdGhpcywgZGF0YVRvUmVwbGFjZTogdGhpcy5hbmltYXRpb25zLmxlYWRlciB9KTtcclxuICAgIGlmICh0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZFBsYXllclwiICYmIHRoaXMuaXNTaG90KSB7XHJcbiAgICAgICAgc2hvdEFuZ2xlQW5pbWF0aW9uLmNhbGwodGhpcywgJ2xlYWRlclNob3RUb3AnLCAnbGVhZGVyU2hvdEJvdHRvbScsICdsZWFkZXJTaG90U2lkZScpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHN0YW5kaW5nQW5pbWF0aW9uKF9hKSB7XHJcbiAgICB2YXIgcmVuZXdBbmltYXRpb24gPSBfYS5yZW5ld0FuaW1hdGlvbiwgc2hvdEFuZ2xlQW5pbWF0aW9uID0gX2Euc2hvdEFuZ2xlQW5pbWF0aW9uLCBsYXllckRlZmF1bHRTaXplID0gX2EubGF5ZXJEZWZhdWx0U2l6ZTtcclxuICAgIGlmICh0aGlzLm51bWJlck9mSXRlbXMgIT0gdGhpcy5hbmltYXRpb25zLnN0YW5kLm51bWJlck9mSXRlbXMpXHJcbiAgICAgICAgcmVuZXdBbmltYXRpb24uY2FsbCh0aGlzKTtcclxuICAgIGxheWVyRGVmYXVsdFNpemUuY2FsbCh0aGlzKTtcclxuICAgIHRoaXMucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPSAnc3RhbmQnO1xyXG4gICAgdGhpcy5vbkxlYWRlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gX19kaXJuYW1lICsgdGhpcy5hbmltYXRpb25zLnN0YW5kLmlubmVyVGV4dHVyZTtcclxuICAgIHJlcGxhY2VyT2ZWYWx1ZSh7IG9yaWdpbmFsT2JqZWN0OiB0aGlzLCBkYXRhVG9SZXBsYWNlOiB0aGlzLmFuaW1hdGlvbnMuc3RhbmQgfSk7XHJcbiAgICBpZiAodGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIikge1xyXG4gICAgICAgIHNob3RBbmdsZUFuaW1hdGlvbi5jYWxsKHRoaXMsICdzdGFuZEFuZFNob3RUb3AnLCAnc3RhbmRBbmRTaG90Qm90dG9tJywgbnVsbCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24ganVtcEFuaW1hdGlvbihfYSkge1xyXG4gICAgdmFyIHJlbmV3QW5pbWF0aW9uID0gX2EucmVuZXdBbmltYXRpb24sIGxheWVyRGVmYXVsdFNpemUgPSBfYS5sYXllckRlZmF1bHRTaXplLCBzaG90QW5nbGVBbmltYXRpb24gPSBfYS5zaG90QW5nbGVBbmltYXRpb247XHJcbiAgICBpZiAodGhpcy5udW1iZXJPZkl0ZW1zICE9IHRoaXMuYW5pbWF0aW9ucy5qdW1wLm51bWJlck9mSXRlbXMpXHJcbiAgICAgICAgcmVuZXdBbmltYXRpb24uY2FsbCh0aGlzKTtcclxuICAgIGxheWVyRGVmYXVsdFNpemUuY2FsbCh0aGlzKTtcclxuICAgIHRoaXMucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPSAnc3RhbmQnO1xyXG4gICAgdGhpcy5vbkxlYWRlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gX19kaXJuYW1lICsgdGhpcy5hbmltYXRpb25zLmp1bXAuaW5uZXJUZXh0dXJlO1xyXG4gICAgcmVwbGFjZXJPZlZhbHVlKHsgb3JpZ2luYWxPYmplY3Q6IHRoaXMsIGRhdGFUb1JlcGxhY2U6IHRoaXMuYW5pbWF0aW9ucy5qdW1wIH0pO1xyXG4gICAgaWYgKHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kUGxheWVyXCIpIHtcclxuICAgICAgICBzaG90QW5nbGVBbmltYXRpb24uY2FsbCh0aGlzLCAnanVtcCcsICdqdW1wU2hvdEJvdHRvbScsICdqdW1wU2hvdENlbnRlcicpOyAvLyBzdGFuZEFuZFNob3RUb3AgIHN0YW5kQW5kU2hvdEJvdHRvbVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoYW5nZUFuaW1hdGlvblBhcmFtZXRlcnMoKSB7XHJcbiAgICBpZiAoIXRoaXMub2JqZWN0UHJlc2VudCkge1xyXG4gICAgICAgIGlmICh0aGlzLm51bWJlck9mSXRlbXMgIT0gdGhpcy5hbmltYXRpb25zLmRlYXRoLm51bWJlck9mSXRlbXMpXHJcbiAgICAgICAgICAgIHJlbmV3QW5pbWF0aW9uLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5pbWcuc3JjID0gX19kaXJuYW1lICsgdGhpcy5hbmltYXRpb25zLmRlYXRoLmlubmVyVGV4dHVyZTtcclxuICAgICAgICB0aGlzLndpZHRoID0gKHRoaXMuYW5pbWF0aW9ucy5kZWF0aC53aWR0aCkgPyB0aGlzLmFuaW1hdGlvbnMuZGVhdGgud2lkdGggOiB0aGlzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gKHRoaXMuYW5pbWF0aW9ucy5kZWF0aC5oZWlnaHQpID8gdGhpcy5hbmltYXRpb25zLmRlYXRoLmhlaWdodCA6IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIHJlcGxhY2VyT2ZWYWx1ZSh7IG9yaWdpbmFsT2JqZWN0OiB0aGlzLCBkYXRhVG9SZXBsYWNlOiB0aGlzLmFuaW1hdGlvbnMuZGVhdGggfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZFBsYXllclwiICYmIHRoaXMub25MZWFkZXIgJiYgdGhpcy5wbGF5ZXJEaXJlY3Rpb25WZXJ0aWNhbCA9PT0gXCJ1cFwiIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0aGlzLm9uTGVhZGVyICYmIHRoaXMucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPT09IFwiZG93blwiKSB7XHJcbiAgICAgICAgbGVhZGVyQW5pbWF0aW9uLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICByZW5ld0FuaW1hdGlvbjogcmVuZXdBbmltYXRpb24sXHJcbiAgICAgICAgICAgIHNob3RBbmdsZUFuaW1hdGlvbjogc2hvdEFuZ2xlQW5pbWF0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID09PSBcImRvd25cIiAmJiAhdGhpcy5vbkxlYWRlciAmJiB0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZFBsYXllclwiKSB7XHJcbiAgICAgICAgc2l0aW5nQW5pbWF0aW9uLmNhbGwodGhpcywge1xyXG4gICAgICAgICAgICByZW5ld0FuaW1hdGlvbjogcmVuZXdBbmltYXRpb24sXHJcbiAgICAgICAgICAgIHNob3RBbmdsZUFuaW1hdGlvbjogc2hvdEFuZ2xlQW5pbWF0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLmlzUnVuICYmIHRoaXMuZ3JvdW5kVG91Y2ggJiYgdGhpcy5vYmplY3RPd25lcikge1xyXG4gICAgICAgIHJ1bkFuaW1hdGlvbi5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgcmVuZXdBbmltYXRpb246IHJlbmV3QW5pbWF0aW9uLFxyXG4gICAgICAgICAgICBsYXllckRlZmF1bHRTaXplOiBsYXllckRlZmF1bHRTaXplLFxyXG4gICAgICAgICAgICBzaG90QW5nbGVBbmltYXRpb246IHNob3RBbmdsZUFuaW1hdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGhpcy5pc1J1biA9PT0gZmFsc2UgJiYgdGhpcy5ncm91bmRUb3VjaCAmJiB0aGlzLm9iamVjdE93bmVyIHx8IHRoaXMub25FbGV2YXRvciAmJiB0aGlzLm9iamVjdE93bmVyKSB7XHJcbiAgICAgICAgc3RhbmRpbmdBbmltYXRpb24uY2FsbCh0aGlzLCB7XHJcbiAgICAgICAgICAgIHJlbmV3QW5pbWF0aW9uOiByZW5ld0FuaW1hdGlvbixcclxuICAgICAgICAgICAgc2hvdEFuZ2xlQW5pbWF0aW9uOiBzaG90QW5nbGVBbmltYXRpb24sXHJcbiAgICAgICAgICAgIGxheWVyRGVmYXVsdFNpemU6IGxheWVyRGVmYXVsdFNpemVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCF0aGlzLmdyb3VuZFRvdWNoICYmICF0aGlzLm9uRWxldmF0b3IgJiYgdGhpcy5vYmplY3RPd25lcikge1xyXG4gICAgICAgIGp1bXBBbmltYXRpb24uY2FsbCh0aGlzLCB7XHJcbiAgICAgICAgICAgIHJlbmV3QW5pbWF0aW9uOiByZW5ld0FuaW1hdGlvbixcclxuICAgICAgICAgICAgbGF5ZXJEZWZhdWx0U2l6ZTogbGF5ZXJEZWZhdWx0U2l6ZSxcclxuICAgICAgICAgICAgc2hvdEFuZ2xlQW5pbWF0aW9uOiBzaG90QW5nbGVBbmltYXRpb25cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRoaXMuc1dpZHRoID0gdGhpcy5pbWFnZVdpZHRoIC8gdGhpcy5udW1iZXJPZkl0ZW1zO1xyXG4gICAgdGhpcy5vbkxlYWRlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5sZWFkZXJDbGltYiA9IGZhbHNlO1xyXG4gICAgZnVuY3Rpb24gbGF5ZXJEZWZhdWx0U2l6ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIikge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5kZWZhdWx0V2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5kZWZhdWx0SGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLnNIZWlnaHQgPSB0aGlzLmltYWdlSGVpZ2h0RGVmYXVsdCAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMuc1dpZHRoID0gdGhpcy5pbWFnZVdpZHRoRGVmYXVsdCAvIHRoaXMubnVtYmVyT2ZJdGVtcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzaG90QW5nbGVBbmltYXRpb24oYW5pbWF0aW9uTmFtZVRvcCwgYW5pbWF0aW9uTmFtZUJvdHRvbSwgYW5pbWF0aW9uTmFtZVN0YW5kKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdEFuZ2xlIDwgMzM1ICYmIHRoaXMuc2hvdEFuZ2xlID4gMjAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1nLnNyYyA9IF9fZGlybmFtZSArIHRoaXMuYW5pbWF0aW9uc1thbmltYXRpb25OYW1lVG9wXS5pbm5lclRleHR1cmU7XHJcbiAgICAgICAgICAgIHJlcGxhY2VyT2ZWYWx1ZSh7IG9yaWdpbmFsT2JqZWN0OiB0aGlzLCBkYXRhVG9SZXBsYWNlOiB0aGlzLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZVRvcF0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2hvdEFuZ2xlID4gMzAgJiYgdGhpcy5zaG90QW5nbGUgPCAxNjApIHtcclxuICAgICAgICAgICAgdGhpcy5pbWcuc3JjID0gX19kaXJuYW1lICsgdGhpcy5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVCb3R0b21dLmlubmVyVGV4dHVyZTtcclxuICAgICAgICAgICAgcmVwbGFjZXJPZlZhbHVlKHsgb3JpZ2luYWxPYmplY3Q6IHRoaXMsIGRhdGFUb1JlcGxhY2U6IHRoaXMuYW5pbWF0aW9uc1thbmltYXRpb25OYW1lQm90dG9tXSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zaG90U3RhdGUgJiYgYW5pbWF0aW9uTmFtZVN0YW5kICYmIHRoaXMuc2hvdEFuZ2xlID4gMCAmJiB0aGlzLnNob3RBbmdsZSA8IDMwIHx8XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdFN0YXRlICYmIGFuaW1hdGlvbk5hbWVTdGFuZCAmJiB0aGlzLnNob3RBbmdsZSA8IDM2MCAmJiB0aGlzLnNob3RBbmdsZSA+IDIwMCB8fFxyXG4gICAgICAgICAgICB0aGlzLnNob3RTdGF0ZSAmJiBhbmltYXRpb25OYW1lU3RhbmQgJiYgdGhpcy5zaG90QW5nbGUgPiAxNjAgJiYgdGhpcy5zaG90QW5nbGUgPCAyMDApIHtcclxuICAgICAgICAgICAgdGhpcy5pbWcuc3JjID0gX19kaXJuYW1lICsgdGhpcy5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVTdGFuZF0uaW5uZXJUZXh0dXJlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5udW1iZXJPZkl0ZW1zICE9IHRoaXMuYW5pbWF0aW9uc1thbmltYXRpb25OYW1lU3RhbmRdLm51bWJlck9mSXRlbXMpXHJcbiAgICAgICAgICAgICAgICByZW5ld0FuaW1hdGlvbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICByZXBsYWNlck9mVmFsdWUoeyBvcmlnaW5hbE9iamVjdDogdGhpcywgZGF0YVRvUmVwbGFjZTogdGhpcy5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVTdGFuZF0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuY2hhbmdlQW5pbWF0aW9uUGFyYW1ldGVycyA9IGNoYW5nZUFuaW1hdGlvblBhcmFtZXRlcnM7XHJcbmZ1bmN0aW9uIHJlbmV3QW5pbWF0aW9uKCkge1xyXG4gICAgdGhpcy5zeCA9IDA7XHJcbiAgICB0aGlzLmRldGVjdEZyYW1lID0gMDtcclxufVxyXG5mdW5jdGlvbiByZXBsYWNlck9mVmFsdWUoX2EpIHtcclxuICAgIHZhciBvcmlnaW5hbE9iamVjdCA9IF9hLm9yaWdpbmFsT2JqZWN0LCBkYXRhVG9SZXBsYWNlID0gX2EuZGF0YVRvUmVwbGFjZTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2IgPSBPYmplY3QuZW50cmllcyhkYXRhVG9SZXBsYWNlKTsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2MgPSBfYltfaV0sIGtleSA9IF9jWzBdLCB2YWx1ZSA9IF9jWzFdO1xyXG4gICAgICAgIGlmIChvcmlnaW5hbE9iamVjdFtrZXldKSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsT2JqZWN0W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2hhbmdlVmVydGljYWxBbmltYXRpb25QaWN0dXJlKCkge1xyXG4gICAgdGhpcy5jaGFuZ2VBbmltYXRpb25QYXJhbWV0ZXJzKCk7XHJcbiAgICBpZiAodGhpcy5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID09PSAncmlnaHQnKVxyXG4gICAgICAgIHRoaXMuc3kgPSAwO1xyXG4gICAgaWYgKHRoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ2xlZnQnKVxyXG4gICAgICAgIHRoaXMuc3kgPSB0aGlzLnNIZWlnaHQ7XHJcbn1cclxuZXhwb3J0cy5jaGFuZ2VWZXJ0aWNhbEFuaW1hdGlvblBpY3R1cmUgPSBjaGFuZ2VWZXJ0aWNhbEFuaW1hdGlvblBpY3R1cmU7XHJcbmZ1bmN0aW9uIGdyb3VuZFBsYXllck1pbnVzTGlmZShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHZhciBsZXZlbERhdGEgPSBtYWluR2FtZU9iamVjdC5nZXRMZXZlbFVzZXJEYXRhKCk7XHJcbiAgICB2YXIgbWFpblBsYXllckRhdGEgPSBsZXZlbERhdGEuc291cmNlLnBsYXllck9iamVjdDtcclxuICAgIG1haW5QbGF5ZXJEYXRhLm51bWJlck9mbGlmZSAtPSAxO1xyXG4gICAgaWYgKG1haW5QbGF5ZXJEYXRhLm51bWJlck9mbGlmZSA8PSAwKSB7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZU92ZXJXaW5kb3coKTtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZU92ZXIgPSB0cnVlO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0Lm1hcFNvdW5kQ2hhbmdlcih7IHNvdW5kU3RhdHVzOiAnZ2FtZV9vdmVyX3NjcmVlbicgfSk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmJhY2tUb1N0YXJ0U2NyZWVuKGNvbnN0cnVjdG9ycyk7XHJcbiAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ3JvdW5kUGxheWVyTWludXNMaWZlID0gZ3JvdW5kUGxheWVyTWludXNMaWZlO1xyXG5mdW5jdGlvbiBiYWNrVG9UaGVNYXBBZ2FpbihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHBsYXllciA9IF9hLnBsYXllciwgY29uc3RydWN0b3JzID0gX2EuY29uc3RydWN0b3JzO1xyXG4gICAgdmFyIGFsbEVuZW15ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15O1xyXG4gICAgdmFyIGFsbEJsb2NrcyA9IFtdLmNvbmNhdChtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsTWFwQmxvY2tzLCBhbGxFbmVteSk7XHJcbiAgICB2YXIgbWF4RGlzdGFuY2UgPSAxMDAwO1xyXG4gICAgdmFyIGNsb3Nlc3RCbG9jayA9IGFsbEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgIGlmIChNYXRoLm1heChibG9jay54LCBwbGF5ZXIueCkgLSBNYXRoLm1pbihibG9jay54LCBwbGF5ZXIueCkgPCBtYXhEaXN0YW5jZSAmJlxyXG4gICAgICAgICAgICBNYXRoLm1heChibG9jay55LCBwbGF5ZXIueSkgLSBNYXRoLm1pbihibG9jay55LCBwbGF5ZXIueSkgPCBtYXhEaXN0YW5jZSlcclxuICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoIWNsb3Nlc3RCbG9jaykge1xyXG4gICAgICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmxldmVsQ2hhbmdlKVxyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXJNaW51c0xpZmUoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzIH0pO1xyXG4gICAgICAgIHBvc2l0aW9uVG9TcGF3bmVyKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBhbGxCbG9ja3M6IGFsbEJsb2NrcyB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmJhY2tUb1RoZU1hcEFnYWluID0gYmFja1RvVGhlTWFwQWdhaW47XHJcbmZ1bmN0aW9uIHBvc2l0aW9uVG9TcGF3bmVyKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgYWxsQmxvY2tzID0gX2EuYWxsQmxvY2tzO1xyXG4gICAgdmFyIGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubWFwQmFja2dyb3VuZE9iamVjdHM7XHJcbiAgICB2YXIgYWxsR2FtZXNPYmplY3QgPSBbXS5jb25jYXQoYWxsR2FtZUJhY2tncm91bmRFbGVtZW50cyk7XHJcbiAgICB2YXIgc3Bhd25Qb2ludCA9IGZpbmRTcGF3blBvaW50KHsgYWxsQmxvY2tzOiBhbGxCbG9ja3MsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgIGlmICghc3Bhd25Qb2ludClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBwbGF5ZXJDaGFuZ2VNYXBQb3NpdGlvbih7IG5ld1NwYXduUG9pbnQ6IHNwYXduUG9pbnQsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgYWxsR2FtZXNPYmplY3RfMSA9IGFsbEdhbWVzT2JqZWN0OyBfaSA8IGFsbEdhbWVzT2JqZWN0XzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIG1hcCA9IGFsbEdhbWVzT2JqZWN0XzFbX2ldO1xyXG4gICAgICAgIG1hcC55ID0gbWFwLmRlZmF1bHRZO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMucG9zaXRpb25Ub1NwYXduZXIgPSBwb3NpdGlvblRvU3Bhd25lcjtcclxuZnVuY3Rpb24gcGxheWVyQ2hhbmdlTWFwUG9zaXRpb24oX2EpIHtcclxuICAgIHZhciBuZXdTcGF3blBvaW50ID0gX2EubmV3U3Bhd25Qb2ludCwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIGlmICghbmV3U3Bhd25Qb2ludClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgYWxsRW5lbXkgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsRW5lbXk7XHJcbiAgICB2YXIgYWxsR3JvdW5kR2FtZUJ1bGxldHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR3JvdW5kR2FtZUJ1bGxldHM7XHJcbiAgICB2YXIgYWxsR2FtZVNpZGVPYmplY3RzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cztcclxuICAgIHZhciBhbGxCbG9ja3MgPSBbXS5jb25jYXQobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcywgYWxsRW5lbXksIGFsbEdyb3VuZEdhbWVCdWxsZXRzLCBhbGxHYW1lU2lkZU9iamVjdHMpO1xyXG4gICAgdmFyIGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubWFwQmFja2dyb3VuZE9iamVjdHM7XHJcbiAgICB2YXIgYWxsR2FtZXNPYmplY3QgPSBbXS5jb25jYXQoYWxsR2FtZUJhY2tncm91bmRFbGVtZW50cyk7XHJcbiAgICB2YXIgeFJhbmdlQ29tcGVuc2F0aW9uID0gd2luZG93LmlubmVyV2lkdGggLyAyIC0gKG5ld1NwYXduUG9pbnQueCArIG5ld1NwYXduUG9pbnQud2lkdGggLyAyKTtcclxuICAgIHZhciB5UmFuZ2VDb21wZW5zYXRpb24gPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gbmV3U3Bhd25Qb2ludC55O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxCbG9ja3NfMSA9IGFsbEJsb2NrczsgX2kgPCBhbGxCbG9ja3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgYmxvY2sgPSBhbGxCbG9ja3NfMVtfaV07XHJcbiAgICAgICAgYmxvY2sueCArPSB4UmFuZ2VDb21wZW5zYXRpb247XHJcbiAgICAgICAgYmxvY2sueSArPSB5UmFuZ2VDb21wZW5zYXRpb247XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfYiA9IDAsIGFsbEdhbWVzT2JqZWN0XzIgPSBhbGxHYW1lc09iamVjdDsgX2IgPCBhbGxHYW1lc09iamVjdF8yLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgIHZhciBtYXAgPSBhbGxHYW1lc09iamVjdF8yW19iXTtcclxuICAgICAgICAvLyBtYXAueSA9IG1hcC5kZWZhdWx0WTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIF9jID0gMCwgYWxsRW5lbXlfMSA9IGFsbEVuZW15OyBfYyA8IGFsbEVuZW15XzEubGVuZ3RoOyBfYysrKSB7XHJcbiAgICAgICAgdmFyIGVuZW15ID0gYWxsRW5lbXlfMVtfY107XHJcbiAgICAgICAgZW5lbXkuaXNSdW4gPSBmYWxzZTtcclxuICAgICAgICBlbmVteS5ncm91bmRUb3VjaCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB4UmFuZ2VDb21wZW5zYXRpb246IHhSYW5nZUNvbXBlbnNhdGlvbiwgeVJhbmdlQ29tcGVuc2F0aW9uOiB5UmFuZ2VDb21wZW5zYXRpb24gfTtcclxufVxyXG5leHBvcnRzLnBsYXllckNoYW5nZU1hcFBvc2l0aW9uID0gcGxheWVyQ2hhbmdlTWFwUG9zaXRpb247XHJcbmZ1bmN0aW9uIGdyb3VuZFBsYXllclNob3QoX2EpIHtcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBfYS5ncm91bmRQbGF5ZXIsIGV2ZW50ID0gX2EuZXZlbnQ7XHJcbiAgICB2YXIgYW5nbGUgPSBlbmdpbmVNb2R1bGVzXzEuYW5nbGVGaW5kZXIoe1xyXG4gICAgICAgIG9iamVjdDogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgIHRhcmdldDogeyB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZLCB3aWR0aDogMSwgaGVpZ2h0OiAxLCBzcGVlZDogMSB9XHJcbiAgICB9KTtcclxuICAgIGlmIChncm91bmRQbGF5ZXIub25MZWFkZXIgJiYgZ3JvdW5kUGxheWVyLmxlYWRlckNsaW1iKSB7XHJcbiAgICAgICAgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPSAoYW5nbGUgPiA5MCAmJiBhbmdsZSA8PSAyNzApID8gZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPSBcImxlZnRcIlxyXG4gICAgICAgICAgICA6IGdyb3VuZFBsYXllci5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID0gXCJyaWdodFwiO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gXCJsZWZ0XCIgJiYgYW5nbGUgPiA5MCAmJiBhbmdsZSA8PSAyNzApXHJcbiAgICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgZWxzZSBpZiAoZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09IFwicmlnaHRcIiAmJiBhbmdsZSA+IDI3MCAmJiBhbmdsZSA8PSAzNjAgfHwgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09IFwicmlnaHRcIiAmJiBhbmdsZSA+IDAgJiYgYW5nbGUgPD0gOTApXHJcbiAgICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLmdyb3VuZFBsYXllclNob3QgPSBncm91bmRQbGF5ZXJTaG90O1xyXG5mdW5jdGlvbiBncm91bmRQbGF5ZXJDb2xsZWN0YWJsZShfYSkge1xyXG4gICAgdmFyIGFsbEdhbWVTaWRlT2JqZWN0cyA9IF9hLmFsbEdhbWVTaWRlT2JqZWN0cywgcGxheWVyU2hpcERhdGEgPSBfYS5wbGF5ZXJTaGlwRGF0YSwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIGR5bmFtaWNEaWFsb2dfMS5zYXZlT2JqZWN0VG9CYWNrUGFjayh7XHJcbiAgICAgICAgZ3JvdW5kUGxheWVyOiBwbGF5ZXJTaGlwRGF0YSxcclxuICAgICAgICBkYXRhOiB0aGlzLmdyYXBwbGVQb3dlci5ncmFwcGxlSXRlbSxcclxuICAgICAgICBwcmV2aWV3UGljdHVyZTogdGhpcy5ncmFwcGxlUG93ZXIucHJldmlld1BpY3R1cmUsXHJcbiAgICAgICAgbmFtZTogdGhpcy5ncmFwcGxlUG93ZXIubmFtZVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5ncm91bmRQbGF5ZXJDb2xsZWN0YWJsZSA9IGdyb3VuZFBsYXllckNvbGxlY3RhYmxlO1xyXG5mdW5jdGlvbiBmaW5kU3Bhd25Qb2ludChfYSkge1xyXG4gICAgdmFyIGFsbEJsb2NrcyA9IF9hLmFsbEJsb2NrcywgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgdmFyIG5lYXJlc3RTcGF3blBvaW50ID0gbnVsbDtcclxuICAgIHZhciBuZWFyZXN0QmxvY2tYID0gSW5maW5pdHk7XHJcbiAgICB2YXIgbmVhcmVzdEJsb2NrWSA9IEluZmluaXR5O1xyXG4gICAgdmFyIGFsbFNwYXduZXIgPSBhbGxCbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICBpZiAob2JqLmRldGFpbHMpXHJcbiAgICAgICAgICAgIHJldHVybiBvYmouZGV0YWlscy50eXBlID09PSBcInNwYXduZXJcIiAmJiBvYmouZGV0YWlscy5hY3RpdmUgPT09IFwiYWN0aXZlXCI7XHJcbiAgICB9KTtcclxuICAgIGlmIChhbGxTcGF3bmVyKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhbGxTcGF3bmVyXzEgPSBhbGxTcGF3bmVyOyBfaSA8IGFsbFNwYXduZXJfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHNwYXduZXIgPSBhbGxTcGF3bmVyXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgcG9zWCA9IE1hdGgubWF4KHNwYXduZXIueCwgZ3JvdW5kUGxheWVyLngpIC0gTWF0aC5taW4oc3Bhd25lci54LCBncm91bmRQbGF5ZXIueCk7XHJcbiAgICAgICAgICAgIHZhciBwb3NZID0gTWF0aC5tYXgoc3Bhd25lci55LCBncm91bmRQbGF5ZXIueSkgLSBNYXRoLm1pbihzcGF3bmVyLnksIGdyb3VuZFBsYXllci55KTtcclxuICAgICAgICAgICAgaWYgKHBvc1ggPD0gbmVhcmVzdEJsb2NrWCAmJiBwb3NZIDw9IG5lYXJlc3RCbG9ja1kpIHtcclxuICAgICAgICAgICAgICAgIG5lYXJlc3RCbG9ja1ggPSBwb3NYO1xyXG4gICAgICAgICAgICAgICAgbmVhcmVzdEJsb2NrWSA9IHBvc1k7XHJcbiAgICAgICAgICAgICAgICBuZWFyZXN0U3Bhd25Qb2ludCA9IHNwYXduZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIW5lYXJlc3RTcGF3blBvaW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGFsbEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgaWYgKG9iai5kZXRhaWxzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iai5kZXRhaWxzLnR5cGUgPT09IFwic3Bhd25lclwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBuZWFyZXN0U3Bhd25Qb2ludDtcclxufVxyXG5mdW5jdGlvbiBncm91bmRQbGF5ZXJDaGVja3BvaW50QWN0aXZhdGUoX2EpIHtcclxuICAgIHZhciBibG9jayA9IF9hLmJsb2NrLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgaWYgKCFibG9jay5kZXRhaWxzKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChibG9jay5kZXRhaWxzLmFjdGl2ZSA9PT0gXCJub3QtYWN0aXZlXCIgJiYgYmxvY2suZGV0YWlscy50eXBlID09PSAnc3Bhd25lcicpIHtcclxuICAgICAgICB2YXIgYWxsQmxvY2tzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFsbEJsb2Nrc18yID0gYWxsQmxvY2tzOyBfaSA8IGFsbEJsb2Nrc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYmxvY2tfMSA9IGFsbEJsb2Nrc18yW19pXTtcclxuICAgICAgICAgICAgaWYgKCFibG9ja18xLmRldGFpbHMpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGJsb2NrXzEuZGV0YWlscy50eXBlID09PSBcInNwYXduZXJcIiAmJiBibG9ja18xLmRldGFpbHMuYWN0aXZlID09PSBcImFjdGl2ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBibG9ja18xLmRldGFpbHMuYWN0aXZlID0gXCJub3QtYWN0aXZlXCI7XHJcbiAgICAgICAgICAgICAgICBibG9ja18xLnN5ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBibG9jay5kZXRhaWxzLmFjdGl2ZSA9IFwiYWN0aXZlXCI7XHJcbiAgICAgICAgYmxvY2suc3kgKz0gYmxvY2suc0hlaWdodDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdyb3VuZFBsYXllckNoZWNrcG9pbnRBY3RpdmF0ZSA9IGdyb3VuZFBsYXllckNoZWNrcG9pbnRBY3RpdmF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcclxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufTtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgcmVndWxhckVuZW15QWlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vYWkvcmVndWxhckVuZW15QWlNb2R1bGVzXCIpO1xyXG52YXIgY29uc3RydWN0b3JzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi9jb25zdHJ1Y3RvcnMvXCIpKTtcclxudmFyIHNvdW5kTW9kdWxlc18xID0gcmVxdWlyZShcIi4vc291bmRNb2R1bGVzXCIpO1xyXG52YXIgZW5naW5lTW9kdWxlc18xID0gcmVxdWlyZShcIi4vZW5naW5lTW9kdWxlc1wiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbmZ1bmN0aW9uIGV4cGxvc2lvbkZpcmUoX2EpIHtcclxuICAgIHZhciB0YXJnZXREYXRhID0gX2EudGFyZ2V0RGF0YSwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgaGl0T2JqZWN0ID0gX2EuaGl0T2JqZWN0LCBTaWRlT2JqZWN0ID0gX2EuU2lkZU9iamVjdCwgZXhwbG9zaW9uID0gX2EuZXhwbG9zaW9uO1xyXG4gICAgdmFyIGFsbEV4cGxvc2lvbk9iamVjdCA9IGVuZ2luZU1vZHVsZXNfMS5zZWFyY2hFeHBsb3Npb25PYmplY3QoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICBpZiAoYWxsRXhwbG9zaW9uT2JqZWN0Lmxlbmd0aCA+IHByb2Nlc3MuZW52Lk1BWF9OVU1CRVJfT0ZfRVhQTE9TSU9OKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChoaXRPYmplY3QudHlwZSkge1xyXG4gICAgICAgIGlmIChoaXRPYmplY3QudHlwZSA9PT0gXCJyb2NrZXRcIiAmJiB0YXJnZXREYXRhLnR5cGUgIT0gXCJyb2NrZXRcIiAmJiB0YXJnZXREYXRhLnR5cGUgIT0gXCJwbGF5ZXJcIiAmJiB0YXJnZXREYXRhLnR5cGUgIT0gXCJlbmVteVwiIHx8XHJcbiAgICAgICAgICAgIGhpdE9iamVjdC50eXBlID09PSBcImhvbWluZ19yb2NrZXRcIiAmJiB0YXJnZXREYXRhLnR5cGUgIT0gXCJob21pbmdfcm9ja2V0XCIgJiYgdGFyZ2V0RGF0YS50eXBlICE9IFwicGxheWVyXCIgJiYgdGFyZ2V0RGF0YS50eXBlICE9IFwiZW5lbXlcIikge1xyXG4gICAgICAgICAgICBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEuZXhwbG9zaW9uRGFtYWdlKHtcclxuICAgICAgICAgICAgICAgIGhpdE9iamVjdDogaGl0T2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBmbGFtZVNwZWVkID0gKGhpdE9iamVjdC5vYmplY3RPd25lciA9PT0gJ3BsYXllcicpID8gdGFyZ2V0RGF0YS5zcGVlZCA6IChoaXRPYmplY3Qub2JqZWN0T3duZXIgPT09ICdncm91bmRFbmVteScgfHwgaGl0T2JqZWN0Lm9iamVjdE93bmVyID09PSAnZ3JvdW5kUGxheWVyJykgPyAwIDogaGl0T2JqZWN0LnNwZWVkIC8gMjtcclxuICAgIGZsYW1lU3BlZWQgPSAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgJiYgIWZsYW1lU3BlZWQpID8gLTAuMSA6IGZsYW1lU3BlZWQ7XHJcbiAgICB2YXIgZXhwbG9zaW9uRGF0YSA9IHtcclxuICAgICAgICB4OiAodGFyZ2V0RGF0YS5vYmplY3RPd25lciA9PT0gJ3BsYXllcicpID8gdGFyZ2V0RGF0YS54ICsgdGFyZ2V0RGF0YS53aWR0aCAvIDIgLSB0YXJnZXREYXRhW2V4cGxvc2lvbl0ud2lkdGggOiB0YXJnZXREYXRhLnggLSB0YXJnZXREYXRhW2V4cGxvc2lvbl0ud2lkdGgsXHJcbiAgICAgICAgeTogKHRhcmdldERhdGEub2JqZWN0T3duZXIgPT09ICdwbGF5ZXInKSA/IHRhcmdldERhdGEueSAtIHRhcmdldERhdGFbZXhwbG9zaW9uXS53aWR0aCAvIDIgOlxyXG4gICAgICAgICAgICAodGFyZ2V0RGF0YS5vYmplY3RPd25lciA9PT0gJ2NvbGxpZGUnIHx8IHRhcmdldERhdGEub2JqZWN0T3duZXIgPT09ICdlbnZpcm9ubWVudCcpID8gdGFyZ2V0RGF0YS55IDpcclxuICAgICAgICAgICAgICAgICh0YXJnZXREYXRhLm9iamVjdE93bmVyID09PSAnZW5lbXknKSA/IHRhcmdldERhdGEueSAtIHRhcmdldERhdGFbZXhwbG9zaW9uXS53aWR0aCAvIDIgOiB0YXJnZXREYXRhLnkgLSB0YXJnZXREYXRhW2V4cGxvc2lvbl0ud2lkdGgsXHJcbiAgICAgICAgc3g6IDAsXHJcbiAgICAgICAgc3k6IDAsXHJcbiAgICAgICAgb2JqZWN0T3duZXI6IFwiZXhwbG9zaW9uXCIsXHJcbiAgICAgICAgc1dpZHRoOiB0YXJnZXREYXRhW2V4cGxvc2lvbl0uaW1hZ2VXaWR0aCAvIHRhcmdldERhdGFbZXhwbG9zaW9uXS5udW1iZXJPZkl0ZW1zLFxyXG4gICAgICAgIHNIZWlnaHQ6IHRhcmdldERhdGFbZXhwbG9zaW9uXS5pbWFnZUhlaWdodCxcclxuICAgICAgICB3aWR0aDogdGFyZ2V0RGF0YVtleHBsb3Npb25dLndpZHRoICogMixcclxuICAgICAgICBoZWlnaHQ6IHRhcmdldERhdGFbZXhwbG9zaW9uXS53aWR0aCAqIDIsXHJcbiAgICAgICAgYW5pbWF0aW9uU3RlcHM6IHRhcmdldERhdGFbZXhwbG9zaW9uXS5hbmltYXRpb25TdGVwcyxcclxuICAgICAgICB0YXJnZXQ6IGhpdE9iamVjdC5vYmplY3RPd25lcixcclxuICAgICAgICBudW1iZXJPZkl0ZW1zOiB0YXJnZXREYXRhW2V4cGxvc2lvbl0uaW1hZ2VXaWR0aCAvIHRhcmdldERhdGFbZXhwbG9zaW9uXS5udW1iZXJPZkl0ZW1zLFxyXG4gICAgICAgIHRleHR1cmU6IHRhcmdldERhdGFbZXhwbG9zaW9uXS50ZXh0dXJlLFxyXG4gICAgICAgIHNwZWVkOiBmbGFtZVNwZWVkLFxyXG4gICAgICAgIHBpY3R1cmVzV2lkdGg6IHRhcmdldERhdGFbZXhwbG9zaW9uXS5pbWFnZVdpZHRoLFxyXG4gICAgICAgIHNvdW5kOiB0YXJnZXREYXRhW2V4cGxvc2lvbl0uc291bmRcclxuICAgIH07XHJcbiAgICB2YXIgc2lkZU9iamVjdCA9IG5ldyBTaWRlT2JqZWN0KF9fYXNzaWduKHt9LCBleHBsb3Npb25EYXRhKSk7XHJcbiAgICB2YXIgc291bmRQcm9wcyA9IHtcclxuICAgICAgICBzb3VuZFVybDogc2lkZU9iamVjdC5zb3VuZC5sZXZlbFNvdW5kLFxyXG4gICAgICAgIHNvdW5kTG9vcDogc2lkZU9iamVjdC5zb3VuZC5zb3VuZExvb3AsXHJcbiAgICB9O1xyXG4gICAgc2lkZU9iamVjdC5zb3VuZC5zb3VuZE9iamVjdCA9IHNvdW5kTW9kdWxlc18xLmluaXRTb3VuZE9iamVjdCh7IFNvdW5kQ3JlYXRvcjogY29uc3RydWN0b3JzLlNvdW5kQ3JlYXRvciwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBzb3VuZFByb3BzOiBzb3VuZFByb3BzIH0pO1xyXG4gICAgc2lkZU9iamVjdC5pbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lU2lkZU9iamVjdHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLmNvbmNhdChzaWRlT2JqZWN0KTtcclxuICAgIH07XHJcbiAgICBzaWRlT2JqZWN0LmxvYWRUZXh0dXJlKCk7XHJcbn1cclxuZXhwb3J0cy5leHBsb3Npb25GaXJlID0gZXhwbG9zaW9uRmlyZTtcclxuZnVuY3Rpb24gZmlyZUFuaW1hdGlvbkVuZGVkKGFsbEdhbWVTaWRlT2JqZWN0cykge1xyXG4gICAgdGhpcy5kZXRlY3RGcmFtZSArPSAxO1xyXG4gICAgaWYgKHRoaXMuZGV0ZWN0RnJhbWUgJSB0aGlzLmFuaW1hdGlvblN0ZXBzID09IDApIHtcclxuICAgICAgICB0aGlzLmRldGVjdEZyYW1lID0gMDtcclxuICAgICAgICB0aGlzLnN4ICs9IHRoaXMuc1dpZHRoO1xyXG4gICAgICAgIGlmICh0aGlzLnN4ID49IHRoaXMucGljdHVyZXNXaWR0aCkge1xyXG4gICAgICAgICAgICB0aGlzLm9iamVjdFByZXNlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zeCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc3ggPj0gdGhpcy5waWN0dXJlc1dpZHRoKSB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25TdGF0ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZmlyZUFuaW1hdGlvbkVuZGVkID0gZmlyZUFuaW1hdGlvbkVuZGVkO1xyXG5mdW5jdGlvbiBtYXBPYmplY3RNb3ZlKCkge1xyXG4gICAgdGhpcy54IC09ICh0aGlzLnNwZWVkKSA/IHRoaXMuc3BlZWQgOiAzO1xyXG59XHJcbmV4cG9ydHMubWFwT2JqZWN0TW92ZSA9IG1hcE9iamVjdE1vdmU7XHJcbmZ1bmN0aW9uIG1hcFJhbmRvbU9iamVjdFNwYXduKGxldmVsT2JqZWN0cywgU2lkZU9iamVjdCwgYWxsR2FtZVNpZGVPYmplY3RzKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gbWFwT2JqZWN0U3Bhd25lcihsZXZlbE9iamVjdHMsIFNpZGVPYmplY3QsIGFsbEdhbWVTaWRlT2JqZWN0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ2FtZURhdGEsIGRhdGEsIGxldmVsRGF0YSwgc3Bhd25Qcm9iYWJpbGl0eSwgY29udGV4dCwgbGV2ZWxNaW51dGVzLCBsZXZlbFNlY29uZHMsIHNjcmVlbkRhdGEsIGxldmVsT2JqZWN0UHJvcHMsIHlQb3NpdGlvbiwgcHJvYmFiaWxpdHksIGV4dHJhT2JqZWN0cywgX2EsIGV4dHJhT2JqZWN0T2JqZWN0c0RhdGEsIHNpZGVPYmplY3RfMTtcclxuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lRGF0YSA9IHRoaXMuc2hvd0dhbWVJbmZvKCkuZ2FtZURhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5nZXRMZXZlbFVzZXJEYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbERhdGEgPSBnYW1lRGF0YS5sZXZlbERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGF3blByb2JhYmlsaXR5ID0gdGhpcy5nYW1lUmFuZG9taXplcihsZXZlbERhdGEub2JqZWN0UHJvYmFiaWxpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbE1pbnV0ZXMgPSBsZXZlbERhdGEubGV2ZWxEZXRhaWxzLmxldmVsTWludXRlcywgbGV2ZWxTZWNvbmRzID0gbGV2ZWxEYXRhLmxldmVsRGV0YWlscy5sZXZlbFNlY29uZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShzcGF3blByb2JhYmlsaXR5IDwgbGV2ZWxEYXRhLm9iamVjdE1pblRpbWVTcGF3bikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuRGF0YSA9IHRoaXMuZ2V0U2NyZWVuU2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxPYmplY3RQcm9wcyA9IGxldmVsT2JqZWN0c1t0aGlzLmdhbWVSYW5kb21pemVyKGxldmVsT2JqZWN0cy5sZW5ndGgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGV2ZWxPYmplY3RQcm9wcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeVBvc2l0aW9uID0gKGxldmVsT2JqZWN0UHJvcHMuc3Bhd25EZXRhaWxzLnBvc2l0aW9uID09PSBcImJvdHRvbVwiICYmIHR5cGVvZiBsZXZlbE9iamVjdFByb3BzLnNwYXduRGV0YWlscy5wb3NpdGlvbiA9PT0gXCJzdHJpbmdcIikgPyB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLmdhbWVSYW5kb21pemVyKGxldmVsT2JqZWN0UHJvcHMuaGVpZ2h0IC8gMiwgbGV2ZWxPYmplY3RQcm9wcy5oZWlnaHQgLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGxldmVsT2JqZWN0UHJvcHMuc3Bhd25EZXRhaWxzLnBvc2l0aW9uID09PSBcInRvcFwiICYmIHR5cGVvZiBsZXZlbE9iamVjdFByb3BzLnNwYXduRGV0YWlscy5wb3NpdGlvbiA9PT0gXCJzdHJpbmdcIikgPyB0aGlzLmdhbWVSYW5kb21pemVyKGxldmVsT2JqZWN0UHJvcHMuaGVpZ2h0IC8gMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAobGV2ZWxPYmplY3RQcm9wcy5zcGF3bkRldGFpbHMucG9zaXRpb24gPT09IFwic2NlbmVcIiAmJiB0eXBlb2YgbGV2ZWxPYmplY3RQcm9wcy5zcGF3bkRldGFpbHMucG9zaXRpb24gPT09IFwic3RyaW5nXCIpID8gdGhpcy5nYW1lUmFuZG9taXplcih3aW5kb3cuaW5uZXJIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICh0eXBlb2YgbGV2ZWxPYmplY3RQcm9wcy5zcGF3bkRldGFpbHMucG9zaXRpb24gPT09IFwic3RyaW5nXCIpID8gdGhpcy5nYW1lUmFuZG9taXplcih3aW5kb3cuaW5uZXJIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZXZlbE9iamVjdFByb3BzLnNwYXduRGV0YWlscy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbE9iamVjdFByb3BzLm9iamVjdE93bmVyID09ICdoYW5nYXInICYmIHRoaXMuZ2FtZUluaXREYXRhLnRyYWRlcG9zdEluUmFuZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbE9iamVjdFByb3BzLm9iamVjdE93bmVyID09ICdoYW5nYXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvYmFiaWxpdHkgPSB0aGlzLmdhbWVSYW5kb21pemVyKGxldmVsT2JqZWN0UHJvcHMucHJvYmFiaWxpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9iYWJpbGl0eSA+IDUwICYmIGRhdGEubWludXRlcyA+IDAgfHwgcHJvYmFiaWxpdHkgPiA1MDAgJiYgZGF0YS5taW51dGVzID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdOyAvLyAxMDAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEudHJhZGVwb3N0SW5SYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWxPYmplY3RQcm9wcy50aW1pbmcgJiYgbGV2ZWxPYmplY3RQcm9wcy50aW1pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWxNaW51dGVzID4gbGV2ZWxPYmplY3RQcm9wcy50aW1pbmcubGV2ZWxNaW51dGVzIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsU2Vjb25kcyA+IGxldmVsT2JqZWN0UHJvcHMudGltaW5nLmxldmVsU2Vjb25kcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lSW5pdERhdGEuZ2F0ZVByZXNlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEuZ2F0ZVByZXNlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobGV2ZWxPYmplY3RQcm9wcy5leHRyYU9iamVjdHMpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlZ3VsYXJFbmVteUFpTW9kdWxlc18xLmxvYWRFeHRyYU9iamVjdC5jYWxsKHRoaXMsIGxldmVsT2JqZWN0UHJvcHMuZXh0cmFPYmplY3RzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhT2JqZWN0cyA9IF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFPYmplY3RPYmplY3RzRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB3aW5kb3cuaW5uZXJXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB5UG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3k6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0T3duZXI6IGxldmVsT2JqZWN0UHJvcHMub2JqZWN0T3duZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc1dpZHRoOiBsZXZlbE9iamVjdFByb3BzLmltYWdlV2lkdGggLyBsZXZlbE9iamVjdFByb3BzLm51bWJlck9mSXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc0hlaWdodDogbGV2ZWxPYmplY3RQcm9wcy5pbWFnZUhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbGV2ZWxPYmplY3RQcm9wcy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGxldmVsT2JqZWN0UHJvcHMuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0ZXBzOiBsZXZlbE9iamVjdFByb3BzLmFuaW1hdGlvblN0ZXBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkl0ZW1zOiBsZXZlbE9iamVjdFByb3BzLm51bWJlck9mSXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVMaW5rOiAobGV2ZWxPYmplY3RQcm9wcy5hYnNvbHV0ZUxpbmspID8gbGV2ZWxPYmplY3RQcm9wcy5hYnNvbHV0ZUxpbmsgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmU6IGxldmVsT2JqZWN0UHJvcHMuc2tpbk5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IGxldmVsT2JqZWN0UHJvcHMuc3BlZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljdHVyZXNXaWR0aDogbGV2ZWxPYmplY3RQcm9wcy5pbWFnZVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWx0aFBvaW50OiBsZXZlbE9iamVjdFByb3BzLmhlYWx0aFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZTogbGV2ZWxPYmplY3RQcm9wcy5kYW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNCYWNrZ3JvdW5kOiBsZXZlbE9iamVjdFByb3BzLmlzQmFja2dyb3VuZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3Npb246IGxldmVsT2JqZWN0UHJvcHMuZXhwbG9zaW9uQW5pbWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1BlclVuaXQ6IGxldmVsT2JqZWN0UHJvcHMucG9pbnRzUGVyVW5pdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYU9iamVjdHM6IGV4dHJhT2JqZWN0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaWRlRXhwbG9zaW9uQW5pbWF0aW9uOiAobGV2ZWxPYmplY3RQcm9wcy5jb2xsaWRlRXhwbG9zaW9uQW5pbWF0aW9uKSA/IGxldmVsT2JqZWN0UHJvcHMuY29sbGlkZUV4cGxvc2lvbkFuaW1hdGlvbiA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmQ6IGxldmVsT2JqZWN0UHJvcHMuc291bmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogKGxldmVsT2JqZWN0UHJvcHMuc2lkZSkgPyBsZXZlbE9iamVjdFByb3BzLnNpZGUgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhcGlkRmlyZTogKGxldmVsT2JqZWN0UHJvcHMucmFwaWRGaXJlKSA/IGxldmVsT2JqZWN0UHJvcHMucmFwaWRGaXJlIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Nob3Q6IChsZXZlbE9iamVjdFByb3BzLmlzU2hvdCkgPyBsZXZlbE9iamVjdFByb3BzLmlzU2hvdCA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd1bnM6IChsZXZlbE9iamVjdFByb3BzLmd1bnMpID8gbGV2ZWxPYmplY3RQcm9wcy5ndW5zIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFkZVByb3BlcnR5ZXM6IChsZXZlbE9iamVjdFByb3BzLnRyYWRlUHJvcGVydHllcykgPyBsZXZlbE9iamVjdFByb3BzLnRyYWRlUHJvcGVydHllcyA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEFuZ2xlOiAobGV2ZWxPYmplY3RQcm9wcy5kZWZhdWx0QW5nbGUpID8gbGV2ZWxPYmplY3RQcm9wcy5kZWZhdWx0QW5nbGUgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWluZ01pbnV0ZXNQbGFjZWQ6IChsZXZlbE9iamVjdFByb3BzLnRpbWluZ01pbnV0ZXNQbGFjZWQpID8gbGV2ZWxPYmplY3RQcm9wcy50aW1pbmdNaW51dGVzUGxhY2VkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1pbmdTZWNvbmRzUGxhY2VkOiAobGV2ZWxPYmplY3RQcm9wcy50aW1pbmdTZWNvbmRzUGxhY2VkKSA/IGxldmVsT2JqZWN0UHJvcHMudGltaW5nU2Vjb25kc1BsYWNlZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZU9iamVjdF8xID0gbmV3IFNpZGVPYmplY3QoX19hc3NpZ24oe30sIGV4dHJhT2JqZWN0T2JqZWN0c0RhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGVPYmplY3RfMS5pbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cyA9IGNvbnRleHQuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cy5jb25jYXQoc2lkZU9iamVjdF8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlT2JqZWN0XzEuaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzID0gX3RoaXMuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cy5jb25jYXQoc2lkZU9iamVjdF8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlT2JqZWN0XzEubG9hZFRleHR1cmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0U2Vjb25kTWVhc3VyZShtYXBPYmplY3RTcGF3bmVyLCBsZXZlbE9iamVjdHMsIFNpZGVPYmplY3QsIGFsbEdhbWVTaWRlT2JqZWN0cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubWFwUmFuZG9tT2JqZWN0U3Bhd24gPSBtYXBSYW5kb21PYmplY3RTcGF3bjtcclxuZnVuY3Rpb24gbG9hZFRleHR1cmUoKSB7XHJcbiAgICB0aGlzLmltZy5zcmMgPSB0aGlzLnRleHR1cmU7XHJcbn1cclxuZXhwb3J0cy5sb2FkVGV4dHVyZSA9IGxvYWRUZXh0dXJlO1xyXG5mdW5jdGlvbiBmaW5kQ2xvc2VPYmplY3QoX2EpIHtcclxuICAgIHZhciBhbGxHYW1lRW5lbWllcyA9IF9hLmFsbEdhbWVFbmVtaWVzO1xyXG4gICAgaWYgKGFsbEdhbWVFbmVtaWVzLmxlbmd0aCA8IDApXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGNsb3Nlc3RVbml0O1xyXG4gICAgdmFyIGNsb3Nlc3RVbml0WHJhbmdlID0gSW5maW5pdHk7XHJcbiAgICB2YXIgY2xvc2VzdFVuaXRZcmFuZ2UgPSBJbmZpbml0eTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgYWxsR2FtZUVuZW1pZXNfMSA9IGFsbEdhbWVFbmVtaWVzOyBfaSA8IGFsbEdhbWVFbmVtaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHNoaXAgPSBhbGxHYW1lRW5lbWllc18xW19pXTtcclxuICAgICAgICBpZiAoIXNoaXApXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhciBkaXN0YW5jZVggPSAoc2hpcC54ID4gdGhpcy54KSA/IHNoaXAueCAtIHRoaXMueCA6IHRoaXMueCAtIHNoaXAueDtcclxuICAgICAgICB2YXIgZGlzdGFuY2VZID0gKHNoaXAueSA+IHRoaXMueSkgPyBzaGlwLnkgLSB0aGlzLnkgOiB0aGlzLnkgLSBzaGlwLnk7XHJcbiAgICAgICAgdmFyIG1pbnggPSBNYXRoLm1pbihzaGlwLnggKyAoZGlzdGFuY2VYKSwgdGhpcy54KTtcclxuICAgICAgICB2YXIgbWF4eCA9IE1hdGgubWF4KHNoaXAueCArIChkaXN0YW5jZVgpLCB0aGlzLngpO1xyXG4gICAgICAgIHZhciBtaW55ID0gTWF0aC5taW4oc2hpcC55LCB0aGlzLnkpO1xyXG4gICAgICAgIHZhciBtYXh5ID0gTWF0aC5tYXgoc2hpcC55LCB0aGlzLnkpO1xyXG4gICAgICAgIHZhciB4UmFuZ2UgPSBtYXh4IC0gbWlueDtcclxuICAgICAgICB2YXIgeVJhbmdlID0gbWF4eSAtIG1pbnk7XHJcbiAgICAgICAgaWYgKHhSYW5nZSA8IGNsb3Nlc3RVbml0WHJhbmdlICYmIHlSYW5nZSA8IGNsb3Nlc3RVbml0WXJhbmdlKSB7XHJcbiAgICAgICAgICAgIGNsb3Nlc3RVbml0WHJhbmdlID0gc2hpcC54O1xyXG4gICAgICAgICAgICBjbG9zZXN0VW5pdFlyYW5nZSA9IHNoaXAueTtcclxuICAgICAgICAgICAgY2xvc2VzdFVuaXQgPSBzaGlwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjbG9zZXN0VW5pdDtcclxufVxyXG5leHBvcnRzLmZpbmRDbG9zZU9iamVjdCA9IGZpbmRDbG9zZU9iamVjdDtcclxuZnVuY3Rpb24gZmluZEFuZ2xlVG9TaGlwKF9hKSB7XHJcbiAgICB2YXIgY2xvc2VzdFVuaXQgPSBfYS5jbG9zZXN0VW5pdDtcclxuICAgIHZhciBhbmdsZSA9IGVuZ2luZU1vZHVsZXNfMS5hbmdsZUZpbmRlcih7IG9iamVjdDogdGhpcywgdGFyZ2V0OiBjbG9zZXN0VW5pdCB9KTtcclxuICAgIGlmICh0aGlzLmRlZmF1bHRBbmdsZSkge1xyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIGFuZ2xlID4gdGhpcy5kZWZhdWx0QW5nbGUubWluIHx8IGFuZ2xlIDwgdGhpcy5kZWZhdWx0QW5nbGUubWF4OlxyXG4gICAgICAgICAgICAgICAgYW5nbGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgYW5nbGUgPCB0aGlzLmRlZmF1bHRBbmdsZS5taW4gfHwgYW5nbGUgPiB0aGlzLmRlZmF1bHRBbmdsZS5tYXg6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGFuZ2xlID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYW5nbGU7XHJcbn1cclxuZXhwb3J0cy5maW5kQW5nbGVUb1NoaXAgPSBmaW5kQW5nbGVUb1NoaXA7XHJcbmZ1bmN0aW9uIHNpZGVPYmplY3RTaG90KEJ1bGxldENvbnN0cnVjdCwgbWFpbkdhbWVPYmplY3QsIFNvdW5kQ3JlYXRvciwgb3duZXIsIGFsbEdhbWVFbmVtaWVzKSB7XHJcbiAgICBpZiAoYWxsR2FtZUVuZW1pZXMubGVuZ3RoIDwgMClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgY2xvc2VzdFVuaXQgPSBmaW5kQ2xvc2VPYmplY3QuY2FsbCh0aGlzLCB7IGFsbEdhbWVFbmVtaWVzOiBhbGxHYW1lRW5lbWllcyB9KTtcclxuICAgIGlmICghY2xvc2VzdFVuaXQgfHwgY2xvc2VzdFVuaXQueCA+IHdpbmRvdy5pbm5lcldpZHRoKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBhbmdsZSA9IGZpbmRBbmdsZVRvU2hpcC5jYWxsKHRoaXMsIHsgY2xvc2VzdFVuaXQ6IGNsb3Nlc3RVbml0IH0pO1xyXG4gICAgdGhpcy5zaG90QW5nbGUgPSBhbmdsZTtcclxuICAgIHRoaXMuc2hvdChCdWxsZXRDb25zdHJ1Y3QsIG1haW5HYW1lT2JqZWN0LCBTb3VuZENyZWF0b3IsIG93bmVyLCBcImFsbEdhbWVCdWxsZXRzXCIpO1xyXG59XHJcbmV4cG9ydHMuc2lkZU9iamVjdFNob3QgPSBzaWRlT2JqZWN0U2hvdDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheXMgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXlzKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xyXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxudmFyIHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcclxudmFyIG1lcmdlX2ltYWdlc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtZXJnZS1pbWFnZXNcIikpO1xyXG52YXIgZGlzcGxheU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi92aWV3L2Rpc3BsYXlNb2R1bGVzXCIpO1xyXG52YXIgYXBwTWVudV8xID0gcmVxdWlyZShcIi4uL2FwcE1lbnUvYXBwTWVudVwiKTtcclxudmFyIGR5bmFtaWNMZXZlbE1vZHVsZV8xID0gcmVxdWlyZShcIi4vZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxNb2R1bGVcIik7XHJcbnZhciBfYSA9IHJlcXVpcmUoXCJlbGVjdHJvblwiKSwgaXBjUmVuZGVyZXIgPSBfYS5pcGNSZW5kZXJlciwgcmVtb3RlID0gX2EucmVtb3RlO1xyXG5mdW5jdGlvbiBnYW1lTnBjVW5pdHNDb3VudGluZyhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHRhcmdldCA9IF9hLnRhcmdldDtcclxuICAgIHZhciB1c2VyU2hpcERhdGEgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgdmFyIHVzZXJTaGlwSm91cm5hbCA9IHVzZXJTaGlwRGF0YS5qb3VybmFsO1xyXG4gICAgaWYgKHRhcmdldC5vYmplY3RPd25lciA9PT0gXCJncm91bmRFbmVteVwiKVxyXG4gICAgICAgIHVzZXJTaGlwSm91cm5hbC5kZWZhdWx0RGF0YS5udW1iZXJPZkdyb3VuZEVuZW15ICs9IDE7XHJcbiAgICBpZiAodGFyZ2V0Lm9iamVjdE93bmVyID09PSBcImVuZW15XCIpXHJcbiAgICAgICAgdXNlclNoaXBKb3VybmFsLmRlZmF1bHREYXRhLm51bWJlckZseU9mRW5lbXkgKz0gMTtcclxufVxyXG5leHBvcnRzLmdhbWVOcGNVbml0c0NvdW50aW5nID0gZ2FtZU5wY1VuaXRzQ291bnRpbmc7XHJcbmZ1bmN0aW9uIGluaXRGaWVsZChzY3JlZW5XaWR0aCwgc2NyZWVuSGVpZ2h0KSB7XHJcbiAgICBpZiAoc2NyZWVuV2lkdGggPT09IHZvaWQgMCkgeyBzY3JlZW5XaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOyB9XHJcbiAgICBpZiAoc2NyZWVuSGVpZ2h0ID09PSB2b2lkIDApIHsgc2NyZWVuSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0OyB9XHJcbiAgICB2YXIgZ2FtZUZpZWxkID0gW10uY29uY2F0KHRoaXMuZ2FtZUluaXREYXRhLmdhbWVGaWVsZCwgdGhpcy5nYW1lSW5pdERhdGEuZ2FtZUFjdGlvbkZpZWxkLCB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGlhbG9nRmllbGQsIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVVSUZpZWxkKTtcclxuICAgIGlmICghZ2FtZUZpZWxkKVxyXG4gICAgICAgIHRocm93IEVycm9yKCdFcnJvcicpO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBnYW1lRmllbGRfMSA9IGdhbWVGaWVsZDsgX2kgPCBnYW1lRmllbGRfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgc2NyZWVuXzEgPSBnYW1lRmllbGRfMVtfaV07XHJcbiAgICAgICAgc2NyZWVuXzEgPSBPYmplY3QuYXNzaWduKHNjcmVlbl8xLCB7IHdpZHRoOiBzY3JlZW5XaWR0aCAtIDQsIGhlaWdodDogc2NyZWVuSGVpZ2h0IC0gNCB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmluaXRGaWVsZCA9IGluaXRGaWVsZDtcclxuZnVuY3Rpb24gc2V0R2FtZUZpZWxkcygpIHtcclxuICAgIHRoaXMuaW5pdEZpZWxkKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUNvbnRleHQoKTtcclxuICAgIHRoaXMuaW5pdFBsYXllclNoaXAoKTtcclxufVxyXG5leHBvcnRzLnNldEdhbWVGaWVsZHMgPSBzZXRHYW1lRmllbGRzO1xyXG5mdW5jdGlvbiB3YXJwRWZmZWN0KGNvbnN0cnVjdG9ycykge1xyXG4gICAgdmFyIGN0eCA9IHRoaXMuZ2FtZUluaXREYXRhLmN0eDtcclxuICAgIHZhciBnYW1lV2FycE9iamVjdHMgPSB0aGlzLmdhbWVJbml0RGF0YS53YXJwT2JqZWN0cztcclxuICAgIHRoaXMuZ2V0U2Vjb25kTWVhc3VyZSh3YXJwVGltZXIsIHsgdGltZVRvRXJlc3NMZXZlbDogdGhpcy5nYW1lSW5pdERhdGEudGltZVRvRXJlc3NMZXZlbCwgY3R4OiBjdHgsIHNjcmVlblNpejogdGhpcy5nZXRTY3JlZW5TaXplKCkgfSk7XHJcbiAgICB0aGlzLmdhbWVJbml0RGF0YS53YXJwT2JqZWN0cyA9IChnYW1lV2FycE9iamVjdHMubGVuZ3RoIDwgMzUwKSA/IHRoaXMuZ2FtZUluaXREYXRhLndhcnBPYmplY3RzLmNvbmNhdCh7XHJcbiAgICAgICAgeDogd2luZG93LmlubmVyV2lkdGgsXHJcbiAgICAgICAgeTogdGhpcy5nYW1lUmFuZG9taXplcih3aW5kb3cuaW5uZXJIZWlnaHQpLFxyXG4gICAgICAgIGhlaWdodDogdGhpcy5nYW1lUmFuZG9taXplcigyMCwgMTApLFxyXG4gICAgICAgIHdpZHRoOiAxMCxcclxuICAgICAgICBzcGVlZDogdGhpcy5nYW1lUmFuZG9taXplcigxMCwgNSksXHJcbiAgICAgICAgYmFja2dyb3VuZDogdGhpcy5nZXRSYW5kb21Db2xvcigpLFxyXG4gICAgfSkgOiB0aGlzLmdhbWVJbml0RGF0YS53YXJwT2JqZWN0cztcclxuICAgIGlmIChnYW1lV2FycE9iamVjdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgZ2FtZVdhcnBPYmplY3RzXzEgPSBnYW1lV2FycE9iamVjdHM7IF9pIDwgZ2FtZVdhcnBPYmplY3RzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB3YXJwZXIgPSBnYW1lV2FycE9iamVjdHNfMVtfaV07XHJcbiAgICAgICAgICAgIHdhcnBlci54IC09ICh3YXJwZXIueCA+IDApID8gd2FycGVyLnNwZWVkIDogMDtcclxuICAgICAgICAgICAgd2FycGVyLndpZHRoID0gKGdhbWVXYXJwT2JqZWN0cy5sZW5ndGggPCAxNTApID8gd2FycGVyLndpZHRoIC0gd2FycGVyLnNwZWVkXHJcbiAgICAgICAgICAgICAgICA6IChnYW1lV2FycE9iamVjdHMubGVuZ3RoID4gMTUwICYmIGdhbWVXYXJwT2JqZWN0cy5sZW5ndGggPCAzNTApID8gd2FycGVyLndpZHRoICsgd2FycGVyLnNwZWVkIDogd2FycGVyLndpZHRoIC0gd2FycGVyLnNwZWVkO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gd2FycGVyLmJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgIGRpc3BsYXlNb2R1bGVzXzEuZHJhdyhjdHgsICdmaWxsUmVjdCcsIHdhcnBlci54LCB3YXJwZXIueSwgd2FycGVyLndpZHRoLCB3YXJwZXIuaGVpZ2h0KTtcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB3YXJwVGltZXIobGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgdmFyIGxldmVDaGFuZ2VTdGF0dXMgPSAodGhpcy5nYW1lSW5pdERhdGEudGltZVRvRXJlc3NMZXZlbCA+PSAwKSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5nYW1lSW5pdERhdGEudGltZVRvRXJlc3NMZXZlbCA+PSAwICYmICFsZXZlQ2hhbmdlU3RhdHVzKVxyXG4gICAgICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS50aW1lVG9FcmVzc0xldmVsIC09IDE7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZUluaXREYXRhLnRpbWVUb0VyZXNzTGV2ZWwgPCAwICYmICFsZXZlQ2hhbmdlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmxldmVsV2luZG93RGVzY3JpcHRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUxldmVsUHJvY2VkdXJlKGNvbnN0cnVjdG9ycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMud2FycEVmZmVjdCA9IHdhcnBFZmZlY3Q7XHJcbmZ1bmN0aW9uIGxldmVsSW5pdChHYW1lQmFja2dyb3VuZCwgY3R4LCBtYWluR2FtZU9iamVjdCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRNYXBCYWNrZ3JvdWQoYmFja2dyb3VuZEVsZW1lbnRzQXJyLCB5UG9zaXRpb24sIGhlaWdodCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGJhY2tncm91bmRFbGVtZW50c0Fycl8xID0gYmFja2dyb3VuZEVsZW1lbnRzQXJyOyBfaSA8IGJhY2tncm91bmRFbGVtZW50c0Fycl8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hcE9iamVjdCA9IGJhY2tncm91bmRFbGVtZW50c0Fycl8xW19pXTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXBJdGVtID0gbmV3IEdhbWVCYWNrZ3JvdW5kKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlOiBtYXBPYmplY3QubGV2ZWxNYXAsIHNwZWVkOiBtYXBPYmplY3Quc3BlZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAoaGVpZ2h0KSA/IGhlaWdodCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogKHlQb3NpdGlvbikgPyB5UG9zaXRpb24gOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjcmVlbkRhdGE6IHRoaXMuZ2FtZUluaXREYXRhLnNjcmVlbiwgY3R4OiBjdHgsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFydE9mU2NyZWVuU3RhdHVzOiAodGhpcy5nYW1lSW5pdERhdGEubWFwQmFja2dyb3VuZE9iamVjdHMubGVuZ3RoICUgMiA9PSAwKSA/IHRydWUgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhTWFwOiAobWFwT2JqZWN0LmV4dHJhTWFwKSA/IG1hcE9iamVjdC5leHRyYU1hcCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZVRvRXh0cmFNYXBTZWNvbmRzOiAobWFwT2JqZWN0LnRpbWVUb0V4dHJhTWFwU2Vjb25kcykgPyBtYXBPYmplY3QudGltZVRvRXh0cmFNYXBTZWNvbmRzIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lVG9FeHRyYU1hcE1pbnV0ZXM6IChtYXBPYmplY3QudGltZVRvRXh0cmFNYXBNaW51dGVzKSA/IG1hcE9iamVjdC50aW1lVG9FeHRyYU1hcE1pbnV0ZXMgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlV2lkdGg6IChtYXBPYmplY3QuaW1hZ2VXaWR0aCkgPyBtYXBPYmplY3QuaW1hZ2VXaWR0aCA6IChtYXBPYmplY3QuaW1hZ2VXaWR0aCkgPyBtYXBPYmplY3QuaW1hZ2VXaWR0aCA6IGxldmVsU3RhbmRhcnRNYXAuaW1hZ2VXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZUhlaWdodDogKG1hcE9iamVjdC5pbWFnZUhlaWdodCkgPyBtYXBPYmplY3QuaW1hZ2VIZWlnaHQgOiBsZXZlbFN0YW5kYXJ0TWFwLmltYWdlSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0ZXBzOiAobWFwT2JqZWN0LmFuaW1hdGlvblN0ZXBzKSA/IG1hcE9iamVjdC5hbmltYXRpb25TdGVwcyA6IChtYXBPYmplY3QuYW5pbWF0aW9uU3RlcHMpID8gbWFwT2JqZWN0LmFuaW1hdGlvblN0ZXBzIDogbGV2ZWxTdGFuZGFydE1hcC5hbmltYXRpb25TdGVwcyxcclxuICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkl0ZW1zOiAobWFwT2JqZWN0Lm51bWJlck9mSXRlbXMpID8gbWFwT2JqZWN0Lm51bWJlck9mSXRlbXMgOiAobWFwT2JqZWN0Lm51bWJlck9mSXRlbXMpID8gbWFwT2JqZWN0Lm51bWJlck9mSXRlbXMgOiBsZXZlbFN0YW5kYXJ0TWFwLm51bWJlck9mSXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zOiAobWFwT2JqZWN0Lm51bWJlck9mVmVydGljYWxJdGVtcykgPyBtYXBPYmplY3QubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zIDogbGV2ZWxTdGFuZGFydE1hcC5udW1iZXJPZlZlcnRpY2FsSXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWx3YXlzTW92ZTogKG1hcE9iamVjdC5hbHdheXNNb3ZlKSA/IG1hcE9iamVjdC5hbHdheXNNb3ZlIDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEJhY2tncm91bmRPYmplY3RzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEJhY2tncm91bmRPYmplY3RzLmNvbmNhdChtYXBJdGVtKTtcclxuICAgICAgICAgICAgICAgIG1hcEl0ZW0ubG9hZFRleHR1cmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZ2FtZURhdGEsIGFsbEJhY2tncm91bmRFbGVtZW50cywgbGV2ZWxTdGFuZGFydE1hcDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBnYW1lRGF0YSA9IHRoaXMuc2hvd0xldmVsRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbEJhY2tncm91bmRFbGVtZW50cyA9IGdhbWVEYXRhLmxldmVsQmFja2dyb3VuZEVsZW1lbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsU3RhbmRhcnRNYXAgPSBnYW1lRGF0YS5sZXZlbFN0YW5kYXJ0TWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5iYWNrU2NyZWVuUGF1c2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkTWFwQmFja2dyb3VkLmNhbGwodGhpcywgYWxsQmFja2dyb3VuZEVsZW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWdhbWVEYXRhLmxldmVsQm90dG9tUGFydCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbG9hZE1hcEJhY2tncm91ZC5jYWxsKHRoaXMsIGdhbWVEYXRhLmxldmVsQm90dG9tUGFydCwgd2luZG93LmlubmVySGVpZ2h0IC0gMjAwLCB3aW5kb3cuaW5uZXJIZWlnaHQpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0xldmVsTW9kdWxlXzEuYmFja2dyb3VuZEFkanVzdG1lbnQoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubGV2ZWxJbml0ID0gbGV2ZWxJbml0O1xyXG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KCkge1xyXG4gICAgdGhpcy5nYW1lSW5pdERhdGEuY3R4ID0gdGhpcy5nYW1lSW5pdERhdGEuZ2FtZUZpZWxkLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICB0aGlzLmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZCA9IHRoaXMuZ2FtZUluaXREYXRhLmdhbWVBY3Rpb25GaWVsZC5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgdGhpcy5nYW1lSW5pdERhdGEuY3R4R2FtZURpYWxvZ0ZpZWxkID0gdGhpcy5nYW1lSW5pdERhdGEuZ2FtZURpYWxvZ0ZpZWxkLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICB0aGlzLmdhbWVJbml0RGF0YS5jdHhVSUZpZWxkID0gdGhpcy5nYW1lSW5pdERhdGEuZ2FtZVVJRmllbGQuZ2V0Q29udGV4dCgnMmQnKTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0O1xyXG5mdW5jdGlvbiBnZXRTY3JlZW5TaXplKCkge1xyXG4gICAgdmFyIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGgsIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxufVxyXG5leHBvcnRzLmdldFNjcmVlblNpemUgPSBnZXRTY3JlZW5TaXplO1xyXG5mdW5jdGlvbiBkZXN0cm95QWxFbmVteSgpIHtcclxuICAgIHZhciBlbmVteWVzID0gdGhpcy5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXM7XHJcbiAgICBpZiAoIWVuZW15ZXMgfHwgZW5lbXllcy5sZW5ndGggPCAxKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgZW5lbXllc18xID0gZW5lbXllczsgX2kgPCBlbmVteWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHNoaXAgPSBlbmVteWVzXzFbX2ldO1xyXG4gICAgICAgIHNoaXAub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoYW5nZUxldmVsUHJvY2VkdXJlKGNvbnN0cnVjdG9ycykge1xyXG4gICAgLy8gYW5pbWF0aW9uIGZvciB3YXJwLCBodHRwIHJlcXVlc3QgZm9yIGxldmVsIGFuZCBlbmVteWVzLCAxMCBsZXZlbHMgbXVzdCBiZVxyXG4gICAgLy8gc29tZSBsZXZlbHMgbXVzdCBjb250YWluIGJvc3MgYXQgbGVhc3QgMiBib3NzXHJcbiAgICAvLyBsYXN0IGxldmVsIGlzIGZpbmFsIHRpdGxlcyB0aGUgZW5kIHNhdmUgc2NvcmVcclxuICAgIHZhciBsZXZlbERhdGEgPSB0aGlzLnNob3dHYW1lSW5mbygpO1xyXG4gICAgdmFyIGxldmVsID0gdGhpcy5jaGFuZ2VMZXZlbChsZXZlbERhdGEuZ2FtZURhdGEuY3VycmVudExldmVsICsgMSk7XHJcbiAgICBpZiAobGV2ZWwgPD0gbGV2ZWxEYXRhLmdhbWVEYXRhLmxldmVsRGF0YS5hbGxMZXZlbHMpIHtcclxuICAgICAgICB0aGlzLm5leHRMZXZlbERhdGFSZWxvYWQobGV2ZWxEYXRhLCBjb25zdHJ1Y3RvcnMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZGVzdHJveUFsRW5lbXkuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLm1hcFNvdW5kQ2hhbmdlcih7IHNvdW5kU3RhdHVzOiAnZ2FtZV93aW4nIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVXaW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmxldmVsV2luZG93RGVzY3JpcHRpb24gPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmNoYW5nZUxldmVsUHJvY2VkdXJlID0gY2hhbmdlTGV2ZWxQcm9jZWR1cmU7XHJcbmZ1bmN0aW9uIGxldmVsVGltZXIoKSB7XHJcbiAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0TGV2ZWxVc2VyRGF0YSgpO1xyXG4gICAgaWYgKCFkYXRhLnNvdXJjZS5sZXZlbERhdGEuYm9zc1ByZXNlbnQpIHtcclxuICAgICAgICB2YXIgbGV2ZWxUaW1lID0gZGF0YS5zb3VyY2UubGV2ZWxEYXRhLmxldmVsRGV0YWlscztcclxuICAgICAgICBpZiAoIXRoaXMuZ2FtZUluaXREYXRhLmxldmVsQ2hhbmdlKVxyXG4gICAgICAgICAgICB0aGlzLmdldFNlY29uZE1lYXN1cmUobGV2ZWxUaW1lQWN0aW9uLCBkYXRhLnNvdXJjZS5sZXZlbERhdGEubGV2ZWxEZXRhaWxzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGRhdGEuc291cmNlLmxldmVsRGF0YS5sZXZlbERldGFpbHMubGV2ZWxTZWNvbmRzID0gbnVsbDtcclxuICAgICAgICBkYXRhLnNvdXJjZS5sZXZlbERhdGEubGV2ZWxEZXRhaWxzLmxldmVsTWludXRlcyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsZXZlbFRpbWVBY3Rpb24odGltZSkge1xyXG4gICAgICAgIGlmICh0aW1lLmxldmVsU2Vjb25kcyA8PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICh0aW1lLmxldmVsTWludXRlcyA9PSAwICYmIHRpbWUubGV2ZWxTZWNvbmRzID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRpbWUubGV2ZWxTZWNvbmRzID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmxldmVsQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aW1lLmxldmVsTWludXRlcyA9ICh0aW1lLmxldmVsTWludXRlcyA+IDApID8gdGltZS5sZXZlbE1pbnV0ZXMgLSAxIDogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGltZS5sZXZlbFNlY29uZHMgPSAodGltZS5sZXZlbFNlY29uZHMgPiAwKSA/IHRpbWUubGV2ZWxTZWNvbmRzIC0gMSA6ICh0aGlzLmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSkgPyAwIDogNTk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5sZXZlbFRpbWVyID0gbGV2ZWxUaW1lcjtcclxuZnVuY3Rpb24gZ2V0U2Vjb25kTWVhc3VyZShjYWxsYmFjaykge1xyXG4gICAgdmFyIGRhdGEgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgZGF0YVtfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZ2FtZVNlY29uZDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBnYW1lU2Vjb25kID0gMTAwMCAvIHRoaXMuZ2FtZUluaXREYXRhLmludGVydmFsQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcyAlIGdhbWVTZWNvbmQgPT0gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5nYW1lSW5pdERhdGEuc2hvcEFjdGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEudHJhZGVTaGlwVGltZVRvVW5kb2NrIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZUluaXREYXRhLnRyYWRlU2hpcFRpbWVUb1VuZG9jayA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLnRyYWRlU2hpcFRpbWVUb1VuZG9jayA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY2FsbGJhY2tdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX2Euc2VudCgpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjYWxsYmFjay5jYWxsLmFwcGx5KGNhbGxiYWNrLCBfX3NwcmVhZEFycmF5cyhbdGhpc10sIGRhdGEpKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qLywgZ2FtZVNlY29uZF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5nZXRTZWNvbmRNZWFzdXJlID0gZ2V0U2Vjb25kTWVhc3VyZTtcclxuZnVuY3Rpb24gZ2FtZVNlY29uZHNJbmNyZWFzZSgpIHtcclxuICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHMgKz0gMTtcclxufVxyXG5leHBvcnRzLmdhbWVTZWNvbmRzSW5jcmVhc2UgPSBnYW1lU2Vjb25kc0luY3JlYXNlO1xyXG5mdW5jdGlvbiBnZXRMZXZlbFVzZXJEYXRhKCkge1xyXG4gICAgdmFyIGRhdGFTb3Vyc2UgPSB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YTtcclxuICAgIHZhciBsZXZlbFRpbWUgPSB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWxEZXRhaWxzO1xyXG4gICAgdmFyIHBsYXllck9iamVjdERhdGEgPSB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Q7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNvdXJjZTogZGF0YVNvdXJzZSxcclxuICAgICAgICBjdXJyZW50TGV2ZWw6IGRhdGFTb3Vyc2UuY3VycmVudExldmVsLFxyXG4gICAgICAgIGFsbExldmVsczogZGF0YVNvdXJzZS5sZXZlbERhdGEuYWxsTGV2ZWxzLFxyXG4gICAgICAgIHBvaW50czogZGF0YVNvdXJzZS5jdXJyZW50UG9pbnQsXHJcbiAgICAgICAgZ2FtZUNvaW5zOiBkYXRhU291cnNlLmdhbWVDb2lucyxcclxuICAgICAgICBsaWZlOiBkYXRhU291cnNlLnBsYXllck9iamVjdC5udW1iZXJPZmxpZmUsXHJcbiAgICAgICAgbWludXRlczogbGV2ZWxUaW1lLmxldmVsTWludXRlcyxcclxuICAgICAgICBzZWNvbmRzOiBsZXZlbFRpbWUubGV2ZWxTZWNvbmRzLFxyXG4gICAgICAgIHBsYXllck9iamVjdERhdGE6IHBsYXllck9iamVjdERhdGFcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5nZXRMZXZlbFVzZXJEYXRhID0gZ2V0TGV2ZWxVc2VyRGF0YTtcclxuZnVuY3Rpb24gZGVsZXRlQnVsbGV0KGJ1bGxldCwgYnVsbGV0QXJyYXkpIHtcclxuICAgIGlmIChidWxsZXQueCA+IHdpbmRvdy5pbm5lcldpZHRoICsgMTUwMFxyXG4gICAgICAgIHx8IGJ1bGxldC54IDwgKGJ1bGxldC53aWR0aCArIDIwMCkgKiAtMVxyXG4gICAgICAgIHx8ICFidWxsZXQub2JqZWN0UHJlc2VudFxyXG4gICAgICAgIHx8IGJ1bGxldC55ID4gd2luZG93LmlubmVySGVpZ2h0ICsgNTAwXHJcbiAgICAgICAgfHwgYnVsbGV0LnkgPCAwIC0gd2luZG93LmlubmVyV2lkdGgpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdhbWVJbml0RGF0YVtidWxsZXRBcnJheV0uaW5kZXhPZihidWxsZXQpO1xyXG4gICAgICAgIHRoaXMuZ2FtZUluaXREYXRhW2J1bGxldEFycmF5XS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVsZXRlQnVsbGV0ID0gZGVsZXRlQnVsbGV0O1xyXG5mdW5jdGlvbiBkZWxldGVPYmplY3RzKF9hKSB7XHJcbiAgICB2YXIgb2JqZWN0ID0gX2Eub2JqZWN0LCB0YXJnZXQgPSBfYS50YXJnZXQ7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGluZGV4O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgbGltaXRhdGlvbk9mU2lkZU9iamVjdHMoeyBtYWluR2FtZU9iamVjdDogdGhpcyB9KTtcclxuICAgICAgICAgICAgaWYgKG9iamVjdC54ICsgb2JqZWN0LnNXaWR0aCA8IDAgfHwgIW9iamVjdC5vYmplY3RQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LmlzU3ViQm9zcylcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5TVUJfTE9BRF9BVF9MRVZFTCA9IFwiZmFsc2VcIjtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXMuaW5kZXhPZihvYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmRlbGV0ZU9iamVjdHMgPSBkZWxldGVPYmplY3RzO1xyXG5mdW5jdGlvbiBkZWxldGVPYmplY3RzT25EZW1hbmQoX2EpIHtcclxuICAgIHZhciBvYmplY3QgPSBfYS5vYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHRhcmdldCA9IF9hLnRhcmdldDtcclxuICAgIGlmICghb2JqZWN0Lm9iamVjdFByZXNlbnQgJiYgdGFyZ2V0KSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhW3RhcmdldF0uaW5kZXhPZihvYmplY3QpO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YVt0YXJnZXRdLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWxldGVPYmplY3RzT25EZW1hbmQgPSBkZWxldGVPYmplY3RzT25EZW1hbmQ7XHJcbmZ1bmN0aW9uIGRlbGF0ZVNpZGVPYmplY3Qob2JqZWN0KSB7XHJcbiAgICBsaW1pdGF0aW9uT2ZidWxsZXRzKHsgbWFpbkdhbWVPYmplY3Q6IHRoaXMgfSk7XHJcbiAgICBpZiAoIW9iamVjdC5vYmplY3RQcmVzZW50IHx8ICghdGhpcy5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSAmJiBvYmplY3QueCA8IC0zMDAgLSBvYmplY3Qud2lkdGgpKSB7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLmluZGV4T2Yob2JqZWN0KTtcclxuICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS5hbGxHYW1lU2lkZU9iamVjdHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBpZiAob2JqZWN0Lm9iamVjdE93bmVyID09ICdoYW5nYXInKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLnRyYWRlcG9zdEluUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWxhdGVTaWRlT2JqZWN0ID0gZGVsYXRlU2lkZU9iamVjdDtcclxuZnVuY3Rpb24gbGltaXRhdGlvbk9mYnVsbGV0cyhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgbWF4aW11bU9iamVjdCA9IHByb2Nlc3MuZW52Lk1BWF9OVU1CRVJfT0ZfQlVMTEVUUztcclxuICAgIHZhciBhbGxTaWRlT2JqZWN0cyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lQnVsbGV0cztcclxuICAgIHZhciBidWxsZXRPYmplY3QgPSBhbGxTaWRlT2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5vYmplY3ROYW1lRmxhZyA9PT0gXCJidWxsZXRcIlxyXG4gICAgICAgICAgICAmJiBpdGVtLm9iamVjdE93bmVyID09PSBcInBsYXllclwiICYmIGl0ZW0udHlwZSAhPSBcInJvY2tldFwiXHJcbiAgICAgICAgICAgICYmIGl0ZW0udHlwZSAhPSBcImhvbWluZ19yb2NrZXRcIlxyXG4gICAgICAgICAgICAmJiBpdGVtLnR5cGUgIT0gXCJudWNsZWFyX2JsYXN0XCJcclxuICAgICAgICAgICAgJiYgaXRlbS50eXBlICE9IFwiZGVmZW5jZV9zaGllbGRcIjtcclxuICAgIH0pO1xyXG4gICAgaWYgKCFidWxsZXRPYmplY3QpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKGJ1bGxldE9iamVjdC5sZW5ndGggPiBtYXhpbXVtT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIGxhc3REZWxldGVJbmRleCA9IGJ1bGxldE9iamVjdC5sZW5ndGggLSBtYXhpbXVtT2JqZWN0O1xyXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gYnVsbGV0T2JqZWN0Lmxlbmd0aDsgaW5kZXggPj0gYnVsbGV0T2JqZWN0Lmxlbmd0aCAtIGxhc3REZWxldGVJbmRleCAtIDE7IGluZGV4LS0pIHtcclxuICAgICAgICAgICAgaWYgKCFidWxsZXRPYmplY3RbaW5kZXhdKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIGJ1bGxldE9iamVjdFtpbmRleF0ub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZWFyY2hFeHBsb3Npb25PYmplY3QoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGFsbFNpZGVPYmplY3RzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cztcclxuICAgIHZhciBleHBsb3Npb25PYmplY3QgPSBhbGxTaWRlT2JqZWN0cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5vYmplY3RPd25lciA9PT0gXCJleHBsb3Npb25cIjtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGV4cGxvc2lvbk9iamVjdDtcclxufVxyXG5leHBvcnRzLnNlYXJjaEV4cGxvc2lvbk9iamVjdCA9IHNlYXJjaEV4cGxvc2lvbk9iamVjdDtcclxuZnVuY3Rpb24gbGltaXRhdGlvbk9mU2lkZU9iamVjdHMoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIG1heGltdW1PYmplY3QgPSBwcm9jZXNzLmVudi5NQVhfTlVNQkVSX09GX0VYUExPU0lPTjtcclxuICAgIHZhciBleHBsb3Npb25PYmplY3QgPSBzZWFyY2hFeHBsb3Npb25PYmplY3QoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICBpZiAoIWV4cGxvc2lvbk9iamVjdClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoZXhwbG9zaW9uT2JqZWN0Lmxlbmd0aCA+IG1heGltdW1PYmplY3QpIHtcclxuICAgICAgICB2YXIgbGFzdERlbGV0ZUluZGV4ID0gZXhwbG9zaW9uT2JqZWN0Lmxlbmd0aCAtIG1heGltdW1PYmplY3Q7XHJcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8PSBsYXN0RGVsZXRlSW5kZXg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgZXhwbG9zaW9uT2JqZWN0W2luZGV4XS5vYmplY3RQcmVzZW50ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvbGxlY3RQb2ludHMocG9pbnQpIHtcclxuICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmN1cnJlbnRQb2ludCArPSBwb2ludDtcclxufVxyXG5leHBvcnRzLmNvbGxlY3RQb2ludHMgPSBjb2xsZWN0UG9pbnRzO1xyXG5mdW5jdGlvbiBnZXRPYmplY3RQb3NpdGlvbigpIHtcclxuICAgIHZhciBtYWluT2JqZWN0ID0gdGhpcztcclxuICAgIHZhciBwb3NpdGlvbiA9IHtcclxuICAgICAgICB4OiBtYWluT2JqZWN0LngsXHJcbiAgICAgICAgeTogbWFpbk9iamVjdC55LFxyXG4gICAgICAgIHdpZHRoOiBtYWluT2JqZWN0LndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogbWFpbk9iamVjdC5oZWlnaHQsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xyXG59XHJcbmV4cG9ydHMuZ2V0T2JqZWN0UG9zaXRpb24gPSBnZXRPYmplY3RQb3NpdGlvbjtcclxuZnVuY3Rpb24gY3JlYXRlU2NyZWVuc2hvdHMoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIHNjcmVlblNob3RCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NjcmVlbnNob3RcIik7XHJcbiAgICBzY3JlZW5TaG90QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMgfHxcclxuICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVXaW4gfHxcclxuICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVPdmVyKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIHNjcmVlblNob3RNZXNzYWdlQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lc3NhZ2Utc2NyZWVuc2hvdCcpO1xyXG4gICAgICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3Qoc2NyZWVuU2hvdE1lc3NhZ2VCb3gsICdhY3RpdmUtbWVzc2FnZS1ib3gnKTtcclxuICAgICAgICB2YXIgZGlyID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpID8gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uLycpICsgcHJvY2Vzcy5lbnYuQVBQX1NDUkVFTlNIT1RTX0RJUkVDVE9SWSA6IF9fZGlybmFtZSArIHByb2Nlc3MuZW52LkFQUF9TQ1JFRU5TSE9UU19ESVJFQ1RPUlk7XHJcbiAgICAgICAgc2NyZWVuU2hvdE1lc3NhZ2VCb3guaW5uZXJIVE1MID0gXCJTY3JlZW5zaG90IHRha2VuIFxcbiBsb2NhdGlvbjogXCIgKyBwcm9jZXNzLmVudi5BUFBfU0NSRUVOU0hPVFNfRElSRUNUT1JZO1xyXG4gICAgICAgIGdldEltYWdlRnJvbUZpZWxkcy5jYWxsKG1haW5HYW1lT2JqZWN0LCB7IHNhdmVHYW1lRGF0YTogbnVsbCwgc2NyZWVuc2hvdDogdHJ1ZSB9KTtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYXBwTWVudV8xLnJlbW92ZUNsYXNzTGlzdChzY3JlZW5TaG90TWVzc2FnZUJveCwgJ2FjdGl2ZS1tZXNzYWdlLWJveCcpO1xyXG4gICAgICAgIH0sIDUwMDApO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVTY3JlZW5zaG90cyA9IGNyZWF0ZVNjcmVlbnNob3RzO1xyXG5mdW5jdGlvbiBnZXRJbWFnZUZyb21GaWVsZHMoX2EpIHtcclxuICAgIHZhciBzYXZlR2FtZURhdGEgPSBfYS5zYXZlR2FtZURhdGEsIHNjcmVlbnNob3QgPSBfYS5zY3JlZW5zaG90O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBiYWNrZ3JvdW5kLCBnYW1lRmllbGQsIGdhbWVUZXh0LCBkaXIsIGJhY2tncm91bmRQaWN0dXJlLCBfYiwgX2MsIHJlcywgX2QsIF9lO1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9mLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVGaWVsZC50b0RhdGFVUkwoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZCA9IF9mLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdhbWVJbml0RGF0YS5nYW1lQWN0aW9uRmllbGQudG9EYXRhVVJMKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZCA9IF9mLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGlhbG9nRmllbGQudG9EYXRhVVJMKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVUZXh0ID0gX2Yuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSA/IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi8nKSArIHByb2Nlc3MuZW52LkFQUF9TQ1JFRU5TSE9UU19ESVJFQ1RPUlkgOiBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5BUFBfU0NSRUVOU0hPVFNfRElSRUNUT1JZO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkaXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLm1rZGlyU3luYyhkaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfYiA9IHNhdmVQaWN0dXJlcztcclxuICAgICAgICAgICAgICAgICAgICBfYyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJhY2tncm91bmQucmVwbGFjZSgvXmRhdGE6aW1hZ2VcXC9wbmc7YmFzZTY0LC8sIFwiXCIpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFs0IC8qeWllbGQqLywgX2IuYXBwbHkodm9pZCAwLCBbKF9jLnBpY3R1cmVfNjQgPSBfZi5zZW50KCksIF9jLmZpbGVuYW1lID0gJ2JhY2tncm91bmQnLCBfYy5zY3JlZW5zaG90ID0gZmFsc2UsIF9jKV0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUGljdHVyZSA9IF9mLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfZCA9IHNhdmVQaWN0dXJlcztcclxuICAgICAgICAgICAgICAgICAgICBfZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdhbWVGaWVsZC5yZXBsYWNlKC9eZGF0YTppbWFnZVxcL3BuZztiYXNlNjQsLywgXCJcIildO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQgLyp5aWVsZCovLCBfZC5hcHBseSh2b2lkIDAsIFsoX2UucGljdHVyZV82NCA9IF9mLnNlbnQoKSwgX2UuZmlsZW5hbWUgPSAnZ2FtZUZpZWxkJywgX2Uuc2NyZWVuc2hvdCA9IGZhbHNlLCBfZSldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBtZXJnZV9pbWFnZXNfMS5kZWZhdWx0KFtiYWNrZ3JvdW5kLCBnYW1lRmllbGQsIGdhbWVUZXh0XSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocGljKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzY3JlZW5zaG90KSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gc2F2ZVBpY3R1cmVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHBpYy5yZXBsYWNlKC9eZGF0YTppbWFnZVxcL3BuZztiYXNlNjQsLywgXCJcIildO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIF9hLmFwcGx5KHZvaWQgMCwgWyhfYi5waWN0dXJlXzY0ID0gX2Muc2VudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5maWxlbmFtZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5zY3JlZW5zaG90ID0gc2NyZWVuc2hvdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IpXSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovLCByZWR1Y2VQcmV2aWV3SW1hZ2VTaXplKHsgcGljVXJsOiAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBwaWMucmVwbGFjZSgvXmRhdGE6aW1hZ2VcXC9wbmc7YmFzZTY0LC8sIFwiXCIpIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IF9mLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5nZXRJbWFnZUZyb21GaWVsZHMgPSBnZXRJbWFnZUZyb21GaWVsZHM7XHJcbmZ1bmN0aW9uIHNhdmVQaWN0dXJlcyhfYSkge1xyXG4gICAgdmFyIHBpY3R1cmVfNjQgPSBfYS5waWN0dXJlXzY0LCBmaWxlbmFtZSA9IF9hLmZpbGVuYW1lLCBzY3JlZW5zaG90ID0gX2Euc2NyZWVuc2hvdDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlyO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgaWYgKHNjcmVlbnNob3QpIHtcclxuICAgICAgICAgICAgICAgIGRpciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSA/IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi8nKSArIHByb2Nlc3MuZW52LkFQUF9TQ1JFRU5TSE9UU19ESVJFQ1RPUlkgOiBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5BUFBfU0NSRUVOU0hPVFNfRElSRUNUT1JZO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnMud3JpdGVGaWxlKGRpciArIChcIi9cIiArIGZpbGVuYW1lICsgXCIucG5nXCIpLCBwaWN0dXJlXzY0LCAnYmFzZTY0JywgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcGljdHVyZV82NF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiByZWR1Y2VQcmV2aWV3SW1hZ2VTaXplKF9hKSB7XHJcbiAgICB2YXIgcGljVXJsID0gX2EucGljVXJsO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjYW52YXMsIGN0eCwgaW1nLCByZXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGggLyAyLjU7XHJcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyLjU7XHJcbiAgICAgICAgICAgIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1nLnNyYyA9IHBpY1VybDtcclxuICAgICAgICAgICAgcmVzID0gJyc7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0UGljdHVyZUJhc2UgPSBkYXRhVVJMLnJlcGxhY2UoL15kYXRhOmltYWdlXFwvKHBuZ3xqcGcpO2Jhc2U2NCwvLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBpY3R1cmVCYXNlVXJsID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICsgZ2V0UGljdHVyZUJhc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IHBpY3R1cmVCYXNlVXJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHBpY3R1cmVCYXNlVXJsKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0UmFuZG9tQ29sb3IoKSB7XHJcbiAgICB2YXIgbGV0dGVycyA9ICcwMTIzNDU2Nzg5QUJDREVGJztcclxuICAgIHZhciBjb2xvciA9ICcjJztcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcbiAgICAgICAgY29sb3IgKz0gbGV0dGVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNildO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbG9yO1xyXG59XHJcbmV4cG9ydHMuZ2V0UmFuZG9tQ29sb3IgPSBnZXRSYW5kb21Db2xvcjtcclxuZnVuY3Rpb24gcHJlbG9hZEltYWdlKGl0ZW1zKSB7XHJcbiAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByZWxvYWRlclwiKTtcclxuICAgIGxvb3BWZXJ0aWNhbChpdGVtcyk7XHJcbiAgICBmdW5jdGlvbiBsb29wVmVydGljYWwob2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKCFvYmplY3QpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmVudHJpZXMob2JqZWN0KTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsID0gX2JbMV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0W2tleV0gPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGxvb3BWZXJ0aWNhbChvYmplY3Rba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXNzaWduaW1hZ2Uoa2V5LCB2YWwsIGltYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhc3NpZ25pbWFnZShrZXksIHZhbCwgaW1hZ2UpIHtcclxuICAgICAgICBpZiAoa2V5ID09ICdza2luTmFtZScgfHwga2V5ID09ICd0ZXh0dXJlJyB8fCBrZXkgPT0gJ2xldmVsTWFwJykge1xyXG4gICAgICAgICAgICBpZiAodmFsKVxyXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gX19kaXJuYW1lICsgdmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLnByZWxvYWRJbWFnZSA9IHByZWxvYWRJbWFnZTtcclxuZnVuY3Rpb24gZnVsbFNjcmVlblN3aXRjaChfYSkge1xyXG4gICAgdmFyIGZ1bGxzY3JlZW4gPSBfYS5mdWxsc2NyZWVuO1xyXG4gICAgaXBjUmVuZGVyZXIub24oJ2FzeW5jaHJvbm91cy1yZXBseScsIGZ1bmN0aW9uIChldmVudCwgYXJnKSB7XHJcbiAgICB9KTtcclxuICAgIGlwY1JlbmRlcmVyLnNlbmQoJ2FzeW5jaHJvbm91cy1tZXNzYWdlJywgeyBmdWxsc2NyZWVuOiBmdWxsc2NyZWVuIH0pO1xyXG59XHJcbmV4cG9ydHMuZnVsbFNjcmVlblN3aXRjaCA9IGZ1bGxTY3JlZW5Td2l0Y2g7XHJcbmZ1bmN0aW9uIGFuZ2xlRmluZGVyKF9hKSB7XHJcbiAgICB2YXIgb2JqZWN0ID0gX2Eub2JqZWN0LCB0YXJnZXQgPSBfYS50YXJnZXQ7XHJcbiAgICB2YXIgdGFyZ2V0WCA9ICgoTWF0aC5zaWduKHRhcmdldC54KSA+IDApID8gdGFyZ2V0LnggOiAwKSArIHRhcmdldC53aWR0aCAvIDM7XHJcbiAgICB2YXIgdGFyZ2V0WSA9ICgoTWF0aC5zaWduKHRhcmdldC55KSA+IDApID8gdGFyZ2V0LnkgOiAwKSArIHRhcmdldC5oZWlnaHQgLyAyO1xyXG4gICAgdmFyIG9iamVjdFggPSAoTWF0aC5zaWduKG9iamVjdC54KSA+IDApID8gb2JqZWN0LnggOiAwLCBvYmplY3RZID0gKE1hdGguc2lnbihvYmplY3QueSkgPiAwKSA/IG9iamVjdC55IDogMDtcclxuICAgIHZhciByb3RhdGVBbmdsZSA9IE1hdGguYXRhbigob2JqZWN0WCAtIHRhcmdldFgpIC8gKG9iamVjdFkgLSB0YXJnZXRZKSkgLyAoTWF0aC5QSSAvIDE4MCk7XHJcbiAgICB2YXIgeDEgPSBvYmplY3RYIC0gdGFyZ2V0WDtcclxuICAgIHZhciB5MSA9IG9iamVjdFkgLSB0YXJnZXRZO1xyXG4gICAgdmFyIGZpbmFsQW5nbGUgPSAwO1xyXG4gICAgaWYgKHgxIDwgMCAmJiB5MSA8IDApIHtcclxuICAgICAgICBmaW5hbEFuZ2xlID0gOTAgLSByb3RhdGVBbmdsZTtcclxuICAgIH1cclxuICAgIGlmICh4MSA+IDAgJiYgeTEgPCAwKSB7XHJcbiAgICAgICAgZmluYWxBbmdsZSA9IDkwIC0gcm90YXRlQW5nbGU7XHJcbiAgICB9XHJcbiAgICBpZiAoeDEgPiAwICYmIHkxID4gMCkge1xyXG4gICAgICAgIGZpbmFsQW5nbGUgPSAyNzAgLSByb3RhdGVBbmdsZTtcclxuICAgIH1cclxuICAgIGlmICh4MSA8IDAgJiYgeTEgPiAwKSB7XHJcbiAgICAgICAgZmluYWxBbmdsZSA9IDI3MCArIHJvdGF0ZUFuZ2xlICogLTE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmluYWxBbmdsZTtcclxufVxyXG5leHBvcnRzLmFuZ2xlRmluZGVyID0gYW5nbGVGaW5kZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgc3RhbmRBbG9uZVdvcmtldHNfMSA9IHJlcXVpcmUoXCIuL3N0YW5kQWxvbmVXb3JrZXRzXCIpO1xyXG52YXIgcmVtb3RlID0gcmVxdWlyZSgnZWxlY3Ryb24nKS5yZW1vdGU7XHJcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG52YXIgc3RvcmFnZSA9IHJlcXVpcmUoJ2VsZWN0cm9uLWpzb24tc3RvcmFnZScpO1xyXG5mdW5jdGlvbiBnZXREYXRhKF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBtZXRob2QgPSBfYS5tZXRob2QsIGRhdGEgPSBfYS5kYXRhLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0SGVhZGVyLCByZXN1bHREYXRhO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEhlYWRlciA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgaGVhZGVycyB8fCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodXJsID09PSAnYXBpL2xldmVsLWRhdGEnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9PT0gJ2FwaS9sZXZlbC1vYmplY3RzJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPT09ICdhcGkvZ3JhcHBsZS1vYmplY3RzJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPT09ICdhcGkvdXNlci1zaGlwJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPT09ICdhcGkvZW5lbXktc2hpcCcgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID09PSAnYXBpL2dldC1ncm91bmQtY2hhcmFjdGVycycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID09PSAnYXBpL3Nob3AvZ3VucycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID09PSAnYXBpL2dldC1jb25zdHJ1Y3Rvci1ncm91bmQtZW5lbXknIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9PT0gJ2FwaS9zaG9wL3NoaXB5YXJkJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPT09ICdhcGkvc2hvcC9zdG9yZS1pdGVtcycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID09PSAnYXBpL2dhbWUtcmVzdWx0JykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHN0YW5kQWxvbmVXb3JrZXRzXzEuc2VhcmNoRGF0YUluRmlsZSh7IHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzLCBtZXRob2Q6IG1ldGhvZCwgZGF0YTogZGF0YSB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0RGF0YV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6ICdjb3JzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVzdWx0SGVhZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiAoZGF0YSkgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6ICdyZWplY3QnLCBtZXNzYWdlOiByZXMuc3RhdHVzVGV4dCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5yZXNwb25zZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLnJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5yZXNwb25zZS5oZWFkZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IFwiNTAwIE5vIHNlcnZlciBjb25uZWN0aW9uIVwiLCBzdGF0dXM6IFwiZXJyb3JcIiB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSldOyAvKiovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZ2V0RGF0YSA9IGdldERhdGE7XHJcbmZ1bmN0aW9uIGdldExvY2FsRGF0YShfYSkge1xyXG4gICAgdmFyIGZpbGVOYW1lID0gX2EuZmlsZU5hbWU7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIGlmICghZmlsZU5hbWUpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIm5vIGxvY2FsIGZpbGVzXCIpO1xyXG4gICAgICAgICAgICByZXMgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShfX2Rpcm5hbWUgKyAnL3B1YmxpYy9kYXRhLycgKyBmaWxlTmFtZSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiZ290IHNvbWUgcHJvYmxlbSBoZXJlXCIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZ2V0TG9jYWxEYXRhID0gZ2V0TG9jYWxEYXRhO1xyXG5mdW5jdGlvbiBnZXREZWZhdWx0U2V0dGluZ3MoKSB7XHJcbiAgICB2YXIgZGVmYXVsdERhdGEgPSB7XHJcbiAgICAgICAgXCJzb3VuZExldmVsXCI6IFwiNVwiLFxyXG4gICAgICAgIFwic291bmRFZmZlY3RcIjogXCIyMFwiLFxyXG4gICAgICAgIFwic291bmRPblwiOiB0cnVlLFxyXG4gICAgICAgIFwiYXV0b3Nob290XCI6IGZhbHNlLFxyXG4gICAgICAgIFwiZnVsbFNjcmVlblwiOiB0cnVlLFxyXG4gICAgICAgIFwia2V5Q29udHJvbHNcIjoge1xyXG4gICAgICAgICAgICBcInVwXCI6IFs4NywgMzgsIDEwNF0sXHJcbiAgICAgICAgICAgIFwicmlnaHRcIjogWzY4LCAzOSwgMTAyXSxcclxuICAgICAgICAgICAgXCJkb3duXCI6IFs4MywgNDAsIDk4XSxcclxuICAgICAgICAgICAgXCJsZWZ0XCI6IFs2NSwgMzcsIDEwMF0sXHJcbiAgICAgICAgICAgIFwiZXNjYXBlXCI6IFsyN10sXHJcbiAgICAgICAgICAgIFwicGF1c2VcIjogWzgwXSxcclxuICAgICAgICAgICAgXCJyb2NrZXRcIjogWzgyXSxcclxuICAgICAgICAgICAgXCJob21pbmdSb2NrZXRcIjogWzcyXSxcclxuICAgICAgICAgICAgXCJkZXN0cm95RW5lbXlcIjogWzg0XSxcclxuICAgICAgICAgICAgXCJzaGllbGRcIjogWzY5XSxcclxuICAgICAgICAgICAgXCJpbnZlbnRvcnlcIjogWzczXSxcclxuICAgICAgICAgICAgXCJ1c2VLZXlcIjogWzY5XSxcclxuICAgICAgICAgICAgXCJtaW5pTWFwXCI6IFs3N10sXHJcbiAgICAgICAgICAgIFwiam91cm5hbFwiOiBbNzRdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcInNjcmVlblJlc29sdXRpb25cIjoge1xyXG4gICAgICAgICAgICBcInRpdGxlXCI6IFwiODAweDYwMFwiLFxyXG4gICAgICAgICAgICBcIndpZHRoXCI6IDgwMCxcclxuICAgICAgICAgICAgXCJoZWlnaHRcIjogNjAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcInNjcmVlblZhcmlhdG9uXCI6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIjgwMHg2MDBcIixcclxuICAgICAgICAgICAgICAgIFwid2lkdGhcIjogODAwLFxyXG4gICAgICAgICAgICAgICAgXCJoZWlnaHRcIjogNjAwXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCI4MDB4NjAwXCIsXHJcbiAgICAgICAgICAgICAgICBcIndpZHRoXCI6IDEzNjYsXHJcbiAgICAgICAgICAgICAgICBcImhlaWdodFwiOiA2ODVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH07XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGVmYXVsdERhdGEpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEVsZWN0cm9uTG9jYWxTYXZlcyhfYSkge1xyXG4gICAgdmFyIGZpbGVOYW1lID0gX2EuZmlsZU5hbWU7XHJcbiAgICBpZiAoIWZpbGVOYW1lKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwibm8gbG9jYWwgZmlsZXNcIik7XHJcbiAgICB2YXIgcmVzID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHN0b3JhZ2UuZ2V0KGZpbGVOYW1lLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgPyBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vJykgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlkgOiBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlk7XHJcbiAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkaXIpKSB7XHJcbiAgICAgICAgICAgICAgICBmcy5ta2RpclN5bmMoZGlyKTtcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0RGF0YVBhdGgoZGlyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyICsgZmlsZU5hbWUpICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZUVsZWN0cm9uTG9jYWxEYXRhKHsgZmlsZU5hbWU6IGZpbGVOYW1lLCBkYXRhOiBcIltdXCIgfSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IFwibm8gc2F2ZVwiIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XHJcbiAgICAgICAgICAgIHZhciBpbmZvID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgaWYgKGluZm8pXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGluZm8pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJnb3Qgc29tZSBwcm9ibGVtIGhlcmVcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZXhwb3J0cy5nZXRFbGVjdHJvbkxvY2FsU2F2ZXMgPSBnZXRFbGVjdHJvbkxvY2FsU2F2ZXM7XHJcbmZ1bmN0aW9uIGdldEVsZWN0cm9uTG9jYWxEYXRhKF9hKSB7XHJcbiAgICB2YXIgZmlsZU5hbWUgPSBfYS5maWxlTmFtZTtcclxuICAgIGlmICghZmlsZU5hbWUpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBsb2NhbCBmaWxlc1wiKTtcclxuICAgIHZhciBkaXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgPyBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vJykgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlkgOiBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlk7XHJcbiAgICBzdG9yYWdlLnNldERhdGFQYXRoKGRpcik7XHJcbiAgICB2YXIgcmVzID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHN0b3JhZ2UuZ2V0KGZpbGVOYW1lLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkaXIpKSB7XHJcbiAgICAgICAgICAgICAgICBmcy5ta2RpclN5bmMoZGlyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGlyICsgZmlsZU5hbWUpICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZUVsZWN0cm9uTG9jYWxEYXRhKHsgZmlsZU5hbWU6IGZpbGVOYW1lLCBkYXRhOiBnZXREZWZhdWx0U2V0dGluZ3MoKSB9KTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShnZXREZWZhdWx0U2V0dGluZ3MoKSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xyXG4gICAgICAgICAgICB2YXIgaW5mbyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChpbmZvKVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiZ290IHNvbWUgcHJvYmxlbSBoZXJlXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmV4cG9ydHMuZ2V0RWxlY3Ryb25Mb2NhbERhdGEgPSBnZXRFbGVjdHJvbkxvY2FsRGF0YTtcclxuZnVuY3Rpb24gd3JpdGVFbGVjdHJvbkxvY2FsRGF0YShfYSkge1xyXG4gICAgdmFyIGZpbGVOYW1lID0gX2EuZmlsZU5hbWUsIGRhdGEgPSBfYS5kYXRhO1xyXG4gICAgaWYgKCFmaWxlTmFtZSB8fCAhZGF0YSlcclxuICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcignbm8gZGF0YSBvciBmaWxlbmFtZSBhdCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlJyk7XHJcbiAgICB2YXIgcmVzID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHN0b3JhZ2Uuc2V0KGZpbGVOYW1lLCBkYXRhLCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6ICdTZXR0aW5ncyBzYXZlZCcgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5leHBvcnRzLndyaXRlRWxlY3Ryb25Mb2NhbERhdGEgPSB3cml0ZUVsZWN0cm9uTG9jYWxEYXRhO1xyXG5mdW5jdGlvbiB3cml0ZUxvY2FsRGF0YShfYSkge1xyXG4gICAgdmFyIGZpbGVOYW1lID0gX2EuZmlsZU5hbWUsIGRhdGEgPSBfYS5kYXRhO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgaWYgKCFmaWxlTmFtZSlcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwibm8gbG9jYWwgZmlsZXNcIik7XHJcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZShfX2Rpcm5hbWUgKyAnL3B1YmxpYy9kYXRhLycgKyBmaWxlTmFtZSwgZGF0YSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLndyaXRlTG9jYWxEYXRhID0gd3JpdGVMb2NhbERhdGE7XHJcbmZ1bmN0aW9uIHBvc3REYXRhKF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBtZXRob2QgPSBfYS5tZXRob2QsIGRhdGEgPSBfYS5kYXRhLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHZhciByZXN1bHRIZWFkZXIgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICB9LCBoZWFkZXJzIHx8IGZhbHNlKTtcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBtb2RlOiAnY29ycycsXHJcbiAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXHJcbiAgICAgICAgaGVhZGVyczogcmVzdWx0SGVhZGVyLFxyXG4gICAgICAgIGJvZHk6IChkYXRhKSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogbnVsbFxyXG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7IHJldHVybiByZXMuanNvbigpOyB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhOyB9KTtcclxufVxyXG5leHBvcnRzLnBvc3REYXRhID0gcG9zdERhdGE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9tYWluR2FtZUNvbXBvbmVudFwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2xldmVsQ29uc3RydWN0b3JzXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vZW5lbXlDb25zdHJ1Y3RvclwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3VzZXJDb25zdHJ1Y3RvclwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2J1bGxldENvbnN0cnVjdG9yXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vZ2FtZVNpZGVPYmplY3RDb25zdHJ1Y3RvclwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2dhbWVHcmFwcGxlT2JqZWN0c1wiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3NvdW5kQ29uc3RydWN0b3JcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9keW5hbWljTWFwQmxvY2tzQ29uc3RydWN0b3JcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9keW5hbWljVXNlckNvbnN0cnVjdG9yXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vZHluYW1pY0VuZW15Q29uc3RydWN0b3JcIikpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gcGFnZUJ1aWxkZXIoX2EpIHtcclxuICAgIHZhciB0YXJnZXQgPSBfYS50YXJnZXQsIGRhdGEgPSBfYS5kYXRhO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYiwgdGFyZ2V0Tm9kZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgIXRhcmdldF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSAoX2Muc2VudCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2IpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sICFkYXRhXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IChfYy5zZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiY2FudCBmZXRjaCB0aGUgZGF0YVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0Tm9kZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXROb2RlLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZGF0YV8xID0gZGF0YTsgX2kgPCBkYXRhXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRhdGFfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3T2JqZWN0ID0gY3JlYXRlRWxlbWVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6IGl0ZW0udGFnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlQ2xhc3M6IGl0ZW0uY2xhc3NsaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZVN0eWxlOiBpdGVtLnN0eWxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY3R1cmVVcmw6IGl0ZW0uaW1hZ2VMaW5rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtVcmw6IGl0ZW0ubGluayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLmlubmVyVGV4dCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lckNvbnRlbnQ6IGl0ZW0uaHRtbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogbnVsbCwgYXR0cmlidXRlTmFtZTE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlMTogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROb2RlLmFwcGVuZENoaWxkKG5ld09iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMucGFnZUJ1aWxkZXIgPSBwYWdlQnVpbGRlcjtcclxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudHMoX2EpIHtcclxuICAgIHZhciB0YWdOYW1lID0gX2EudGFnTmFtZSwgc3R5bGVDbGFzcyA9IF9hLnN0eWxlQ2xhc3MsIGlubGluZVN0eWxlID0gX2EuaW5saW5lU3R5bGUsIHBpY3R1cmVVcmwgPSBfYS5waWN0dXJlVXJsLCBsaW5rVXJsID0gX2EubGlua1VybCwgdGV4dCA9IF9hLnRleHQsIGlubmVyQ29udGVudCA9IF9hLmlubmVyQ29udGVudCwgYXR0cmlidXRlTmFtZSA9IF9hLmF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZSA9IF9hLmF0dHJpYnV0ZSwgYXR0cmlidXRlTmFtZTEgPSBfYS5hdHRyaWJ1dGVOYW1lMSwgYXR0cmlidXRlMSA9IF9hLmF0dHJpYnV0ZTE7XHJcbiAgICB2YXIgcmVzdCA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICByZXN0W19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xyXG4gICAgKHN0eWxlQ2xhc3MpID8gZWxlbWVudC5jbGFzc05hbWUgPSBzdHlsZUNsYXNzIDogZmFsc2U7XHJcbiAgICAoaW5saW5lU3R5bGUpID8gZWxlbWVudC5zdHlsZSA9IGlubGluZVN0eWxlIDogZmFsc2U7XHJcbiAgICAodGFnTmFtZSA9PT0gXCJpbWdcIiAmJiBwaWN0dXJlVXJsKSA/IGVsZW1lbnQuc3JjID0gX19kaXJuYW1lICsgcGljdHVyZVVybCA6IGZhbHNlO1xyXG4gICAgKHRleHQpID8gZWxlbWVudC5pbm5lclRleHQgPSB0ZXh0IDogZmFsc2U7XHJcbiAgICAoaW5uZXJDb250ZW50KSA/IGVsZW1lbnQuaW5uZXJIVE1MID0gaW5uZXJDb250ZW50IDogZmFsc2U7XHJcbiAgICAoYXR0cmlidXRlTmFtZSAmJiBhdHRyaWJ1dGUpID8gZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgYXR0cmlidXRlKSA6IGZhbHNlO1xyXG4gICAgKGF0dHJpYnV0ZU5hbWUxICYmIGF0dHJpYnV0ZTEpID8gZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZTEsIGF0dHJpYnV0ZTEpIDogZmFsc2U7XHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUVsZW1lbnRzID0gY3JlYXRlRWxlbWVudHM7XHJcbmZ1bmN0aW9uIGNyZWF0ZVNpbXBsZUVsZW1lbnRzKF9hKSB7XHJcbiAgICB2YXIgdGFnbmFtZSA9IF9hLnRhZ25hbWUsIGNsYXNzTGlzdCA9IF9hLmNsYXNzTGlzdCwgaW5uZXJUZXh0ID0gX2EuaW5uZXJUZXh0LCBpZE5hbWUgPSBfYS5pZE5hbWU7XHJcbiAgICB2YXIgbmV3RG9jdW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ25hbWUpO1xyXG4gICAgbmV3RG9jdW1lbnQuY2xhc3NOYW1lID0gKGNsYXNzTGlzdCkgPyBjbGFzc0xpc3QgOiBmYWxzZTtcclxuICAgIG5ld0RvY3VtZW50LmlubmVySFRNTCA9IGlubmVyVGV4dDtcclxuICAgIGlmIChpZE5hbWUpXHJcbiAgICAgICAgbmV3RG9jdW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWROYW1lKTtcclxuICAgIHJldHVybiBuZXdEb2N1bWVudDtcclxufVxyXG5leHBvcnRzLmNyZWF0ZVNpbXBsZUVsZW1lbnRzID0gY3JlYXRlU2ltcGxlRWxlbWVudHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xID0gcmVxdWlyZShcIi4uLy4uL3NlcnZlci9zZXJ2ZXJSZXF1ZXN0TW9kdWxlc1wiKTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL3BsYXllclVuaXRNb2R1bGVcIik7XHJcbnZhciBkeW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXzEgPSByZXF1aXJlKFwiLi9keW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXCIpO1xyXG5leHBvcnRzLnN0YWlyc01vdmUgPSBkeW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXzEuc3RhaXJzTW92ZTtcclxuZXhwb3J0cy5lbGV2YXRvck1vdmUgPSBkeW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXzEuZWxldmF0b3JNb3ZlO1xyXG52YXIgZHluYW1pY0RpYWxvZ18xID0gcmVxdWlyZShcIi4vZHluYW1pY0RpYWxvZ1wiKTtcclxuZXhwb3J0cy5pbnRlcmFjdFdpdGhPYmplY3RzID0gZHluYW1pY0RpYWxvZ18xLmludGVyYWN0V2l0aE9iamVjdHM7XHJcbnZhciBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuL2R5bmFtaWNMZXZlbEVuZW15TW9kdWxlc1wiKTtcclxuLyo9PT09PT09PT09PVxyXG5cclxuTW9kdWxlIHRvIGxvYWQgZ3JvdW5kIGxldmVsIGJsb2NrIHRvIGdhbWVcclxuYW5kIG9wZXJhdGUgd2l0aCBibG9jayBzY3JpcHRzXHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG4vKj09PT09PT09PT09XHJcblxyXG5NZXRob2QgdG8gbG9hZCBkYXRhIGZyb20gLmpzb24gZmlsZSB3aXRoIG1hcCBvYmplY3QsIHNvcnRlZCBlbGVtZW50c1xyXG5wb3NpdGlvbiBtYXAgcmVsYXRlZCB0byBtYWluIGNoYXJhY3RlclxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gbG9hZExldmVsTWFwKF9hKSB7XHJcbiAgICB2YXIgbGV2ZWxNYXBOYW1lID0gX2EubGV2ZWxNYXBOYW1lLCBjb25zdHJ1Y3RvcnMgPSBfYS5jb25zdHJ1Y3RvcnM7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGR5bmFtaWNNYXAsIGR5bmFtaWNFbmVteUNvbGxlY3Rpb24sIHJlc3VsdERhdGEsIHNwYXduUG9pbnQsIHhSYW5nZUNvbXBlbnNhdGlvbiwgX2IsIHlSYW5nZUNvbXBlbnNhdGlvbiwgX2MsIGxldmVsQmxvY2tzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2QpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfZC5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNNYXAgPSBwcm9jZXNzLmVudi5IT1NUICsgcHJvY2Vzcy5lbnYuRFlOQU1JQ19MRVZFTF9CTE9DS1MgKyAnLycgKyBsZXZlbE1hcE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0VuZW15Q29sbGVjdGlvbiA9IHByb2Nlc3MuZW52LkhPU1QgKyBwcm9jZXNzLmVudi5EWU5BTUlDX0xFVkVMX0VORU1ZX0NPTExFQ1RJT05fVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGR5bmFtaWNNYXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfZC5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzdWx0RGF0YS5hbGxNYXBPYmplY3RzLmZpbmQoZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5kZXRhaWxzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmouZGV0YWlscy50eXBlID09PSBcInNwYXduZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHNwYXduUG9pbnQgPSBfZC5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGF3blBvaW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iID0gd2luZG93LmlubmVyV2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNwYXduUG9pbnQueF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgeFJhbmdlQ29tcGVuc2F0aW9uID0gX2IgLSAoKF9kLnNlbnQoKSkgKyBzcGF3blBvaW50LndpZHRoIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNwYXduUG9pbnQueV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgeVJhbmdlQ29tcGVuc2F0aW9uID0gX2MgLSAoX2Quc2VudCgpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXN1bHREYXRhLmFsbE1hcE9iamVjdHMuZmlsdGVyKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrLmRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLm1hcFNpemVIb3Jpem9udGFsID0gcmVzdWx0RGF0YS5tYXBTaXplLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2subWFwU2l6ZVZlcnRpY2FsID0gcmVzdWx0RGF0YS5tYXBTaXplLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnggKz0geFJhbmdlQ29tcGVuc2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSArPSB5UmFuZ2VDb21wZW5zYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGNvbnN0cnVjdG9ycy5EeW5hbWljQmxvY2tDb25zdHJ1Y3RvcihfX2Fzc2lnbih7fSwgYmxvY2spKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsQmxvY2tzID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBsZXZlbEJsb2Nrc107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubG9hZExldmVsTWFwID0gbG9hZExldmVsTWFwO1xyXG4vKj09PT09PT09PT09XHJcblxyXG5HcmF2aXR5IHNpbXVsYXRpb24sIGFjY2VsZXJhdGUgb2JqZWN0XHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBtYXBHcmF2aXR5SW5pdChfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIG1hcE9iamVjdHMgPSBfYS5tYXBPYmplY3RzLCB0YXJnZXRPYmplY3QgPSBfYS50YXJnZXRPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbGV2ZWxJbmZvcm1hdGlvbiwgZXh0cmFTZWNvbmRzLCBncm91bmRQbGF5ZXIsIGFsbEVuZW15LCBncmF2aXR5SW5kZXgsIF9pLCBtYXBPYmplY3RzXzEsIGl0ZW07XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbiA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFTZWNvbmRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdyb3VuZFBsYXllckNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgICAgICBhbGxFbmVteSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxFbmVteTtcclxuICAgICAgICAgICAgICAgICAgICBncmF2aXR5SW5kZXggPSAobGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5SW5kZXggfHwgbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5SW5kZXggPT09IDApID8gbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5SW5kZXggOiBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGgucm91bmQobGV2ZWxJbmZvcm1hdGlvbi5ob3Jpem9udGFsU3BlZWQpID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmhvcml6b250YWxTcGVlZCA+IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFTZWNvbmRzICUgMiA9PT0gMCAmJiB0YXJnZXRPYmplY3QuZ3JvdW5kVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5ob3Jpem9udGFsU3BlZWQgLT0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLnhQb3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5yb3VuZChsZXZlbEluZm9ybWF0aW9uLmhvcml6b250YWxTcGVlZCkgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb24uaG9yaXpvbnRhbFNwZWVkIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYVNlY29uZHMgJSAyID09PSAwICYmIHRhcmdldE9iamVjdC5ncm91bmRUb3VjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmhvcml6b250YWxTcGVlZCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXIueFBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJhY2tncm91bmRNb3ZlRHVyaW5nTW92ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdW1wSW1wdWxzOiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmp1bXBJbXB1bHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4UG9zOiBncm91bmRQbGF5ZXIueFBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0T2JqZWN0Lmdyb3VuZFRvdWNoICYmICFncm91bmRQbGF5ZXIub25FbGV2YXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzICE9IGdyYXZpdHlJbmRleCAmJiBleHRyYVNlY29uZHMgJSAyID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZ3JvdW5kUGxheWVyLm9uRWxldmF0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgKz0gKGdyYXZpdHlJbmRleCAqIDAuMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzID0gKGdyb3VuZFBsYXllci5vbkVsZXZhdG9yU3BlZWQpID8gZ3JvdW5kUGxheWVyLm9uRWxldmF0b3JTcGVlZCArIGxldmVsSW5mb3JtYXRpb24uZ3Jhdml0eSArIDAuNlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHkgLyAyICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91bmRQbGF5ZXIubGVmdFdhbGxUb3VjaCB8fCBncm91bmRQbGF5ZXIucmlnaHRXYWxsVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5ob3Jpem9udGFsU3BlZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXIueFBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91bmRQbGF5ZXIuY2VpbGluZ1RvdWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb24uanVtcEltcHVscyA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPiBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHkgKiAzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPSBncmF2aXR5SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxldmVsSW5mb3JtYXRpb24uanVtcEltcHVscyAqIC0xID4gbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5ICogMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzID0gZ3Jhdml0eUluZGV4ICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIG1hcE9iamVjdHNfMSA9IG1hcE9iamVjdHM7IF9pIDwgbWFwT2JqZWN0c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gbWFwT2JqZWN0c18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS55IC09IChsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMpID8gbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS54IC09IChsZXZlbEluZm9ybWF0aW9uLmhvcml6b250YWxTcGVlZCkgPyBsZXZlbEluZm9ybWF0aW9uLmhvcml6b250YWxTcGVlZCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllclVuaXRNb2R1bGVfMS5iYWNrVG9UaGVNYXBBZ2Fpbih7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyOiBncm91bmRQbGF5ZXIsIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllci5vblN0YWlycyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLm1hcEdyYXZpdHlJbml0ID0gbWFwR3Jhdml0eUluaXQ7XHJcbi8qPT09PT09PT09PT1cclxuXHJcbk1ldGhvZCB0byBkZXRlY3QgY29saXNpb24gYmV0d2VhbiBwbGF5ZXIgYW5kIE5QQ1xyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gbnBjQ29sbGlzaW9uRGV0ZWN0KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgZW5lbXkgPSBfYS5lbmVteTtcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgdmFyIHgyID0gZW5lbXkueCArIGVuZW15LndpZHRoO1xyXG4gICAgdmFyIHkyID0gZW5lbXkueSArIGVuZW15LmhlaWdodDtcclxuICAgIHZhciB4MSA9IGdyb3VuZFBsYXllci54ICsgZ3JvdW5kUGxheWVyLndpZHRoO1xyXG4gICAgdmFyIHkxID0gZ3JvdW5kUGxheWVyLnkgKyBncm91bmRQbGF5ZXIuaGVpZ2h0O1xyXG4gICAgdmFyIHggPSB4MiAtIHgxO1xyXG4gICAgdmFyIHkgPSB5MiAtIHkxO1xyXG4gICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpIC0gKGVuZW15LmhlaWdodCAvIDIgKyBncm91bmRQbGF5ZXIuaGVpZ2h0IC8gMik7XHJcbiAgICBpZiAoZGlzdGFuY2UgPCAwKSB7XHJcbiAgICAgICAgZW5lbXkuaXNSdW4gPSBmYWxzZTtcclxuICAgICAgICBkeW5hbWljRGlhbG9nXzEudXNlT2JqZWN0KHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBwbGF5ZXI6IGdyb3VuZFBsYXllciwgaXRlbTogZW5lbXkgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5ucGNDb2xsaXNpb25EZXRlY3QgPSBucGNDb2xsaXNpb25EZXRlY3Q7XHJcbmZ1bmN0aW9uIGNvbXB1dGVyc0RpYWxvZyhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGFsbEJsb2NrcyA9IF9hLmFsbEJsb2NrcztcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgdmFyIG5lYXJlc3RCbG9ja3MgPSBhbGxCbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgIGlmICgoTWF0aC5tYXgoYmxvY2sueCwgZ3JvdW5kUGxheWVyLngpIC0gTWF0aC5taW4oYmxvY2sueCwgZ3JvdW5kUGxheWVyLngpKSA8PSAyMDAgJiZcclxuICAgICAgICAgICAgKE1hdGgubWF4KGJsb2NrLnksIGdyb3VuZFBsYXllci55KSAtIE1hdGgubWluKGJsb2NrLnksIGdyb3VuZFBsYXllci55KSA8PSAyMDApKVxyXG4gICAgICAgICAgICByZXR1cm4gYmxvY2s7XHJcbiAgICB9KTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmVhcmVzdEJsb2Nrc18xID0gbmVhcmVzdEJsb2NrczsgX2kgPCBuZWFyZXN0QmxvY2tzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGJsb2NrID0gbmVhcmVzdEJsb2Nrc18xW19pXTtcclxuICAgICAgICBpZiAoIWJsb2NrLmRldGFpbHMpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoYmxvY2suZGV0YWlscy50eXBlID09PSAncmVhZF90ZXJtaW5hbCcpIHtcclxuICAgICAgICAgICAgbnBjQ29sbGlzaW9uRGV0ZWN0KHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBlbmVteTogYmxvY2sgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuY29tcHV0ZXJzRGlhbG9nID0gY29tcHV0ZXJzRGlhbG9nO1xyXG4vKj09PT09PT09PT09XHJcblxyXG5NYWluIG1ldGhvZCB0byBkZXRlY3QgY29sbGlkZSBhbmQgc3RvcCBvZiBibG9ja1xyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gYmxvY2tDb2xsaXNpb24oX2EpIHtcclxuICAgIHZhciBvYmplY3RzVG9Db2xsaWRlID0gX2Eub2JqZWN0c1RvQ29sbGlkZSwgdGFyZ2V0T2JqZWN0ID0gX2EudGFyZ2V0T2JqZWN0LCBvYmplY3RJbnRlcnNlY3Rpb25EZXRlY3QgPSBfYS5vYmplY3RJbnRlcnNlY3Rpb25EZXRlY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGV4cGxvc2lvbkZpcmUgPSBfYS5leHBsb3Npb25GaXJlLCBjb25zdHJ1Y3RvcnMgPSBfYS5jb25zdHJ1Y3RvcnM7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZsb29yQ29sbGlzaW9uLCBjdXJyZW50QWN0aXZlQmxvY2ssIG5lYXJNYXBPYmplY3RzLCBfaSwgbmVhck1hcE9iamVjdHNfMSwgaXRlbSwgY29sbGlzaW9uO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgaWYgKCFvYmplY3RzVG9Db2xsaWRlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgZmxvb3JDb2xsaXNpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGFyZ2V0T2JqZWN0Lmdyb3VuZFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRhcmdldE9iamVjdC5yaWdodFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0YXJnZXRPYmplY3QubGVmdFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0YXJnZXRPYmplY3QuY2VpbGluZ1RvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRhcmdldE9iamVjdC5vblN0YWlycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0YXJnZXRPYmplY3QuY3VycmVudFdhbGxCbG9jayA9IG51bGw7XHJcbiAgICAgICAgICAgIHRhcmdldE9iamVjdC5vbkVsZXZhdG9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG5lYXJNYXBPYmplY3RzID0gb2JqZWN0c1RvQ29sbGlkZS5maWx0ZXIoZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChNYXRoLm1heCh0YXJnZXRPYmplY3QueCwgb2JqZWN0LngpIC0gTWF0aC5taW4odGFyZ2V0T2JqZWN0LngsIG9iamVjdC54KSkgPD0gMjAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKE1hdGgubWF4KHRhcmdldE9iamVjdC55LCB0YXJnZXRPYmplY3QueSkgLSBNYXRoLm1pbih0YXJnZXRPYmplY3QueSwgb2JqZWN0LnkpKSA8PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9yIChfaSA9IDAsIG5lYXJNYXBPYmplY3RzXzEgPSBuZWFyTWFwT2JqZWN0czsgX2kgPCBuZWFyTWFwT2JqZWN0c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgaXRlbSA9IG5lYXJNYXBPYmplY3RzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtIHx8IGl0ZW0ueCA+IHdpbmRvdy5pbm5lcldpZHRoICsgMjAwIHx8IGl0ZW0ueCA8IChpdGVtLndpZHRoICogLTEpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS55ID4gd2luZG93LmlubmVySGVpZ2h0ICsgMjAwIHx8IGl0ZW0ueSA8ICgyMDAgKiAtMSkpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24gPSBvYmplY3RJbnRlcnNlY3Rpb25EZXRlY3QoeyBvYmplY3Q6IGl0ZW0sIHRhcmdldDogdGFyZ2V0T2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmRldGFpbHMuY29sbGlzaW9uIHx8IGl0ZW0uZGV0YWlscy50eXBlID09PSAnZG9vcicgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kZXRhaWxzLnR5cGUgPT09ICdsZWFkZXInIHx8IGl0ZW0uZGV0YWlscy50eXBlID09PSBcImhlYWx0aFwiICYmIGl0ZW0uZGV0YWlscy5kaXNwbGF5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGV0YWlscy50eXBlID09PSBcImJsdWVfY2FyZFwiICYmIGl0ZW0uZGV0YWlscy5kaXNwbGF5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGV0YWlscy50eXBlID09PSBcImdyZWVuX2NhcmRcIiAmJiBpdGVtLmRldGFpbHMuZGlzcGxheSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRldGFpbHMudHlwZSA9PT0gXCJ5ZWxsb3dfY2FyZFwiICYmIGl0ZW0uZGV0YWlscy5kaXNwbGF5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGV0YWlscy50eXBlID09PSBcInJlZF9jYXJkXCIgJiYgaXRlbS5kZXRhaWxzLmRpc3BsYXkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kZXRhaWxzLnR5cGUgPT09IFwibGFwdG9wX3dpdGhfZGF0YVwiICYmIGl0ZW0uZGV0YWlscy5kaXNwbGF5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGV0YWlscy50eXBlID09PSBcInNjZW5hcmlvX29iamVjdFwiICYmIGl0ZW0uZGV0YWlscy5kaXNwbGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yQ29sbGlzaW9uID0gZmluZFBvaW50T2ZDb2xsaXNpb24uY2FsbCh0YXJnZXRPYmplY3QsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGFyZ2V0T2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwbG9zaW9uRmlyZTogZXhwbG9zaW9uRmlyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0T2JqZWN0Lm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRPYmplY3Qub2JqZWN0T3duZXIgIT0gXCJncm91bmROUENcIiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRldGFpbHMudHlwZSAhPSAnbnBjX3NwYXduZXInICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGV0YWlscy50eXBlICE9ICdyZWFkX3Rlcm1pbmFsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QWN0aXZlQmxvY2sgPSBkeW5hbWljRGlhbG9nXzEudXNlT2JqZWN0KHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBwbGF5ZXI6IHRhcmdldE9iamVjdCwgaXRlbTogaXRlbSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVW5pdE1vZHVsZV8xLmdyb3VuZFBsYXllckNoZWNrcG9pbnRBY3RpdmF0ZSh7IGJsb2NrOiBpdGVtLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuYmxvY2tDb2xsaXNpb24gPSBibG9ja0NvbGxpc2lvbjtcclxuZnVuY3Rpb24gZmluZFBvaW50T2ZDb2xsaXNpb24oX2EpIHtcclxuICAgIHZhciBvYmplY3QgPSBfYS5vYmplY3QsIHRhcmdldCA9IF9hLnRhcmdldCwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgZXhwbG9zaW9uRmlyZSA9IF9hLmV4cGxvc2lvbkZpcmUsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbW92ZVN0b3BTdGF0ZSwgbGV2ZWxJbmZvcm1hdGlvbiwgZ3JvdW5kUGxheWVyLCBibG9ja1JlbGF0aXZlWFBvcywgYmxvY2tSZWxhdGl2ZVlQb3MsIHRhcmdldFgsIHRhcmdldFksIHgyLCB5MiwgeDEsIHkxLCB4LCB5LCBmbG9vckNvbGxpc2lvbiwgZGlzdGFuY2UsIGlzV2FsbCwgaXNCb3R0b21XYWxsLCBjb2xsaXNpb24sIGdyYXBwbGVPYmplY3Q7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBtb3ZlU3RvcFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbiA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGE7XHJcbiAgICAgICAgICAgIGdyb3VuZFBsYXllciA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5ncm91bmRQbGF5ZXJDaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgIGJsb2NrUmVsYXRpdmVYUG9zID0gKCh0YXJnZXQuYmxvY2tSZWxhdGl2ZVhQb3MpID8gcGFyc2VJbnQodGFyZ2V0LmJsb2NrUmVsYXRpdmVYUG9zKSA6IDApO1xyXG4gICAgICAgICAgICBibG9ja1JlbGF0aXZlWVBvcyA9ICgodGFyZ2V0LmJsb2NrUmVsYXRpdmVZUG9zKSA/IHBhcnNlSW50KHRhcmdldC5ibG9ja1JlbGF0aXZlWVBvcykgOiAwKTtcclxuICAgICAgICAgICAgdGFyZ2V0WCA9IHRhcmdldC54ICsgYmxvY2tSZWxhdGl2ZVhQb3M7XHJcbiAgICAgICAgICAgIHRhcmdldFkgPSB0YXJnZXQueSArIGJsb2NrUmVsYXRpdmVZUG9zO1xyXG4gICAgICAgICAgICB4MiA9IHRhcmdldFggKyB0YXJnZXQud2lkdGg7XHJcbiAgICAgICAgICAgIHkyID0gdGFyZ2V0WSArIHRhcmdldC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHgxID0gdGhpcy54ICsgKHRoaXMub2JqZWN0T3duZXIgIT0gXCJncm91bmRFbmVteVwiICYmIHRoaXMub2JqZWN0T3duZXIgIT0gXCJncm91bmROUENcIikgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgIHkxID0gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHggPSB4MiAtIHgxO1xyXG4gICAgICAgICAgICB5ID0geTIgLSB5MTtcclxuICAgICAgICAgICAgZmxvb3JDb2xsaXNpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSkgLSAodGhpcy5oZWlnaHQgLyAyICsgdGFyZ2V0LmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBpZiAoIWRpc3RhbmNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgaXNXYWxsID0gd2FsbEZpbmRlcih7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY3VycmVudEJsb2NrOiB0YXJnZXQgfSk7XHJcbiAgICAgICAgICAgIGlzQm90dG9tV2FsbCA9IHdhbGxCb3R0b21GaW5kZXIoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGN1cnJlbnRCbG9jazogdGFyZ2V0IH0pO1xyXG4gICAgICAgICAgICBjb2xsaXNpb24gPSAoTWF0aC5zaWduKHgpIDwgMCB8fCBNYXRoLnNpZ24oeCkgPCAwKSA/IGZhbHNlIDogXCJjb2xsaXNpb25cIjtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgPT09ICdlbGV2YXRvcicgJiYgdGhpcy5vYmplY3RPd25lciAhPSBcImdyb3VuZEVuZW15XCIgJiYgdGhpcy5vYmplY3RPd25lciAhPSBcImdyb3VuZE5QQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRWxldmF0b3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLm1vdmVEaXJlY3Rpb24gPT09IFwidmVydGljYWxcIilcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID0gXCJkb3duXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3JhcHBsZU9iamVjdCA9IGR5bmFtaWNMZXZlbEdyYXBwbGVPYmplY3RzKHtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllcjogdGhpcyxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgZXhwbG9zaW9uRmlyZTogZXhwbG9zaW9uRmlyZSwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChncmFwcGxlT2JqZWN0KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgPT09IFwic3RhaXJzLWxlZnRcIiB8fCB0YXJnZXQuZGV0YWlscy50eXBlID09PSBcInN0YWlycy1yaWdodFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vYmplY3RPd25lciAhPSBcImdyb3VuZFBsYXllclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xLnN0YWlyc01vdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb246IGxldmVsSW5mb3JtYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWlyczogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuaXNSdW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzSnVtcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuanVtcEltcHVscyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmRFbmVteVwiIHx8IHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kTlBDXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnggPCAwIHx8IHRoaXMueSA8IDAgfHwgdGhpcy54ID4gd2luZG93LmlubmVyV2lkdGggfHwgdGhpcy55ID4gd2luZG93LmlubmVySGVpZ2h0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLm9uU3RhaXJzICYmIHRoaXMub25TdGFpcnMgJiYgZ3JvdW5kUGxheWVyLmlzUnVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNKdW1wID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5qdW1wSW1wdWxzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VuZFRvdWNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGR5bmFtaWNMZXZlbEludGVyYWN0aXZlRWxlbWVudHNfMS5kZWFkbHlCbG9ja3MuY2FsbCh0aGlzLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY3VyZW50QmxvY2s6IHRhcmdldCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMgfSk7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQuZGV0YWlscy5kZWFkbHkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICBncm91bmRCbG9ja0NvbGxpc2lvbi5jYWxsKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0WDogdGFyZ2V0WCxcclxuICAgICAgICAgICAgICAgIHRhcmdldFk6IHRhcmdldFksXHJcbiAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uOiBsZXZlbEluZm9ybWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uOiBjb2xsaXNpb24sXHJcbiAgICAgICAgICAgICAgICBpc1dhbGw6IGlzV2FsbCxcclxuICAgICAgICAgICAgICAgIGlzQm90dG9tV2FsbDogaXNCb3R0b21XYWxsLFxyXG4gICAgICAgICAgICAgICAgeTogeVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgPT09IFwibGVhZGVyXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25MZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIgJiYgdGFyZ2V0LmRldGFpbHMudHlwZSA9PT0gXCJsZWFkZXJcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWlsaW5nVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAgIGxlZnRSaWdodEJsb2NrSW50ZXJhY3QuY2FsbCh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHRhcmdldFg6IHRhcmdldFgsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRZOiB0YXJnZXRZLFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbjogbGV2ZWxJbmZvcm1hdGlvbixcclxuICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICB5OiB5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAgICAgaWYgKHRhcmdldFkgKyB0YXJnZXQuaGVpZ2h0ID4gdGhpcy55ICYmIHRoaXMueSArIHRoaXMuaGVpZ2h0ID4gdGFyZ2V0WSArIHRhcmdldC5oZWlnaHQgJiZcclxuICAgICAgICAgICAgICAgICFpc0JvdHRvbVdhbGwgJiYgY29sbGlzaW9uICYmIHRhcmdldC5kZXRhaWxzLnR5cGUgIT0gJ2VsZXZhdG9yJyAmJiB0YXJnZXQuZGV0YWlscy50eXBlICE9IFwic3RhaXJzLXJpZ2h0XCIgJiYgdGFyZ2V0LmRldGFpbHMudHlwZSAhPSBcInN0YWlycy1sZWZ0XCIgJiYgIXRoaXMuZ3JvdW5kVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1RvcCBzaWRlIG9mIGJsb2NrJywgdGFyZ2V0KVxyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgPT09ICdlbGV2YXRvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jZWlsaW5nVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZWlsaW5nVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmxvb3JDb2xsaXNpb25dO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyo9PT09PT09PT09PT09PT1cclxuXHJcbmJsb2NrIHNpZGUgY29sbGlzaW9uIGRldGVjdFxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gbGVmdFJpZ2h0QmxvY2tJbnRlcmFjdChfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHRhcmdldCA9IF9hLnRhcmdldCwgdGFyZ2V0WCA9IF9hLnRhcmdldFgsIHRhcmdldFkgPSBfYS50YXJnZXRZLCBsZXZlbEluZm9ybWF0aW9uID0gX2EubGV2ZWxJbmZvcm1hdGlvbiwgeCA9IF9hLngsIHkgPSBfYS55O1xyXG4gICAgaWYgKHRoaXMucmlnaHRXYWxsVG91Y2ggfHwgdGhpcy5sZWZ0V2FsbFRvdWNoKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBzdGVhcnNTdGF0ZVByb3BzID0ge1xyXG4gICAgICAgIHN0YXRlOiBmYWxzZVxyXG4gICAgfTtcclxuICAgIHZhciBtb3ZlU3RvcFN0YXRlID0gdHJ1ZTtcclxuICAgIG1vdmVTdG9wU3RhdGUgPSByaWdodFNpZGVCbG9ja0NvbGxpc2lvbi5jYWxsKHRoaXMsIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgdGFyZ2V0WDogdGFyZ2V0WCxcclxuICAgICAgICB0YXJnZXRZOiB0YXJnZXRZLFxyXG4gICAgICAgIGxldmVsSW5mb3JtYXRpb246IGxldmVsSW5mb3JtYXRpb24sXHJcbiAgICAgICAgeDogeCxcclxuICAgICAgICB5OiB5XHJcbiAgICB9KTtcclxuICAgIGlmICghbW92ZVN0b3BTdGF0ZSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBtb3ZlU3RvcFN0YXRlID0gbGVmdFNpZGVCbG9ja0NvbGxpc2lvbi5jYWxsKHRoaXMsIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgdGFyZ2V0WDogdGFyZ2V0WCxcclxuICAgICAgICB0YXJnZXRZOiB0YXJnZXRZLFxyXG4gICAgICAgIGxldmVsSW5mb3JtYXRpb246IGxldmVsSW5mb3JtYXRpb24sXHJcbiAgICAgICAgeDogeCxcclxuICAgICAgICB5OiB5XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBncm91bmRCbG9ja0NvbGxpc2lvbihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHRhcmdldCA9IF9hLnRhcmdldCwgdGFyZ2V0WCA9IF9hLnRhcmdldFgsIHRhcmdldFkgPSBfYS50YXJnZXRZLCBsZXZlbEluZm9ybWF0aW9uID0gX2EubGV2ZWxJbmZvcm1hdGlvbiwgY29sbGlzaW9uID0gX2EuY29sbGlzaW9uLCBpc1dhbGwgPSBfYS5pc1dhbGwsIGlzQm90dG9tV2FsbCA9IF9hLmlzQm90dG9tV2FsbCwgeSA9IF9hLnk7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBsYXllck1lZWRsZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIgJiYgaXNXYWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJNZWVkbGUgPSB0aGlzLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnkgKyB0aGlzLmhlaWdodCA+IHRhcmdldFkgJiYgdGhpcy54ICsgcGxheWVyTWVlZGxlIC8gMiA+IHRhcmdldFggJiZcclxuICAgICAgICAgICAgICAgICAgICAoKHRoaXMueCArIHRoaXMud2lkdGgpIC0gcGxheWVyTWVlZGxlIC8gMikgPCB0YXJnZXRYICsgdGFyZ2V0LndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMueSArIHRoaXMuaGVpZ2h0IDwgdGFyZ2V0WSArIHRhcmdldC5oZWlnaHQgLyAyICYmIGNvbGxpc2lvbiAmJiAhaXNXYWxsICYmXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQuZGV0YWlscy50eXBlICE9IFwic3RhaXJzLWxlZnRcIiAmJiB0YXJnZXQuZGV0YWlscy50eXBlICE9IFwic3RhaXJzLXJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuZGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuZGV0YWlscy50eXBlID09PSAnZWxldmF0b3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FbGV2YXRvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNMZXZlbEludGVyYWN0aXZlRWxlbWVudHNfMS5lbGV2YXRvclBsYXllck1vdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbjogbGV2ZWxJbmZvcm1hdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdG9yOiB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vYmplY3RPd25lciAhPSBcImdyb3VuZEVuZW15XCIgJiYgdGhpcy5vYmplY3RPd25lciAhPSBcImdyb3VuZE5QQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPSBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHlJbmRleDsgLy9sZXZlbEluZm9ybWF0aW9uLmdyYXZpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kRW5lbXlcIiB8fCB0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZE5QQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy55ICsgdGhpcy5oZWlnaHQgLSA1ID4gdGFyZ2V0WSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSAtPSAwLjAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRHcm91bmRCbG9jayA9IHRhcmdldDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdHJ1ZV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiByaWdodFNpZGVCbG9ja0NvbGxpc2lvbihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHRhcmdldCA9IF9hLnRhcmdldCwgdGFyZ2V0WCA9IF9hLnRhcmdldFgsIHRhcmdldFkgPSBfYS50YXJnZXRZLCBsZXZlbEluZm9ybWF0aW9uID0gX2EubGV2ZWxJbmZvcm1hdGlvbiwgeCA9IF9hLngsIHkgPSBfYS55LCBzdGVhcnNTdGF0ZVByb3BzID0gX2Euc3RlYXJzU3RhdGVQcm9wcztcclxuICAgIGlmICh0aGlzLnggPCB0YXJnZXRYICYmIHRoaXMueCArIHRoaXMud2lkdGggPiB0YXJnZXRYICYmXHJcbiAgICAgICAgdGhpcy55ICsgdGhpcy5oZWlnaHQgPiB0YXJnZXRZICsgNSAmJiB0aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcpIHtcclxuICAgICAgICBpZiAodGhpcy55ICsgdGhpcy5oZWlnaHQgPj0gdGFyZ2V0WSAtIDIwICYmIHRhcmdldFkgLSAyMCA+IHRoaXMueSAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIgJiYgdGFyZ2V0LmhlaWdodCA8IDIwIHx8XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggJiYgdGhpcy55ICsgdGhpcy5oZWlnaHQgPj0gdGFyZ2V0WSAtIDIwICYmIHRhcmdldFkgLSAyMCA+IHRoaXMueSAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5yaWdodFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPSBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHkgKiAtMTtcclxuICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0YXJnZXQuZGV0YWlscy50eXBlID09PSBcInN0YWlycy1sZWZ0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5yaWdodFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VuZFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGR5bmFtaWNMZXZlbEludGVyYWN0aXZlRWxlbWVudHNfMS5zdGFpcnNNb3ZlKHtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb246IGxldmVsSW5mb3JtYXRpb24sXHJcbiAgICAgICAgICAgICAgICBzdGFpcnM6IHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHBsYXllcjogdGhpcyxcclxuICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICB5OiB5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0YXJnZXQuZGV0YWlscykge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmRldGFpbHMudHlwZSA9PT0gJ2VsZXZhdG9yJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRXYWxsVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmRFbmVteVwiIHx8IHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kTlBDXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuZGV0YWlscy50eXBlICE9IFwibGVhZGVyXCIgJiYgdGFyZ2V0LmRldGFpbHMuY29sbGlzaW9uICYmIHRoaXMueSA+IHRhcmdldFkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHRTaWRlID0gKHRoaXMueCArIHRoaXMud2lkdGgpIC0gdGFyZ2V0WDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnggLT0gcmlnaHRTaWRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0LmRldGFpbHMuY29sbGlzaW9uICYmIHRhcmdldC5kZXRhaWxzLnR5cGUgPT09ICdkb29yJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50V2FsbEJsb2NrID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1JpZ2h0IHNpZGUgb2YgYmxvY2sgViEnKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGxlZnRTaWRlQmxvY2tDb2xsaXNpb24oX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCB0YXJnZXQgPSBfYS50YXJnZXQsIHRhcmdldFggPSBfYS50YXJnZXRYLCB0YXJnZXRZID0gX2EudGFyZ2V0WSwgbGV2ZWxJbmZvcm1hdGlvbiA9IF9hLmxldmVsSW5mb3JtYXRpb24sIHggPSBfYS54LCB5ID0gX2EueSwgc3RlYXJzU3RhdGVQcm9wcyA9IF9hLnN0ZWFyc1N0YXRlUHJvcHM7XHJcbiAgICBpZiAodGhpcy54IDwgdGFyZ2V0WCArIHRhcmdldC53aWR0aCAmJiB0aGlzLnggKyB0aGlzLndpZHRoID4gdGFyZ2V0WCAmJiB0aGlzLnggPiB0YXJnZXRYICYmXHJcbiAgICAgICAgdGhpcy55ICsgdGhpcy5oZWlnaHQgPiB0YXJnZXRZICsgNSAmJlxyXG4gICAgICAgIHRoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgdGhpcy5sZWZ0V2FsbFRvdWNoID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy55ICsgdGhpcy5oZWlnaHQgPj0gdGFyZ2V0WSAtIDIwICYmIHRhcmdldFkgLSAyMCA+IHRoaXMueSAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIgJiYgdGFyZ2V0LmhlaWdodCA8IDIwIHx8XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggJiYgdGhpcy55ICsgdGhpcy5oZWlnaHQgPj0gdGFyZ2V0WSAtIDIwICYmIHRhcmdldFkgLSAyMCA+IHRoaXMueSAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0V2FsbFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb24uanVtcEltcHVscyA9IGxldmVsSW5mb3JtYXRpb24uZ3Jhdml0eSAqIC0xO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VuZFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgPT09IFwic3RhaXJzLXJpZ2h0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0V2FsbFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xLnN0YWlyc01vdmUoe1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbjogbGV2ZWxJbmZvcm1hdGlvbixcclxuICAgICAgICAgICAgICAgIHN0YWlyczogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgcGxheWVyOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgeDogeCxcclxuICAgICAgICAgICAgICAgIHk6IHlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGFyZ2V0LmRldGFpbHMpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgPT09ICdlbGV2YXRvcicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZEVuZW15XCIgfHwgdGhpcy5vYmplY3RPd25lciA9PT0gXCJncm91bmROUENcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5kZXRhaWxzLnR5cGUgIT0gXCJsZWFkZXJcIiAmJiB0YXJnZXQuZGV0YWlscy5jb2xsaXNpb24gJiYgdGhpcy55ID4gdGFyZ2V0WSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0U2lkZSA9ICh0YXJnZXRYICsgdGFyZ2V0LndpZHRoKSAtIHRoaXMueDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnggKz0gbGVmdFNpZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sZWZ0V2FsbFRvdWNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCF0YXJnZXQuZGV0YWlscy5jb2xsaXNpb24gJiYgdGFyZ2V0LmRldGFpbHMudHlwZSA9PT0gJ2Rvb3InKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRXYWxsVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFdhbGxCbG9jayA9IHRhcmdldDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdMZWZ0IHNpZGUgb2YgYmxvY2sgVicpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLyo9PT09PT09PT09PT09PT1cclxuXHJcbmJsb2NrIHNpZGUgY29sbGlzaW9uIGRldGVjdCBlbmRcclxuXHJcbj09PT09PT09PT09PT09ICovXHJcbi8qPT09PT09PT09PT1cclxuXHJcbk1haW4gbWV0aG9kIHRvIGRldGVjdCBhbmQgbGF1bmNoIHNjcmlwdCBkdXJpbmcgdGFrZSBncmFwcGxlIG9iamVjdHNcclxuXHJcbj09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIGR5bmFtaWNMZXZlbEdyYXBwbGVPYmplY3RzKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgZ3JvdW5kUGxheWVyID0gX2EuZ3JvdW5kUGxheWVyLCB0YXJnZXQgPSBfYS50YXJnZXQsIGV4cGxvc2lvbkZpcmUgPSBfYS5leHBsb3Npb25GaXJlLCBjb25zdHJ1Y3RvcnMgPSBfYS5jb25zdHJ1Y3RvcnM7XHJcbiAgICB2YXIgbGV2ZWxEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2V0TGV2ZWxVc2VyRGF0YSgpO1xyXG4gICAgdmFyIG1haW5QbGF5ZXJEYXRhID0gbGV2ZWxEYXRhLnNvdXJjZS5wbGF5ZXJPYmplY3Q7XHJcbiAgICB2YXIgcHJlcGFyZVRhcmdldCA9IG51bGw7XHJcbiAgICBpZiAoZ3JvdW5kUGxheWVyLm9iamVjdE93bmVyID09PSBcImdyb3VuZFBsYXllclwiICYmIHRhcmdldC5kZXRhaWxzLnR5cGUgPT09IFwiaGVhbHRoXCIgJiYgdGFyZ2V0LmRldGFpbHMuZGlzcGxheSkge1xyXG4gICAgICAgIHRhcmdldC5kZXRhaWxzLmRpc3BsYXkgPSBmYWxzZTtcclxuICAgICAgICB0YXJnZXQuZGV0YWlscy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBtYWluUGxheWVyRGF0YS5udW1iZXJPZmxpZmUgKz0gMTtcclxuICAgICAgICBwcmVwYXJlVGFyZ2V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xyXG4gICAgICAgICAgICBvYmplY3RPd25lcjogJ2dyb3VuZFBsYXllcicsXHJcbiAgICAgICAgICAgIGV4cGxvc2lvbjogdGFyZ2V0LmRldGFpbHMuZXhwbG9zaW9uQW5pbWF0aW9uLFxyXG4gICAgICAgICAgICB3aWR0aDogMzAsXHJcbiAgICAgICAgICAgIGhlaWdodDogMzAsXHJcbiAgICAgICAgICAgIHg6IHRhcmdldC54LFxyXG4gICAgICAgICAgICB5OiB0YXJnZXQueSxcclxuICAgICAgICAgICAgc3BlZWQ6IDAsXHJcbiAgICAgICAgICAgIHR5cGU6IHRhcmdldC5kZXRhaWxzLnR5cGVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGdyb3VuZFBsYXllci5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0YXJnZXQuZGV0YWlscy50eXBlID09PSBcImJsdWVfY2FyZFwiICYmIHRhcmdldC5kZXRhaWxzLmRpc3BsYXkgfHxcclxuICAgICAgICBncm91bmRQbGF5ZXIub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kUGxheWVyXCIgJiYgdGFyZ2V0LmRldGFpbHMudHlwZSA9PT0gXCJncmVlbl9jYXJkXCIgJiYgdGFyZ2V0LmRldGFpbHMuZGlzcGxheSB8fFxyXG4gICAgICAgIGdyb3VuZFBsYXllci5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0YXJnZXQuZGV0YWlscy50eXBlID09PSBcInllbGxvd19jYXJkXCIgJiYgdGFyZ2V0LmRldGFpbHMuZGlzcGxheSB8fFxyXG4gICAgICAgIGdyb3VuZFBsYXllci5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0YXJnZXQuZGV0YWlscy50eXBlID09PSBcInJlZF9jYXJkXCIgJiYgdGFyZ2V0LmRldGFpbHMuZGlzcGxheSB8fFxyXG4gICAgICAgIGdyb3VuZFBsYXllci5vYmplY3RPd25lciA9PT0gXCJncm91bmRQbGF5ZXJcIiAmJiB0YXJnZXQuZGV0YWlscy50eXBlID09PSBcImxhcHRvcF93aXRoX2RhdGFcIiAmJiB0YXJnZXQuZGV0YWlscy5kaXNwbGF5IHx8XHJcbiAgICAgICAgZ3JvdW5kUGxheWVyLm9iamVjdE93bmVyID09PSBcImdyb3VuZFBsYXllclwiICYmIHRhcmdldC5kZXRhaWxzLnR5cGUgPT09IFwic2NlbmFyaW9fb2JqZWN0XCIgJiYgdGFyZ2V0LmRldGFpbHMuZGlzcGxheSkge1xyXG4gICAgICAgIGlmICh0YXJnZXQuZGV0YWlscy5zY3JpcHRzKSB7XHJcbiAgICAgICAgICAgIGR5bmFtaWNMZXZlbEVuZW15TW9kdWxlc18xLnJlc3Bhd25FbmVteSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMsIGNvc3R1bWVCbG9ja3M6IG51bGwgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGR5bmFtaWNEaWFsb2dfMS5zYXZlT2JqZWN0VG9CYWNrUGFjayh7XHJcbiAgICAgICAgICAgIGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgICAgICBkYXRhOiB0YXJnZXQuZGV0YWlscy50eXBlLFxyXG4gICAgICAgICAgICBwcmV2aWV3UGljdHVyZTogcHJvY2Vzcy5lbnYuSE9TVCArIHRhcmdldC5kZXRhaWxzLnByZXZpZXdUZXh0dXJlLFxyXG4gICAgICAgICAgICBuYW1lOiAodGFyZ2V0LmRldGFpbHMub2JqZWN0TmFtZSkgPyB0YXJnZXQuZGV0YWlscy5vYmplY3ROYW1lIDogbnVsbFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRhcmdldC5kZXRhaWxzLmRpc3BsYXkgPSBmYWxzZTtcclxuICAgICAgICB0YXJnZXQuZGV0YWlscy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBwcmVwYXJlVGFyZ2V0ID0gT2JqZWN0LmFzc2lnbih7fSwge1xyXG4gICAgICAgICAgICBvYmplY3RPd25lcjogJ2dyb3VuZFBsYXllcicsXHJcbiAgICAgICAgICAgIGV4cGxvc2lvbjogdGFyZ2V0LmRldGFpbHMuZXhwbG9zaW9uQW5pbWF0aW9uLFxyXG4gICAgICAgICAgICB3aWR0aDogMzAsXHJcbiAgICAgICAgICAgIGhlaWdodDogMzAsXHJcbiAgICAgICAgICAgIHg6IHRhcmdldC54LFxyXG4gICAgICAgICAgICB5OiB0YXJnZXQueSxcclxuICAgICAgICAgICAgc3BlZWQ6IDAsXHJcbiAgICAgICAgICAgIHR5cGU6IHRhcmdldC5kZXRhaWxzLnR5cGVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChwcmVwYXJlVGFyZ2V0KSB7XHJcbiAgICAgICAgZXhwbG9zaW9uRmlyZSh7XHJcbiAgICAgICAgICAgIHRhcmdldERhdGE6IHByZXBhcmVUYXJnZXQsXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgaGl0T2JqZWN0OiBncm91bmRQbGF5ZXIsXHJcbiAgICAgICAgICAgIFNpZGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5TaWRlT2JqZWN0LFxyXG4gICAgICAgICAgICBleHBsb3Npb246IFwiZXhwbG9zaW9uXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuYmxvY2sgd2FsbCBkZXRlY3RvclxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gd2FsbEZpbmRlcihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGN1cnJlbnRCbG9jayA9IF9hLmN1cnJlbnRCbG9jaztcclxuICAgIHZhciBhbGxCbG9ja3MgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsTWFwQmxvY2tzO1xyXG4gICAgdmFyIGN1cnJlbnRCbG9ja0luZGV4ID0gYWxsQmxvY2tzLmluZGV4T2YoY3VycmVudEJsb2NrKTtcclxuICAgIHZhciBjbG9zZUJsb2NrcyA9IGFsbEJsb2Nrc1tjdXJyZW50QmxvY2tJbmRleCAtIDFdO1xyXG4gICAgdmFyIHVwcGVyQmxvY2tzID0gZmFsc2U7XHJcbiAgICBpZiAoY2xvc2VCbG9ja3MgJiYgY2xvc2VCbG9ja3MuZGV0YWlscy5jb2xsaXNpb24gJiYgY2xvc2VCbG9ja3Mud2lkdGggPj0gY3VycmVudEJsb2NrLndpZHRoKSB7XHJcbiAgICAgICAgdXBwZXJCbG9ja3MgPSAoY3VycmVudEJsb2NrLnkgLSBjbG9zZUJsb2Nrcy5oZWlnaHQgPT09IGNsb3NlQmxvY2tzLnkpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICh1cHBlckJsb2NrcykgPyB0cnVlIDogZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gd2FsbEJvdHRvbUZpbmRlcihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGN1cnJlbnRCbG9jayA9IF9hLmN1cnJlbnRCbG9jaztcclxuICAgIHZhciBhbGxCbG9ja3MgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsTWFwQmxvY2tzO1xyXG4gICAgdmFyIGN1cnJlbnRCbG9ja0luZGV4ID0gYWxsQmxvY2tzLmluZGV4T2YoY3VycmVudEJsb2NrKTtcclxuICAgIHZhciBjbG9zZUJsb2NrcyA9IGFsbEJsb2Nrc1tjdXJyZW50QmxvY2tJbmRleCArIDFdO1xyXG4gICAgdmFyIGJvdHRvbUJsb2NrcyA9IGZhbHNlO1xyXG4gICAgaWYgKGNsb3NlQmxvY2tzICYmIGNsb3NlQmxvY2tzLmRldGFpbHMuY29sbGlzaW9uKSB7XHJcbiAgICAgICAgYm90dG9tQmxvY2tzID0gKGN1cnJlbnRCbG9jay55ICsgY3VycmVudEJsb2NrLmhlaWdodCA9PT0gY2xvc2VCbG9ja3MueSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGJvdHRvbUJsb2NrcykgPyB0cnVlIDogZmFsc2U7XHJcbn1cclxuLyo9PT09PT09PT09PT09PT1cclxuXHJcbmJsb2NrIHdhbGwgZGV0ZWN0b3IgZW5kXHJcblxyXG49PT09PT09PT09PT09PSAqL1xyXG4vKj09PT09PT09PT09PT09PVxyXG5cclxuTW92aW5nIGFsbCBiYWNrZ3JvdW5kIG9iamVjdCBhdCBzY2VuZVxyXG5cclxuPT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gYmFja2dyb3VuZE1vdmVEdXJpbmdNb3ZlKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwganVtcEltcHVscyA9IF9hLmp1bXBJbXB1bHMsIHhQb3MgPSBfYS54UG9zLCBncm91bmRQbGF5ZXIgPSBfYS5ncm91bmRQbGF5ZXIsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHZhciBhbGxCdWxsZXRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVCdWxsZXRzO1xyXG4gICAgdmFyIGxldmVsSW5mb3JtYXRpb24gPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhO1xyXG4gICAgdmFyIGFsbEdhbWVGbHlFbmVteWVzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVFbmVtaWVzO1xyXG4gICAgdmFyIGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubWFwQmFja2dyb3VuZE9iamVjdHM7XHJcbiAgICB2YXIgYWxsR3JvdW5kR2FtZUJ1bGxldHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR3JvdW5kR2FtZUJ1bGxldHM7XHJcbiAgICB2YXIgYWxsR2FtZVNpZGVPYmplY3RzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cztcclxuICAgIHZhciBhbGxHYW1lc09iamVjdCA9IFtdLmNvbmNhdChhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzLCBhbGxHYW1lRmx5RW5lbXllcywgYWxsQnVsbGV0cywgYWxsR2FtZVNpZGVPYmplY3RzLCBhbGxHcm91bmRHYW1lQnVsbGV0cyk7XHJcbiAgICB2YXIgeFBvc0dyb3VuZCA9ICh4UG9zICYmIGdyb3VuZFBsYXllci5ncm91bmRUb3VjaCkgPyB4UG9zIDogbGV2ZWxJbmZvcm1hdGlvbi5ob3Jpem9udGFsU3BlZWQ7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGFsbEdhbWVzT2JqZWN0XzEgPSBhbGxHYW1lc09iamVjdDsgX2kgPCBhbGxHYW1lc09iamVjdF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gYWxsR2FtZXNPYmplY3RfMVtfaV07XHJcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBjb25zdHJ1Y3RvcnMuR2FtZUJhY2tncm91bmQgJiYgIWl0ZW0uYWx3YXlzTW92ZSkge1xyXG4gICAgICAgICAgICBpdGVtLnNwZWVkID0gKGdyb3VuZFBsYXllci5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID09PSAncmlnaHQnKSA/IChpdGVtLmRlZmF1bHRTcGVlZCAvIDIpIDogKGl0ZW0uZGVmYXVsdFNwZWVkIC8gMikgKiAtMTtcclxuICAgICAgICAgICAgaWYgKCFncm91bmRQbGF5ZXIubGVmdFdhbGxUb3VjaCAmJiAhZ3JvdW5kUGxheWVyLnJpZ2h0V2FsbFRvdWNoICYmIHhQb3NHcm91bmQgfHxcclxuICAgICAgICAgICAgICAgICFncm91bmRQbGF5ZXIubGVmdFdhbGxUb3VjaCAmJiAhZ3JvdW5kUGxheWVyLnJpZ2h0V2FsbFRvdWNoICYmICFncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggJiYgeFBvc0dyb3VuZClcclxuICAgICAgICAgICAgICAgIGl0ZW0ueCAtPSBpdGVtLnNwZWVkO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5zcGVlZCAhPSAwICYmICFncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggJiYgIWdyb3VuZFBsYXllci5jZWlsaW5nVG91Y2gpXHJcbiAgICAgICAgICAgICAgICBpdGVtLnkgLT0gaXRlbS5kZWZhdWx0U3BlZWQgKiAoanVtcEltcHVscyAvIDEwKTtcclxuICAgICAgICAgICAgaWYgKGdyb3VuZFBsYXllci5jdXJyZW50R3JvdW5kQmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChncm91bmRQbGF5ZXIuY3VycmVudEdyb3VuZEJsb2NrLmRldGFpbHMudHlwZSA9PT0gJ2VsZXZhdG9yJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGV2YXRvclNwZWVkID0gZ3JvdW5kUGxheWVyLmN1cnJlbnRHcm91bmRCbG9jay5kZXRhaWxzLnNwZWVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnNwZWVkICE9IDAgJiYgZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoICYmIGdyb3VuZFBsYXllci5vbkVsZXZhdG9yICYmICFncm91bmRQbGF5ZXIuY2VpbGluZ1RvdWNoICYmIGdyb3VuZFBsYXllci5jdXJyZW50R3JvdW5kQmxvY2suZGV0YWlscy5tb3ZlRGlyZWN0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS55IC09ICghZ3JvdW5kUGxheWVyLmN1cnJlbnRHcm91bmRCbG9jay5kZXRhaWxzLmN1cnJlbnREaXJlY3Rpb24pID8gKGl0ZW0uZGVmYXVsdFNwZWVkIC8gKGp1bXBJbXB1bHMpICogKGVsZXZhdG9yU3BlZWQgLyAxMCkpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5zcGVlZCAhPSAwICYmIGdyb3VuZFBsYXllci5ncm91bmRUb3VjaCAmJiBncm91bmRQbGF5ZXIub25FbGV2YXRvciAmJiAhZ3JvdW5kUGxheWVyLmNlaWxpbmdUb3VjaCAmJiBncm91bmRQbGF5ZXIuY3VycmVudEdyb3VuZEJsb2NrLmRldGFpbHMubW92ZURpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS54IC09ICghZ3JvdW5kUGxheWVyLmN1cnJlbnRHcm91bmRCbG9jay5kZXRhaWxzLmN1cnJlbnREaXJlY3Rpb24pID8gKGl0ZW0uZGVmYXVsdFNwZWVkIC8gKGVsZXZhdG9yU3BlZWQpKSAqIC0xIDogaXRlbS5kZWZhdWx0U3BlZWQgLyAoZWxldmF0b3JTcGVlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpdGVtIGluc3RhbmNlb2YgY29uc3RydWN0b3JzLkVuZW15T2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICghZ3JvdW5kUGxheWVyLmxlZnRXYWxsVG91Y2ggJiYgIWdyb3VuZFBsYXllci5yaWdodFdhbGxUb3VjaCAmJiB4UG9zKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnggPSAoZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcpID8gaXRlbS54IC0gbGV2ZWxJbmZvcm1hdGlvbi5ob3Jpem9udGFsU3BlZWQgOiBpdGVtLnggLSBsZXZlbEluZm9ybWF0aW9uLmhvcml6b250YWxTcGVlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXRlbS5zcGVlZCAhPSAwICYmICFncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggJiYgIWdyb3VuZFBsYXllci5ncm91bmRUb3VjaCAmJiAhZ3JvdW5kUGxheWVyLmNlaWxpbmdUb3VjaClcclxuICAgICAgICAgICAgICAgIGl0ZW0ueSArPSAoKGp1bXBJbXB1bHMgKiAwLjUwKSAqIC0xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5iYWNrZ3JvdW5kTW92ZUR1cmluZ01vdmUgPSBiYWNrZ3JvdW5kTW92ZUR1cmluZ01vdmU7XHJcbmZ1bmN0aW9uIGJhY2tncm91bmRBZGp1c3RtZW50KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgfHwgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEJhY2tncm91bmRPYmplY3RzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgYWxsR2FtZUJhY2tncm91bmRFbGVtZW50cyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5tYXBCYWNrZ3JvdW5kT2JqZWN0cztcclxuICAgIHZhciBhbGxCbG9ja3MgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsTWFwQmxvY2tzO1xyXG4gICAgdmFyIGdyb3VuZFBsYXllciA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5ncm91bmRQbGF5ZXJDaGFyYWN0ZXI7XHJcbiAgICB2YXIgbGV2ZWxJbmZvcm1hdGlvbiA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGE7XHJcbiAgICBpZiAobGV2ZWxJbmZvcm1hdGlvbi5zcGFjZSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICB2YXIgdXBwZXJPYmplY3RZTnVtYmVyID0ge1xyXG4gICAgICAgIHk6IEluZmluaXR5LFxyXG4gICAgICAgIG9iamVjdDogbnVsbFxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsQmxvY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFsbEJsb2Nrc1tpXS55IDwgdXBwZXJPYmplY3RZTnVtYmVyLnkpIHtcclxuICAgICAgICAgICAgdXBwZXJPYmplY3RZTnVtYmVyLnkgPSBhbGxCbG9ja3NbaV0ueTtcclxuICAgICAgICAgICAgdXBwZXJPYmplY3RZTnVtYmVyLm9iamVjdCA9IGFsbEJsb2Nrc1tpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgdXNlclVwcGVyV2lkdGggPSBncm91bmRQbGF5ZXIueSAtICgodXBwZXJPYmplY3RZTnVtYmVyLnkgPCBJbmZpbml0eSkgPyB1cHBlck9iamVjdFlOdW1iZXIueSA6IDApO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzXzEgPSBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzOyBfaSA8IGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMVtfaV07XHJcbiAgICAgICAgaWYgKCFiYWNrZ3JvdW5kLmRlZmF1bHRTcGVlZClcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgYmFja2dyb3VuZC55IC09IGJhY2tncm91bmQuZGVmYXVsdFNwZWVkICogKHVzZXJVcHBlcldpZHRoIC8gKGxldmVsSW5mb3JtYXRpb24uZ3Jhdml0eSAqIDIpKSAtIDEwMDsgLy8tMTAwLy8oYmFja2dyb3VuZC5kZWZhdWx0U3BlZWQvKGxldmVsSW5mb3JtYXRpb24uanVtcEltcHVscyApKVxyXG4gICAgICAgIGJhY2tncm91bmQuZGVmYXVsdFkgPSBiYWNrZ3JvdW5kLnk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5iYWNrZ3JvdW5kQWRqdXN0bWVudCA9IGJhY2tncm91bmRBZGp1c3RtZW50O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGFwcE1lbnVfMSA9IHJlcXVpcmUoXCIuLi8uLi9hcHBNZW51L2FwcE1lbnVcIik7XHJcbnZhciBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xID0gcmVxdWlyZShcIi4uLy4uL3NlcnZlci9zZXJ2ZXJSZXF1ZXN0TW9kdWxlc1wiKTtcclxudmFyIHBhZ2VzQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uLy4uL2FwcE1lbnUvcGFnZXNCdWlsZGVyXCIpO1xyXG52YXIgYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xID0gcmVxdWlyZShcIi4uLy4uL2VuZW1pZXMvYW5pbWF0aW9uSGl0Qm94TW9kdWxlc1wiKTtcclxudmFyIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9nYW1lSW52ZW50b3J5TW9kdWxlc1wiKTtcclxuZXhwb3J0cy5zaG9wSW52ZW50b3J5ID0gZ2FtZUludmVudG9yeU1vZHVsZXNfMS5zaG9wSW52ZW50b3J5O1xyXG5leHBvcnRzLnNob3dEZXNjcmlwdGlvbkFyZWEgPSBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNob3dEZXNjcmlwdGlvbkFyZWE7XHJcbnZhciBnYW1lU2hvcFNoaXB5YXJkXzEgPSByZXF1aXJlKFwiLi9nYW1lU2hvcFNoaXB5YXJkXCIpO1xyXG52YXIgZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vZW5naW5lL2dhbWVHcmFwcGxlT2JqZWN0c01vZHVsZVwiKTtcclxudmFyIHNob3BFdmVudHNNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9zaG9wRXZlbnRzL3Nob3BFdmVudHNNb2R1bGVzXCIpO1xyXG52YXIgc2hvcEFjdGl2aXR5RGV0ZWN0b3JNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9zaG9wRXZlbnRzL3Nob3BBY3Rpdml0eURldGVjdG9yTW9kdWxlc1wiKTtcclxuZnVuY3Rpb24gZW50ZXJUb1RoZVNob3BEaWFsb2coX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCB0cmFkZVByb3BlcnR5ZXMgPSBfYS50cmFkZVByb3BlcnR5ZXM7XHJcbiAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVPdmVyIHx8IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNob3BJbnZlbnRvcnkoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgc2FsZUJveExhYmVsQ2hhbmdlKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUgPSB0cnVlO1xyXG4gICAgdmFyIHNob3BVaUl0ZW1zID0gbWFpbkdhbWVPYmplY3Quc2hvcEFyZWE7XHJcbiAgICBpZiAodHJhZGVQcm9wZXJ0eWVzKVxyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0udHJhZGVQcm9wZXJ0eWVzID0gKCF0cmFkZVByb3BlcnR5ZXMuc2FsZVBlcmNlbnRhZ2UpID8gc2FsZVBlcmNlbnRhZ2UoeyB0cmFkZVByb3BlcnR5ZXM6IHRyYWRlUHJvcGVydHllcywgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pIDogdHJhZGVQcm9wZXJ0eWVzO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0udHJhZGVQcm9wZXJ0eWVzID0geyBidXlQcmljZVBlcmNlbnQ6IDEwMCwgc2FsZVBlcmNlbnRhZ2U6IDEwMCB9O1xyXG4gICAgc2hvcEFjdGl2aXR5RGV0ZWN0b3JNb2R1bGVzXzEuc2hvcFdlYXBvbnNBY3Rpdml0eSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgc2hvcEFyZWE6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhIH0pO1xyXG4gICAgc3dpdGNoU2hvcEhhbmdhcih7IHN0YXRlOiAndG8tc2hvcCcsIGVsZW1lbnQ6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhIH0pO1xyXG4gICAgc2hvcEFjdGl2aXR5RGV0ZWN0b3JNb2R1bGVzXzEudG9nZ2xlU2hvcEJ1dHRvblN0eWxlKG51bGwpO1xyXG4gICAgYXBwTWVudV8xLnNob3coc2hvcFVpSXRlbXMuc2hvcFdyYXBwZXIpO1xyXG59XHJcbmV4cG9ydHMuZW50ZXJUb1RoZVNob3BEaWFsb2cgPSBlbnRlclRvVGhlU2hvcERpYWxvZztcclxuZnVuY3Rpb24gbGVhdmVTaG9wKF9hKSB7XHJcbiAgICB2YXIgZWxlbWVudCA9IF9hLmVsZW1lbnQsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHRleHQgPSBfYS50ZXh0O1xyXG4gICAgZWxlbWVudC5zaG9wRGlhbG9nVGV4dC5pbm5lckhUTUwgPSB0ZXh0O1xyXG4gICAgZWxlbWVudC5zaG9wRXJyb3JNZXNzYWdlLmlubmVySFRNTCA9ICcnO1xyXG4gICAgYXBwTWVudV8xLnNob3coZWxlbWVudC5zaG9wRGlhbG9nKTtcclxufVxyXG5leHBvcnRzLmxlYXZlU2hvcCA9IGxlYXZlU2hvcDtcclxuZnVuY3Rpb24gc2FsZUJveExhYmVsQ2hhbmdlKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBpbnZlbnRvcnlCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2ludmVudG9yeS1ib3hcIik7XHJcbiAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmludmVudG9yeUFjdGl2ZSlcclxuICAgICAgICBhcHBNZW51XzEuYWRkQ2xhc3NMaXN0KGludmVudG9yeUJveCwgJ3Nob3AtaW52ZW50b3J5LXBhcnQnKTtcclxuICAgIGVsc2VcclxuICAgICAgICBhcHBNZW51XzEucmVtb3ZlQ2xhc3NMaXN0KGludmVudG9yeUJveCwgJ3Nob3AtaW52ZW50b3J5LXBhcnQnKTtcclxufVxyXG5leHBvcnRzLnNhbGVCb3hMYWJlbENoYW5nZSA9IHNhbGVCb3hMYWJlbENoYW5nZTtcclxuZnVuY3Rpb24gbG9hZFNob3BBcmVhKG1haW5HYW1lT2JqZWN0KSB7XHJcbiAgICB2YXIgc2hvcEFyZWEgPSB7XHJcbiAgICAgICAgc2VsZWN0ZWRTaG9wSXRlbToge1xyXG4gICAgICAgICAgICB0aXRsZTogXCJcIixcclxuICAgICAgICAgICAgcHJpY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIGludmVudG9yeVNlbGVjdGVkSXRlbTogbnVsbCxcclxuICAgICAgICAgICAgaGFuZ2FyU2VsZWN0ZWRJdGVtOiBudWxsLFxyXG4gICAgICAgICAgICBoYW5nYXJFbGVtZW50czogW10sXHJcbiAgICAgICAgICAgIHRyYWRlUHJvcGVydHllczogbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvcFdyYXBwZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaG9wLXdyYXBwZXInKSxcclxuICAgICAgICBzaG9wQXJlYTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Nob3AtYXJlYScpLFxyXG4gICAgICAgIGhhbmdhckFyZWE6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoYW5nYXItYXJlYScpLFxyXG4gICAgICAgIGhhbmdhclNoaXBBcmVhOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGFuZ2FyLXNoaXAtYXJlYScpLFxyXG4gICAgICAgIGRpc3BsYXlTaG9wSXRlbTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Rpc3BsYXktc2hvcC1pdGVtcycpLFxyXG4gICAgICAgIHNob3BEaWFsb2c6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaG9wLWRpYWxvZycpLFxyXG4gICAgICAgIHNob3BJbnZlbnRvcnlXcmFwcGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2hvcC1pbnZlbnRvcnktd3JhcHBlcicpLFxyXG4gICAgICAgIHNob3BEaWFsb2dUZXh0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2hvcC1kaWFsb2ctdGV4dCcpLFxyXG4gICAgICAgIHNob3BFcnJvck1lc3NhZ2U6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaG9wLWVycm9yLW1lc3NhZ2UnKVxyXG4gICAgfTtcclxuICAgIHZhciBzaG9wUGFnZUluZm9ybWF0aW9uID0ge1xyXG4gICAgICAgIGN1cnJlbnRTaG9wVXJsOiBwcm9jZXNzLmVudi5TSE9QX0dVTlNfVVJMLFxyXG4gICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG4gICAgICAgIHRvdGFsUGFnZXM6IDEsXHJcbiAgICAgICAgbWF4SXRlbVBlclBhZ2U6IDEsXHJcbiAgICAgICAgY3VycmVudFBhZ2VDYXJkSW5kZXg6IDEsXHJcbiAgICAgICAgY3VzdG9tV3JhcHBlckNsYXNzOiBudWxsXHJcbiAgICB9O1xyXG4gICAgc2hvd1Nob3BEYXRhKHsgZWxlbWVudDogc2hvcEFyZWEsIHVybDogcHJvY2Vzcy5lbnYuU0hPUF9HVU5TX1VSTCxcclxuICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgY3VzdG9tV3JhcHBlckNsYXNzOiBudWxsLFxyXG4gICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb246IHNob3BQYWdlSW5mb3JtYXRpb24gfSk7XHJcbiAgICBzaG9wRXZlbnREZXRlY3Rvcih7IHNob3BBcmVhOiBzaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZWxlY3RlZFNob3BJdGVtOiBzaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLFxyXG4gICAgICAgIHNob3BXcmFwcGVyOiBzaG9wQXJlYS5zaG9wV3JhcHBlcixcclxuICAgICAgICBzaG9wQXJlYTogc2hvcEFyZWEuc2hvcEFyZWEsXHJcbiAgICAgICAgaGFuZ2FyQXJlYTogc2hvcEFyZWEuaGFuZ2FyQXJlYSxcclxuICAgICAgICBoYW5nYXJTaGlwQXJlYTogc2hvcEFyZWEuaGFuZ2FyU2hpcEFyZWEsXHJcbiAgICAgICAgZGlzcGxheVNob3BJdGVtOiBzaG9wQXJlYS5kaXNwbGF5U2hvcEl0ZW0sXHJcbiAgICAgICAgc2hvcERpYWxvZzogc2hvcEFyZWEuc2hvcERpYWxvZyxcclxuICAgICAgICBzaG9wSW52ZW50b3J5V3JhcHBlcjogc2hvcEFyZWEuc2hvcEludmVudG9yeVdyYXBwZXIsXHJcbiAgICAgICAgc2hvcERpYWxvZ1RleHQ6IHNob3BBcmVhLnNob3BEaWFsb2dUZXh0LFxyXG4gICAgICAgIHNob3BFcnJvck1lc3NhZ2U6IHNob3BBcmVhLnNob3BFcnJvck1lc3NhZ2UsXHJcbiAgICAgICAgc2hvcFBhZ2VJbmZvcm1hdGlvbjogc2hvcFBhZ2VJbmZvcm1hdGlvblxyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmxvYWRTaG9wQXJlYSA9IGxvYWRTaG9wQXJlYTtcclxuZnVuY3Rpb24gc2hvcEhpdE9iamVjdHNEZXRlY3Rpb24oX2EpIHtcclxuICAgIHZhciBldmVudCA9IF9hLmV2ZW50LCBoYW5nYXJFbGVtZW50cyA9IF9hLmhhbmdhckVsZW1lbnRzLCBpbmRleCA9IF9hLmluZGV4O1xyXG4gICAgcmV0dXJuIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5vYmplY3RJbnRlcnNlY3Rpb25EZXRlY3Qoe1xyXG4gICAgICAgIG9iamVjdDoge1xyXG4gICAgICAgICAgICB4OiBldmVudC5jbGllbnRYIC0gKGV2ZW50LnRhcmdldC5vZmZzZXRMZWZ0ICsgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQub2Zmc2V0TGVmdCksXHJcbiAgICAgICAgICAgIHk6IGV2ZW50LmNsaWVudFkgLSAoZXZlbnQudGFyZ2V0Lm9mZnNldFRvcCArIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50Lm9mZnNldFRvcCksXHJcbiAgICAgICAgICAgIHdpZHRoOiA1LFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDUsXHJcbiAgICAgICAgfSwgdGFyZ2V0OiB7XHJcbiAgICAgICAgICAgIHg6IGhhbmdhckVsZW1lbnRzW2luZGV4XS5wb3NpdGlvblgsXHJcbiAgICAgICAgICAgIHk6IGhhbmdhckVsZW1lbnRzW2luZGV4XS5wb3NpdGlvblksXHJcbiAgICAgICAgICAgIHdpZHRoOiBoYW5nYXJFbGVtZW50c1tpbmRleF0ud2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogaGFuZ2FyRWxlbWVudHNbaW5kZXhdLmhlaWdodCxcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNob3BIaXRPYmplY3RzRGV0ZWN0aW9uID0gc2hvcEhpdE9iamVjdHNEZXRlY3Rpb247XHJcbmZ1bmN0aW9uIHNob3BFdmVudERldGVjdG9yKF9hKSB7XHJcbiAgICB2YXIgc2hvcEFyZWEgPSBfYS5zaG9wQXJlYSwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2hvcEludmVudG9yeSh7IGVsZW1lbnQ6IHNob3BBcmVhLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICBzaG9wQXJlYS5oYW5nYXJTaGlwQXJlYS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBzaG9wRXZlbnRzTW9kdWxlc18xLmhhbmdhck1vdXNlTW92ZUV2ZW50KHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9KTtcclxuICAgIHNob3BBcmVhLmhhbmdhclNoaXBBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBnYW1lSW52ZW50b3J5TW9kdWxlc18xLmhpZGVEZXNjcmlwdGlvbkFyZWEoKTtcclxuICAgIH0pO1xyXG4gICAgc2hvcEFyZWEuaGFuZ2FyU2hpcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5nYXJFbGVtZW50cywgcGxheWVyT2JqZWN0RGF0YSwgcGxheWVyT2JqZWN0LCBzaG9wQXJlYUl0ZW1zLCBpLCBoaXRPYmplY3Q7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIGhhbmdhckVsZW1lbnRzID0gbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJFbGVtZW50cztcclxuICAgICAgICAgICAgICAgIHBsYXllck9iamVjdERhdGEgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJPYmplY3QgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgc2hvcEFyZWFJdGVtcyA9IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGFuZ2FyRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFuZ2FyRWxlbWVudHNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGl0T2JqZWN0ID0gc2hvcEhpdE9iamVjdHNEZXRlY3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LCBoYW5nYXJFbGVtZW50czogaGFuZ2FyRWxlbWVudHMsIGluZGV4OiBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG9wRXZlbnRzTW9kdWxlc18xLmludmVudG9yeUNvbGlzaW9uRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0T2JqZWN0OiBoaXRPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPYmplY3REYXRhOiBwbGF5ZXJPYmplY3REYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcEFyZWFJdGVtczogc2hvcEFyZWFJdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllck9iamVjdDogcGxheWVyT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgc2hvcEFyZWEuc2hvcFdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNob3BJbnZlbnRvcnkoeyBlbGVtZW50OiBzaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgIHNob3BBY3Rpdml0eURldGVjdG9yTW9kdWxlc18xLnNob3BNZW51QWN0aXZpdHkoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIHNob3BBcmVhOiBzaG9wQXJlYSB9KTtcclxuICAgICAgICBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNlbGVjdEludmVudG9yeUl0ZW0oeyBpbmRleDogbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0sIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHNob3BBcmVhSXRlbXMgPSBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtO1xyXG4gICAgICAgIHZhciBwbGF5ZXJPYmplY3QgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgICAgIHZhciBwbGF5ZXJPYmplY3REYXRhID0gcGxheWVyT2JqZWN0LmRhdGE7XHJcbiAgICAgICAgaWYgKHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W3Nob3BBcmVhSXRlbXMuaW52ZW50b3J5U2VsZWN0ZWRJdGVtXSAmJiBzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSB8fFxyXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3REYXRhLmludmVudG9yeVtzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbV0gJiYgc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gPT09IDAgfHxcclxuICAgICAgICAgICAgc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW0gfHwgc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW0gPT09IDApIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtc1BpY3R1cmUoeyBzdGF0dXM6IHRydWUsIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgIHBpY3R1cmU6IChzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSB8fCBzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICA/IHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W3Nob3BBcmVhSXRlbXMuaW52ZW50b3J5U2VsZWN0ZWRJdGVtXVxyXG4gICAgICAgICAgICAgICAgICAgIDogcGxheWVyT2JqZWN0RGF0YS5ndW5zW3Nob3BBcmVhSXRlbXMuaGFuZ2FyU2VsZWN0ZWRJdGVtXSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzZWxlY3RlZEl0ZW1zUGljdHVyZSh7IHN0YXR1czogZmFsc2UsIGV2ZW50OiBldmVudCwgcGljdHVyZTogbnVsbCB9KTtcclxuICAgIH0pO1xyXG4gICAgc2hvcEFyZWEuc2hvcERpYWxvZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudGFyZ2V0WydkYXRhc2V0J10udGFyZ2V0QnRuSWQpIHtcclxuICAgICAgICAgICAgY2FzZSAnb2snOlxyXG4gICAgICAgICAgICAgICAgc2hvcEFjdGl2aXR5RGV0ZWN0b3JNb2R1bGVzXzEuc2hvcERpYWxvZ0FjdGl2aXR5LmNhbGwoc2hvcEFyZWEuc2hvcERpYWxvZywgeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIHNob3BBcmVhOiBzaG9wQXJlYSB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdjYW5jZWwnOlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuU0hPUF9TQUxFX1dJTkRPVyA9ICdmYWxzZSc7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuaGlkZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2hhbmdlUGFnZShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGZsYWcgPSBfYS5mbGFnO1xyXG4gICAgdmFyIHNob3BQYWdlSW5mb3JtYXRpb24gPSBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zaG9wUGFnZUluZm9ybWF0aW9uO1xyXG4gICAgaWYgKGZsYWcgPT09IFwiYmFja1wiKVxyXG4gICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2UgLT0gMTtcclxuICAgIGVsc2UgaWYgKGZsYWcgPT09IFwibmV4dFwiKVxyXG4gICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2UgKz0gMTtcclxuICAgIGlmIChzaG9wUGFnZUluZm9ybWF0aW9uLmN1cnJlbnRQYWdlIDwgMSlcclxuICAgICAgICBzaG9wUGFnZUluZm9ybWF0aW9uLmN1cnJlbnRQYWdlID0gMTtcclxuICAgIGlmIChzaG9wUGFnZUluZm9ybWF0aW9uLmN1cnJlbnRQYWdlID4gc2hvcFBhZ2VJbmZvcm1hdGlvbi50b3RhbFBhZ2VzKVxyXG4gICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2UgPSBzaG9wUGFnZUluZm9ybWF0aW9uLnRvdGFsUGFnZXM7XHJcbiAgICBzaG93U2hvcERhdGEoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSwgdXJsOiBzaG9wUGFnZUluZm9ybWF0aW9uLmN1cnJlbnRTaG9wVXJsLFxyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICBjdXN0b21XcmFwcGVyQ2xhc3M6IHNob3BQYWdlSW5mb3JtYXRpb24uY3VzdG9tV3JhcHBlckNsYXNzLFxyXG4gICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb246IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BQYWdlSW5mb3JtYXRpb24gfSk7XHJcbn1cclxuZXhwb3J0cy5jaGFuZ2VQYWdlID0gY2hhbmdlUGFnZTtcclxuZnVuY3Rpb24gYnV5U3RvcmVJdGVtKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgZGF0YSA9IF9hLmRhdGEsIHRhcmdldERhdGEgPSBfYS50YXJnZXREYXRhO1xyXG4gICAgaWYgKCFkYXRhKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGludmVudG9yeUl0ZW1HdW5zQXNzaWduKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBkYXRhOiBkYXRhLCB0YXJnZXREYXRhOiB0YXJnZXREYXRhLCBidXlpbmc6IHRydWUgfSk7XHJcbn1cclxuZnVuY3Rpb24gaW52ZW50b3J5SXRlbUd1bnNBc3NpZ24oX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBkYXRhID0gX2EuZGF0YSwgdGFyZ2V0RGF0YSA9IF9hLnRhcmdldERhdGEsIGJ1eWluZyA9IF9hLmJ1eWluZztcclxuICAgIHZhciBwbGF5ZXJPYmplY3QgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gXCJwb3dlclwiICYmIGRhdGEubmFtZSA9PT0gJ2V4dHJhbGlmZScpIHtcclxuICAgICAgICBnYW1lR3JhcHBsZU9iamVjdHNNb2R1bGVfMS5hZGRQbGF5ZXJMaWZlLmNhbGwoZGF0YSwge1xyXG4gICAgICAgICAgICBhbGxHYW1lU2lkZU9iamVjdHM6IG51bGwsXHJcbiAgICAgICAgICAgIHBsYXllclNoaXBEYXRhOiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICB9KTtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ2FtZUNvaW5zIC09IGRhdGEucHJpY2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09IFwiaW52ZW50b3J5IHdlYXBvblwiKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldERhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHBsYXllck9iamVjdC5kYXRhLmludmVudG9yeVt0YXJnZXREYXRhLmluZGV4XS5ncmFwcGxlUG93ZXIubWF4TnVtYmVyIDw9IHBsYXllck9iamVjdC5kYXRhLmludmVudG9yeVt0YXJnZXREYXRhLmluZGV4XS5ncmFwcGxlUG93ZXIubnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zaG9wRXJyb3JNZXNzYWdlLmlubmVySFRNTCA9ICd5b3UgcmVhY2ggYSBsaW1pdCBvZiB0aGlzIGl0ZW0nO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChidXlpbmcpXHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ2FtZUNvaW5zIC09IGRhdGEucHJpY2U7XHJcbiAgICAgICAgICAgIHBsYXllck9iamVjdC5kYXRhLmludmVudG9yeVt0YXJnZXREYXRhLmluZGV4XS5ncmFwcGxlUG93ZXIubnVtYmVyICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2hvcEludmVudG9yeSh7IGVsZW1lbnQ6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5pbnZlbnRvcnlJdGVtR3Vuc0Fzc2lnbiA9IGludmVudG9yeUl0ZW1HdW5zQXNzaWduO1xyXG5mdW5jdGlvbiBzaGlwQ2FyZERlc2NyaXB0aW9uKF9hKSB7XHJcbiAgICB2YXIgc2hpcERhdGEgPSBfYS5zaGlwRGF0YTtcclxuICAgIGlmICghc2hpcERhdGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIHNoaXBEZXNjcmlwdGlvblRleHQgPSBcIlxcbiAgICA8cD4gc3RhdHVzOiBcIiArICgoc2hpcERhdGEuc3RhdHVzKSA/IHNoaXBEYXRhLnN0YXR1cyA6ICcnKSArIFwiPC9wPlxcbiAgICA8cD5hcm1vcjogXCIgKyAoKHNoaXBEYXRhLmFybW9yKSA/IHNoaXBEYXRhLmFybW9yIDogJycpICsgXCI8L3A+XFxuICAgIDxwPmhlYWx0aFBvaW50IFwiICsgKChzaGlwRGF0YS5oZWFsdGhQb2ludCkgPyBzaGlwRGF0YS5oZWFsdGhQb2ludCA6ICcnKSArIFwiPC9wPlxcbiAgICA8cD5zcGVlZDogXCIgKyAoKHNoaXBEYXRhLm1pblNwZWVkKSA/IHNoaXBEYXRhLm1pblNwZWVkIDogJycpICsgXCI8L3A+XFxuICAgIDxwPmludmVudG9yeUNhcGFjaXR5OiBcIiArICgoc2hpcERhdGEuaW52ZW50b3J5Q2FwYWNpdHkpID8gc2hpcERhdGEuaW52ZW50b3J5Q2FwYWNpdHkgOiAnJykgKyBcIjwvcD5cXG4gICAgPHA+ZmlyZXNwb3RzIFwiICsgKChzaGlwRGF0YS5maXJlc3BvdHMpID8gc2hpcERhdGEuZmlyZXNwb3RzIDogJycpICsgXCI8L3A+XFxuICAgIFwiO1xyXG4gICAgcmV0dXJuIHNoaXBEZXNjcmlwdGlvblRleHQ7XHJcbn1cclxuZnVuY3Rpb24gd2VhcG9uc0NhcmREZXNjcmlwdGlvbihfYSkge1xyXG4gICAgdmFyIGNhcmQgPSBfYS5jYXJkO1xyXG4gICAgaWYgKCFjYXJkKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBzaGlwRGVzY3JpcHRpb25UZXh0ID0gXCJcXG4gICAgPHA+XCIgKyAoKGNhcmQuc3RhdHVzKSA/ICdzdGF0dXM6ICcgKyBjYXJkLnN0YXR1cyA6ICcnKSArIFwiPC9wPlxcbiAgICA8cD5cIiArICgoY2FyZC5kYW1hZ2UpID8gJ2RhbWFnZTogJyArIGNhcmQuZGFtYWdlIDogJycpICsgXCI8L3A+XFxuICAgIDxwPlwiICsgKChjYXJkLnNwZWVkKSA/ICdzcGVlZDogJyArIGNhcmQuc3BlZWQgOiAnJykgKyBcIjwvcD5cXG4gICAgXCI7XHJcbiAgICByZXR1cm4gc2hpcERlc2NyaXB0aW9uVGV4dDtcclxufVxyXG5mdW5jdGlvbiBsYWJlbFNoaXAoX2EpIHtcclxuICAgIHZhciBwbGF5ZXJPYmplY3QgPSBfYS5wbGF5ZXJPYmplY3QsIGNhcmQgPSBfYS5jYXJkLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgaWYgKHBsYXllck9iamVjdC5kYXRhLnRpdGxlID09PSBjYXJkLnRpdGxlKSB7XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9BQ1RJVkVfV0lORE9XID0gJ3RydWUnO1xyXG4gICAgICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImN1cnJlbnQtc2hpcC1sYWJlbFxcXCI+PGltZyBzcmM9XFxcIlwiICsgKHByb2Nlc3MuZW52LkhPU1QgKyAnc3RhdGljL3Nob3AvbWlzYy9hY2NlcHRfbGFiZWxfMTAyNHgxMDI0LnBuZycpICsgXCJcXFwiPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2FsZS1zaGlwLXByaWNlXFxcIj4gU2FsZSBwcmljZSBcIiArIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2FsZVBlcmNlbnRBZGRUb1ByaWNlKHsgcHJpY2U6IGNhcmQucHJpY2UsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KSArIFwiPC9kaXY+XCI7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG59XHJcbmZ1bmN0aW9uIHNob3dTaG9wRGF0YShfYSkge1xyXG4gICAgdmFyIGVsZW1lbnQgPSBfYS5lbGVtZW50LCB1cmwgPSBfYS51cmwsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGN1c3RvbVdyYXBwZXJDbGFzcyA9IF9hLmN1c3RvbVdyYXBwZXJDbGFzcywgc2hvcFBhZ2VJbmZvcm1hdGlvbiA9IF9hLnNob3BQYWdlSW5mb3JtYXRpb247XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBsYXllck9iamVjdCwgZGF0YSwgbGlzdE5vdFRvRGlzcGxheSwgaSwgY2FyZCwgY2FyZFJlbmRlcjtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPYmplY3QgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7IHVybDogdXJsLCBtZXRob2Q6ICdHRVQnLCBkYXRhOiBudWxsLCBoZWFkZXJzOiBudWxsIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3ROb3RUb0Rpc3BsYXkgPSBbJ1JlYXBlcicsICdEZXN0cnVjdG9yJ107XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGNhcmREYXRhQ3JlYXRvcih7IGRhdGE6IGRhdGEsIGxpc3ROb3RUb0Rpc3BsYXk6IGxpc3ROb3RUb0Rpc3BsYXkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvcFBhZ2VJbmZvcm1hdGlvbi5jdXJyZW50U2hvcFVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgICAgICBzaG9wUGFnZUluZm9ybWF0aW9uLm1heEl0ZW1QZXJQYWdlID0gKGN1c3RvbVdyYXBwZXJDbGFzcyA9PT0gJ3NoaXB5YXJkLWl0ZW0nKSA/IDEgOiA0O1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb24udG90YWxQYWdlcyA9IE1hdGguY2VpbChkYXRhLmxlbmd0aCAvIHNob3BQYWdlSW5mb3JtYXRpb24ubWF4SXRlbVBlclBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2VDYXJkSW5kZXggPSBzaG9wUGFnZUluZm9ybWF0aW9uLmN1cnJlbnRQYWdlICogc2hvcFBhZ2VJbmZvcm1hdGlvbi5tYXhJdGVtUGVyUGFnZSAtIHNob3BQYWdlSW5mb3JtYXRpb24ubWF4SXRlbVBlclBhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvcFBhZ2VJbmZvcm1hdGlvbi5jdXN0b21XcmFwcGVyQ2xhc3MgPSBjdXN0b21XcmFwcGVyQ2xhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5kaXNwbGF5U2hvcEl0ZW0uaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5tZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gc2hvcFBhZ2VJbmZvcm1hdGlvbi5jdXJyZW50UGFnZUNhcmRJbmRleDsgaSA8IHNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2VDYXJkSW5kZXggKyBzaG9wUGFnZUluZm9ybWF0aW9uLm1heEl0ZW1QZXJQYWdlOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZCA9IGRhdGFbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FyZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkUmVuZGVyID0gY3JlYXRlQ2FyZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkOiBjYXJkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tV3JhcHBlckNsYXNzOiBjdXN0b21XcmFwcGVyQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPYmplY3Q6IHBsYXllck9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGlzcGxheVNob3BJdGVtLmFwcGVuZENoaWxkKGNhcmRSZW5kZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc2hvd1Nob3BEYXRhID0gc2hvd1Nob3BEYXRhO1xyXG5mdW5jdGlvbiBjYXJkRGF0YUNyZWF0b3IoX2EpIHtcclxuICAgIHZhciBkYXRhID0gX2EuZGF0YSwgbGlzdE5vdFRvRGlzcGxheSA9IF9hLmxpc3ROb3RUb0Rpc3BsYXk7XHJcbiAgICB2YXIgcmVzdWx0RGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdmFyIGRpc3BsYXlMaXN0ID0gY29tcGFyZVRpdGxlKHsgbGlzdE5vdFRvRGlzcGxheTogbGlzdE5vdFRvRGlzcGxheSwgaXRlbTogaXRlbSB9KTtcclxuICAgICAgICBpZiAoZGlzcGxheUxpc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHsgaWYgKGl0ZW0pXHJcbiAgICAgICAgcmV0dXJuIGl0ZW07IH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdERhdGE7XHJcbn1cclxuZnVuY3Rpb24gY29tcGFyZVRpdGxlKF9hKSB7XHJcbiAgICB2YXIgbGlzdE5vdFRvRGlzcGxheSA9IF9hLmxpc3ROb3RUb0Rpc3BsYXksIGl0ZW0gPSBfYS5pdGVtO1xyXG4gICAgaWYgKGxpc3ROb3RUb0Rpc3BsYXkuZXZlcnkoZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIGl0ZW0udGl0bGUgIT0gZWxlbWVudDsgfSkpIHtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVDYXJkKF9hKSB7XHJcbiAgICB2YXIgY2FyZCA9IF9hLmNhcmQsIGN1c3RvbVdyYXBwZXJDbGFzcyA9IF9hLmN1c3RvbVdyYXBwZXJDbGFzcywgcGxheWVyT2JqZWN0ID0gX2EucGxheWVyT2JqZWN0LCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBlbGVtZW50ID0gX2EuZWxlbWVudDtcclxuICAgIHZhciBzaGlwRGVzY3JpcHRpb24gPSAoY3VzdG9tV3JhcHBlckNsYXNzID09PSAnc2hpcHlhcmQtaXRlbScpID8gc2hpcENhcmREZXNjcmlwdGlvbih7IHNoaXBEYXRhOiBjYXJkIH0pIDogd2VhcG9uc0NhcmREZXNjcmlwdGlvbih7IGNhcmQ6IGNhcmQgfSk7XHJcbiAgICB2YXIgY3VycmVudFNoaXAgPSBsYWJlbFNoaXAoeyBwbGF5ZXJPYmplY3Q6IHBsYXllck9iamVjdCwgY2FyZDogY2FyZCwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgdmFyIGJhY2tncm91bmRJbWFnZSA9IFwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCdcIiArICgnLi8nICsgY2FyZC5iYWNrZ3JvdW5kKSArIFwiJyk7XCI7XHJcbiAgICB2YXIgY2FyZFJlbmRlciA9IHBhZ2VzQnVpbGRlcl8xLmNyZWF0ZUVsZW1lbnRzKHsgdGFnTmFtZTogJ2RpdicsXHJcbiAgICAgICAgc3R5bGVDbGFzczogKGN1c3RvbVdyYXBwZXJDbGFzcykgPyBjdXN0b21XcmFwcGVyQ2xhc3MgKyBcIiBcIiArICgocGxheWVyT2JqZWN0LmRhdGEudGl0bGUgPT09IGNhcmQudGl0bGUpID8gJ2N1cnJlbnQtc2hpcCcgOiAnJykgOiAnc2hvcC1jYXJkJyxcclxuICAgICAgICBpbmxpbmVTdHlsZTogYmFja2dyb3VuZEltYWdlICsgXCInIFwiLFxyXG4gICAgICAgIHBpY3R1cmVVcmw6IG51bGwsIGxpbmtVcmw6IG51bGwsIHRleHQ6IG51bGwsXHJcbiAgICAgICAgaW5uZXJDb250ZW50OiBcIjxkaXYgY2xhc3M9XFxcImlubmVyLWNhcmRcXFwiPlxcbiAgICAgICAgICAgIDxoMj5cIiArIGNhcmQudGl0bGUgKyBcIiBcIiArIGN1cnJlbnRTaGlwICsgXCI8L2gyPlxcbiAgICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIiArIChwcm9jZXNzLmVudi5IT1NULCBjYXJkLmxvYWRJbWFnZSkgKyBcIlxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiXCIgKyAoKGN1c3RvbVdyYXBwZXJDbGFzcyA9PT0gJ3NoaXB5YXJkLWl0ZW0nKSA/ICdjYXJkLWJvZHknIDogJ2NhcmQtcmVndWxhci1kZXNjcmlwdGlvbi13cmFwcGVyJykgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtbWFpbi1kYXRhXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxwPlwiICsgY2FyZC5kZXNjcmlwdGlvbiArIFwiPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgPGgzPkNvc3Q6IFwiICsgY2FyZC5wcmljZSArIFwiPC9oMz5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImNhcmQtZGV0YWlsc1xcXCI+XCIgKyBzaGlwRGVzY3JpcHRpb24gKyBcIjwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XCIsXHJcbiAgICAgICAgYXR0cmlidXRlOiBudWxsLCBhdHRyaWJ1dGVOYW1lOiBudWxsLFxyXG4gICAgICAgIGF0dHJpYnV0ZTE6IG51bGwsIGF0dHJpYnV0ZU5hbWUxOiBudWxsIH0pO1xyXG4gICAgY2FyZFJlbmRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwcm9jZXNzLmVudi5TSE9QX0FDVElWRV9XSU5ET1cgPSAndHJ1ZSc7XHJcbiAgICAgICAgdmFyIHRleHQgPSBcImJ1eSBcIiArIGNhcmQudGl0bGUgKyBcIiBjb3N0OiBcIiArIGNhcmQucHJpY2U7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS50aXRsZSA9IGNhcmQudGl0bGU7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5wcmljZSA9IGNhcmQucHJpY2U7XHJcbiAgICAgICAgbGVhdmVTaG9wKHsgZWxlbWVudDogZWxlbWVudCwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY2FyZFJlbmRlcjtcclxufVxyXG5mdW5jdGlvbiBzd2l0Y2hTaG9wSGFuZ2FyKF9hKSB7XHJcbiAgICB2YXIgc3RhdGUgPSBfYS5zdGF0ZSwgZWxlbWVudCA9IF9hLmVsZW1lbnQ7XHJcbiAgICBpZiAoc3RhdGUgPT0gJ3RvLWhhbmdhcicpIHtcclxuICAgICAgICBhcHBNZW51XzEuaGlkZShlbGVtZW50LnNob3BBcmVhKTtcclxuICAgICAgICBhcHBNZW51XzEuc2hvdyhlbGVtZW50LmhhbmdhckFyZWEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoc3RhdGUgPT0gJ3RvLXNob3AnKSB7XHJcbiAgICAgICAgYXBwTWVudV8xLmhpZGUoZWxlbWVudC5oYW5nYXJBcmVhKTtcclxuICAgICAgICBhcHBNZW51XzEuc2hvdyhlbGVtZW50LnNob3BBcmVhKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnN3aXRjaFNob3BIYW5nYXIgPSBzd2l0Y2hTaG9wSGFuZ2FyO1xyXG5mdW5jdGlvbiBzYWxlUGVyY2VudGFnZShfYSkge1xyXG4gICAgdmFyIHRyYWRlUHJvcGVydHllcyA9IF9hLnRyYWRlUHJvcGVydHllcywgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHRyYWRlUHJvcGVydHllcy5zYWxlUGVyY2VudGFnZSA9IG1haW5HYW1lT2JqZWN0LmdhbWVSYW5kb21pemVyKHRyYWRlUHJvcGVydHllcy5idXlQcmljZVBlcmNlbnQsIHRyYWRlUHJvcGVydHllcy5idXlQcmljZVBlcmNlbnQgLyAyKTtcclxuICAgIHJldHVybiB0cmFkZVByb3BlcnR5ZXM7XHJcbn1cclxuZnVuY3Rpb24gc2VsZWN0ZWRJdGVtc1BpY3R1cmUoX2EpIHtcclxuICAgIHZhciBzdGF0dXMgPSBfYS5zdGF0dXMsIGV2ZW50ID0gX2EuZXZlbnQsIHBpY3R1cmUgPSBfYS5waWN0dXJlO1xyXG4gICAgdmFyIGRpc3BsYXlFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2l0ZW0tZHJhZ2FibGUtcGljdHVyZScpO1xyXG4gICAgaWYgKHN0YXR1cykge1xyXG4gICAgICAgIGFwcE1lbnVfMS5zaG93KGRpc3BsYXlFbGVtZW50KTtcclxuICAgICAgICBkaXNwbGF5RWxlbWVudC5zdHlsZSA9IFwibWFyZ2luLXRvcDogXCIgKyAoZXZlbnQuY2xpZW50WSAtIDUwKSArIFwicHg7IG1hcmdpbi1sZWZ0OiBcIiArIChldmVudC5jbGllbnRYIC0gMTAwKSArIFwicHg7XCI7XHJcbiAgICAgICAgZGlzcGxheUVsZW1lbnQuc3JjID0gcHJvY2Vzcy5lbnYuSE9TVCArIHBpY3R1cmUubG9hZEltYWdlO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIGFwcE1lbnVfMS5oaWRlKGRpc3BsYXlFbGVtZW50KTtcclxufVxyXG5mdW5jdGlvbiBidXlTaGlwKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgdXJsID0gX2EudXJsO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwbGF5ZXJPYmplY3QsIHBsYXllck9iamVjdERhdGEsIHNoaXBJbnZlbnRvcnlMYXN0SXRlbXMsIHNoaXBHdW5zTGFzdEl0ZW1zLCBpLCBoZWFkZXJzLCBkYXRhO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllck9iamVjdCA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyT2JqZWN0RGF0YSA9IHBsYXllck9iamVjdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaXBJbnZlbnRvcnlMYXN0SXRlbXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaXBHdW5zTGFzdEl0ZW1zID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpcEludmVudG9yeUxhc3RJdGVtcyA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJPYmplY3REYXRhLmd1bnNbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlwR3Vuc0xhc3RJdGVtcyA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXNlcmNvaW5zXCI6IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5nYW1lQ29pbnMgKyBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNhbGVQZXJjZW50QWRkVG9QcmljZSh7IHByaWNlOiBwbGF5ZXJPYmplY3REYXRhLnByaWNlLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaXRlbW5hbWVcIjogbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS50aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXJyZW50c2hpcG5hbWVcIjogcGxheWVyT2JqZWN0RGF0YS50aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaGlwaW52ZW50b3J5aXRlbXNcIjogc2hpcEludmVudG9yeUxhc3RJdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaGlwZ3Vuc2l0ZW1zXCI6IHNoaXBHdW5zTGFzdEl0ZW1zXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLmdldERhdGEoeyB1cmw6IHVybCwgbWV0aG9kOiAnUFVUJywgZGF0YTogbnVsbCwgaGVhZGVyczogaGVhZGVycyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BFcnJvck1lc3NhZ2UuaW5uZXJIVE1MID0gZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhLmRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdhbWVDb2lucyA9IHBhcnNlSW50KGRhdGEubW9uZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lU2hvcFNoaXB5YXJkXzEucmVwbGFjZVNoaXBEYXRhKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBidXlTaGlwRGF0YTogZGF0YSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwTWVudV8xLmhpZGUobWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2hvcERpYWxvZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2hvcEludmVudG9yeSh7IGVsZW1lbnQ6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dTaG9wRGF0YSh7IGVsZW1lbnQ6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5TSE9QX1NISVBZQVJEX1VSTCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVdyYXBwZXJDbGFzczogXCJzaGlweWFyZC1pdGVtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9wUGFnZUluZm9ybWF0aW9uOiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zaG9wUGFnZUluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuYnV5U2hpcCA9IGJ1eVNoaXA7XHJcbmZ1bmN0aW9uIGJ1eUl0ZW0oX2EpIHtcclxuICAgIHZhciB1cmwgPSBfYS51cmwsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBsYXllck9iamVjdERhdGEsIGludmVudG9yeUluZm9ybWF0aW9uLCBoZWFkZXJzLCBkYXRhLCBzZWFyY2hJdGVtO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllck9iamVjdERhdGEgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGludmVudG9yeUluZm9ybWF0aW9uID0gZ2FtZUludmVudG9yeU1vZHVsZXNfMS5pbnZlbnRvcnlGcmVlSXRlbSh7IGludmVudG9yeTogcGxheWVyT2JqZWN0RGF0YS5kYXRhLmludmVudG9yeSwgaW52ZW50b3J5Q2FwYWNpdHk6IHBsYXllck9iamVjdERhdGEuZGF0YS5pbnZlbnRvcnlDYXBhY2l0eSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0geyBcInVzZXJjb2luc1wiOiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ2FtZUNvaW5zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1OYW1lXCI6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0udGl0bGUgfTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWludmVudG9yeUluZm9ybWF0aW9uWydmaXJzdEVtcHR5SXRlbSddICYmIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0udGl0bGUgIT0gJ1JvY2tldCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS50aXRsZSAhPSAnSG9taW5nIFJvY2tldCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS50aXRsZSAhPSAnTnVjbGVhciBCbGFzdCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS50aXRsZSAhPSAnRXh0cmEgbGlmZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2hvcEVycm9yTWVzc2FnZS5pbm5lckhUTUwgPSAnWW91cmBzIGludmVudG9yeSBpcyBmdWxsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS5nZXREYXRhKHsgdXJsOiB1cmwsIG1ldGhvZDogJ1BVVCcsIGRhdGE6IG51bGwsIGhlYWRlcnM6IGhlYWRlcnMgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BFcnJvck1lc3NhZ2UuaW5uZXJIVE1MID0gZGF0YS5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnR5cGUgPT09IFwicG93ZXJcIiAmJiBkYXRhLmRhdGEubmFtZSA9PT0gJ2V4dHJhbGlmZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVN0b3JlSXRlbSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgZGF0YTogZGF0YS5kYXRhLCB0YXJnZXREYXRhOiBudWxsIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnR5cGUgPT09IFwiaW52ZW50b3J5IHdlYXBvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hJdGVtID0gc2hvcEV2ZW50c01vZHVsZXNfMS5maW5kSW50SW52ZW50b3J5KHsgaW52ZW50b3J5OiBwbGF5ZXJPYmplY3REYXRhLmRhdGEuaW52ZW50b3J5LCBzZWFyY2hPYmplY3Q6IGRhdGEuZGF0YSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1eVN0b3JlSXRlbSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgZGF0YTogZGF0YS5kYXRhLCB0YXJnZXREYXRhOiBzZWFyY2hJdGVtIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaEl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5nYW1lQ29pbnMgPSBwYXJzZUludChkYXRhLm1vbmV5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUludmVudG9yeU1vZHVsZXNfMS5wdXRJbnNpZGVJbnZlbnRvcnkoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIHNhdmVJdGVtOiBkYXRhLmRhdGEsIGludmVudG9yeUl0ZW06IGludmVudG9yeUluZm9ybWF0aW9uWydmaXJzdEVtcHR5SXRlbSddIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhLnR5cGUgIT0gXCJpbnZlbnRvcnkgd2VhcG9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5oaWRlKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BEaWFsb2cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2hvcEludmVudG9yeSh7IGVsZW1lbnQ6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5idXlJdGVtID0gYnV5SXRlbTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gaW5pdChjYWxsYmFjaywgZGF0YSkge1xyXG4gICAgZGF0YSA9IChkYXRhKSA/IGRhdGEgOiB0aGlzO1xyXG4gICAgY2FsbGJhY2soZGF0YSk7XHJcbn1cclxuZXhwb3J0cy5pbml0ID0gaW5pdDtcclxuZnVuY3Rpb24gZ2V0VUlPYmplY3RQb3NpdGlvbigpIHtcclxuICAgIHZhciBjb250ZXh0ID0gdGhpcztcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgeDogY29udGV4dC5wcm9wZXJ0aWVzLngsXHJcbiAgICAgICAgeTogY29udGV4dC5wcm9wZXJ0aWVzLnksXHJcbiAgICAgICAgd2lkdGg6IGNvbnRleHQucHJvcGVydGllcy53aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGNvbnRleHQucHJvcGVydGllcy5oZWlnaHQsXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuZ2V0VUlPYmplY3RQb3NpdGlvbiA9IGdldFVJT2JqZWN0UG9zaXRpb247XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL2dhbWVEYXRhUmVxdWVzdHNTZXJ2aWNlc01vZHVsZVwiKTtcclxudmFyIGxvYWRTY3JlZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi91aS9sb2FkU2NyZWVuXCIpO1xyXG52YXIgY2hhbmdlTGV2ZWxzXzEgPSByZXF1aXJlKFwiLi9jaGFuZ2VMZXZlbHNcIik7XHJcbnZhciBfYSA9IHJlcXVpcmUoXCJlbGVjdHJvblwiKSwgaXBjUmVuZGVyZXIgPSBfYS5pcGNSZW5kZXJlciwgcmVtb3RlID0gX2EucmVtb3RlO1xyXG52YXIgZHluYW1pY0xldmVsTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxNb2R1bGVcIik7XHJcbnZhciBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9keW5hbWljTGV2ZWxzL2R5bmFtaWNMZXZlbEVuZW15TW9kdWxlc1wiKTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9keW5hbWljTGV2ZWxzL3BsYXllclVuaXRNb2R1bGVcIik7XHJcbnZhciBwbGF5ZXJVbml0TW9kdWxlXzIgPSByZXF1aXJlKFwiLi4vZHluYW1pY0xldmVscy9wbGF5ZXJVbml0TW9kdWxlXCIpO1xyXG5mdW5jdGlvbiBzZXJ2ZXJSZXF1ZXN0KGdhbWVJbmZvcm1hdGlvbikge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2Nlc3MuZW52Lk5PREVfRU5WLCBwcm9jZXNzLmVudi5IT1NUKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVfMS5zZXJ2ZXJEYXRhUmVxdWVzdChnYW1lSW5mb3JtYXRpb24pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc2VydmVyUmVxdWVzdCA9IHNlcnZlclJlcXVlc3Q7XHJcbmZ1bmN0aW9uIG5ld1BsYXllclNoaXBDb25zdHJ1Y3QoX2EpIHtcclxuICAgIHZhciBQbGF5ZXJTaGlwID0gX2EuUGxheWVyU2hpcCwgdXNlckRhdGEgPSBfYS51c2VyRGF0YSwgc2hpcExpZmUgPSBfYS5zaGlwTGlmZTtcclxuICAgIHZhciBzaGlwRGF0YSA9IHtcclxuICAgICAgICBkYXRhOiB1c2VyRGF0YSxcclxuICAgICAgICBwb2ludHM6IDAsXHJcbiAgICAgICAgbnVtYmVyT2ZsaWZlOiBzaGlwTGlmZSxcclxuICAgICAgICBtYXhPZkxpZmU6IHNoaXBMaWZlLFxyXG4gICAgICAgIGhlYWx0aFBvaW50OiB1c2VyRGF0YS5oZWFsdGhQb2ludCxcclxuICAgICAgICBhcm1vcjogdXNlckRhdGEuYXJtb3IsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHhGaW5hbDogdXNlckRhdGEueCxcclxuICAgICAgICB5RmluYWw6IHVzZXJEYXRhLnksXHJcbiAgICAgICAgY29sbGlzaW9uQWxsb3c6IHRydWUsXHJcbiAgICAgICAgb2JqZWN0T3duZXI6IFwicGxheWVyXCIsXHJcbiAgICAgICAgd2lkdGg6IHVzZXJEYXRhLndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogdXNlckRhdGEuaGVpZ2h0LFxyXG4gICAgICAgIHhBZGo6IDAsIHNwZWVkOiB1c2VyRGF0YS5zcGVlZCxcclxuICAgICAgICBleHBsb3Npb246IHVzZXJEYXRhLmV4cGxvc2lvbkFuaW1hdGlvbixcclxuICAgICAgICBkYW1hZ2U6IHVzZXJEYXRhLmRhbWFnZSxcclxuICAgICAgICBzeDogdXNlckRhdGEuc3gsIHN5OiB1c2VyRGF0YS5zeSwgcGljdHVyZXNXaWR0aDogdXNlckRhdGEuaW1hZ2VXaWR0aCxcclxuICAgICAgICBpbWFnZUhlaWdodDogdXNlckRhdGEuaW1hZ2VIZWlnaHQsXHJcbiAgICAgICAgc1dpZHRoOiB1c2VyRGF0YS5zV2lkdGgsIHNIZWlnaHQ6IHVzZXJEYXRhLnNIZWlnaHQsXHJcbiAgICAgICAgYW5pbWF0aW9uU3RlcHM6IHVzZXJEYXRhLmFuaW1hdGlvblN0ZXBzLFxyXG4gICAgICAgIG51bWJlck9mSXRlbXM6IHVzZXJEYXRhLm51bWJlck9mSXRlbXMsXHJcbiAgICAgICAgbnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zOiB1c2VyRGF0YS5udW1iZXJPZlZlcnRpY2FsSXRlbXMsXHJcbiAgICAgICAgY29sbGlkZUV4cGxvc2lvbkFuaW1hdGlvbjogdXNlckRhdGEuY29sbGlkZUV4cGxvc2lvbkFuaW1hdGlvblxyXG4gICAgfTtcclxuICAgIHJldHVybiBuZXcgUGxheWVyU2hpcChzaGlwRGF0YSk7XHJcbn1cclxuZXhwb3J0cy5uZXdQbGF5ZXJTaGlwQ29uc3RydWN0ID0gbmV3UGxheWVyU2hpcENvbnN0cnVjdDtcclxuZnVuY3Rpb24gZ2FtZURhdGFJbml0KFBsYXllclNoaXAsIHNvdW5kT2JqZWN0LCBjb25zdHJ1Y3RvcnMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbGV2ZWwsIHNoaXBUeXBlLCBzaGlwTGlmZSwgZ2FtZUZpZWxkLCBnYW1lQWN0aW9uRmllbGQsIGdhbWVEaWFsb2dGaWVsZCwgZ2FtZVVJZmllbGQsIHJlcywgbGV2ZWxEYXRhLCBsZXZlbE9iamVjdHMsIGdyYXBwbGVPYmplY3RzLCBwcmVsb2FkRGF0YSwgZ2FtZVNldGluZ3MsIHVzZXJEYXRhLCBlbmVteURhdGEsIHBsYXllclNoaXBEYXRhLCBkeW5hbWljTGV2ZWxNYXBCbG9ja3MsIF9hLCBkeW5hbWljTGV2ZWxFbmVteSwgX2IsIF9jLCBfZCwgX2U7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9mLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZFNjcmVlbl8xLmxvYWRXaW5kb3coeyBsb2FkU3RhdHVzOiBcImxvYWRcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbCA9IDAsIHNoaXBUeXBlID0gMSwgc2hpcExpZmUgPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYW1lZmllbGQnKSwgZ2FtZUFjdGlvbkZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhbWVPYmplY3RzZmllbGQnKSwgZ2FtZURpYWxvZ0ZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2dhbWVBY3Rpb25EaWFsb2dmaWVsZCcpLCBnYW1lVUlmaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNnYW1lVWlmaWVsZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3QoeyBsZXZlbDogbGV2ZWwsIHNoaXBDb25maWd1cmF0aW9uOiBzaGlwVHlwZSB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Yuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsRGF0YSA9IHJlcy5sZXZlbERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxPYmplY3RzID0gcmVzLmxldmVsT2JqZWN0cztcclxuICAgICAgICAgICAgICAgICAgICBncmFwcGxlT2JqZWN0cyA9IHJlcy5ncmFwcGxlT2JqZWN0cztcclxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkRGF0YSA9IHJlcy5wcmVsb2FkRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBnYW1lU2V0aW5ncyA9IHJlcy5nYW1lU2V0aW5ncztcclxuICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YSA9IHJlcy51c2VyRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteURhdGEgPSByZXMuZW5lbXlEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkdST1VORF9QTEFZRVJfQUxMT1dfTU9WRSA9IChsZXZlbERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSkgPyAnZmFsc2UnIDogJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbERhdGFbJ3N0YXR1cyddID09PSBcImVycm9yXCIgfHwgbGV2ZWxPYmplY3RzID09PSBcImVycm9yXCIgfHwgZ3JhcHBsZU9iamVjdHMgPT09IFwiZXJyb3JcIiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbERhdGFbJ2dhbWVTZXRpbmdzJ10gPT09IFwiZXJyb3JcIiB8fCB1c2VyRGF0YSA9PT0gXCJlcnJvclwiIHx8IGVuZW15RGF0YSA9PT0gXCJlcnJvclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRTY3JlZW5fMS5sb2FkV2luZG93KHsgbG9hZFN0YXR1czogXCJzZXJ2ZXJFcnJvclwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbnVsbF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkU2NyZWVuXzEubG9hZFdpbmRvdyh7IGxvYWRTdGF0dXM6IFwic3VjY2Vzc1wiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTaGlwRGF0YSA9IG5ld1BsYXllclNoaXBDb25zdHJ1Y3QoeyBQbGF5ZXJTaGlwOiBjb25zdHJ1Y3RvcnMuUGxheWVyU2hpcCwgdXNlckRhdGE6IHVzZXJEYXRhLCBzaGlwTGlmZTogc2hpcExpZmUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZUluaXREYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclNoaXBEYXRhID0gY2hhbmdlTGV2ZWxzXzEucmVuZXdQbGF5ZXJTaGlwLmNhbGwodGhpcywgeyBvcmlnaW5EYXRhOiB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsIG5ld0RhdGE6IHBsYXllclNoaXBEYXRhIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTaGlwRGF0YS5wbGF5ZXJTaGlwVGV4dHVyZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5U2VsZWN0ZWRJdGVtOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZ2FyU2VsZWN0ZWRJdGVtOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZ2FyRWxlbWVudHM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LlNIT1BfQUNUSVZFX1dJTkRPVyA9ICdmYWxzZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGxldmVsRGF0YVsnZHluYW1pY0xldmVsc0FjdGl2ZSddKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZHluYW1pY0xldmVsTW9kdWxlXzEubG9hZExldmVsTWFwKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsTWFwTmFtZTogbGV2ZWxEYXRhWydkeW5hbWljQmxvY2tNYXAnXSArICcuanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBfZi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBfZi5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0xldmVsTWFwQmxvY2tzID0gX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobGV2ZWxEYXRhWydkeW5hbWljTGV2ZWxzQWN0aXZlJ10pKSByZXR1cm4gWzMgLypicmVhayovLCA2XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMS5sb2FkTGV2ZWxFbmVteSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbER5bmFtaWNNYXBCbG9ja3M6IGR5bmFtaWNMZXZlbE1hcEJsb2NrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IF9mLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9mLmxhYmVsID0gNztcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljTGV2ZWxFbmVteSA9IF9iO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgX2QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUZpZWxkOiAoZ2FtZUZpZWxkKSA/IGdhbWVGaWVsZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVBY3Rpb25GaWVsZDogKGdhbWVBY3Rpb25GaWVsZCkgPyBnYW1lQWN0aW9uRmllbGQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRGlhbG9nRmllbGQ6IChnYW1lRGlhbG9nRmllbGQpID8gZ2FtZURpYWxvZ0ZpZWxkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVVJRmllbGQ6IChnYW1lVUlmaWVsZCkgPyBnYW1lVUlmaWVsZCA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIF9lID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWw6IGxldmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVDb2luczogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT2JqZWN0OiBwbGF5ZXJTaGlwRGF0YVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcGxheWVyVW5pdE1vZHVsZV8xLmluaXRHcm91bmRQbGF5ZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRHluYW1pY1VzZXJDb25zdHJ1Y3RvcjogY29uc3RydWN0b3JzLkR5bmFtaWNVc2VyQ29uc3RydWN0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzIgLypyZXR1cm4qLywgKF9jLmRhdGEgPSAoX2QuZ2FtZURhdGEgPSAoX2UuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyID0gX2Yuc2VudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sZXZlbERhdGEgPSBsZXZlbERhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxldmVsT2JqZWN0cyA9IGxldmVsT2JqZWN0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UuZ3JhcHBsZU9iamVjdHMgPSBncmFwcGxlT2JqZWN0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGV2ZWxTb3VuZHMgPSAoc291bmRPYmplY3QpID8gc291bmRPYmplY3QgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5wcmVsb2FkRGF0YSA9IHByZWxvYWREYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5nYW1lU2V0aW5ncyA9IGdhbWVTZXRpbmdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5lbmVteURhdGEgPSBlbmVteURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmNvbnRyb2xsZXJzID0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5zY3JlZW4gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5pbnRlcnZhbENvdW50ID0gMjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmVuZW15VHlwZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmFsbEdhbWVTaWRlT2JqZWN0cyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5hbGxHYW1lRW5lbWllcyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5hbGxHYW1lQnVsbGV0cyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5hbGxHcm91bmRHYW1lQnVsbGV0cyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5tYXBCYWNrZ3JvdW5kT2JqZWN0cyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC53YXJwT2JqZWN0cyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5tYXBLZXlDb2RlID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmR5bmFtaWNMZXZlbE1hcEJsb2NrcyA9IGR5bmFtaWNMZXZlbE1hcEJsb2NrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QuZHluYW1pY0xldmVsRW5lbXkgPSBkeW5hbWljTGV2ZWxFbmVteSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QudGltZVRvRXJlc3NMZXZlbCA9IDYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmxldmVsQ2hhbmdlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmdhbWVQYXVzZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5nYW1lVWlQYXVzZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5iYWNrU2NyZWVuUGF1c2UgPSB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5nYW1lU3RhdHVzID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmdhbWVPdmVyID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLmdhbWVXaW4gPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Quc3ViQm9zc1ByZXNlbnQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QuZ2F0ZVByZXNlbnQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QubGV2ZWxXaW5kb3dEZXNjcmlwdGlvbiA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC5ncmFwcGxlT2JqZWN0T25TY3JlZW4gPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QuZHluYW1pY0xldmVsc0FjdGl2ZSA9IChsZXZlbERhdGFbJ2R5bmFtaWNMZXZlbHNBY3RpdmUnXSkgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLnRyYWRlcG9zdEluUmFuZ2UgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QuaW52ZW50b3J5QWN0aXZlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLnNob3BBY3RpdmUgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QuZ2FtZUV4dHJhU2Vjb25kcyA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLnRyYWRlU2hpcFRpbWVUb1VuZG9jayA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kKSwgX2MpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5nYW1lRGF0YUluaXQgPSBnYW1lRGF0YUluaXQ7XHJcbmZ1bmN0aW9uIGdhbWVTdGFydCgpIHtcclxuICAgIHRoaXMubWFwU291bmRDaGFuZ2VyKHsgc291bmRTdGF0dXM6ICdyZWd1bGFyX2xldmVsJyB9KTtcclxuICAgIHByb2Nlc3MuZW52LkJPU1NfTE9BRF9BVF9MRVZFTCA9IFwiZmFsc2VcIjtcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU0hJUFlBUkRfQUNUSVZFX1dJTkRPVyA9ICdmYWxzZSc7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX0FDVElWRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9BQ1RJVkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU0FMRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9TVE9SRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgdGhpcy5pbml0UGxheWVyU2hpcCgpO1xyXG4gICAgdGhpcy5nYW1lSW5pdERhdGEuZ2FtZU92ZXIgPSBmYWxzZTtcclxuICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMgPSB0cnVlO1xyXG59XHJcbmV4cG9ydHMuZ2FtZVN0YXJ0ID0gZ2FtZVN0YXJ0O1xyXG5mdW5jdGlvbiBtYXBTb3VuZENoYW5nZXIoX2EpIHtcclxuICAgIHZhciBzb3VuZFN0YXR1cyA9IF9hLnNvdW5kU3RhdHVzO1xyXG4gICAgdmFyIGdhbWVEYXRhID0gdGhpcy5zaG93R2FtZUluZm8oKS5nYW1lRGF0YTtcclxuICAgIHZhciBtYXBTb3VuZCA9IGdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbFNvdW5kO1xyXG4gICAgdmFyIGdhbWVTb3VuZE9iamVjdCA9IGdhbWVEYXRhLmxldmVsU291bmRzO1xyXG4gICAgc3dpdGNoIChzb3VuZFN0YXR1cykge1xyXG4gICAgICAgIGNhc2UgJ3N0YXJ0X3NjcmVlbic6XHJcbiAgICAgICAgICAgIG1hcFNvdW5kID0gZ2FtZURhdGEucHJlbG9hZERhdGEuc3RhcnRTb3VuZDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmVndWxhcl9sZXZlbCc6XHJcbiAgICAgICAgICAgIG1hcFNvdW5kID0gZ2FtZURhdGEubGV2ZWxEYXRhLmxldmVsU291bmQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2dhbWVfb3Zlcl9zY3JlZW4nOlxyXG4gICAgICAgICAgICBtYXBTb3VuZCA9IGdhbWVEYXRhLnByZWxvYWREYXRhLmdhbWVPdmVyU291bmQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2dhbWVfd2luJzpcclxuICAgICAgICAgICAgbWFwU291bmQgPSBnYW1lRGF0YS5wcmVsb2FkRGF0YS5nYW1lV2luU291bmQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIG1hcFNvdW5kO1xyXG4gICAgfVxyXG4gICAgZ2FtZVNvdW5kT2JqZWN0LmNoYW5nZVRyYWNrKHsgdXJsOiBtYXBTb3VuZCB9KTtcclxuICAgIGdhbWVTb3VuZE9iamVjdC5zb3VuZFBsYXkoKTtcclxufVxyXG5leHBvcnRzLm1hcFNvdW5kQ2hhbmdlciA9IG1hcFNvdW5kQ2hhbmdlcjtcclxuZnVuY3Rpb24gYmFja1RvU3RhcnRTY3JlZW4oY29uc3RydWN0b3JzKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNvdW5kT2JqZWN0LCBuZXdJbml0ZGF0YSwgX2ksIF9hLCBfYiwga2V5LCB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJVbml0TW9kdWxlXzIuaGlkZUludmVudG9yeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kT2JqZWN0ID0gdGhpcy5zaG93R2FtZUluZm8oKS5nYW1lRGF0YS5sZXZlbFNvdW5kcztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lRGF0YUluaXQuY2FsbCh0aGlzLCBjb25zdHJ1Y3RvcnMuUGxheWVyU2hpcCwgc291bmRPYmplY3QsIGNvbnN0cnVjdG9ycyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luaXRkYXRhID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV3SW5pdGRhdGEuZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gJ25ld0luaXRkYXRhLmRhdGEnXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYSA9IE9iamVjdC5lbnRyaWVzKG5ld0luaXRkYXRhLmRhdGEpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IF9hW19pXSwga2V5ID0gX2JbMF0sIHZhbHVlID0gX2JbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGFba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBTb3VuZENoYW5nZXIoeyBzb3VuZFN0YXR1czogJ3N0YXJ0X3NjcmVlbicgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEuZ2FtZU92ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS5nYW1lU3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmJhY2tUb1N0YXJ0U2NyZWVuID0gYmFja1RvU3RhcnRTY3JlZW47XHJcbmZ1bmN0aW9uIGV4aXRUaGVHYW1lKCkge1xyXG4gICAgdmFyIHcgPSByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpO1xyXG4gICAgdy5jbG9zZSgpO1xyXG59XHJcbmV4cG9ydHMuZXhpdFRoZUdhbWUgPSBleGl0VGhlR2FtZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xID0gcmVxdWlyZShcIi4vc2VydmVyUmVxdWVzdE1vZHVsZXNcIik7XHJcbmZ1bmN0aW9uIGdldEV4dHJhT2JqZWN0cyhfYSkge1xyXG4gICAgdmFyIHJhbmRvbU9iamVjdCA9IF9hLnJhbmRvbU9iamVjdDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS5nZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcImFwaS9ncmFwcGxlLW9iamVjdHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdncmFwcGxlT2JqZWN0JzogcmFuZG9tT2JqZWN0Lm9iamVjdCB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Iuc2VudCgpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5nZXRFeHRyYU9iamVjdHMgPSBnZXRFeHRyYU9iamVjdHM7XHJcbmZ1bmN0aW9uIGdldEdhbWVSZXN1bHREYXRhKF9hKSB7XHJcbiAgICB2YXIgbWV0aG9kID0gX2EubWV0aG9kLCBkYXRhID0gX2EuZGF0YTtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS5nZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnYXBpL2dhbWUtcmVzdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYi5zZW50KCldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmdldEdhbWVSZXN1bHREYXRhID0gZ2V0R2FtZVJlc3VsdERhdGE7XHJcbmZ1bmN0aW9uIGdldFNob3BTZXJ2ZXJEYXRhKF9hKSB7XHJcbiAgICB2YXIgc2hvcFVybCA9IF9hLnNob3BVcmwsIGhlYWRlcnMgPSBfYS5oZWFkZXJzO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLmdldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNob3BVcmwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYi5zZW50KCldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmdldFNob3BTZXJ2ZXJEYXRhID0gZ2V0U2hvcFNlcnZlckRhdGE7XHJcbmZ1bmN0aW9uIGxvYWRHcm91bmRFbmVteShfYSkge1xyXG4gICAgdmFyIGR5bmFtaWNFbmVteUNvbGxlY3Rpb24gPSBfYS5keW5hbWljRW5lbXlDb2xsZWN0aW9uO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLmdldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGR5bmFtaWNFbmVteUNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYi5zZW50KCldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmxvYWRHcm91bmRFbmVteSA9IGxvYWRHcm91bmRFbmVteTtcclxuZnVuY3Rpb24gbG9hZEdyb3VuZFBsYXllcigpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS5nZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtLWlkJzogXCJtYWluX2NoYXJhY3RlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5sb2FkR3JvdW5kUGxheWVyID0gbG9hZEdyb3VuZFBsYXllcjtcclxuLyogR2FtZSBzdGFydCBkYXRhICovXHJcbmZ1bmN0aW9uIHNlcnZlckRhdGFSZXF1ZXN0KGdhbWVJbmZvcm1hdGlvbikge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBsZXZlbERhdGEsIGxldmVsT2JqZWN0cywgZ3JhcHBsZU9iamVjdHMsIHByZWxvYWREYXRhLCBnYW1lU2V0aW5ncywgdXNlckRhdGEsIGVuZW15RGF0YSwgX2E7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcHJvY2Vzcy5lbnYuTEVWRUxfREFUQV9VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ21hcGxldmVsJzogZ2FtZUluZm9ybWF0aW9uLmxldmVsIH1cclxuICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxEYXRhID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LkxFVkVMX09CSkVDVF9VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ21hcE9iamVjdCc6IGxldmVsRGF0YVsnbGV2ZWxPQmplY3RzJ10gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxPYmplY3RzID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LkxFVkVMX0dSQVBQTEVfT0JKRUNUU19VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ2dyYXBwbGVPYmplY3QnOiBsZXZlbERhdGFbJ2dyYXBwbGVPYmplY3QnXSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBncmFwcGxlT2JqZWN0cyA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLmdldExvY2FsRGF0YSh7IGZpbGVOYW1lOiAncHJlbG9hZERhdGEuanNvbicgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIHByZWxvYWREYXRhID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RWxlY3Ryb25Mb2NhbERhdGEoeyBmaWxlTmFtZTogJ2dhbWUtc2V0dGluZ3MuanNvbicgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVTZXRpbmdzID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LlVTRVJfU0hJUF9VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ3VzZXJzaGlwJzogZ2FtZUluZm9ybWF0aW9uLnNoaXBDb25maWd1cmF0aW9uIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEuZ2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LkVORU1ZX1NISVBfVVJMLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdzaGlwLXR5cGUtbnVtYmVyJzogbGV2ZWxEYXRhWydlbmVteVR5cGUnXSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBlbmVteURhdGEgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsRGF0YTogbGV2ZWxEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbE9iamVjdHM6IGxldmVsT2JqZWN0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcHBsZU9iamVjdHM6IGdyYXBwbGVPYmplY3RzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVsb2FkRGF0YTogcHJlbG9hZERhdGFcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdhbWVTZXRpbmdzXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIChfYS5nYW1lU2V0aW5ncyA9IF9iLnNlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudXNlckRhdGEgPSB1c2VyRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EuZW5lbXlEYXRhID0gZW5lbXlEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNlcnZlckRhdGFSZXF1ZXN0ID0gc2VydmVyRGF0YVJlcXVlc3Q7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5mdW5jdGlvbiBjcmVhdGVTb3VuZChTb3VuZENyZWF0b3IpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZ2FtZURhdGEsIHBhZ2VTZXR0aW5ncywgc291bmRQcm9wcywgX2E7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZURhdGEgPSB0aGlzLnNob3dHYW1lSW5mbygpLmdhbWVEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VTZXR0aW5ncyA9IGdhbWVEYXRhLmdhbWVTZXRpbmdzO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZURhdGEucHJlbG9hZERhdGEuc3RhcnRTb3VuZF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgc291bmRQcm9wcyA9IChfYS5zb3VuZFVybCA9IF9iLnNlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc291bmRMb29wID0gdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Eudm9sdW1lID0gcGFnZVNldHRpbmdzLnNvdW5kTGV2ZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5NQUlOX0dBTUVfU09VTkQgPSBwYWdlU2V0dGluZ3Muc291bmRMZXZlbC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsU291bmRzID0gaW5pdFNvdW5kT2JqZWN0KHsgU291bmRDcmVhdG9yOiBTb3VuZENyZWF0b3IsIG1haW5HYW1lT2JqZWN0OiB0aGlzLCBzb3VuZFByb3BzOiBzb3VuZFByb3BzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBnYW1lRGF0YS5sZXZlbFNvdW5kc107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlU291bmQgPSBjcmVhdGVTb3VuZDtcclxuZnVuY3Rpb24gaW5pdFNvdW5kT2JqZWN0KF9hKSB7XHJcbiAgICB2YXIgU291bmRDcmVhdG9yID0gX2EuU291bmRDcmVhdG9yLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBzb3VuZFByb3BzID0gX2Euc291bmRQcm9wcztcclxuICAgIHZhciBnYW1lRGF0YSA9IG1haW5HYW1lT2JqZWN0LnNob3dHYW1lSW5mbygpLmdhbWVEYXRhO1xyXG4gICAgdmFyIHBhZ2VTZXR0aW5ncyA9IGdhbWVEYXRhLmdhbWVTZXRpbmdzO1xyXG4gICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgc291bmRVcmw6IHNvdW5kUHJvcHMuc291bmRVcmwsXHJcbiAgICAgICAgc291bmRMb29wOiBzb3VuZFByb3BzLnNvdW5kTG9vcCxcclxuICAgICAgICBzb3VuZE9uOiBwYWdlU2V0dGluZ3Muc291bmRPbixcclxuICAgICAgICB2b2x1bWU6IHNvdW5kUHJvcHMudm9sdW1lXHJcbiAgICB9O1xyXG4gICAgdmFyIHNvdW5kID0gbmV3IFNvdW5kQ3JlYXRvcihkYXRhKTtcclxuICAgIHNvdW5kLmluaXRTb3VuZCh7IGxldmVsU291bmQ6IHNvdW5kUHJvcHMuc291bmRVcmwsIHZvbHVtZTogZGF0YS52b2x1bWUgfSk7XHJcbiAgICByZXR1cm4gc291bmQ7XHJcbn1cclxuZXhwb3J0cy5pbml0U291bmRPYmplY3QgPSBpbml0U291bmRPYmplY3Q7XHJcbmZ1bmN0aW9uIGNoYW5nZVZvbHVtZShfYSkge1xyXG4gICAgdmFyIHZvbHVtZSA9IF9hLnZvbHVtZTtcclxuICAgIHRoaXMudm9sdW1lID0gKHZvbHVtZSkgPyB2b2x1bWUgOiBwcm9jZXNzLmVudi5NQUlOX0dBTUVfU09VTkRfRUZGRUNUUztcclxuICAgIHRoaXMuc291bmRPYmplY3Qudm9sdW1lID0gKHByb2Nlc3MuZW52Lk1BSU5fR0FNRV9TT1VORF9PTiA9PT0gJ3RydWUnKSA/IHRoaXMudm9sdW1lIC8gMTAwMCA6IDA7XHJcbn1cclxuZXhwb3J0cy5jaGFuZ2VWb2x1bWUgPSBjaGFuZ2VWb2x1bWU7XHJcbmZ1bmN0aW9uIGNoYW5nZVRyYWNrKF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsO1xyXG4gICAgdGhpcy5zb3VuZE9iamVjdC5zcmMgPSBfX2Rpcm5hbWUgKyB1cmw7XHJcbn1cclxuZXhwb3J0cy5jaGFuZ2VUcmFjayA9IGNoYW5nZVRyYWNrO1xyXG5mdW5jdGlvbiBzb3VuZFBsYXkoKSB7XHJcbiAgICB0aGlzLnNvdW5kT2JqZWN0LnBsYXkoKTtcclxufVxyXG5leHBvcnRzLnNvdW5kUGxheSA9IHNvdW5kUGxheTtcclxuZnVuY3Rpb24gc291bmRQYXVzZSgpIHtcclxuICAgIHRoaXMuc291bmRPYmplY3QucGF1c2UoKTtcclxufVxyXG5leHBvcnRzLnNvdW5kUGF1c2UgPSBzb3VuZFBhdXNlO1xyXG5mdW5jdGlvbiBtYWtlTG9vcCgpIHtcclxuICAgIHRoaXMuc291bmRPYmplY3QubG9vcCA9IHRoaXMuc291bmRMb29wO1xyXG59XHJcbmV4cG9ydHMubWFrZUxvb3AgPSBtYWtlTG9vcDtcclxuZnVuY3Rpb24gdHVyblNvdW5kT2ZmKF9hKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBfYS52YWx1ZTtcclxuICAgIHRoaXMuc291bmRPbiA9IHZhbHVlO1xyXG4gICAgdGhpcy5jaGFuZ2VWb2x1bWUoeyB2b2x1bWU6IHRoaXMudm9sdW1lIH0pO1xyXG59XHJcbmV4cG9ydHMudHVyblNvdW5kT2ZmID0gdHVyblNvdW5kT2ZmO1xyXG5mdW5jdGlvbiBpbml0U291bmQoX2EpIHtcclxuICAgIHZhciBsZXZlbFNvdW5kID0gX2EubGV2ZWxTb3VuZCwgdm9sdW1lID0gX2Eudm9sdW1lO1xyXG4gICAgdGhpcy5jaGFuZ2VWb2x1bWUoeyB2b2x1bWU6IHZvbHVtZSB9KTtcclxuICAgIHRoaXMuY2hhbmdlVHJhY2soeyB1cmw6IGxldmVsU291bmQgfSk7XHJcbiAgICB0aGlzLnNvdW5kUGxheSgpO1xyXG4gICAgdGhpcy5tYWtlTG9vcCgpO1xyXG59XHJcbmV4cG9ydHMuaW5pdFNvdW5kID0gaW5pdFNvdW5kO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3NlcnZlclJlcXVlc3RNb2R1bGVzXCIpO1xyXG52YXIgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL2dhbWVEYXRhUmVxdWVzdHNTZXJ2aWNlc01vZHVsZVwiKTtcclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbmxvYWQgZGF0YSBmcm9tIHNlcnZlclxyXG5maWx0ZXJlZCBibG9jaywgaGlkZSBlZGl0b3Igc3Bhd24gYmxvY2tcclxuY3JlYXRlIGVuZW15IGJhc2VkIG9uIGVkaXRvciBkYXRhXHJcblxyXG4gPT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuZnVuY3Rpb24gbG9hZExldmVsRW5lbXkoX2EpIHtcclxuICAgIHZhciBsZXZlbER5bmFtaWNNYXBCbG9ja3MgPSBfYS5sZXZlbER5bmFtaWNNYXBCbG9ja3MsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZHluYW1pY0VuZW15Q29sbGVjdGlvbiwgZHluYW1pY0VuZW15LCByZXN1bHRHcm91bmRFbmVteURhdGEsIGFsbEVuZW15T25NYXAsIF9pLCBkeW5hbWljRW5lbXlfMSwgZW5lbXksIF9iLCBfYztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9kKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2QubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljRW5lbXlDb2xsZWN0aW9uID0gcHJvY2Vzcy5lbnYuRFlOQU1JQ19MRVZFTF9FTkVNWV9DT0xMRUNUSU9OX1VSTDtcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljRW5lbXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVfMS5sb2FkR3JvdW5kRW5lbXkoeyBkeW5hbWljRW5lbXlDb2xsZWN0aW9uOiBkeW5hbWljRW5lbXlDb2xsZWN0aW9uIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRHcm91bmRFbmVteURhdGEgPSBfZC5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsRW5lbXlPbk1hcCA9IGxldmVsRHluYW1pY01hcEJsb2Nrcy5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jay5kZXRhaWxzLnR5cGUgPT09ICdlbmVteV9zcGF3bmVyJyB8fCBibG9jay5kZXRhaWxzLnR5cGUgPT09ICducGNfc3Bhd25lcic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxFbmVteU9uTWFwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNFbmVteSA9IGFsbEVuZW15T25NYXAubWFwKGZ1bmN0aW9uIChlbmVteUJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RW5lbXlTZXJ2ZXJEYXRhID0gcmVzdWx0R3JvdW5kRW5lbXlEYXRhLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uaWQgPT09IGVuZW15QmxvY2suZGV0YWlscy5uYW1lOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXBhcmVEYXRhID0gT2JqZWN0LmFzc2lnbihlbmVteUJsb2NrLCBjdXJyZW50RW5lbXlTZXJ2ZXJEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlcGFyZURhdGEudGV4dHVyZSA9IGN1cnJlbnRFbmVteVNlcnZlckRhdGEudGV4dHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlCbG9jay5kZXRhaWxzLmNvbGxpc2lvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2hhcmFjdGVyID0gbmV3IGNvbnN0cnVjdG9ycy5EeW5hbWljRW5lbXlDb25zdHJ1Y3RvcihfX2Fzc2lnbih7fSwgcHJlcGFyZURhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hhcmFjdGVyLnkgLT0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBkeW5hbWljRW5lbXlfMSA9IGR5bmFtaWNFbmVteTtcclxuICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBkeW5hbWljRW5lbXlfMS5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteSA9IGR5bmFtaWNFbmVteV8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IGVuZW15O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVuZW15LmV4dHJhT2JqZWN0cykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRFeHRyYU9iamVjdFRvR3JvdW5kRW5lbXkoZW5lbXkuZXh0cmFPYmplY3RzLCBlbmVteSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9jID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX2QubGFiZWwgPSA1O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLmV4dHJhT2JqZWN0cyA9IF9jO1xyXG4gICAgICAgICAgICAgICAgICAgIF9kLmxhYmVsID0gNjtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICBfaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsRHluYW1pY01hcEJsb2NrcyA9IGxldmVsRHluYW1pY01hcEJsb2Nrcy5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jay5kZXRhaWxzLnR5cGUgIT0gJ2VuZW15X3NwYXduZXInICYmIGJsb2NrLmRldGFpbHMudHlwZSAhPSAnbnBjX3NwYXduZXInICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay5kZXRhaWxzLnR5cGUgIT0gJ2hpZGRlbl9lbmVteV9zcGF3bmVyJyAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09ICd0aW1lcl9lbmVteV9zcGF3bmVyJztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5HUk9VTkRfUExBWUVSX0FMTE9XX01PVkUgPSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGR5bmFtaWNFbmVteV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubG9hZExldmVsRW5lbXkgPSBsb2FkTGV2ZWxFbmVteTtcclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbnNwZWNpYWwgbWV0aG9kIHRvIGxvYWQgc2luZ2xlIHR5cGUgb2YgZW5lbXkgZnJvbSBzZXJ2ZXJcclxudG8gc3Bhd24gaGlkZGVuIGVuZW15XHJcblxyXG5cclxuXHJcbiA9PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBsb2FkRW5lbXlUb09iamVjdEFycmF5KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgbGV2ZWxEeW5hbWljTWFwQmxvY2tzID0gX2EubGV2ZWxEeW5hbWljTWFwQmxvY2tzLCBjb25zdHJ1Y3RvcnMgPSBfYS5jb25zdHJ1Y3RvcnMsIGNoYXJhY3RlclNlbGVjdG9yID0gX2EuY2hhcmFjdGVyU2VsZWN0b3I7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGR5bmFtaWNFbmVteUNvbGxlY3Rpb24sIGR5bmFtaWNFbmVteSwgcmVzdWx0R3JvdW5kRW5lbXlEYXRhLCBhbGxFbmVteU9uTWFwLCBfaSwgZHluYW1pY0VuZW15XzIsIGVuZW15LCBfYiwgX2M7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9kLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0VuZW15Q29sbGVjdGlvbiA9IHByb2Nlc3MuZW52LkRZTkFNSUNfTEVWRUxfRU5FTVlfQ09MTEVDVElPTl9VUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0VuZW15ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEubG9hZEdyb3VuZEVuZW15KHsgZHluYW1pY0VuZW15Q29sbGVjdGlvbjogZHluYW1pY0VuZW15Q29sbGVjdGlvbiB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0R3JvdW5kRW5lbXlEYXRhID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbEVuZW15T25NYXAgPSBsZXZlbER5bmFtaWNNYXBCbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2suZGV0YWlscy50eXBlID09PSBjaGFyYWN0ZXJTZWxlY3RvcjtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbEVuZW15T25NYXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYWxsRW5lbXlPbk1hcC5tYXAoZnVuY3Rpb24gKGVuZW15QmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RW5lbXlTZXJ2ZXJEYXRhID0gcmVzdWx0R3JvdW5kRW5lbXlEYXRhLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uaWQgPT09IGVuZW15QmxvY2suZGV0YWlscy5uYW1lOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVwYXJlRGF0YSA9IE9iamVjdC5hc3NpZ24oZW5lbXlCbG9jaywgY3VycmVudEVuZW15U2VydmVyRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwYXJlRGF0YS50ZXh0dXJlID0gY3VycmVudEVuZW15U2VydmVyRGF0YS50ZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlCbG9jay5kZXRhaWxzLmNvbGxpc2lvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NoYXJhY3RlciA9IG5ldyBjb25zdHJ1Y3RvcnMuRHluYW1pY0VuZW15Q29uc3RydWN0b3IoX19hc3NpZ24oe30sIHByZXBhcmVEYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGFyYWN0ZXIueSAtPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdDaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljRW5lbXkgPSBfZC5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBkeW5hbWljRW5lbXlfMiA9IGR5bmFtaWNFbmVteTtcclxuICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBkeW5hbWljRW5lbXlfMi5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteSA9IGR5bmFtaWNFbmVteV8yW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IGVuZW15O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGVuZW15LmV4dHJhT2JqZWN0cykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRFeHRyYU9iamVjdFRvR3JvdW5kRW5lbXkoZW5lbXkuZXh0cmFPYmplY3RzLCBlbmVteSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9jID0gX2Quc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIF9jID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX2QubGFiZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLmV4dHJhT2JqZWN0cyA9IF9jO1xyXG4gICAgICAgICAgICAgICAgICAgIF9kLmxhYmVsID0gNztcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBfaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZHluYW1pY0VuZW15KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxFbmVteSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxFbmVteS5jb25jYXQoX19zcHJlYWRBcnJheXMoZHluYW1pY0VuZW15KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuc2NyaXB0IHRvIGNyZWF0ZSBncmFwcGxlIG9iamVjdCBiYXNlZCBvbiBOUEMgaW5uZXIgb2JqZWN0c1xyXG5cclxuID09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbmZ1bmN0aW9uIGxvYWRFeHRyYU9iamVjdFRvR3JvdW5kRW5lbXkoZXh0cmFPYmplY3RzLCBlbmVteSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByYW5kb21PYmplY3QsIGxvYWRQcm9iYWJpbGl0eSwgbnVtYmVyT2ZFbGVtZW50LCByZXN1bHQsIGV4dHJhT2JqZWN0LCBjYWxsT2JqZWN0LCBpO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbU9iamVjdCA9IGV4dHJhT2JqZWN0c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBleHRyYU9iamVjdHMubGVuZ3RoKV0sIGxvYWRQcm9iYWJpbGl0eSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmRvbU9iamVjdC5yYW5kb21pemVyKSwgbnVtYmVyT2ZFbGVtZW50ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcmFuZG9tT2JqZWN0Lm1heE51bWJlciArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5kb21PYmplY3Qub2JqZWN0ICE9ICdnb2xkQ29pbicgJiYgbG9hZFByb2JhYmlsaXR5ID4gcmFuZG9tT2JqZWN0LnJhbmRvbWl6ZXIgLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5kb21PYmplY3QgPSBleHRyYU9iamVjdHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFPYmplY3QgPSByYW5kb21PYmplY3Qub2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmVteS5kZXRhaWxzLnJ1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmVteS5kZXRhaWxzLnJ1bGVzLmNvbnRhaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mRWxlbWVudCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYU9iamVjdCA9IFwiZ3JvdW5kX25wY19pdGVtXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS5nZXREYXRhKHsgdXJsOiBcImFwaS9ncmFwcGxlLW9iamVjdHNcIiwgbWV0aG9kOiBcIkdFVFwiLCBkYXRhOiBudWxsLCBoZWFkZXJzOiB7ICdncmFwcGxlT2JqZWN0JzogZXh0cmFPYmplY3QgfSB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbE9iamVjdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5lbXkuZGV0YWlscy5ydWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5lbXkuZGV0YWlscy5ydWxlcy5jb250YWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsT2JqZWN0WzBdLmdyYXBwbGVQb3dlci5ncmFwcGxlSXRlbSA9IGVuZW15LmRldGFpbHMucnVsZXMuY29udGFpbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxPYmplY3RbMF0uZ3JhcHBsZVBvd2VyLnByZXZpZXdQaWN0dXJlID0gZW5lbXkuZGV0YWlscy5ydWxlcy5vYmplY3RQaWN0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbE9iamVjdFswXS5ncmFwcGxlUG93ZXIubmFtZSA9IChlbmVteS5kZXRhaWxzLm9iamVjdE5hbWUpID8gZW5lbXkuZGV0YWlscy5vYmplY3ROYW1lIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxPYmplY3RbMF0uc3BlZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbE9iamVjdFswXS5hYnNvbHV0ZUxpbmsgPSBlbmVteS5kZXRhaWxzLnJ1bGVzLm9iamVjdFBpY3R1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG51bWJlck9mRWxlbWVudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY2FsbE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCByZXN1bHRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIHRvIG1vdmUgZW5lbXksIGNoYW5nZSBkaXJyZWN0aW9uXHJcbmFuZCBncmF2aXR5IGVmZmVjdHNcclxuXHJcbiA9PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBncm91bmRFbmVteU1vdmUoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBsZXZlbEluZm9ybWF0aW9uID0gX2EubGV2ZWxJbmZvcm1hdGlvbjtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZ3JvdW5kUGxheWVyO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgZ3JvdW5kUGxheWVyID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdyb3VuZFBsYXllckNoYXJhY3RlcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLnRhcmdldEFuZ2xlID4gMTAwICYmIHRoaXMudGFyZ2V0QW5nbGUgPD0gMjYwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLnRhcmdldEFuZ2xlID4gMjgwIHx8IHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLnRhcmdldEFuZ2xlID49IDAgJiYgdGhpcy50YXJnZXRBbmdsZSA8PSA4MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID0gJ3JpZ2h0JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0V2FsbFRvdWNoICYmICF0aGlzLmlzSnVtcCAmJiAhdGhpcy5wbGF5ZXJJblJhbmdlICYmIHRoaXMuY3VycmVudEJlaGF2aW9yICE9IFwiZmluZFwiKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID0gJ3JpZ2h0JztcclxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRXYWxsVG91Y2ggJiYgIXRoaXMuaXNKdW1wICYmICF0aGlzLnBsYXllckluUmFuZ2UgJiYgdGhpcy5jdXJyZW50QmVoYXZpb3IgIT0gXCJmaW5kXCIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcgJiYgdGhpcy5pc1J1bilcclxuICAgICAgICAgICAgICAgIHRoaXMueCArPSB0aGlzLnNwZWVkO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID09PSAnbGVmdCcgJiYgdGhpcy5pc1J1bilcclxuICAgICAgICAgICAgICAgIHRoaXMueCAtPSB0aGlzLnNwZWVkO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ3JvdW5kVG91Y2ggJiYgZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnkgKz0gbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdyb3VuZFRvdWNoICYmICFncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueSArPSBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgKyBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5ncm91bmRFbmVteU1vdmUgPSBncm91bmRFbmVteU1vdmU7XHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5KdW1wIG9mIGVuZW15IHVuaXRcclxuXHJcbiA9PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBncm91bmRQbGF5ZXJKdW1wKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgYWxsQmxvY2tzID0gX2EuYWxsQmxvY2tzLCBsZXZlbEluZm9ybWF0aW9uID0gX2EubGV2ZWxJbmZvcm1hdGlvbjtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZXh0cmFTZWNvbmRzLCBjdXJyZW50QmxvY2tJbmRleCwgbGVhZGVyQmxvY2ssIGJsb2NrSGVpZ2h0O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgZXh0cmFTZWNvbmRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4ID0gKHRoaXMuY3VycmVudEdyb3VuZEJsb2NrKSA/IHRoaXMuY3VycmVudEdyb3VuZEJsb2NrLmluZGV4IDogbnVsbDtcclxuICAgICAgICAgICAgbGVhZGVyQmxvY2sgPSBhbGxCbG9ja3MuZmluZChmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICAgICAgICAgIHZhciBib3R0b21CbG9ja0luZGV4ID0gY3VycmVudEJsb2NrSW5kZXggLSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrLmluZGV4ID09PSBib3R0b21CbG9ja0luZGV4O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGV4dHJhU2Vjb25kcyAlIDEwID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ3JvdW5kVG91Y2ggJiYgdGhpcy5qdW1wSW1wdWxzIDwgMCAmJiBleHRyYVNlY29uZHMgJSAxMCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSdW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNKdW1wID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25MZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JvdW5kVG91Y2ggJiYgdGhpcy5pc0p1bXAgJiYgIXRoaXMuaXNKdW1wRG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrSGVpZ2h0ID0gKHRoaXMuanVtcEJsb2NrKSA/IHRoaXMuanVtcEJsb2NrLmhlaWdodCArIHRoaXMuaGVpZ2h0IDogMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGVhZGVyQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlYWRlckJsb2NrLmRldGFpbHMudHlwZSA9PT0gXCJsZWFkZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tIZWlnaHQgPSBsZWFkZXJCbG9jay5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tIZWlnaHQgPSAoYmxvY2tIZWlnaHQgPiAxMjApID8gMTIwIDogYmxvY2tIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5qdW1wSW1wdWxzID0gKHRoaXMuanVtcFNwZWVkICogbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5ICsgYmxvY2tIZWlnaHQpICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSArPSB0aGlzLmp1bXBJbXB1bHM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWFkZXJCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVhZGVyQmxvY2suZGV0YWlscy50eXBlID09PSBcImxlYWRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VuZFRvdWNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSdW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmdyb3VuZFBsYXllckp1bXAgPSBncm91bmRQbGF5ZXJKdW1wO1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuTWV0aG9kIHRvIHVzZSBzdGFpcnMgd2hlbiBlbmVteSBhdCB0aGUgdG9wIG9mIHRoZSBsZWFkZXJcclxuXHJcbiA9PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBqdW1wRG93bihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgZXh0cmFTZWNvbmRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICBpZiAoZXh0cmFTZWNvbmRzICUgMTAgPT09IDApIHtcclxuICAgICAgICBpZiAodGhpcy5ncm91bmRUb3VjaCAmJiB0aGlzLm9uTGVhZGVyICYmIHRoaXMuaXNKdW1wRG93biAmJiB0aGlzLmN1cnJlbnRHcm91bmRCbG9jay5kZXRhaWxzLnR5cGUgPT09IFwibGVhZGVyXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5qdW1wSW1wdWxzID0gdGhpcy5qdW1wU3BlZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuaXNSdW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy55ICs9IHRoaXMuanVtcEltcHVscztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5qdW1wRG93biA9IGp1bXBEb3duO1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuaW5pdCBkZXRlY3QgTlBDIGFuZCBwbGF5ZXJcclxuXHJcbiA9PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5mdW5jdGlvbiBlbmVteURldGVjdE5wYyhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIG5wY0RhdGEgPSBfYS5ucGNEYXRhLCBhbGxCbG9ja3MgPSBfYS5hbGxCbG9ja3MsIG9iamVjdEludGVyc2VjdGlvbkRldGVjdCA9IF9hLm9iamVjdEludGVyc2VjdGlvbkRldGVjdDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2ksIG5wY0RhdGFfMSwgcGVyc29uLCBmaW5kVW5pdDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5ZXJJblJhbmdlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pID0gMCwgbnBjRGF0YV8xID0gbnBjRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBucGNEYXRhXzEubGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGVyc29uID0gbnBjRGF0YV8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBlcnNvbiB8fCBwZXJzb24ueCA+IHdpbmRvdy5pbm5lcldpZHRoICsgcGVyc29uLndpZHRoIHx8IHBlcnNvbi54IDwgLTEwMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJzb24ueSA+IHdpbmRvdy5pbm5lckhlaWdodCArIHBlcnNvbi5oZWlnaHQgfHwgcGVyc29uLnkgPCAtMTAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmRldGFpbHMudHlwZSA9PT0gJ2VuZW15X3NwYXduZXInICYmIHBlcnNvbi5kZXRhaWxzLnR5cGUgPT09ICducGNfc3Bhd25lcicgJiYgcGVyc29uLm9iamVjdFByZXNlbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhaWxzLnR5cGUgPT09ICducGNfc3Bhd25lcicgJiYgcGVyc29uLmRldGFpbHMudHlwZSA9PT0gJ2VuZW15X3NwYXduZXInICYmIHBlcnNvbi5vYmplY3RQcmVzZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscy50eXBlID09PSAnbnBjX3NwYXduZXInICYmIHBlcnNvbi5kZXRhaWxzLnR5cGUgPT09ICdoaWRkZW5fZW5lbXlfc3Bhd25lcicgJiYgcGVyc29uLm9iamVjdFByZXNlbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhaWxzLnR5cGUgPT09ICdoaWRkZW5fZW5lbXlfc3Bhd25lcicgJiYgcGVyc29uLmRldGFpbHMudHlwZSA9PT0gJ25wY19zcGF3bmVyJyAmJiBwZXJzb24ub2JqZWN0UHJlc2VudCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFpbHN0eXBlID09PSAndGltZXJfZW5lbXlfc3Bhd25lcicgJiYgcGVyc29uLmRldGFpbHMudHlwZSA9PT0gJ25wY19zcGF3bmVyJyAmJiBwZXJzb24ub2JqZWN0UHJlc2VudCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGRldGVjdFBsYXllci5jYWxsKHRoaXMsIHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBncm91bmRQbGF5ZXI6IHBlcnNvbiwgYWxsQmxvY2tzOiBhbGxCbG9ja3MsIG9iamVjdEludGVyc2VjdGlvbkRldGVjdDogb2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBmaW5kVW5pdCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmluZFVuaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZpbmRVbml0XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9pKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5lbmVteURldGVjdE5wYyA9IGVuZW15RGV0ZWN0TnBjO1xyXG5mdW5jdGlvbiBkZXRlY3RQbGF5ZXIoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBncm91bmRQbGF5ZXIgPSBfYS5ncm91bmRQbGF5ZXIsIGFsbEJsb2NrcyA9IF9hLmFsbEJsb2Nrcywgb2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0ID0gX2Eub2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBleHRyYVNlY29uZHMsIGRpc3RhbmNlWCwgZGlzdGFuY2VZLCBhbmdsZSwgZmluZEJhcnJpZXIsIGRpcmVjdGlvblgsIGRpcmVjdGlvblksIHJhbmRvbWl6ZXJDaGVjaywgc2VhcmNoU3RlcHMsIGxvY2FsWFJheV8xLCBsb2NhbFlSYXlfMSwgZGVjcmVhc2VWYWx1ZSwgaW5kZXg7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgICAgICAgICAgaWYgKGV4dHJhU2Vjb25kcyAlIDIwMCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGxheWVySW5SYW5nZSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRCZWhhdmlvciA9ICh0aGlzLmN1cnJlbnRCZWhhdmlvciA9PT0gXCJzdGF0aWNcIikgPyBcInN0YXRpY1wiIDogXCJmaW5kXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllckluUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWdyb3VuZFBsYXllciB8fCAhYWxsQmxvY2tzIHx8IHRoaXMucGxheWVySW5SYW5nZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgIGlmICgodGhpcy54ID4gd2luZG93LmlubmVyV2lkdGggKyAxMDAgfHwgdGhpcy54IDwgLTEwMCkgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLnkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKyAxMDAgfHwgdGhpcy55IDwgLTEwMCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICBkaXN0YW5jZVggPSBNYXRoLm1heCh0aGlzLngsIGdyb3VuZFBsYXllci54KSAtIE1hdGgubWluKHRoaXMueCwgZ3JvdW5kUGxheWVyLngpO1xyXG4gICAgICAgICAgICBkaXN0YW5jZVkgPSBNYXRoLm1heCh0aGlzLnksIGdyb3VuZFBsYXllci55KSAtIE1hdGgubWluKHRoaXMueSwgZ3JvdW5kUGxheWVyLnkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZXRlY3RSYW5nZSA8IGRpc3RhbmNlWCB8fCB0aGlzLmRldGVjdFJhbmdlIDwgZGlzdGFuY2VZKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgYW5nbGUgPSB0aGlzLmZpbmRBbmdsZVRvU2hpcCh7IGNsb3Nlc3RVbml0OiBncm91bmRQbGF5ZXIgfSk7XHJcbiAgICAgICAgICAgIGFuZ2xlID0gKGFuZ2xlID09PSAwKSA/IDEgOiBhbmdsZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEJlaGF2aW9yID09PSBcImRlc3Ryb3lcIiB8fCAodGhpcy5jdXJyZW50QmVoYXZpb3IgPT09IFwic3RhdGljXCIgJiYgdGhpcy5wbGF5ZXJJblJhbmdlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRBbmdsZSA9IChhbmdsZSA8IDM2MCkgPyBhbmdsZSArIDEgOiBhbmdsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5kQmFycmllciA9IHt9O1xyXG4gICAgICAgICAgICBkaXJlY3Rpb25YID0gKHRoaXMueCA+PSBncm91bmRQbGF5ZXIueCkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvblkgPSAodGhpcy55ID49IGdyb3VuZFBsYXllci55KSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgcmFuZG9taXplckNoZWNrID0gbWFpbkdhbWVPYmplY3QuZ2FtZVJhbmRvbWl6ZXIoMzAsIDIwKTtcclxuICAgICAgICAgICAgaWYgKGV4dHJhU2Vjb25kcyAlIHJhbmRvbWl6ZXJDaGVjayAhPSAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgc2VhcmNoU3RlcHMgPSAyMDtcclxuICAgICAgICAgICAgaWYgKChkaXN0YW5jZVggfHwgZGlzdGFuY2VYID09IDApICYmIChkaXN0YW5jZVkgfHwgZGlzdGFuY2VZID09IDApICYmICF0aGlzLnBsYXllckluUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGxvY2FsWFJheV8xID0gdGhpcy54LCBsb2NhbFlSYXlfMSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgIGRlY3JlYXNlVmFsdWUgPSBkaXN0YW5jZVkgLyBkaXN0YW5jZVg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gZGlzdGFuY2VYOyBpbmRleCA+IDA7IGluZGV4IC09IHNlYXJjaFN0ZXBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvblggJiYgZGlyZWN0aW9uWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFhSYXlfMSAtPSBzZWFyY2hTdGVwcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxZUmF5XzEgLT0gZGVjcmVhc2VWYWx1ZSAqIHNlYXJjaFN0ZXBzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uWCAmJiAhZGlyZWN0aW9uWSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFhSYXlfMSAtPSBzZWFyY2hTdGVwcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxZUmF5XzEgKz0gZGVjcmVhc2VWYWx1ZSAqIHNlYXJjaFN0ZXBzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGlvblggJiYgIWRpcmVjdGlvblkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxYUmF5XzEgKz0gc2VhcmNoU3RlcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsWVJheV8xICs9IGRlY3JlYXNlVmFsdWUgKiBzZWFyY2hTdGVwcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXJlY3Rpb25YICYmIGRpcmVjdGlvblkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxYUmF5XzEgKz0gc2VhcmNoU3RlcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsWVJheV8xIC09IGRlY3JlYXNlVmFsdWUgKiBzZWFyY2hTdGVwcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluZEJhcnJpZXIgPSBhbGxCbG9ja3MuZmluZChmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChNYXRoLm1heChsb2NhbFhSYXlfMSwgYmxvY2sueCkgLSBNYXRoLm1pbihsb2NhbFhSYXlfMSwgYmxvY2sueCkpIDwgMTAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTWF0aC5tYXgobG9jYWxZUmF5XzEsIGJsb2NrLnkpIC0gTWF0aC5taW4obG9jYWxZUmF5XzEsIGJsb2NrLnkpKSA8IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrLmRldGFpbHMuY29sbGlzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaENvbGxpc2lvbiA9IG9iamVjdEludGVyc2VjdGlvbkRldGVjdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogbG9jYWxYUmF5XzEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBsb2NhbFlSYXlfMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBibG9jay54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogYmxvY2sueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBibG9jay53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYmxvY2suaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoQ29sbGlzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmluZEJhcnJpZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbmRCYXJyaWVyKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllckluUmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QmVoYXZpb3IgPSAodGhpcy5jdXJyZW50QmVoYXZpb3IgPT09IFwic3RhdGljXCIpID8gXCJzdGF0aWNcIiA6IFwiZGVzdHJveVwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRBbmdsZSA9IGFuZ2xlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRydWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZGV0ZWN0UGxheWVyID0gZGV0ZWN0UGxheWVyO1xyXG5mdW5jdGlvbiBncm91bmRFbmVteURlY2lkZWQoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBhbGxCbG9ja3MgPSBfYS5hbGxCbG9ja3M7XHJcbiAgICBpZiAoIXRoaXMuY3VycmVudEJlaGF2aW9yKSB7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5ncm91bmRFbmVteURlY2lkZWQgPSBncm91bmRFbmVteURlY2lkZWQ7XHJcbmZ1bmN0aW9uIGdyb3VuZEVuZW15RmluZChfYSkge1xyXG4gICAgdmFyIGZpbmRCb3R0b21CbG9jayA9IF9hLmZpbmRCb3R0b21CbG9jaztcclxuICAgIGlmICh0aGlzLmN1cnJlbnRCZWhhdmlvciA9PT0gXCJmaW5kXCIgJiYgZmluZEJvdHRvbUJsb2NrICYmICF0aGlzLmlzUnVuICYmICF0aGlzLmxlZnRXYWxsVG91Y2ggfHxcclxuICAgICAgICB0aGlzLmN1cnJlbnRCZWhhdmlvciA9PT0gXCJmaW5kXCIgJiYgZmluZEJvdHRvbUJsb2NrICYmICF0aGlzLmlzUnVuICYmICF0aGlzLnJpZ2h0V2FsbFRvdWNoKSB7XHJcbiAgICAgICAgdGhpcy5pc1J1biA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aGlzLmN1cnJlbnRCZWhhdmlvciA9PT0gXCJmaW5kXCIgJiYgIWZpbmRCb3R0b21CbG9jayAmJiAhdGhpcy5uZXh0R3JvdW5kQmxvY2sgJiYgIXRoaXMuaXNSdW4pIHtcclxuICAgICAgICB0aGlzLmlzUnVuID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ3JvdW5kRW5lbXlQdXJzdWl0KF9hKSB7XHJcbiAgICB2YXIgZmluZEJvdHRvbUJsb2NrID0gX2EuZmluZEJvdHRvbUJsb2NrO1xyXG4gICAgaWYgKHRoaXMucGxheWVySW5SYW5nZSAmJiBmaW5kQm90dG9tQmxvY2sgJiYgIXRoaXMubGVmdFdhbGxUb3VjaCB8fFxyXG4gICAgICAgIHRoaXMucGxheWVySW5SYW5nZSAmJiBmaW5kQm90dG9tQmxvY2sgJiYgIXRoaXMucmlnaHRXYWxsVG91Y2ggfHxcclxuICAgICAgICB0aGlzLnBsYXllckluUmFuZ2UgJiYgdGhpcy5uZXh0R3JvdW5kQmxvY2sgJiYgIXRoaXMubGVmdFdhbGxUb3VjaCB8fFxyXG4gICAgICAgIHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLm5leHRHcm91bmRCbG9jayAmJiAhdGhpcy5yaWdodFdhbGxUb3VjaClcclxuICAgICAgICB0aGlzLmlzUnVuID0gdHJ1ZTtcclxuICAgIGlmICh0aGlzLnBsYXllckluUmFuZ2UgJiYgIXRoaXMubmV4dEdyb3VuZEJsb2NrICYmICFmaW5kQm90dG9tQmxvY2spXHJcbiAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGdyb3VuZEVuZW15UGF0aEZpbmRlcihfYSkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBhbGxCbG9ja3MgPSBfYS5hbGxCbG9ja3M7XHJcbiAgICB2YXIgbWF4Qm94VG9Nb3ZlID0gKHRoaXMuY3VycmVudEJlaGF2aW9yID09PSBcImZpbmRcIikgPyAyIDogKHRoaXMuY3VycmVudEJlaGF2aW9yID09PSBcImRlc3Ryb3lcIikgPyA0IDogMTtcclxuICAgIHZhciBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgIGlmIChleHRyYVNlY29uZHMgJSA1ID09PSAwKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEJlaGF2aW9yID09PSBcInN0YW5kXCIgfHwgdGhpcy5jdXJyZW50QmVoYXZpb3IgPT09IFwic3RhdGljXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkZWFkbHlCbG9jayA9IG51bGw7XHJcbiAgICAgICAgdmFyIGluZGV4T2ZOZXh0QmxvY2tfMSA9IG51bGw7XHJcbiAgICAgICAgdmFyIGZpbmRCb3R0b21CbG9jayA9IG51bGw7XHJcbiAgICAgICAgdmFyIGZpbmRCYWNrQmxvY2sgPSBudWxsO1xyXG4gICAgICAgIHZhciBibG9ja1VuZGVyVGhlSnVtcCA9IG51bGw7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRCbG9ja0luZGV4XzEgPSAodGhpcy5jdXJyZW50R3JvdW5kQmxvY2spID8gdGhpcy5jdXJyZW50R3JvdW5kQmxvY2suaW5kZXggOiBudWxsO1xyXG4gICAgICAgIC8vIENvbnRpbnVlIHRvIG1vdmVcclxuICAgICAgICBpZiAoZXh0cmFTZWNvbmRzICUgdGhpcy5jaGFuZ2VNb2RlUmFuZG9taXplciA9PT0gMCAmJiAhdGhpcy5pc1J1biAmJiB0aGlzLmdyb3VuZFRvdWNoICYmICF0aGlzLnBsYXllckluUmFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID0gKHRoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JykgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4gICAgICAgICAgICB0aGlzLmlzUnVuID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PSAgZmluZCBuZXh0IGJsb2NrIGluIGZyb250XHJcbiAgICAgICAgaWYgKGN1cnJlbnRCbG9ja0luZGV4XzEpIHtcclxuICAgICAgICAgICAgaW5kZXhPZk5leHRCbG9ja18xID0gKHRoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JykgP1xyXG4gICAgICAgICAgICAgICAgY3VycmVudEJsb2NrSW5kZXhfMSArIHBhcnNlSW50KHRoaXMuY3VycmVudEdyb3VuZEJsb2NrLm1hcFNpemVWZXJ0aWNhbCkgOlxyXG4gICAgICAgICAgICAgICAgY3VycmVudEJsb2NrSW5kZXhfMSAtIHBhcnNlSW50KHRoaXMuY3VycmVudEdyb3VuZEJsb2NrLm1hcFNpemVWZXJ0aWNhbCk7XHJcbiAgICAgICAgICAgIHZhciBmaW5kSG9yaXpvbnRhbEJsb2NrID0gYWxsQmxvY2tzLmZpbmQoZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2suaW5kZXggPT09IGluZGV4T2ZOZXh0QmxvY2tfMSAmJiBibG9jay5kZXRhaWxzLmNvbGxpc2lvbiB8fCBibG9jay5pbmRleCA9PT0gaW5kZXhPZk5leHRCbG9ja18xICYmIGJsb2NrLmRldGFpbHMudHlwZSA9PT0gXCJsZWFkZXJcIjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dEdyb3VuZEJsb2NrID0gKGZpbmRIb3Jpem9udGFsQmxvY2spID8gZmluZEhvcml6b250YWxCbG9jayA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT0gZmluZCBibG9jayBvbiB0aGUgYmFja1xyXG4gICAgICAgIGlmIChjdXJyZW50QmxvY2tJbmRleF8xICYmICF0aGlzLm5leHRHcm91bmRCbG9jaykge1xyXG4gICAgICAgICAgICB2YXIgYmFja0Jsb2NrSW5kZXhfMSA9ICh0aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcpID9cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4XzEgLSBwYXJzZUludCh0aGlzLmN1cnJlbnRHcm91bmRCbG9jay5tYXBTaXplVmVydGljYWwpIC0gMSA6XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2tJbmRleF8xICsgcGFyc2VJbnQodGhpcy5jdXJyZW50R3JvdW5kQmxvY2subWFwU2l6ZVZlcnRpY2FsKSAtIDE7XHJcbiAgICAgICAgICAgIGZpbmRCYWNrQmxvY2sgPSBhbGxCbG9ja3MuZmluZChmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBibG9jay5pbmRleCA9PT0gYmFja0Jsb2NrSW5kZXhfMSAmJiBibG9jay5kZXRhaWxzLmNvbGxpc2lvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT0gIGZpbmQgYmxvY2sgb24gdGhlIGJvdHRvbVxyXG4gICAgICAgIGlmICghdGhpcy5uZXh0R3JvdW5kQmxvY2sgJiYgdGhpcy5jdXJyZW50R3JvdW5kQmxvY2spIHtcclxuICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoYmxvY2tOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGZpbmRCb3R0b21CbG9jayA9IGFsbEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib3R0b21CbG9ja0luZGV4ID0gKF90aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJsb2NrSW5kZXhfMSArIHBhcnNlSW50KF90aGlzLmN1cnJlbnRHcm91bmRCbG9jay5tYXBTaXplVmVydGljYWwpICsgYmxvY2tOdW1iZXIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2tJbmRleF8xIC0gcGFyc2VJbnQoX3RoaXMuY3VycmVudEdyb3VuZEJsb2NrLm1hcFNpemVWZXJ0aWNhbCkgKyBibG9ja051bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2suaW5kZXggPT09IGJvdHRvbUJsb2NrSW5kZXggJiYgYmxvY2suZGV0YWlscy5jb2xsaXNpb247XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChmaW5kQm90dG9tQmxvY2spXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yICh2YXIgYmxvY2tOdW1iZXIgPSAxOyBibG9ja051bWJlciA8PSBtYXhCb3hUb01vdmU7IGJsb2NrTnVtYmVyKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMShibG9ja051bWJlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVfMSA9PT0gXCJicmVha1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubmV4dEJvdHRvbUJsb2NrID0gKGZpbmRCb3R0b21CbG9jaykgPyBmaW5kQm90dG9tQmxvY2sgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT0gc3RvcCBvbiB0aGUgZWRnZVxyXG4gICAgICAgIGlmICghdGhpcy5uZXh0R3JvdW5kQmxvY2sgJiYgdGhpcy5pc1J1biAmJiAhdGhpcy5wbGF5ZXJJblJhbmdlIHx8XHJcbiAgICAgICAgICAgICF0aGlzLm5leHRHcm91bmRCbG9jayAmJiB0aGlzLmlzUnVuICYmICFmaW5kQm90dG9tQmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VNb2RlUmFuZG9taXplciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMudW5pdFJhbmRvbWl6ZSArIDEwMCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNSdW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29udGludWUgbW92ZSBpZiBibG9jayBvbiBiYWNrIGFuZCBibG9jayBvbiB0aGUgYm90dG9tIGFuZCBjYW50IHNlZSB0YXJnZXRcclxuICAgICAgICAvLyBpZiBibG9jayBhdCB0aGUgZnJvbnQganVtcCB0byB0aGUgYmxvY2tcclxuICAgICAgICBpZiAodGhpcy5wbGF5ZXJJblJhbmdlICYmIHRoaXMubGVmdFdhbGxUb3VjaCAmJiB0aGlzLmN1cnJlbnRCZWhhdmlvciAhPSBcImZpbmRcIiAmJiB0aGlzLmN1cnJlbnRHcm91bmRCbG9jayB8fFxyXG4gICAgICAgICAgICB0aGlzLnBsYXllckluUmFuZ2UgJiYgdGhpcy5yaWdodFdhbGxUb3VjaCAmJiB0aGlzLmN1cnJlbnRCZWhhdmlvciAhPSBcImZpbmRcIiAmJiB0aGlzLmN1cnJlbnRHcm91bmRCbG9jayB8fFxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRCZWhhdmlvciA9PT0gXCJmaW5kXCIgJiYgdGhpcy5yaWdodFdhbGxUb3VjaCAmJiB0aGlzLmN1cnJlbnRHcm91bmRCbG9jayB8fCB0aGlzLmN1cnJlbnRCZWhhdmlvciA9PT0gXCJmaW5kXCIgJiYgdGhpcy5jdXJyZW50R3JvdW5kQmxvY2sgJiYgdGhpcy5jdXJyZW50V2FsbEJsb2NrIHx8XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEJlaGF2aW9yID09PSBcImRlc3Ryb3lcIiAmJiB0aGlzLmxlZnRXYWxsVG91Y2ggJiYgdGhpcy5jdXJyZW50R3JvdW5kQmxvY2sgfHwgdGhpcy5jdXJyZW50QmVoYXZpb3IgPT09IFwiZGVzdHJveVwiICYmIHRoaXMuY3VycmVudEdyb3VuZEJsb2NrICYmIHRoaXMuY3VycmVudFdhbGxCbG9jaykge1xyXG4gICAgICAgICAgICB0aGlzLmp1bXBCbG9jayA9IGFsbEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvdHRvbUJsb2NrSW5kZXggPSAoX3RoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JykgP1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4XzEgKyBwYXJzZUludChfdGhpcy5jdXJyZW50R3JvdW5kQmxvY2subWFwU2l6ZVZlcnRpY2FsKSAtIDEgOlxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4XzEgLSBwYXJzZUludChfdGhpcy5jdXJyZW50R3JvdW5kQmxvY2subWFwU2l6ZVZlcnRpY2FsKSAtIDE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2suaW5kZXggPT09IGJvdHRvbUJsb2NrSW5kZXggJiYgYmxvY2suZGV0YWlscy5jb2xsaXNpb247XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBibG9ja1VuZGVyVGhlSnVtcCA9IGFsbEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvdHRvbUJsb2NrSW5kZXggPSAoX3RoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JykgP1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4XzEgKyBwYXJzZUludChfdGhpcy5jdXJyZW50R3JvdW5kQmxvY2subWFwU2l6ZVZlcnRpY2FsKSAtIDMgOlxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4XzEgLSBwYXJzZUludChfdGhpcy5jdXJyZW50R3JvdW5kQmxvY2subWFwU2l6ZVZlcnRpY2FsKSAtIDM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2suaW5kZXggPT09IGJvdHRvbUJsb2NrSW5kZXggJiYgYmxvY2suZGV0YWlscy5jb2xsaXNpb247XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5qdW1wQmxvY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNKdW1wID0gKCF0aGlzLmp1bXBCbG9jay5kZXRhaWxzLmRlYWRseSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5qdW1wQmxvY2suZGV0YWlscy5kZWFkbHkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChibG9ja1VuZGVyVGhlSnVtcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0p1bXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wbGF5ZXJJblJhbmdlICYmIHRoaXMub25MZWFkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0p1bXAgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMucGxheWVySW5SYW5nZSAmJiBmaW5kQm90dG9tQmxvY2sgJiYgIXRoaXMuaXNSdW4gJiYgZmluZEJhY2tCbG9jayB8fFxyXG4gICAgICAgICAgICAhdGhpcy5pc1J1biAmJiAhZmluZEJvdHRvbUJsb2NrICYmIHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLmp1bXBCbG9jayAmJiAhYmxvY2tVbmRlclRoZUp1bXApIHtcclxuICAgICAgICAgICAgdGhpcy5pc1J1biA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyb3VuZEVuZW15RmluZC5jYWxsKHRoaXMsIHsgZmluZEJvdHRvbUJsb2NrOiBmaW5kQm90dG9tQmxvY2sgfSk7XHJcbiAgICAgICAgZ3JvdW5kRW5lbXlQdXJzdWl0LmNhbGwodGhpcywgeyBmaW5kQm90dG9tQmxvY2s6IGZpbmRCb3R0b21CbG9jayB9KTsgLy8gaWYgc2VlIHRhcmdldCBjb250aW51ZSB3YWxrXHJcbiAgICAgICAgaWYgKGJsb2NrVW5kZXJUaGVKdW1wICYmIHRoaXMuanVtcEJsb2NrICYmIHRoaXMubGVmdFdhbGxUb3VjaCB8fFxyXG4gICAgICAgICAgICBibG9ja1VuZGVyVGhlSnVtcCAmJiB0aGlzLmp1bXBCbG9jayAmJiB0aGlzLnJpZ2h0V2FsbFRvdWNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNSdW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLnRhcmdldEFuZ2xlICYmIHRoaXMub25MZWFkZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0QW5nbGUgPiAyMCAmJiB0aGlzLnRhcmdldEFuZ2xlIDwgMTYwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzSnVtcERvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm5leHRHcm91bmRCbG9jayAmJiB0aGlzLmN1cnJlbnRHcm91bmRCbG9jayAmJiAhdGhpcy5qdW1wQmxvY2spIHtcclxuICAgICAgICAgICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAoYmxvY2tOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGRlYWRseUJsb2NrID0gYWxsQmxvY2tzLmZpbmQoZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlYWRseUJsb2NrSW5kZXggPSAoX3RoaXMucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JykgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2tJbmRleF8xICsgcGFyc2VJbnQoX3RoaXMubmV4dEdyb3VuZEJsb2NrLm1hcFNpemVWZXJ0aWNhbCkgLSBibG9ja051bWJlciA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9ja0luZGV4XzEgLSAocGFyc2VJbnQoX3RoaXMubmV4dEdyb3VuZEJsb2NrLm1hcFNpemVWZXJ0aWNhbCkgKiAyKSAtIGJsb2NrTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jay5pbmRleCA9PT0gZGVhZGx5QmxvY2tJbmRleCAmJiBibG9jay5kZXRhaWxzLmNvbGxpc2lvbiAmJiBibG9jay5kZXRhaWxzLmRlYWRseTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlYWRseUJsb2NrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGJsb2NrTnVtYmVyID0gMTsgYmxvY2tOdW1iZXIgPD0gbWF4Qm94VG9Nb3ZlOyBibG9ja051bWJlcisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVfMiA9IF9sb29wXzIoYmxvY2tOdW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlXzIgPT09IFwiYnJlYWtcIilcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGVhZGx5QmxvY2spXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVuID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRXYWxsQmxvY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLmNvbGxpc2lvbiAmJiB0aGlzLmN1cnJlbnRXYWxsQmxvY2suZGV0YWlscy50eXBlID09PSBcImRvb3JcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1J1biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0p1bXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0U2lkZSA9ICh0aGlzLnggKyB0aGlzLndpZHRoKSAtIHRoaXMuY3VycmVudFdhbGxCbG9jay54O1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlZnRTaWRlID0gKHRoaXMuY3VycmVudFdhbGxCbG9jay54ICsgdGhpcy5jdXJyZW50V2FsbEJsb2NrLndpZHRoKSAtIHRoaXMueDtcclxuICAgICAgICAgICAgICAgIHRoaXMueCArPSAodGhpcy5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID09PSAncmlnaHQnKSA/IHJpZ2h0U2lkZSAtIDEgOiBsZWZ0U2lkZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEJlaGF2aW9yID0gKHRoaXMuY3VycmVudEJlaGF2aW9yID09PSBcInN0YXRpY1wiKSA/IFwic3RhdGljXCIgOiBcImZpbmRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRXYWxsQmxvY2sgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZ3JvdW5kRW5lbXlQYXRoRmluZGVyID0gZ3JvdW5kRW5lbXlQYXRoRmluZGVyO1xyXG5mdW5jdGlvbiBncm91bmRFbmVteVNob3QoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBhbGxCbG9ja3MgPSBfYS5hbGxCbG9ja3MsIGNhbGxiYWNrID0gX2EuY2FsbGJhY2ssIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIGlmIChtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZU92ZXIpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGV4dHJhU2Vjb25kcyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRXh0cmFTZWNvbmRzO1xyXG4gICAgLy8gd2hlbiBzZWUgY2hhcmFjdGVyIGVuZW15IHN0b3Agc2hvdCB0byBpdHMgbG9jYXRpb25cclxuICAgIGlmICgodGhpcy5zaG90QW5nbGUgfHwgdGhpcy5zaG90QW5nbGUgPT09IDApICYmIHRoaXMucGxheWVySW5SYW5nZSAmJiB0aGlzLm9iamVjdFByZXNlbnQgJiYgZXh0cmFTZWNvbmRzICUgNSA9PT0gMCkge1xyXG4gICAgICAgIHRoaXMuaXNTaG90ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3RBbmdsZSA9IE1hdGguZmxvb3IodGhpcy50YXJnZXRBbmdsZSk7XHJcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBjb25zdHJ1Y3RvcnMuQnVsbGV0Q29uc3RydWN0LCBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzLlNvdW5kQ3JlYXRvciwgKHRoaXMuZGV0YWlscy50eXBlID09PSAnbnBjX3NwYXduZXInKSA/IFwicGxheWVyXCIgOiBcImdyb3VuZEVuZW15QnVsbGV0XCIsIFwiYWxsR3JvdW5kR2FtZUJ1bGxldHNcIik7XHJcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlscy50eXBlID09PSAnbnBjX3NwYXduZXInKVxyXG4gICAgICAgICAgICB0aGlzLnBsYXllckluUmFuZ2UgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmdyb3VuZEVuZW15U2hvdCA9IGdyb3VuZEVuZW15U2hvdDtcclxuZnVuY3Rpb24gcmVzcGF3bkVuZW15KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzID0gX2EuY29uc3RydWN0b3JzLCBjb3N0dW1lQmxvY2tzID0gX2EuY29zdHVtZUJsb2NrcztcclxuICAgIHZhciBhbGxCbG9ja3MgPSAoY29zdHVtZUJsb2NrcykgPyBjb3N0dW1lQmxvY2tzIDogbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgIGxvYWRFbmVteVRvT2JqZWN0QXJyYXkoe1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICBsZXZlbER5bmFtaWNNYXBCbG9ja3M6IGFsbEJsb2NrcyxcclxuICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9ycyxcclxuICAgICAgICBjaGFyYWN0ZXJTZWxlY3RvcjogXCJoaWRkZW5fZW5lbXlfc3Bhd25lclwiXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnJlc3Bhd25FbmVteSA9IHJlc3Bhd25FbmVteTtcclxuZnVuY3Rpb24gcmVzcGF3bkVuZW15QnlUaW1lcihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycywgY3VycmVudEJsb2NrID0gX2EuY3VycmVudEJsb2NrO1xyXG4gICAgaWYgKG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UgfHwgIW1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lU3RhdHVzKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgIHZhciBhbGxFbmVteSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxFbmVteS5maWx0ZXIoZnVuY3Rpb24gKGVuZW15KSB7XHJcbiAgICAgICAgaWYgKGVuZW15LmRldGFpbHMudHlwZSAhPSAnbnBjX3NwYXduZXInICYmIGVuZW15LmhlYWx0aFBvaW50ID4gMFxyXG4gICAgICAgICAgICAmJiBlbmVteS54ID4gMCAtIDUwMCAmJiBlbmVteS55ID4gMCAtIDUwMCAmJiBlbmVteS54IDwgd2luZG93LmlubmVyV2lkdGggKyA1MDAgJiYgZW5lbXkueCA8IHdpbmRvdy5pbm5lckhlaWdodCArIDUwMClcclxuICAgICAgICAgICAgcmV0dXJuIGVuZW15O1xyXG4gICAgfSk7XHJcbiAgICB2YXIgYWxsQmxvY2tzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgIGlmIChjdXJyZW50QmxvY2suZGV0YWlscy50eXBlID09PSAndGltZXJfZW5lbXlfc3Bhd25lcicpIHtcclxuICAgICAgICBpZiAoZXh0cmFTZWNvbmRzICUgKHBhcnNlSW50KGN1cnJlbnRCbG9jay5kZXRhaWxzLnNwYXduU2Vjb25kcykgKiAxMDApID09PSAwICYmIGFsbEVuZW15Lmxlbmd0aCA8IGN1cnJlbnRCbG9jay5kZXRhaWxzLm1heE51bWJlck9mSXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0SWRfMSA9IChjdXJyZW50QmxvY2suZGV0YWlscy50YXJnZXRTcGF3bmVySWQpID8gY3VycmVudEJsb2NrLmRldGFpbHMudGFyZ2V0U3Bhd25lcklkLnNwbGl0KCcsJykgOiAxO1xyXG4gICAgICAgICAgICB2YXIgY29zdHVtZUJsb2NrcyA9IGFsbEJsb2Nrcy5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2suZGV0YWlscy50eXBlID09PSBcImhpZGRlbl9lbmVteV9zcGF3bmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0SWRfMS5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA9PSBibG9jay5kZXRhaWxzLnNwYXduZXJIaWRkZW5JZDsgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlc3Bhd25FbmVteSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMsIGNvc3R1bWVCbG9ja3M6IGNvc3R1bWVCbG9ja3MgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVsZXRlT2xkRW5lbXkoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbn1cclxuZXhwb3J0cy5yZXNwYXduRW5lbXlCeVRpbWVyID0gcmVzcGF3bkVuZW15QnlUaW1lcjtcclxuZnVuY3Rpb24gZGVsZXRlT2xkRW5lbXkoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGFsbEVuZW15ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15LmZpbHRlcihmdW5jdGlvbiAoZW5lbXkpIHtcclxuICAgICAgICBpZiAoZW5lbXkuZGV0YWlscy50eXBlICE9ICducGNfc3Bhd25lcicgJiYgZW5lbXkuaGVhbHRoUG9pbnQgPD0gMClcclxuICAgICAgICAgICAgcmV0dXJuIGVuZW15O1xyXG4gICAgfSk7XHJcbiAgICBpZiAoYWxsRW5lbXkubGVuZ3RoID4gMTAwKSB7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15LnNoaWZ0KCk7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi4vLi4vYXBwTWVudS9hcHBNZW51XCIpO1xyXG52YXIgcGFnZXNCdWlsZGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vYXBwTWVudS9wYWdlc0J1aWxkZXJcIik7XHJcbnZhciBnYW1lSGFuZ2FyTW9kdWxlc18xID0gcmVxdWlyZShcIi4vZ2FtZUhhbmdhck1vZHVsZXNcIik7XHJcbnZhciBnYW1lU2hvcE1vZHVsZV8xID0gcmVxdWlyZShcIi4vZ2FtZVNob3BNb2R1bGVcIik7XHJcbmV4cG9ydHMubGVhdmVTaG9wID0gZ2FtZVNob3BNb2R1bGVfMS5sZWF2ZVNob3A7XHJcbmZ1bmN0aW9uIHNob3BJbnZlbnRvcnkoX2EpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgZWxlbWVudCA9IF9hLmVsZW1lbnQsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBlbGVtZW50LnNob3BJbnZlbnRvcnlXcmFwcGVyLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICB2YXIgcGxheWVyT2JqZWN0ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgIHZhciBwbGF5ZXJPYmplY3REYXRhID0gcGxheWVyT2JqZWN0LmRhdGE7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgIHZhciBpdGVtUmVuZGVyID0gcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoeyB0YWdOYW1lOiAnZGl2Jywgc3R5bGVDbGFzczogJ2ludmVudG9yeS1pdGVtJywgaW5saW5lU3R5bGU6IFwiXCIsXHJcbiAgICAgICAgICAgIHBpY3R1cmVVcmw6IG51bGwsIGxpbmtVcmw6IG51bGwsIHRleHQ6IG51bGwsXHJcbiAgICAgICAgICAgIGlubmVyQ29udGVudDogKHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W2luZGV4XSkgPyBcIjxkaXYgY2xhc3M9XFxcImludmVudG9yeS1pbm5lci1pdGVtXFxcIj5cXG4gICAgICAgICAgICBcIiArICgocGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnlbaW5kZXhdLnR5cGUgPT09IFwiaW52ZW50b3J5IHdlYXBvblwiKSA/XHJcbiAgICAgICAgICAgICAgICAnPHNwYW4+JyArIHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W2luZGV4XS5ncmFwcGxlUG93ZXIubnVtYmVyICsgJzwvc3Bhbj4nIDogJycpICsgXCJcXG4gICAgICAgICAgICA8aW1nIHNyYz1cXFwiXCIgKyAoKHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W2luZGV4XS5sb2FkSW1hZ2UpID8gcHJvY2Vzcy5lbnYuSE9TVCArIHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W2luZGV4XS5sb2FkSW1hZ2UgOiBcIlwiKSArIFwiXFxcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cIiA6IFwiPGRpdiBjbGFzcz1cXFwiaW52ZW50b3J5LWlubmVyLWl0ZW1cXFwiPjwvZGl2PlwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IG51bGwsIGF0dHJpYnV0ZU5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTE6IG51bGwsIGF0dHJpYnV0ZU5hbWUxOiBudWxsIH0pO1xyXG4gICAgICAgIGl0ZW1SZW5kZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICghcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnlbaW5kZXhdKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBzaG93RGVzY3JpcHRpb25BcmVhKHsgc2VsZWN0T2JqZWN0OiBwbGF5ZXJPYmplY3REYXRhLmludmVudG9yeVtpbmRleF0sXHJcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaXRlbVJlbmRlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGhpZGVEZXNjcmlwdGlvbkFyZWEoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdGVtUmVuZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGxheWVyT2JqZWN0RGF0YSwgc2hvcEFyZWFJdGVtcywgcHJldml1c0ludmVudG9yeVNlbGVjdGVkSXRlbTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT2JqZWN0RGF0YSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvcEFyZWFJdGVtcyA9IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpdXNJbnZlbnRvcnlTZWxlY3RlZEl0ZW0gPSAobWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbSA9IChtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbSA9PSBpbmRleCkgPyBudWxsIDogaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaGFuZ2FyU2VsZWN0ZWRJdGVtIHx8IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaGFuZ2FyU2VsZWN0ZWRJdGVtID09PSAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGRpc2FibGVFZmZlY3RzKHsgcGxheWVyT2JqZWN0OiBwbGF5ZXJPYmplY3QsIGl0ZW06IHBsYXllck9iamVjdERhdGEuZ3Vuc1tzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbV0gfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRJdGVtVG9TdG9yYWdlKHsgbmFtZTogJ291dHNpZGUtc3RvcmFnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRJbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEluZGV4OiBzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2U6IHBsYXllck9iamVjdERhdGEuZ3VucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU3RvcmFnZTogcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtIHx8IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldml1c0ludmVudG9yeVNlbGVjdGVkSXRlbSAmJiAhcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnlbaW5kZXhdIHx8IHByZXZpdXNJbnZlbnRvcnlTZWxlY3RlZEl0ZW0gPT09IDAgJiYgIXBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W2luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dEl0ZW1Ub1N0b3JhZ2UoeyBuYW1lOiAnaW5zaWRlLXN0b3JhZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRJbmRleDogaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IHByZXZpdXNJbnZlbnRvcnlTZWxlY3RlZEl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2U6IHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFN0b3JhZ2U6IHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lSGFuZ2FyTW9kdWxlc18xLmxvYWRIYW5nYXIoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pOyB9KTtcclxuICAgICAgICBlbGVtZW50LnNob3BJbnZlbnRvcnlXcmFwcGVyLmFwcGVuZENoaWxkKGl0ZW1SZW5kZXIpO1xyXG4gICAgfTtcclxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBwbGF5ZXJPYmplY3REYXRhLmludmVudG9yeUNhcGFjaXR5OyBpbmRleCsrKSB7XHJcbiAgICAgICAgX2xvb3BfMShpbmRleCk7XHJcbiAgICB9XHJcbiAgICBlbGVtZW50LnNob3BJbnZlbnRvcnlXcmFwcGVyLnByZXBlbmQoc2FsZUJveCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KSk7XHJcbiAgICBnYW1lU2hvcE1vZHVsZV8xLnNhbGVCb3hMYWJlbENoYW5nZSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxufVxyXG5leHBvcnRzLnNob3BJbnZlbnRvcnkgPSBzaG9wSW52ZW50b3J5O1xyXG5mdW5jdGlvbiBzYWxlQm94KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBpdGVtUmVuZGVyID0gcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoeyB0YWdOYW1lOiAnZGl2JyxcclxuICAgICAgICBzdHlsZUNsYXNzOiAnc2hvcC1zYWxlLXBhcnQnLFxyXG4gICAgICAgIGlubGluZVN0eWxlOiBcIlwiLFxyXG4gICAgICAgIHBpY3R1cmVVcmw6IG51bGwsXHJcbiAgICAgICAgbGlua1VybDogbnVsbCxcclxuICAgICAgICB0ZXh0OiBudWxsLFxyXG4gICAgICAgIGlubmVyQ29udGVudDogXCI8ZGl2IGNsYXNzPVxcXCJzYWxlLWlubmVyLWl0ZW1cXFwiPlxcbiAgICAgICAgPC9kaXY+XCIsXHJcbiAgICAgICAgYXR0cmlidXRlOiBcImludmVudG9yeS1ib3hcIiwgYXR0cmlidXRlTmFtZTogXCJpZFwiLFxyXG4gICAgICAgIGF0dHJpYnV0ZTE6IG51bGwsIGF0dHJpYnV0ZU5hbWUxOiBudWxsIH0pO1xyXG4gICAgaXRlbVJlbmRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcGxheWVyT2JqZWN0RGF0YSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QuZGF0YTtcclxuICAgICAgICB2YXIgc2hvcEFyZWFJdGVtcyA9IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW07XHJcbiAgICAgICAgaWYgKCghc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gJiYgc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gIT0gMCkgJiZcclxuICAgICAgICAgICAgKCFzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSAmJiBzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSAhPSAwKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHByb2Nlc3MuZW52LlNIT1BfU0FMRV9XSU5ET1cgPSAndHJ1ZSc7XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuU0hPUF9BQ1RJVkVfV0lORE9XID0gJ3RydWUnO1xyXG4gICAgICAgIGlmIChzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSB8fCBzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSA9PT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgaW52ZW50b3J5SXRlbSA9IHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5W3Nob3BBcmVhSXRlbXMuaW52ZW50b3J5U2VsZWN0ZWRJdGVtXTtcclxuICAgICAgICAgICAgdmFyIHNhbGVQcmljZSA9IChpbnZlbnRvcnlJdGVtKSA/IGludmVudG9yeUl0ZW0ucHJpY2UgOiAwO1xyXG4gICAgICAgICAgICB2YXIgZmluYWxQcmljZVBlcmNlbnQgPSBzYWxlUGVyY2VudEFkZFRvUHJpY2UoeyBwcmljZTogc2FsZVByaWNlLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgIGlmICghaW52ZW50b3J5SXRlbSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5sZWF2ZVNob3AoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSxcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgIHRleHQ6IChmaW5hbFByaWNlUGVyY2VudCkgPyBcIllvdSB3YW50IHRvIHNhbGUgXCIgKyAoKGludmVudG9yeUl0ZW0udGl0bGUpID8gaW52ZW50b3J5SXRlbS50aXRsZSA6ICd0aGlzIGl0ZW0/JykgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBcIiArIGZpbmFsUHJpY2VQZXJjZW50ICsgXCIgY3JlZGl0c1wiIDogXCJZb3Ugd2FudCB0byBkZXN0cm95IHRoaXMgaXRlbT9cIiB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW0gfHwgc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW0gPT09IDApIHtcclxuICAgICAgICAgICAgdmFyIGhhbmdhckl0ZW0gPSBwbGF5ZXJPYmplY3REYXRhLmd1bnNbc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW1dO1xyXG4gICAgICAgICAgICB2YXIgc2FsZVByaWNlID0gcGxheWVyT2JqZWN0RGF0YS5ndW5zW3Nob3BBcmVhSXRlbXMuaGFuZ2FyU2VsZWN0ZWRJdGVtXS5wcmljZTtcclxuICAgICAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5sZWF2ZVNob3AoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSxcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IHdhbnQgdG8gc2FsZSBcIiArICgoaGFuZ2FySXRlbSkgPyBoYW5nYXJJdGVtLnRpdGxlIDogJ3RoaXMgaXRlbT8nKSArIFwiXFxuICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIFwiICsgc2FsZVBlcmNlbnRBZGRUb1ByaWNlKHsgcHJpY2U6IHNhbGVQcmljZSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pICsgXCIgY3JlZGl0c1wiIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGl0ZW1SZW5kZXI7XHJcbn1cclxuZnVuY3Rpb24gc2VsZWN0SW52ZW50b3J5SXRlbShfYSkge1xyXG4gICAgdmFyIGluZGV4ID0gX2EuaW5kZXgsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgcGxheWVyT2JqZWN0RGF0YSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QuZGF0YTtcclxuICAgIGlmICghcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnlbaW5kZXhdKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBpbnZlbnRvcnlJdGVtcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnZlbnRvcnktaXRlbScpKTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgaW52ZW50b3J5SXRlbXNfMSA9IGludmVudG9yeUl0ZW1zOyBfaSA8IGludmVudG9yeUl0ZW1zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHNpbmdsZUl0ZW0gPSBpbnZlbnRvcnlJdGVtc18xW19pXTtcclxuICAgICAgICBhcHBNZW51XzEucmVtb3ZlQ2xhc3NMaXN0KHNpbmdsZUl0ZW0sICdpbnZlbnRvcnktc2VsZWN0ZWQtaXRlbXMnKTtcclxuICAgIH1cclxuICAgIGlmICghaW5kZXggJiYgaW5kZXggIT0gMClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBhcHBNZW51XzEuYWRkQ2xhc3NMaXN0KGludmVudG9yeUl0ZW1zW2luZGV4XSwgJ2ludmVudG9yeS1zZWxlY3RlZC1pdGVtcycpO1xyXG59XHJcbmV4cG9ydHMuc2VsZWN0SW52ZW50b3J5SXRlbSA9IHNlbGVjdEludmVudG9yeUl0ZW07XHJcbmZ1bmN0aW9uIGludmVudG9yeUZyZWVJdGVtKF9hKSB7XHJcbiAgICB2YXIgaW52ZW50b3J5ID0gX2EuaW52ZW50b3J5LCBpbnZlbnRvcnlDYXBhY2l0eSA9IF9hLmludmVudG9yeUNhcGFjaXR5O1xyXG4gICAgaWYgKCFpbnZlbnRvcnkgfHwgIWludmVudG9yeUNhcGFjaXR5KVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBpbnZlbnRvcnlJbmZvcm1hdGlvbiA9IHtcclxuICAgICAgICBlbXB0eUl0ZW1zOiBbXSxcclxuICAgICAgICBmdWxsSXRlbXM6IFtdLFxyXG4gICAgICAgIGZpcnN0RW1wdHlJdGVtOiBudWxsXHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnZlbnRvcnlDYXBhY2l0eTsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGludmVudG9yeVtpXSkge1xyXG4gICAgICAgICAgICBpbnZlbnRvcnlJbmZvcm1hdGlvbi5mdWxsSXRlbXMgPSBpbnZlbnRvcnlJbmZvcm1hdGlvbi5mdWxsSXRlbXMuY29uY2F0KGludmVudG9yeUluZm9ybWF0aW9uLmZ1bGxJdGVtcywgeyBpbmRleDogaSwgaXRlbTogaW52ZW50b3J5W2ldIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghaW52ZW50b3J5W2ldKSB7XHJcbiAgICAgICAgICAgIGlmICghaW52ZW50b3J5SW5mb3JtYXRpb24uZmlyc3RFbXB0eUl0ZW0pXHJcbiAgICAgICAgICAgICAgICBpbnZlbnRvcnlJbmZvcm1hdGlvbi5maXJzdEVtcHR5SXRlbSA9IHsgaW5kZXg6IGksIGl0ZW06IGludmVudG9yeVtpXSB9O1xyXG4gICAgICAgICAgICBpbnZlbnRvcnlJbmZvcm1hdGlvbi5mdWxsSXRlbXMgPSBpbnZlbnRvcnlJbmZvcm1hdGlvbi5lbXB0eUl0ZW1zLmNvbmNhdChpbnZlbnRvcnlJbmZvcm1hdGlvbi5lbXB0eUl0ZW1zLCB7IGluZGV4OiBpLCBpdGVtOiBpbnZlbnRvcnlbaV0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGludmVudG9yeUluZm9ybWF0aW9uO1xyXG59XHJcbmV4cG9ydHMuaW52ZW50b3J5RnJlZUl0ZW0gPSBpbnZlbnRvcnlGcmVlSXRlbTtcclxuZnVuY3Rpb24gc2FsZUl0ZW0oX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGhhbmdhckVsZW1lbnRzID0gbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbTtcclxuICAgIHZhciBwbGF5ZXJPYmplY3REYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdC5kYXRhO1xyXG4gICAgdmFyIHBsYXllck9iamVjdCA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Q7XHJcbiAgICBpZiAoaGFuZ2FyRWxlbWVudHMuaW52ZW50b3J5U2VsZWN0ZWRJdGVtIHx8IGhhbmdhckVsZW1lbnRzLmludmVudG9yeVNlbGVjdGVkSXRlbSA9PT0gMCkge1xyXG4gICAgICAgIHZhciBzZWxQcmljZSA9IHNhbGVQZXJjZW50QWRkVG9QcmljZSh7IHByaWNlOiBwbGF5ZXJPYmplY3REYXRhLmludmVudG9yeVtoYW5nYXJFbGVtZW50cy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW1dLnByaWNlLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdhbWVDb2lucyArPSBzZWxQcmljZTtcclxuICAgICAgICByZXBsYWNlSXRlbUZyb21TdG9yYWdlKHsgaW5kZXg6IGhhbmdhckVsZW1lbnRzLmludmVudG9yeVNlbGVjdGVkSXRlbSwgc3RvcmFnZTogcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnksIHZhbHVlOiBudWxsIH0pO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtID0gbnVsbDtcclxuICAgIH1cclxuICAgIGlmIChoYW5nYXJFbGVtZW50cy5oYW5nYXJTZWxlY3RlZEl0ZW0gfHwgaGFuZ2FyRWxlbWVudHMuaGFuZ2FyU2VsZWN0ZWRJdGVtID09PSAwKSB7XHJcbiAgICAgICAgdmFyIHNlbFByaWNlID0gc2FsZVBlcmNlbnRBZGRUb1ByaWNlKHsgcHJpY2U6IHBsYXllck9iamVjdERhdGEuZ3Vuc1toYW5nYXJFbGVtZW50cy5oYW5nYXJTZWxlY3RlZEl0ZW1dLnByaWNlLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgZGlzYWJsZUVmZmVjdHMoeyBwbGF5ZXJPYmplY3Q6IHBsYXllck9iamVjdCwgaXRlbTogcGxheWVyT2JqZWN0RGF0YS5ndW5zW2hhbmdhckVsZW1lbnRzLmhhbmdhclNlbGVjdGVkSXRlbV0gfSk7XHJcbiAgICAgICAgcmVwbGFjZUl0ZW1Gcm9tU3RvcmFnZSh7IGluZGV4OiBoYW5nYXJFbGVtZW50cy5oYW5nYXJTZWxlY3RlZEl0ZW0sIHN0b3JhZ2U6IHBsYXllck9iamVjdERhdGEuZ3VucywgdmFsdWU6IG51bGwgfSk7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJTZWxlY3RlZEl0ZW0gPSBudWxsO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5nYW1lQ29pbnMgKz0gc2VsUHJpY2U7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zYWxlSXRlbSA9IHNhbGVJdGVtO1xyXG5mdW5jdGlvbiBzYWxlUGVyY2VudEFkZFRvUHJpY2UoX2EpIHtcclxuICAgIHZhciBwcmljZSA9IF9hLnByaWNlLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGhhbmdhckVsZW1lbnRzID0gbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbTtcclxuICAgIHZhciBmaW5hbFByaWNlID0gTWF0aC5yb3VuZChwcmljZSAtICgocHJpY2UgLyAxMDApICogaGFuZ2FyRWxlbWVudHMudHJhZGVQcm9wZXJ0eWVzLnNhbGVQZXJjZW50YWdlKSk7XHJcbiAgICByZXR1cm4gZmluYWxQcmljZTtcclxufVxyXG5leHBvcnRzLnNhbGVQZXJjZW50QWRkVG9QcmljZSA9IHNhbGVQZXJjZW50QWRkVG9QcmljZTtcclxuZnVuY3Rpb24gcHV0SW5zaWRlSW52ZW50b3J5KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgc2F2ZUl0ZW0gPSBfYS5zYXZlSXRlbSwgaW52ZW50b3J5SXRlbSA9IF9hLmludmVudG9yeUl0ZW07XHJcbiAgICB2YXIgcGxheWVyT2JqZWN0RGF0YSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QuZGF0YTtcclxuICAgIHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5LnNwbGljZShpbnZlbnRvcnlJdGVtLmluZGV4LCAxLCBzYXZlSXRlbSk7XHJcbn1cclxuZXhwb3J0cy5wdXRJbnNpZGVJbnZlbnRvcnkgPSBwdXRJbnNpZGVJbnZlbnRvcnk7XHJcbmZ1bmN0aW9uIHJlcGxhY2VJdGVtRnJvbVN0b3JhZ2UoX2EpIHtcclxuICAgIHZhciBpbmRleCA9IF9hLmluZGV4LCBzdG9yYWdlID0gX2Euc3RvcmFnZSwgdmFsdWUgPSBfYS52YWx1ZTtcclxuICAgIHN0b3JhZ2Uuc3BsaWNlKGluZGV4LCAxLCB2YWx1ZSk7XHJcbn1cclxuZXhwb3J0cy5yZXBsYWNlSXRlbUZyb21TdG9yYWdlID0gcmVwbGFjZUl0ZW1Gcm9tU3RvcmFnZTtcclxuZnVuY3Rpb24gcHV0SXRlbVRvU3RvcmFnZShfYSkge1xyXG4gICAgdmFyIG5hbWUgPSBfYS5uYW1lLCBwdXRJbmRleCA9IF9hLnB1dEluZGV4LCBzZWxlY3RlZEluZGV4ID0gX2Euc2VsZWN0ZWRJbmRleCwgc3RvcmFnZSA9IF9hLnN0b3JhZ2UsIHNlbGVjdGVkU3RvcmFnZSA9IF9hLnNlbGVjdGVkU3RvcmFnZSwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBwbGF5ZXJPYmplY3REYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdC5kYXRhO1xyXG4gICAgaWYgKCFzdG9yYWdlW3B1dEluZGV4XSAmJiAobWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJTZWxlY3RlZEl0ZW0gJiYgbmFtZSA9PSBcImluc2lkZS1zdG9yYWdlXCIgfHxcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmhhbmdhclNlbGVjdGVkSXRlbSA9PT0gMCkgJiYgbmFtZSA9PSBcImluc2lkZS1zdG9yYWdlXCIgfHxcclxuICAgICAgICBzZWxlY3RlZFN0b3JhZ2UgJiYgKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtICYmIG5hbWUgPT0gXCJpbnNpZGUtc3RvcmFnZVwiIHx8XHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtID09PSAwICYmIG5hbWUgPT0gXCJpbnNpZGUtc3RvcmFnZVwiKSkge1xyXG4gICAgICAgIHNob3BTdG9yYWdlUmVwbGFjZXIoe1xyXG4gICAgICAgICAgICBwdXRJbmRleDogcHV0SW5kZXgsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IHNlbGVjdGVkSW5kZXgsXHJcbiAgICAgICAgICAgIHN0b3JhZ2U6IHN0b3JhZ2UsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkU3RvcmFnZTogc3RvcmFnZSxcclxuICAgICAgICAgICAgZmlyZXNwb3Q6IHBsYXllck9iamVjdERhdGEuZmlyZXNwb3QsXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRTdG9yYWdlICYmIChtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbSAmJiBuYW1lID09IFwib3V0c2lkZS1zdG9yYWdlXCIgfHxcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbSA9PT0gMCAmJiBuYW1lID09IFwib3V0c2lkZS1zdG9yYWdlXCIpKSB7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkU3RvcmFnZVtwdXRJbmRleF0pXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBzaG9wU3RvcmFnZVJlcGxhY2VyKHtcclxuICAgICAgICAgICAgcHV0SW5kZXg6IHB1dEluZGV4LFxyXG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4OiBzZWxlY3RlZEluZGV4LFxyXG4gICAgICAgICAgICBzdG9yYWdlOiBzdG9yYWdlLFxyXG4gICAgICAgICAgICBzZWxlY3RlZFN0b3JhZ2U6IHNlbGVjdGVkU3RvcmFnZSxcclxuICAgICAgICAgICAgZmlyZXNwb3Q6IHBsYXllck9iamVjdERhdGEuZmlyZXNwb3QsXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMucHV0SXRlbVRvU3RvcmFnZSA9IHB1dEl0ZW1Ub1N0b3JhZ2U7XHJcbmZ1bmN0aW9uIHNob3BTdG9yYWdlUmVwbGFjZXIoX2EpIHtcclxuICAgIHZhciBwdXRJbmRleCA9IF9hLnB1dEluZGV4LCBzZWxlY3RlZEluZGV4ID0gX2Euc2VsZWN0ZWRJbmRleCwgc3RvcmFnZSA9IF9hLnN0b3JhZ2UsIHNlbGVjdGVkU3RvcmFnZSA9IF9hLnNlbGVjdGVkU3RvcmFnZSwgZmlyZXNwb3QgPSBfYS5maXJlc3BvdCwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBzZWxlY3RHdW4gPSBzdG9yYWdlW3NlbGVjdGVkSW5kZXhdO1xyXG4gICAgc2VsZWN0R3VuID0gYXNzaWduR3Vuc1Bvc2l0aW9uKHsgZ3VuOiBzZWxlY3RHdW4sIGZpcmVzcG90OiBmaXJlc3BvdFtwdXRJbmRleF0gfSk7XHJcbiAgICByZXBsYWNlSXRlbUZyb21TdG9yYWdlKHsgaW5kZXg6IHB1dEluZGV4LCBzdG9yYWdlOiBzZWxlY3RlZFN0b3JhZ2UsIHZhbHVlOiBzZWxlY3RHdW4gfSk7XHJcbiAgICByZXBsYWNlSXRlbUZyb21TdG9yYWdlKHsgaW5kZXg6IHNlbGVjdGVkSW5kZXgsIHN0b3JhZ2U6IHN0b3JhZ2UsIHZhbHVlOiBudWxsIH0pO1xyXG4gICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJTZWxlY3RlZEl0ZW0gPSBudWxsO1xyXG4gICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gPSBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIGFzc2lnbkVmZmVjdHNUb1NoaXAoX2EpIHtcclxuICAgIHZhciBwbGF5ZXJPYmplY3QgPSBfYS5wbGF5ZXJPYmplY3QsIGl0ZW0gPSBfYS5pdGVtO1xyXG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmdyYXBwbGVQb3dlcilcclxuICAgICAgICByZXR1cm47XHJcbiAgICBzd2l0Y2ggKGl0ZW0uZ3JhcHBsZVBvd2VyLm5hbWUpIHtcclxuICAgICAgICBjYXNlICdndW5zX3JhcGlkJzpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYWRkX3NwZWVkJzpcclxuICAgICAgICAgICAgcGxheWVyT2JqZWN0LmFkZFZlaGljbGVTcGVlZCh7IHZhbHVlOiBpdGVtLmdyYXBwbGVQb3dlci52YWx1ZSwgZmxhZzogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5hc3NpZ25FZmZlY3RzVG9TaGlwID0gYXNzaWduRWZmZWN0c1RvU2hpcDtcclxuZnVuY3Rpb24gZGlzYWJsZUVmZmVjdHMoX2EpIHtcclxuICAgIHZhciBwbGF5ZXJPYmplY3QgPSBfYS5wbGF5ZXJPYmplY3QsIGl0ZW0gPSBfYS5pdGVtO1xyXG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmdyYXBwbGVQb3dlcilcclxuICAgICAgICByZXR1cm47XHJcbiAgICBzd2l0Y2ggKGl0ZW0uZ3JhcHBsZVBvd2VyLm5hbWUpIHtcclxuICAgICAgICBjYXNlICdndW5zX3JhcGlkJzpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYWRkX3NwZWVkJzpcclxuICAgICAgICAgICAgcGxheWVyT2JqZWN0LmFkZFZlaGljbGVTcGVlZCh7IHZhbHVlOiBpdGVtLmdyYXBwbGVQb3dlci52YWx1ZSwgZmxhZzogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGlzYWJsZUVmZmVjdHMgPSBkaXNhYmxlRWZmZWN0cztcclxuZnVuY3Rpb24gYXNzaWduR3Vuc1Bvc2l0aW9uKF9hKSB7XHJcbiAgICB2YXIgZ3VuID0gX2EuZ3VuLCBmaXJlc3BvdCA9IF9hLmZpcmVzcG90O1xyXG4gICAgaWYgKCFmaXJlc3BvdCB8fCAhZ3VuKVxyXG4gICAgICAgIHJldHVybiBndW47XHJcbiAgICBndW4uZmlyZVBvc2l0aW9uWCA9IGZpcmVzcG90LnNoaXBYUG9zaXRpb247XHJcbiAgICBndW4uZmlyZVBvc2l0aW9uID0gZmlyZXNwb3Quc2hpcFlQb3NpdGlvbjtcclxuICAgIHJldHVybiBndW47XHJcbn1cclxuZXhwb3J0cy5hc3NpZ25HdW5zUG9zaXRpb24gPSBhc3NpZ25HdW5zUG9zaXRpb247XHJcbmZ1bmN0aW9uIGhpZGVEZXNjcmlwdGlvbkFyZWEoKSB7XHJcbiAgICB2YXIgaXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpdGVtLWRlc2NyaXB0aW9uJyk7XHJcbiAgICBhcHBNZW51XzEuaGlkZShpdGVtKTtcclxufVxyXG5leHBvcnRzLmhpZGVEZXNjcmlwdGlvbkFyZWEgPSBoaWRlRGVzY3JpcHRpb25BcmVhO1xyXG5mdW5jdGlvbiBzaG93RGVzY3JpcHRpb25BcmVhKF9hKSB7XHJcbiAgICB2YXIgc2VsZWN0T2JqZWN0ID0gX2Euc2VsZWN0T2JqZWN0LCBldmVudCA9IF9hLmV2ZW50LCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS1kZXNjcmlwdGlvbicpO1xyXG4gICAgaXRlbS5zdHlsZSA9IFwibWFyZ2luLXRvcDogXCIgKyAoZXZlbnQuY2xpZW50WSAtIDEwMCkgKyBcInB4OyBtYXJnaW4tbGVmdDogXCIgKyAoZXZlbnQuY2xpZW50WCAtIDIwMCkgKyBcInB4OyBcIjtcclxuICAgIGl0ZW0uaW5uZXJIVE1MID0gXCI8cD5cIiArIHNlbGVjdE9iamVjdC50aXRsZSArIFwiPC9wPlxcbiAgICAgICAgICAgIDxwPkNvc3Q6IFwiICsgc2FsZVBlcmNlbnRBZGRUb1ByaWNlKHsgcHJpY2U6IHNlbGVjdE9iamVjdC5wcmljZSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pICsgXCI8L3A+XFxuICAgICAgICAgICAgPHA+c3BlZWQ6IFwiICsgc2VsZWN0T2JqZWN0LnNwZWVkICsgXCI8L3A+XFxuICAgICAgICAgICAgPHA+ZGFtYWdlOiBcIiArIHNlbGVjdE9iamVjdC5kYW1hZ2UgKyBcIjwvcD5cXG4gICAgICAgICAgICA8cD5cIiArIHNlbGVjdE9iamVjdC5kZXNjcmlwdGlvbiArIFwiPC9wPlwiO1xyXG4gICAgYXBwTWVudV8xLnNob3coaXRlbSk7XHJcbn1cclxuZXhwb3J0cy5zaG93RGVzY3JpcHRpb25BcmVhID0gc2hvd0Rlc2NyaXB0aW9uQXJlYTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdlbGVjdHJvbicpOyIsIi8qXG4gKiBUaGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgSnVhbiBDcnV6IFZpb3R0aS4gaHR0cHM6Ly9naXRodWIuY29tL2p2aW90dGlcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbW9kdWxlIHN0b3JhZ2VcbiAqL1xuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCByaW1yYWYgPSByZXF1aXJlKCdyaW1yYWYnKTtcbmNvbnN0IG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHdyaXRlRmlsZUF0b21pYyA9IHJlcXVpcmUoJ3dyaXRlLWZpbGUtYXRvbWljJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbmNvbnN0IGxvY2sgPSByZXF1aXJlKCcuL2xvY2snKTtcblxuY29uc3QgcmVhZEZpbGUgPSBmdW5jdGlvbihmaWxlTmFtZSwgY2FsbGJhY2ssIHRpbWVzKSB7XG4gIHRpbWVzID0gdGltZXMgfHwgMDtcblxuICBmcy5yZWFkRmlsZShmaWxlTmFtZSwgZnVuY3Rpb24oZXJyb3IsIG9iamVjdCkge1xuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBvYmplY3QpO1xuICAgIH1cblxuICAgIGlmIChlcnJvci5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIEpTT04uc3RyaW5naWZ5KHt9KSk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdFUEVSTScgJiYgdGltZXMgPCAxMCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmVhZEZpbGUoZmlsZU5hbWUsIGNhbGxiYWNrLCB0aW1lcyArIDEpO1xuICAgICAgfSwgMTAwMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGVmYXVsdCBkYXRhIHBhdGhcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGRlZmF1bHQgZGF0YSBwYXRoXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGRlZmF1bHREYXRhUGF0aCA9IHN0b3JhZ2UuZ2V0RGVmYXVsdERhdGFQYXRoKClcbiAqL1xuZXhwb3J0cy5nZXREZWZhdWx0RGF0YVBhdGggPSB1dGlscy5nZXREZWZhdWx0RGF0YVBhdGg7XG5cbi8qKlxuICogQHN1bW1hcnkgU2V0IGN1cnJlbnQgZGF0YSBwYXRoXG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgYmUgdXNlZCBpZiB0aGUgZGlyZWN0b3J5IGlzIHVuZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8VW5kZWZpbmVkKX0gZGlyZWN0b3J5IC0gZGlyZWN0b3J5XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbiAqIGNvbnN0IHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcbiAqXG4gKiBzdG9yYWdlLnNldERhdGFQYXRoKG9zLnRtcGRpcigpKTtcbiAqL1xuZXhwb3J0cy5zZXREYXRhUGF0aCA9IHV0aWxzLnNldERhdGFQYXRoO1xuXG4vKipcbiAqIEBzdW1tYXJ5IEdldCBjdXJyZW50IHVzZXIgZGF0YSBwYXRoXG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgZGF0YSBwYXRoLiBJdCBkZWZhdWx0cyB0byBhIGRpcmVjdG9yeSBjYWxsZWRcbiAqIFwic3RvcmFnZVwiIGluc2lkZSBFbGVjdHJvbidzIGB1c2VyRGF0YWAgcGF0aC5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgdXNlciBkYXRhIHBhdGhcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ2VsZWN0cm9uLWpzb24tc3RvcmFnZScpO1xuICpcbiAqIGNvbnN0IGRhdGFQYXRoID0gc3RvcmFnZS5nZXREYXRhUGF0aCgpO1xuICogY29uc29sZS5sb2coZGF0YVBhdGgpO1xuICovXG5leHBvcnRzLmdldERhdGFQYXRoID0gdXRpbHMuZ2V0RGF0YVBhdGg7XG5cbi8qKlxuICogQHN1bW1hcnkgUmVhZCB1c2VyIGRhdGFcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSWYgdGhlIGtleSBkb2Vzbid0IGV4aXN0IGluIHRoZSB1c2VyIGRhdGEsIGFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZC5cbiAqIEFsc28gbm90aWNlIHRoYXQgdGhlIGAuanNvbmAgZXh0ZW5zaW9uIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHksIGJ1dCBpdCdzXG4gKiBpZ25vcmVkIGlmIHlvdSBwYXNzIGl0IHlvdXJzZWxmLlxuICpcbiAqIFBhc3NpbmcgYW4gZXh0ZW5zaW9uIG90aGVyIHRoYW4gYC5qc29uYCB3aWxsIHJlc3VsdCBpbiBhIGZpbGUgY3JlYXRlZFxuICogd2l0aCBib3RoIGV4dGVuc2lvbnMuIEZvciBleGFtcGxlLCB0aGUga2V5IGBmb28uZGF0YWAgd2lsbCByZXN1bHQgaW4gYSBmaWxlXG4gKiBjYWxsZWQgYGZvby5kYXRhLmpzb25gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSBrZXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZGF0YVBhdGhdIC0gZGF0YSBwYXRoXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIChlcnJvciwgZGF0YSlcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ2VsZWN0cm9uLWpzb24tc3RvcmFnZScpO1xuICpcbiAqIHN0b3JhZ2UuZ2V0KCdmb29iYXInLCBmdW5jdGlvbihlcnJvciwgZGF0YSkge1xuICogICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICpcbiAqICAgY29uc29sZS5sb2coZGF0YSk7XG4gKiB9KTtcbiAqL1xuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbihrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBfLm5vb3A7XG4gIHZhciBmaWxlTmFtZSA9IG51bGw7XG5cbiAgYXN5bmMud2F0ZXJmYWxsKFtcbiAgICBhc3luYy5hc3luY2lmeShfLnBhcnRpYWwodXRpbHMuZ2V0RmlsZU5hbWUsIGtleSwge1xuICAgICAgZGF0YVBhdGg6IG9wdGlvbnMuZGF0YVBhdGhcbiAgICB9KSksXG4gICAgZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjaykge1xuICAgICAgZmlsZU5hbWUgPSByZXN1bHQ7XG4gICAgICBta2RpcnAocGF0aC5kaXJuYW1lKGZpbGVOYW1lKSwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgZnVuY3Rpb24obWFkZSwgbmV4dCkge1xuICAgICAgbG9jay5sb2NrKHV0aWxzLmdldExvY2tGaWxlTmFtZShmaWxlTmFtZSksIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAnRUVYSVNUJykge1xuICAgICAgICAgIHJldHVybiBleHBvcnRzLmdldChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJlYWRGaWxlKGZpbGVOYW1lLCBjYWxsYmFjayk7XG4gICAgfSxcbiAgICBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgb2JqZWN0SlNPTiA9IHt9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqZWN0SlNPTiA9IEpTT04ucGFyc2Uob2JqZWN0KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YTogJyArIG9iamVjdCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG9iamVjdEpTT04pO1xuICAgIH1cbiAgXSwgZnVuY3Rpb24oZXJyb3IsIHJlc3VsdCkge1xuICAgIGxvY2sudW5sb2NrKHV0aWxzLmdldExvY2tGaWxlTmFtZShmaWxlTmFtZSksIGZ1bmN0aW9uKGxvY2tFcnJvcikge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYWxsYmFjayhsb2NrRXJyb3IsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBSZWFkIG1hbnkgdXNlciBkYXRhIGtleXNcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBkYXRhIG9mIGFsbCB0aGUgcGFzc2VkIGtleXMuXG4gKiBJZiBvbmUgb2YgdGhlIGtleXMgZG9lc24ndCBleGlzdCwgYW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciBpdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzIC0ga2V5c1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5kYXRhUGF0aF0gLSBkYXRhIHBhdGhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgKGVycm9yLCBkYXRhKVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzdG9yYWdlID0gcmVxdWlyZSgnZWxlY3Ryb24tanNvbi1zdG9yYWdlJyk7XG4gKlxuICogc3RvcmFnZS5nZXRNYW55KFsgJ2Zvb2JhcicsICdiYXJiYXonIF0sIGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gKiAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gKlxuICogICBjb25zb2xlLmxvZyhkYXRhLmZvb2Jhcik7XG4gKiAgIGNvbnNvbGUubG9nKGRhdGEuYmFyYmF6KTtcbiAqIH0pO1xuICovXG5leHBvcnRzLmdldE1hbnkgPSBmdW5jdGlvbihrZXlzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IF8ubm9vcDtcblxuICBhc3luYy5yZWR1Y2Uoa2V5cywge30sIGZ1bmN0aW9uKHJlZHVjZXIsIGtleSwgY2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmdldChrZXksIG9wdGlvbnMsIGZ1bmN0aW9uKGVycm9yLCBkYXRhKSB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBfLnNldChyZWR1Y2VyLCBrZXksIGRhdGEpKTtcbiAgICB9KTtcbiAgfSwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBSZWFkIGFsbCB1c2VyIGRhdGFcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGVtcHR5IG9iamVjdCBpZiB0aGVyZSBpcyBubyBkYXRhIHRvIGJlIHJlYWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5kYXRhUGF0aF0gLSBkYXRhIHBhdGhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgKGVycm9yLCBkYXRhKVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzdG9yYWdlID0gcmVxdWlyZSgnZWxlY3Ryb24tanNvbi1zdG9yYWdlJyk7XG4gKlxuICogc3RvcmFnZS5nZXRBbGwoZnVuY3Rpb24oZXJyb3IsIGRhdGEpIHtcbiAqICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAqXG4gKiAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICogfSk7XG4gKi9cbmV4cG9ydHMuZ2V0QWxsID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBfLm5vb3A7XG5cbiAgYXN5bmMud2F0ZXJmYWxsKFtcbiAgICBfLnBhcnRpYWwoZXhwb3J0cy5rZXlzLCBvcHRpb25zKSxcbiAgICBmdW5jdGlvbihrZXlzLCBjYWxsYmFjaykge1xuICAgICAgYXN5bmMucmVkdWNlKGtleXMsIHt9LCBmdW5jdGlvbihyZWR1Y2VyLCBrZXksIGNhbGxiYWNrKSB7XG4gICAgICAgIGFzeW5jLndhdGVyZmFsbChbXG4gICAgICAgICAgXy5wYXJ0aWFsKGV4cG9ydHMuZ2V0LCBrZXksIG9wdGlvbnMpLFxuICAgICAgICAgIGZ1bmN0aW9uKGNvbnRlbnRzLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIF8uc2V0KHJlZHVjZXIsIGtleSwgY29udGVudHMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIF0sIGNhbGxiYWNrKTtcbiAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIF0sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogQHN1bW1hcnkgV3JpdGUgdXNlciBkYXRhXG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0ga2V5XG4gKiBAcGFyYW0ge09iamVjdH0ganNvbiAtIGpzb24gb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmRhdGFQYXRoXSAtIGRhdGEgcGF0aFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayAoZXJyb3IpXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcbiAqXG4gKiBzdG9yYWdlLnNldCgnZm9vYmFyJywgeyBmb286ICdiYXInIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gKiAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gKiB9KTtcbiAqL1xuZXhwb3J0cy5zZXQgPSBmdW5jdGlvbihrZXksIGpzb24sIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBfLm5vb3A7XG4gIHZhciBmaWxlTmFtZSA9IG51bGw7XG5cbiAgYXN5bmMud2F0ZXJmYWxsKFtcbiAgICBhc3luYy5hc3luY2lmeShfLnBhcnRpYWwodXRpbHMuZ2V0RmlsZU5hbWUsIGtleSwge1xuICAgICAgZGF0YVBhdGg6IG9wdGlvbnMuZGF0YVBhdGhcbiAgICB9KSksXG4gICAgZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjaykge1xuICAgICAgZmlsZU5hbWUgPSByZXN1bHQ7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XG5cbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdJbnZhbGlkIEpTT04gZGF0YScpKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIHRoZSBkaXJlY3RvcnkgaW4gY2FzZSBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgbWtkaXJwKHBhdGguZGlybmFtZShmaWxlTmFtZSksIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvciwgZGF0YSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKGRhdGEsIG5leHQpIHtcbiAgICAgIGxvY2subG9jayh1dGlscy5nZXRMb2NrRmlsZU5hbWUoZmlsZU5hbWUpLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ0VFWElTVCcpIHtcbiAgICAgICAgICByZXR1cm4gZXhwb3J0cy5zZXQoa2V5LCBqc29uLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChlcnJvciwgZmlsZU5hbWUsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBmdW5jdGlvbihmaWxlTmFtZSwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgIHdyaXRlRmlsZUF0b21pYyhmaWxlTmFtZSwgZGF0YSwgY2FsbGJhY2spO1xuICAgIH1cbiAgXSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBsb2NrLnVubG9jayh1dGlscy5nZXRMb2NrRmlsZU5hbWUoZmlsZU5hbWUpLCBmdW5jdGlvbihsb2NrRXJyb3IpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FsbGJhY2sobG9ja0Vycm9yKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBzdW1tYXJ5IENoZWNrIGlmIGEga2V5IGV4aXN0c1xuICogQGZ1bmN0aW9uXG4gKiBAcHVibGljXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleSAtIGtleVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIG9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5kYXRhUGF0aF0gLSBkYXRhIHBhdGhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gY2FsbGJhY2sgKGVycm9yLCBoYXNLZXkpXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcbiAqXG4gKiBzdG9yYWdlLmhhcygnZm9vYmFyJywgZnVuY3Rpb24oZXJyb3IsIGhhc0tleSkge1xuICogICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICpcbiAqICAgaWYgKGhhc0tleSkge1xuICogICAgIGNvbnNvbGUubG9nKCdUaGVyZSBpcyBkYXRhIHN0b3JlZCBhcyBgZm9vYmFyYCcpO1xuICogICB9XG4gKiB9KTtcbiAqL1xuZXhwb3J0cy5oYXMgPSBmdW5jdGlvbihrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChfLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBfLm5vb3A7XG5cbiAgYXN5bmMud2F0ZXJmYWxsKFtcbiAgICBhc3luYy5hc3luY2lmeShfLnBhcnRpYWwodXRpbHMuZ2V0RmlsZU5hbWUsIGtleSwge1xuICAgICAgZGF0YVBhdGg6IG9wdGlvbnMuZGF0YVBhdGhcbiAgICB9KSksXG4gICAgZnVuY3Rpb24oZmlsZW5hbWUsIGRvbmUpIHtcbiAgICAgIGZzLnN0YXQoZmlsZW5hbWUsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwgZmFsc2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkb25lKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkb25lKG51bGwsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuICBdLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbGlzdCBvZiBzYXZlZCBrZXlzXG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmRhdGFQYXRoXSAtIGRhdGEgcGF0aFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayAoZXJyb3IsIGtleXMpXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcbiAqXG4gKiBzdG9yYWdlLmtleXMoZnVuY3Rpb24oZXJyb3IsIGtleXMpIHtcbiAqICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAqXG4gKiAgIGZvciAodmFyIGtleSBvZiBrZXlzKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ1RoZXJlIGlzIGEga2V5IGNhbGxlZDogJyArIGtleSk7XG4gKiAgIH1cbiAqIH0pO1xuICovXG5leHBvcnRzLmtleXMgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IF8ubm9vcDtcblxuICBhc3luYy53YXRlcmZhbGwoW1xuICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBvcHRpb25zLmRhdGFQYXRoIHx8IGV4cG9ydHMuZ2V0RGF0YVBhdGgoKSk7XG4gICAgfSxcbiAgICBmdW5jdGlvbih1c2VyRGF0YVBhdGgsIGNhbGxiYWNrKSB7XG4gICAgICBta2RpcnAodXNlckRhdGFQYXRoLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IsIHVzZXJEYXRhUGF0aCk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZzLnJlYWRkaXIsXG4gICAgZnVuY3Rpb24oa2V5cywgY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIF8ubWFwKF8ucmVqZWN0KGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gcGF0aC5leHRuYW1lKGtleSkgIT09ICcuanNvbic7XG4gICAgICB9KSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBwYXRoLmJhc2VuYW1lKGRlY29kZVVSSUNvbXBvbmVudChrZXkpLCAnLmpzb24nKTtcbiAgICAgIH0pKTtcbiAgICB9XG4gIF0sIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogQHN1bW1hcnkgUmVtb3ZlIGEga2V5XG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5vdGljZSB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90aGluZywgbm9yIHRocm93cyBhbnkgZXJyb3JcbiAqIGlmIHRoZSBrZXkgZG9lc24ndCBleGlzdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0ga2V5XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmRhdGFQYXRoXSAtIGRhdGEgcGF0aFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayAoZXJyb3IpXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcbiAqXG4gKiBzdG9yYWdlLnJlbW92ZSgnZm9vYmFyJywgZnVuY3Rpb24oZXJyb3IpIHtcbiAqICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAqIH0pO1xuICovXG5leHBvcnRzLnJlbW92ZSA9IGZ1bmN0aW9uKGtleSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IF8ubm9vcDtcblxuICBhc3luYy53YXRlcmZhbGwoW1xuICAgIGFzeW5jLmFzeW5jaWZ5KF8ucGFydGlhbCh1dGlscy5nZXRGaWxlTmFtZSwga2V5LCB7XG4gICAgICBkYXRhUGF0aDogb3B0aW9ucy5kYXRhUGF0aFxuICAgIH0pKSxcbiAgICByaW1yYWZcbiAgXSwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBDbGVhciBhbGwgc3RvcmVkIGRhdGEgaW4gdGhlIGN1cnJlbnQgdXNlciBkYXRhIHBhdGhcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZGF0YVBhdGhdIC0gZGF0YSBwYXRoXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIChlcnJvcilcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3RvcmFnZSA9IHJlcXVpcmUoJ2VsZWN0cm9uLWpzb24tc3RvcmFnZScpO1xuICpcbiAqIHN0b3JhZ2UuY2xlYXIoZnVuY3Rpb24oZXJyb3IpIHtcbiAqICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAqIH0pO1xuICovXG5leHBvcnRzLmNsZWFyID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKF8uaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IF8ubm9vcDtcblxuICBjb25zdCB1c2VyRGF0YSA9IG9wdGlvbnMuZGF0YVBhdGggfHwgZXhwb3J0cy5nZXREYXRhUGF0aCgpO1xuICBjb25zdCBqc29uRmlsZXMgPSBwYXRoLmpvaW4odXNlckRhdGEsICcqLmpzb24nKTtcbiAgcmltcmFmKGpzb25GaWxlcywgY2FsbGJhY2spO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImFzc2VydFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dGlsXCIpOyIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgc2F0YXJ0R2FtZV8xID0gcmVxdWlyZShcIi4vc2F0YXJ0R2FtZVwiKTtcclxudmFyIGR5bmFtaWNMZXZlbE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL2R5bmFtaWNMZXZlbHMvZHluYW1pY0xldmVsTW9kdWxlXCIpO1xyXG52YXIgcGxheWVyVW5pdE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL2R5bmFtaWNMZXZlbHMvcGxheWVyVW5pdE1vZHVsZVwiKTtcclxudmFyIGR5bmFtaWNMZXZlbEVuZW15TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2R5bmFtaWNMZXZlbHMvZHluYW1pY0xldmVsRW5lbXlNb2R1bGVzXCIpO1xyXG52YXIgcGxheWVyVW5pdE1vZHVsZV8yID0gcmVxdWlyZShcIi4uL2R5bmFtaWNMZXZlbHMvcGxheWVyVW5pdE1vZHVsZVwiKTtcclxudmFyIGR5bmFtaWNMZXZlbE1vZHVsZV8yID0gcmVxdWlyZShcIi4uL2R5bmFtaWNMZXZlbHMvZHluYW1pY0xldmVsTW9kdWxlXCIpO1xyXG52YXIgam91cm5hbE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9keW5hbWljTGV2ZWxzL2pvdXJuYWxNb2R1bGVzXCIpO1xyXG5mdW5jdGlvbiBuZXh0TGV2ZWxEYXRhUmVsb2FkKGxldmVsRGF0YSwgY29uc3RydWN0b3JzKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5leHRMZXZlbCwgc2VydmVyTmV3RGF0YSwgY29udGV4dCwgcmVmcmVzaExldmVsLCBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2cpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfZy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFwRmluZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyVW5pdE1vZHVsZV8yLmhpZGVJbnZlbnRvcnkoKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0TGV2ZWwgPSBsZXZlbERhdGEuZ2FtZURhdGEuY3VycmVudExldmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNhdGFydEdhbWVfMS5zZXJ2ZXJSZXF1ZXN0KHsgbGV2ZWw6IG5leHRMZXZlbCwgc2hpcENvbmZpZ3VyYXRpb246IDEgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlck5ld0RhdGEgPSBfZy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBfYiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudExldmVsOiBuZXh0TGV2ZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludDogY29udGV4dC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuY3VycmVudFBvaW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPYmplY3Q6IGNvbnRleHQuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcGxheWVyVW5pdE1vZHVsZV8xLmluaXRHcm91bmRQbGF5ZXIoeyBEeW5hbWljVXNlckNvbnN0cnVjdG9yOiBjb25zdHJ1Y3RvcnMuRHluYW1pY1VzZXJDb25zdHJ1Y3RvciB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaExldmVsID0gKF9hLmdhbWVEYXRhID0gKF9iLmdyb3VuZFBsYXllckNoYXJhY3RlciA9IF9nLnNlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IuZ2FtZUNvaW5zID0gY29udGV4dC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ2FtZUNvaW5zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sZXZlbERhdGEgPSBzZXJ2ZXJOZXdEYXRhLmxldmVsRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGV2ZWxPYmplY3RzID0gc2VydmVyTmV3RGF0YS5sZXZlbE9iamVjdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmdyYXBwbGVPYmplY3RzID0gc2VydmVyTmV3RGF0YS5ncmFwcGxlT2JqZWN0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGV2ZWxTb3VuZHMgPSBjb250ZXh0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbFNvdW5kcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IucHJlbG9hZERhdGEgPSBjb250ZXh0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wcmVsb2FkRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IuZ2FtZVNldGluZ3MgPSBjb250ZXh0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5nYW1lU2V0aW5ncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IuZW5lbXlEYXRhID0gc2VydmVyTmV3RGF0YS5lbmVteURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmNvbnRyb2xsZXJzID0gY29udGV4dC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuY29udHJvbGxlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EuZW5lbXlUeXBlID0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EuYWxsR2FtZVNpZGVPYmplY3RzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmFsbEdhbWVFbmVtaWVzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmFsbEdhbWVCdWxsZXRzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmFsbEdyb3VuZEdhbWVCdWxsZXRzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLm1hcEJhY2tncm91bmRPYmplY3RzID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmR5bmFtaWNMZXZlbEVuZW15ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLm1hcEtleUNvZGUgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EuZ2FtZVBhdXNlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmdhbWVVaVBhdXNlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmJhY2tTY3JlZW5QYXVzZSA9IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmdhbWVPdmVyID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmdyYXBwbGVPYmplY3RPblNjcmVlbiA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cmFkZXBvc3RJblJhbmdlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmludmVudG9yeUFjdGl2ZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zaG9wQWN0aXZlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnN1YkJvc3NQcmVzZW50ID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmdhdGVQcmVzZW50ID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmdhbWVFeHRyYVNlY29uZHMgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cmFkZVNoaXBUaW1lVG9VbmRvY2sgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2FtZUluaXREYXRhLndhcnBPYmplY3RzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2FtZUluaXREYXRhLnRpbWVUb0VyZXNzTGV2ZWwgPSA2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmdhbWVJbml0RGF0YS5sZXZlbFdpbmRvd0Rlc2NyaXB0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkJPU1NfTE9BRF9BVF9MRVZFTCA9IFwiZmFsc2VcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgam91cm5hbE1vZHVsZXNfMS5maWxsSm91cm5hbERlZmF1bHREYXRhKHsgbWFpbkdhbWVPYmplY3Q6IGNvbnRleHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuR1JPVU5EX1BMQVlFUl9BTExPV19NT1ZFID0gKHNlcnZlck5ld0RhdGEubGV2ZWxEYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpID8gJ2ZhbHNlJyA6ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsVmVydGljYWxTZWFyY2guY2FsbCh0aGlzLCB0aGlzLmdhbWVJbml0RGF0YSwgcmVmcmVzaExldmVsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlID0gKHNlcnZlck5ld0RhdGEubGV2ZWxEYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jID0gdGhpcy5nYW1lSW5pdERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2VydmVyTmV3RGF0YS5sZXZlbERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGR5bmFtaWNMZXZlbE1vZHVsZV8xLmxvYWRMZXZlbE1hcCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbE1hcE5hbWU6IHNlcnZlck5ld0RhdGEubGV2ZWxEYXRhLmR5bmFtaWNCbG9ja01hcCArICcuanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgX2QgPSBfZy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBfZy5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgX2MuZHluYW1pY0xldmVsTWFwQmxvY2tzID0gX2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgX2UgPSB0aGlzLmdhbWVJbml0RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShzZXJ2ZXJOZXdEYXRhLmxldmVsRGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZHluYW1pY0xldmVsRW5lbXlNb2R1bGVzXzEubG9hZExldmVsRW5lbXkoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxEeW5hbWljTWFwQmxvY2tzOiBjb250ZXh0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgX2YgPSBfZy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgX2YgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBfZy5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgX2UuZHluYW1pY0xldmVsRW5lbXkgPSBfZjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcFNvdW5kQ2hhbmdlcih7IHNvdW5kU3RhdHVzOiAncmVndWxhcl9sZXZlbCcgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY0xldmVsTW9kdWxlXzIuYmFja2dyb3VuZEFkanVzdG1lbnQoeyBtYWluR2FtZU9iamVjdDogdGhpcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubmV4dExldmVsRGF0YVJlbG9hZCA9IG5leHRMZXZlbERhdGFSZWxvYWQ7XHJcbmZ1bmN0aW9uIGhvcml6b250YWxWZXJ0aWNhbFNlYXJjaChtYWluT2JqZWN0LCByZWZyZXNoTGV2ZWwpIHtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhtYWluT2JqZWN0KTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWFpbk9iamVjdFtrZXldID09ICdvYmplY3QnICYmIHZhbHVlICE9IG51bGwgJiYgIW1haW5PYmplY3Rba2V5XS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaG9yaXpvbnRhbFZlcnRpY2FsU2VhcmNoKG1haW5PYmplY3Rba2V5XSwgcmVmcmVzaExldmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzaWduVmFsdWUuY2FsbCh0aGlzLCBrZXksIG1haW5PYmplY3QpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUoaW5jb21lS2V5LCBtYWluRGF0YSkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyhyZWZyZXNoTGV2ZWwpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIGtleSA9IF9iWzBdLCB2YWwgPSBfYlsxXTtcclxuICAgICAgICAgICAgaWYgKGtleSA9PSBpbmNvbWVLZXkgJiYgdmFsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhW2tleV0gPSB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5ob3Jpem9udGFsVmVydGljYWxTZWFyY2ggPSBob3Jpem9udGFsVmVydGljYWxTZWFyY2g7XHJcbmZ1bmN0aW9uIHJlbmV3UGxheWVyU2hpcChfYSkge1xyXG4gICAgdmFyIG9yaWdpbkRhdGEgPSBfYS5vcmlnaW5EYXRhLCBuZXdEYXRhID0gX2EubmV3RGF0YTtcclxuICAgIHBsYXllclVuaXRNb2R1bGVfMi5oaWRlSW52ZW50b3J5KCk7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gT2JqZWN0LmVudHJpZXMob3JpZ2luRGF0YSk7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9jID0gX2JbX2ldLCBrZXkgPSBfY1swXSwgdmFsdWUgPSBfY1sxXTtcclxuICAgICAgICBpZiAobmV3RGF0YVtrZXldICYmIG9yaWdpbkRhdGFba2V5XSAhPSBuZXdEYXRhW2tleV0pIHtcclxuICAgICAgICAgICAgb3JpZ2luRGF0YVtrZXldID0gbmV3RGF0YVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvcmlnaW5EYXRhO1xyXG59XHJcbmV4cG9ydHMucmVuZXdQbGF5ZXJTaGlwID0gcmVuZXdQbGF5ZXJTaGlwO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGRpc3BsYXlVaVdpbmRvd01vZHVsZXNfMSA9IHJlcXVpcmUoXCIuL3dpbmRvdy9kaXNwbGF5VWlXaW5kb3dNb2R1bGVzXCIpO1xyXG5leHBvcnRzLmNyZWF0ZVdpbmRvdyA9IGRpc3BsYXlVaVdpbmRvd01vZHVsZXNfMS5jcmVhdGVXaW5kb3c7XHJcbmV4cG9ydHMuY3JlYXRlU2hhcGVSb3VuZEJvcmRlciA9IGRpc3BsYXlVaVdpbmRvd01vZHVsZXNfMS5jcmVhdGVTaGFwZVJvdW5kQm9yZGVyO1xyXG5leHBvcnRzLmNyZWF0ZVJvdW5kQnV0dG9uID0gZGlzcGxheVVpV2luZG93TW9kdWxlc18xLmNyZWF0ZVJvdW5kQnV0dG9uO1xyXG5mdW5jdGlvbiBkcmF3KGNvbnRleHQsIGVsZW1lbnQpIHtcclxuICAgIHZhciBwcm9wZXJ0eSA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBwcm9wZXJ0eVtfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgY29udGV4dFtlbGVtZW50XS5hcHBseShjb250ZXh0LCBwcm9wZXJ0eSk7XHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5leHBvcnRzLmRyYXcgPSBkcmF3O1xyXG5mdW5jdGlvbiBjcmVhdGVJbWFnZShjdHgsIHBpY3R1cmVOYW1lKSB7XHJcbiAgICB2YXIgcHJvcHMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgcHJvcHNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBkcmF3LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheXMoW2N0eCwgJ2RyYXdJbWFnZScsIHBpY3R1cmVOYW1lXSwgcHJvcHMpKTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZUltYWdlID0gY3JlYXRlSW1hZ2U7XHJcbmZ1bmN0aW9uIGNsZWFyRmllbGQoY3R4LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICBkcmF3KGN0eCwgJ2NsZWFyUmVjdCcsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG59XHJcbmV4cG9ydHMuY2xlYXJGaWVsZCA9IGNsZWFyRmllbGQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBnYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9zZXJ2ZXIvZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXCIpO1xyXG52YXIgZ2FtZUludmVudG9yeU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi91aS9zaG9wL2dhbWVJbnZlbnRvcnlNb2R1bGVzXCIpO1xyXG52YXIgc2hvcEV2ZW50c01vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi91aS9zaG9wL3Nob3BFdmVudHMvc2hvcEV2ZW50c01vZHVsZXNcIik7XHJcbnZhciBnYW1lU2hvcE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL3VpL3Nob3AvZ2FtZVNob3BNb2R1bGVcIik7XHJcbmZ1bmN0aW9uIGxvYWRHcmFiYmxlVG9TaWRlT2JqZWN0KG1haW5HYW1lT2JqZWN0LCB0YXJnZXQsIEdyYXBwbGVPYmplY3QpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmFuZG9tQXBlYXIsIGNvbnRleHQsIG9iamVjdFNwZWVkLCBzaWRlT2JqZWN0LCBvYmplY3REYXRhLCBncmFwcGxlT2JqZWN0O1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgcmFuZG9tQXBlYXIgPSBtYWluR2FtZU9iamVjdC5nYW1lUmFuZG9taXplcih0YXJnZXQucHJvYmFiaWxpdHkpO1xyXG4gICAgICAgICAgICBpZiAocmFuZG9tQXBlYXIgPiAxMCAmJiB0YXJnZXQubmFtZSAhPSAnZ29sZENvaW4nIHx8IHJhbmRvbUFwZWFyID4gMjAgJiYgdGFyZ2V0Lm5hbWUgIT0gJ2xpZmVwb2ludCcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICBjb250ZXh0ID0gbWFpbkdhbWVPYmplY3Q7XHJcbiAgICAgICAgICAgIG9iamVjdFNwZWVkID0gKG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlKSA/IC0wLjAwMDAwMDEgOiB0YXJnZXQuc3BlZWQ7XHJcbiAgICAgICAgICAgIHNpZGVPYmplY3QgPSB0aGlzO1xyXG4gICAgICAgICAgICBvYmplY3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgeDogKHRhcmdldC54KSA/IHRhcmdldC54ICsgY29udGV4dC5nYW1lUmFuZG9taXplcihzaWRlT2JqZWN0LndpZHRoKSA6IHdpbmRvdy5pbm5lcldpZHRoICsgMTAwLFxyXG4gICAgICAgICAgICAgICAgeTogKHRhcmdldC55KSA/IHRhcmdldC55ICsgY29udGV4dC5nYW1lUmFuZG9taXplcihzaWRlT2JqZWN0LmhlaWdodCkgOiBjb250ZXh0LmdhbWVSYW5kb21pemVyKHdpbmRvdy5pbm5lckhlaWdodCksXHJcbiAgICAgICAgICAgICAgICBzeDogMCxcclxuICAgICAgICAgICAgICAgIHN5OiAwLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0T3duZXI6IHRhcmdldC5vYmplY3RPd25lcixcclxuICAgICAgICAgICAgICAgIHNXaWR0aDogdGFyZ2V0LmltYWdlV2lkdGggLyB0YXJnZXQubnVtYmVyT2ZJdGVtcyxcclxuICAgICAgICAgICAgICAgIHNIZWlnaHQ6IHRhcmdldC5pbWFnZUhlaWdodCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0YXJnZXQud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldC5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25TdGVwczogdGFyZ2V0LmFuaW1hdGlvblN0ZXBzLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZJdGVtczogdGFyZ2V0Lm51bWJlck9mSXRlbXMsXHJcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZUxpbms6ICh0YXJnZXQuYWJzb2x1dGVMaW5rKSA/IHRhcmdldC5hYnNvbHV0ZUxpbmsgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGV4dHVyZTogKHRhcmdldC5hYnNvbHV0ZUxpbmspID8gdGFyZ2V0LmFic29sdXRlTGluayA6IHRhcmdldC5za2luTmFtZSxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiBvYmplY3RTcGVlZCxcclxuICAgICAgICAgICAgICAgIHBpY3R1cmVzV2lkdGg6IHRhcmdldC5pbWFnZVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVhbHRoUG9pbnQ6IHRhcmdldC5oZWFsdGhQb2ludCxcclxuICAgICAgICAgICAgICAgIGRhbWFnZTogdGFyZ2V0LmRhbWFnZSxcclxuICAgICAgICAgICAgICAgIGlzQmFja2dyb3VuZDogbnVsbCxcclxuICAgICAgICAgICAgICAgIGV4cGxvc2lvbjogdGFyZ2V0LmV4cGxvc2lvbkFuaW1hdGlvbixcclxuICAgICAgICAgICAgICAgIHBvaW50c1BlclVuaXQ6IHRhcmdldC5wb2ludHNQZXJVbml0LFxyXG4gICAgICAgICAgICAgICAgaXNHcmFwcGxlOiB0YXJnZXQuaXNHcmFwcGxlLFxyXG4gICAgICAgICAgICAgICAgZ3JhcHBsZVBvd2VyOiB0YXJnZXQuZ3JhcHBsZVBvd2VyLFxyXG4gICAgICAgICAgICAgICAgc291bmQ6IHRhcmdldC5zb3VuZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBncmFwcGxlT2JqZWN0ID0gbmV3IEdyYXBwbGVPYmplY3QoX19hc3NpZ24oe30sIG9iamVjdERhdGEpKTtcclxuICAgICAgICAgICAgZ3JhcHBsZU9iamVjdC5pbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdyYXBwbGVPYmplY3RPblNjcmVlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cy5jb25jYXQoZ3JhcHBsZU9iamVjdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGdyYXBwbGVPYmplY3QubG9hZFRleHR1cmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5sb2FkR3JhYmJsZVRvU2lkZU9iamVjdCA9IGxvYWRHcmFiYmxlVG9TaWRlT2JqZWN0O1xyXG5mdW5jdGlvbiBpbml0R3JhcHBsZU9iamVjdChHcmFwcGxlT2JqZWN0LCBwbGF5ZXJTaGlwRGF0YSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBnYW1lSW5mbywgZ2FtZURhdGEsIGxldmVsRGF0YSwgZ3JhcHBsZURhdGEsIHNwYXduUHJvYmFiaWxpdHksIHJhbmRvbU9iamVjdDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbWVJbml0RGF0YS5ncmFwcGxlT2JqZWN0T25TY3JlZW4pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICBnYW1lSW5mbyA9IHRoaXMuc2hvd0dhbWVJbmZvKCksIGdhbWVEYXRhID0gZ2FtZUluZm8uZ2FtZURhdGEsIGxldmVsRGF0YSA9IGdhbWVEYXRhLmxldmVsRGF0YSwgZ3JhcHBsZURhdGEgPSBnYW1lRGF0YS5ncmFwcGxlT2JqZWN0cztcclxuICAgICAgICAgICAgc3Bhd25Qcm9iYWJpbGl0eSA9IHRoaXMuZ2FtZVJhbmRvbWl6ZXIobGV2ZWxEYXRhLmdyYXBsZU9iamVjdFByb2JhYmlsaXR5KTtcclxuICAgICAgICAgICAgaWYgKHNwYXduUHJvYmFiaWxpdHkgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICByYW5kb21PYmplY3QgPSBncmFwcGxlRGF0YVt0aGlzLmdhbWVSYW5kb21pemVyKGdyYXBwbGVEYXRhLmxlbmd0aCldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyYW5kb21PYmplY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgIGlmICghcmFuZG9tT2JqZWN0LmdyYXBwbGVQb3dlcilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChyYW5kb21PYmplY3QuZ3JhcHBsZVBvd2VyLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGlmZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyU2hpcERhdGEubnVtYmVyT2ZsaWZlID49IHBsYXllclNoaXBEYXRhLm1heE9mTGlmZSAtIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbG9hZEdyYWJibGVUb1NpZGVPYmplY3QodGhpcywgcmFuZG9tT2JqZWN0LCBHcmFwcGxlT2JqZWN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmluaXRHcmFwcGxlT2JqZWN0ID0gaW5pdEdyYXBwbGVPYmplY3Q7XHJcbmZ1bmN0aW9uIGFkZFBsYXllckxpZmUoX2EpIHtcclxuICAgIHZhciBhbGxHYW1lU2lkZU9iamVjdHMgPSBfYS5hbGxHYW1lU2lkZU9iamVjdHMsIHBsYXllclNoaXBEYXRhID0gX2EucGxheWVyU2hpcERhdGEsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBwbGF5ZXJTaGlwRGF0YS5udW1iZXJPZmxpZmUgKz0gdGhpcy5ncmFwcGxlUG93ZXIudmFsdWU7XHJcbn1cclxuZXhwb3J0cy5hZGRQbGF5ZXJMaWZlID0gYWRkUGxheWVyTGlmZTtcclxuZnVuY3Rpb24gY29sbGVjdENvaW4oX2EpIHtcclxuICAgIHZhciBfYiA9IF9hLmFsbEdhbWVTaWRlT2JqZWN0cywgYWxsR2FtZVNpZGVPYmplY3RzID0gX2IgPT09IHZvaWQgMCA/IG51bGwgOiBfYiwgX2MgPSBfYS5wbGF5ZXJTaGlwRGF0YSwgcGxheWVyU2hpcERhdGEgPSBfYyA9PT0gdm9pZCAwID8gbnVsbCA6IF9jLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIGdhbWVJbmZvID0gbWFpbkdhbWVPYmplY3Quc2hvd0dhbWVJbmZvKCksIGdhbWVEYXRhID0gZ2FtZUluZm8uZ2FtZURhdGE7XHJcbiAgICBnYW1lRGF0YS5nYW1lQ29pbnMgKz0gdGhpcy5ncmFwcGxlUG93ZXIudmFsdWU7XHJcbn1cclxuZXhwb3J0cy5jb2xsZWN0Q29pbiA9IGNvbGxlY3RDb2luO1xyXG5mdW5jdGlvbiBjb2xsZWN0T2JqZWN0c1RvSW52ZW50b3J5KF9hKSB7XHJcbiAgICB2YXIgYWxsR2FtZVNpZGVPYmplY3RzID0gX2EuYWxsR2FtZVNpZGVPYmplY3RzLCBwbGF5ZXJTaGlwRGF0YSA9IF9hLnBsYXllclNoaXBEYXRhLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwbGF5ZXJPYmplY3QsIHBsYXllck9iamVjdERhdGEsIGludmVudG9yeUluZm9ybWF0aW9uLCBoZWFkZXJzLCBzaG9wVXJsLCBkYXRhLCBzZWFyY2hJdGVtO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllck9iamVjdCA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyT2JqZWN0RGF0YSA9IHBsYXllck9iamVjdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGludmVudG9yeUluZm9ybWF0aW9uID0gZ2FtZUludmVudG9yeU1vZHVsZXNfMS5pbnZlbnRvcnlGcmVlSXRlbSh7IGludmVudG9yeTogcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnksIGludmVudG9yeUNhcGFjaXR5OiBwbGF5ZXJPYmplY3REYXRhLmludmVudG9yeUNhcGFjaXR5IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7IFwidXNlcmNvaW5zXCI6IEluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIml0ZW1OYW1lXCI6IHRoaXMuZ3JhcHBsZVBvd2VyLmNvbnRlbnQubmFtZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW52ZW50b3J5SW5mb3JtYXRpb25bJ2ZpcnN0RW1wdHlJdGVtJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2hvcEVycm9yTWVzc2FnZS5pbm5lckhUTUwgPSAnWW91cmBzIGludmVudG9yeSBpcyBmdWxsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvcFVybCA9ICh0aGlzLmdyYXBwbGVQb3dlci5zdG9yZSA9PT0gJ21hcmtldCcpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuU0hPUF9TVE9SRV9JVEVNUyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LlNIT1BfR1VOU19VUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEuZ2V0U2hvcFNlcnZlckRhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcFVybDogc2hvcFVybCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JhcHBsZVBvd2VyLnR5cGUgPT09IFwiaW52ZW50b3J5IHdlYXBvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaEl0ZW0gPSBzaG9wRXZlbnRzTW9kdWxlc18xLmZpbmRJbnRJbnZlbnRvcnkoeyBpbnZlbnRvcnk6IHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5LCBzZWFyY2hPYmplY3Q6IGRhdGEuZGF0YSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5pbnZlbnRvcnlJdGVtR3Vuc0Fzc2lnbih7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgZGF0YTogZGF0YS5kYXRhLCB0YXJnZXREYXRhOiBzZWFyY2hJdGVtLCBidXlpbmc6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoSXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUludmVudG9yeU1vZHVsZXNfMS5wdXRJbnNpZGVJbnZlbnRvcnkoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIHNhdmVJdGVtOiBkYXRhLmRhdGEsIGludmVudG9yeUl0ZW06IGludmVudG9yeUluZm9ybWF0aW9uWydmaXJzdEVtcHR5SXRlbSddIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5jb2xsZWN0T2JqZWN0c1RvSW52ZW50b3J5ID0gY29sbGVjdE9iamVjdHNUb0ludmVudG9yeTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi9nYW1lU2lkZU9iamVjdHNNb2R1bGVcIik7XHJcbnZhciBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMiA9IHJlcXVpcmUoXCIuL2dhbWVTaWRlT2JqZWN0c01vZHVsZVwiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbnZhciBjb25zdHJ1Y3RvcnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uL2NvbnN0cnVjdG9ycy9cIikpO1xyXG5mdW5jdGlvbiBjcmVhdGVSb2NrZXRTbW9jayhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICBpZiAoTWF0aC5mbG9vcih0aGlzLngpICUgMTAgPT09IDApIHtcclxuICAgICAgICBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5leHBsb3Npb25GaXJlKHtcclxuICAgICAgICAgICAgdGFyZ2V0RGF0YTogdGhpcyxcclxuICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICBoaXRPYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgIFNpZGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5TaWRlT2JqZWN0LFxyXG4gICAgICAgICAgICBleHBsb3Npb246IFwic21va2VcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG1vdmVCdWxsZXRzKHBsYXllclNoaXBEYXRhLCBtYWluR2FtZU9iamVjdCkge1xyXG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwiYmxhc3RlclwiOlxyXG4gICAgICAgICAgICBtb3ZlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJiZWFtXCI6XHJcbiAgICAgICAgICAgIGJlYW0uY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgbW92ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwicm9ja2V0XCI6XHJcbiAgICAgICAgICAgIGNyZWF0ZVJvY2tldFNtb2NrLmNhbGwodGhpcywgeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgIG1vdmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImhvbWluZ19yb2NrZXRcIjpcclxuICAgICAgICAgICAgdGhpcy5sYXN0U3BlZWQgPSAoIXRoaXMubGFzdFNwZWVkKSA/IHRoaXMuYnVsbGV0U3BlZWQgOiB0aGlzLmxhc3RTcGVlZDtcclxuICAgICAgICAgICAgY3JlYXRlUm9ja2V0U21vY2suY2FsbCh0aGlzLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgbW92ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgYWxsR2FtZUVuZW1pZXMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXM7XHJcbiAgICAgICAgICAgIGlmIChhbGxHYW1lRW5lbWllcy5sZW5ndGggPCAwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgY2xvc2VzdFVuaXQgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMi5maW5kQ2xvc2VPYmplY3QuY2FsbCh0aGlzLCB7IGFsbEdhbWVFbmVtaWVzOiBhbGxHYW1lRW5lbWllcyB9KTtcclxuICAgICAgICAgICAgaWYgKCFjbG9zZXN0VW5pdClcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGFuZ2xlID0gZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzIuZmluZEFuZ2xlVG9TaGlwLmNhbGwodGhpcywgeyBjbG9zZXN0VW5pdDogY2xvc2VzdFVuaXQgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVncmVlID0gKGFuZ2xlKSA/IGFuZ2xlIDogdGhpcy5kZWdyZWU7XHJcbiAgICAgICAgICAgIHZhciByb2NrZXRTcGVlZCA9IGJ1bGxldFNwZWVkKHsgYnVsbGV0U3BlZWQ6IHRoaXMubGFzdFNwZWVkLCBhbmdsZTogYW5nbGUgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljYWxTcGVlZCA9IHJvY2tldFNwZWVkLnZlcnRpY2FsU3BlZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuYnVsbGV0U3BlZWQgPSByb2NrZXRTcGVlZC5ob3Jpem9udGFsU3BlZWQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJudWNsZWFyX2JsYXN0XCI6XHJcbiAgICAgICAgICAgIG51Y2xlYXJCbGFzdEV4cGVuZGVkLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGJsYXN0RGVzdHJveUJ1bGxldHMuY2FsbCh0aGlzLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImRlZmVuY2Vfc2hpZWxkXCI6XHJcbiAgICAgICAgICAgIHNoaWVsZEFjdGl2aXR5LmNhbGwodGhpcywgeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgIGJsYXN0RGVzdHJveUJ1bGxldHMuY2FsbCh0aGlzLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgbW92ZS5jYWxsKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2hpZWxkQWN0aXZpdHkoX2EpIHtcclxuICAgICAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgICAgICB2YXIgcGxheWVyT2JqZWN0ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgICAgICB0aGlzLnggPSBwbGF5ZXJPYmplY3QueCAtIDMwO1xyXG4gICAgICAgIHRoaXMueSA9IHBsYXllck9iamVjdC55IC0gMzA7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHBsYXllck9iamVjdC53aWR0aCArIDYwO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gcGxheWVyT2JqZWN0LmhlaWdodCArIDYwO1xyXG4gICAgICAgIHRoaXMuc2hpZWxkVGltaW5nID0gKCF0aGlzLnNoaWVsZFRpbWluZykgPyAxIDogdGhpcy5zaGllbGRUaW1pbmcgKyAxO1xyXG4gICAgICAgIGlmICh0aGlzLnNoaWVsZFRpbWluZyAlIDEwMDAgPT0gMClcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBudWNsZWFyQmxhc3RFeHBlbmRlZCgpIHtcclxuICAgICAgICB0aGlzLnggLT0gdGhpcy5idWxsZXRTcGVlZCAvIDI7XHJcbiAgICAgICAgdGhpcy55IC09IHRoaXMuYnVsbGV0U3BlZWQgLyAyO1xyXG4gICAgICAgIHRoaXMud2lkdGggKz0gdGhpcy5idWxsZXRTcGVlZDtcclxuICAgICAgICB0aGlzLmhlaWdodCArPSB0aGlzLmJ1bGxldFNwZWVkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYmxhc3REZXN0cm95QnVsbGV0cyhfYSkge1xyXG4gICAgICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgICAgIHZhciBidWxsZXRzQXJyID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVCdWxsZXRzO1xyXG4gICAgICAgIGlmICghYnVsbGV0c0FycilcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYnVsbGV0c0Fycl8xID0gYnVsbGV0c0FycjsgX2kgPCBidWxsZXRzQXJyXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBidWxsZXQgPSBidWxsZXRzQXJyXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLm9iamVjdEludGVyc2VjdGlvbkRldGVjdCh7IG9iamVjdDogdGhpcywgdGFyZ2V0OiBidWxsZXQgfSk7XHJcbiAgICAgICAgICAgIGlmIChjb2xsaXNpb24gJiYgYnVsbGV0LnR5cGUgIT0gXCJudWNsZWFyX2JsYXN0XCIgJiZcclxuICAgICAgICAgICAgICAgIGNvbGxpc2lvbiAmJiBidWxsZXQudHlwZSAhPSBcImRlZmVuY2Vfc2hpZWxkXCIgJiZcclxuICAgICAgICAgICAgICAgIGNvbGxpc2lvbiAmJiBidWxsZXQudHlwZSAhPSBcImhvbWluZ19yb2NrZXRcIiAmJlxyXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uICYmIGJ1bGxldC50eXBlICE9IFwicm9ja2V0XCIgJiZcclxuICAgICAgICAgICAgICAgIGNvbGxpc2lvbiAmJiBidWxsZXQub2JqZWN0T3duZXIgIT0gXCJwbGF5ZXJcIiAmJiBidWxsZXQudHlwZSAhPSBcImRlZmVuY2Vfc2hpZWxkXCIpXHJcbiAgICAgICAgICAgICAgICBidWxsZXQub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XHJcbiAgICAgICAgdGhpcy54ICs9IHRoaXMuYnVsbGV0U3BlZWQ7XHJcbiAgICAgICAgdGhpcy55ICs9IHRoaXMudmVydGljYWxTcGVlZDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGJlYW0oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMueCA+IC0xMCkge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoICs9IHRoaXMuYnVsbGV0U3BlZWQgKiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy53aWR0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gMDtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCAtPSB0aGlzLmJ1bGxldFNwZWVkICogLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMubW92ZUJ1bGxldHMgPSBtb3ZlQnVsbGV0cztcclxuZnVuY3Rpb24gYnVsbGV0QW5nbGVDb21wZW5zYXRpb24oX2EpIHtcclxuICAgIHZhciBzZWN0b3IgPSBfYS5zZWN0b3IsIHNlY3RvckluZGV4ID0gX2Euc2VjdG9ySW5kZXgsIHNlY3RvckluZGV4MiA9IF9hLnNlY3RvckluZGV4MiwgYnVsbGV0U3BlZWQgPSBfYS5idWxsZXRTcGVlZDtcclxuICAgIHZhciB4ID0gMCwgeSA9IDA7XHJcbiAgICBzd2l0Y2ggKHNlY3Rvcikge1xyXG4gICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgeCA9IHNlY3RvckluZGV4MiAqIGJ1bGxldFNwZWVkO1xyXG4gICAgICAgICAgICB5ID0gc2VjdG9ySW5kZXggKiBidWxsZXRTcGVlZDtcclxuICAgICAgICAgICAgLy9yZXMgPSAnKysnXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgeSA9IHNlY3RvckluZGV4MiAqIGJ1bGxldFNwZWVkO1xyXG4gICAgICAgICAgICB4ID0gKHNlY3RvckluZGV4ICogYnVsbGV0U3BlZWQpICogLTE7XHJcbiAgICAgICAgICAgIC8vcmVzID0gJy0rJ1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIHggPSAoc2VjdG9ySW5kZXgyICogYnVsbGV0U3BlZWQpICogLTE7XHJcbiAgICAgICAgICAgIHkgPSAoc2VjdG9ySW5kZXggKiBidWxsZXRTcGVlZCkgKiAtMTtcclxuICAgICAgICAgICAgLy9yZXMgPSAnLS0nXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgeSA9IChzZWN0b3JJbmRleDIgKiBidWxsZXRTcGVlZCkgKiAtMTtcclxuICAgICAgICAgICAgeCA9IHNlY3RvckluZGV4ICogYnVsbGV0U3BlZWQ7XHJcbiAgICAgICAgICAgIC8vcmVzID0gJystJ1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB4ID0gc2VjdG9ySW5kZXgyICogYnVsbGV0U3BlZWQ7XHJcbiAgICAgICAgICAgIHkgPSBzZWN0b3JJbmRleCAqIGJ1bGxldFNwZWVkO1xyXG4gICAgICAgIC8vcmVzID0gZmFsc2VcclxuICAgIH1cclxuICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcclxufVxyXG5mdW5jdGlvbiBidWxsZXRTcGVlZChfYSkge1xyXG4gICAgdmFyIGJ1bGxldFNwZWVkID0gX2EuYnVsbGV0U3BlZWQsIGFuZ2xlID0gX2EuYW5nbGU7XHJcbiAgICB2YXIgc2VjdG9yID0gTWF0aC5mbG9vcihhbmdsZSAvICg5MCArIDEpKTtcclxuICAgIHZhciBzZWN0b3JJbmRleCA9IHBhcnNlRmxvYXQoKChhbmdsZSAvICg5MCkpIC0gc2VjdG9yKS50b0ZpeGVkKDIpKTtcclxuICAgIHZhciBzZWN0b3JJbmRleDIgPSAxIC0gc2VjdG9ySW5kZXg7XHJcbiAgICB2YXIgYW5nbGVDb21wZW5zYXRpb24gPSBidWxsZXRBbmdsZUNvbXBlbnNhdGlvbih7XHJcbiAgICAgICAgc2VjdG9yOiBzZWN0b3IsXHJcbiAgICAgICAgc2VjdG9ySW5kZXg6IHNlY3RvckluZGV4LFxyXG4gICAgICAgIHNlY3RvckluZGV4Mjogc2VjdG9ySW5kZXgyLFxyXG4gICAgICAgIGJ1bGxldFNwZWVkOiBidWxsZXRTcGVlZFxyXG4gICAgfSk7XHJcbiAgICB2YXIgeCA9IGFuZ2xlQ29tcGVuc2F0aW9uLngsIHkgPSBhbmdsZUNvbXBlbnNhdGlvbi55O1xyXG4gICAgcmV0dXJuIHsgYW5nbGU6IGFuZ2xlLCB2ZXJ0aWNhbFNwZWVkOiB5LCBob3Jpem9udGFsU3BlZWQ6IHggfTtcclxufVxyXG5leHBvcnRzLmJ1bGxldFNwZWVkID0gYnVsbGV0U3BlZWQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xID0gcmVxdWlyZShcIi4vZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c1wiKTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL3BsYXllclVuaXRNb2R1bGVcIik7XHJcbnZhciBwYWdlc0J1aWxkZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9hcHBNZW51L3BhZ2VzQnVpbGRlclwiKTtcclxudmFyIGpvdXJuYWxNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9qb3VybmFsTW9kdWxlc1wiKTtcclxuZnVuY3Rpb24gdXNlT2JqZWN0KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgcGxheWVyID0gX2EucGxheWVyLCBpdGVtID0gX2EuaXRlbTtcclxuICAgIHZhciBjdXJyZW50QWN0aXZlQmxvY2s7XHJcbiAgICBpZiAoaXRlbS5vYmplY3RPd25lciAmJiAhaXRlbS5vYmplY3RQcmVzZW50KVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHN3aXRjaCAoaXRlbS5kZXRhaWxzLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdleGl0JzpcclxuICAgICAgICAgICAgY3VycmVudEFjdGl2ZUJsb2NrID0gZGlzcGxheVRleHQoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIHBsYXllcjogcGxheWVyLCBpdGVtOiBpdGVtIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd0ZXJtaW5hbF9vYmplY3QnOlxyXG4gICAgICAgICAgICBjdXJyZW50QWN0aXZlQmxvY2sgPSBkaXNwbGF5VGV4dCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyOiBwbGF5ZXIsIGl0ZW06IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3NwYXduZXInOlxyXG4gICAgICAgICAgICBjdXJyZW50QWN0aXZlQmxvY2sgPSBkaXNwbGF5VGV4dCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyOiBwbGF5ZXIsIGl0ZW06IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2Rvb3InOlxyXG4gICAgICAgICAgICBjdXJyZW50QWN0aXZlQmxvY2sgPSBkaXNwbGF5VGV4dCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyOiBwbGF5ZXIsIGl0ZW06IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ25wY19zcGF3bmVyJzpcclxuICAgICAgICAgICAgcGxheWVyLmN1cnJlbnREaWFsb2dDaGFyYWN0ZXIgPSBpdGVtO1xyXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5HUk9VTkRfTlBDX0RJQUxPR19BQ1RJVkUgPSAndHJ1ZSc7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfTlBDX0RJQUxPR19BQ1RJVkUgPT09ICd0cnVlJyAmJiBwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPT09ICd0cnVlJylcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjdXJyZW50QWN0aXZlQmxvY2sgPSBkaXNwbGF5VGV4dCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyOiBwbGF5ZXIsIGl0ZW06IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3RlbGVwb3J0X2Rvb3InOlxyXG4gICAgICAgICAgICBjdXJyZW50QWN0aXZlQmxvY2sgPSBkaXNwbGF5VGV4dCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyOiBwbGF5ZXIsIGl0ZW06IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JlYWRfdGVybWluYWwnOlxyXG4gICAgICAgICAgICBwbGF5ZXIuY3VycmVudERpYWxvZ0NoYXJhY3RlciA9IGl0ZW07XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZW52LkdST1VORF9OUENfRElBTE9HX0FDVElWRSA9ICd0cnVlJztcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52LkdST1VORF9OUENfRElBTE9HX0FDVElWRSA9PT0gJ3RydWUnICYmIHByb2Nlc3MuZW52LkdST1VORF9DSEFSQUNURVJTX0lOVkVOVE9SWSA9PT0gJ3RydWUnKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGN1cnJlbnRBY3RpdmVCbG9jayA9IGRpc3BsYXlUZXh0KHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBwbGF5ZXI6IHBsYXllciwgaXRlbTogaXRlbSB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcGxheWVyLmN1cnJlbnREaWFsb2dDaGFyYWN0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuR1JPVU5EX05QQ19ESUFMT0dfQUNUSVZFID09PSAndHJ1ZScgJiYgcGxheWVyLmlzUnVuKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5HUk9VTkRfTlBDX0RJQUxPR19BQ1RJVkUgPSAnZmFsc2UnO1xyXG4gICAgICAgICAgICAgICAgcGxheWVyVW5pdE1vZHVsZV8xLmhpZGVJbnZlbnRvcnkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudEFjdGl2ZUJsb2NrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGN1cnJlbnRBY3RpdmVCbG9jaztcclxufVxyXG5leHBvcnRzLnVzZU9iamVjdCA9IHVzZU9iamVjdDtcclxuZnVuY3Rpb24gbnBjRGlhbG9nKF9hKSB7XHJcbiAgICB2YXIgY3VycmVudERpYWxvZ0NoYXJhY3RlciA9IF9hLmN1cnJlbnREaWFsb2dDaGFyYWN0ZXIsIGRhdGEgPSBfYS5kYXRhLCBzZWFyY2hUYXJnZXQgPSBfYS5zZWFyY2hUYXJnZXQsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHJlcXVpcmVEYXRhID0gX2EucmVxdWlyZURhdGEsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycywgZ3JvdW5kUGxheWVyID0gX2EuZ3JvdW5kUGxheWVyO1xyXG4gICAgaWYgKCFjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLmRldGFpbHMuZGlhbG9nKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHBsYXllclVuaXRNb2R1bGVfMS5vcGVuSW52ZW50b3J5KCk7XHJcbiAgICBkaXNwbGF5RGlhbG9nKHtcclxuICAgICAgICBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyOiBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLFxyXG4gICAgICAgIGN1cnJlbnREaWFsb2c6IDAsXHJcbiAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICBzZWFyY2hUYXJnZXQ6IHNlYXJjaFRhcmdldCxcclxuICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgcmVxdWlyZURhdGE6IHJlcXVpcmVEYXRhLFxyXG4gICAgICAgIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzLFxyXG4gICAgICAgIGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyXHJcbiAgICB9KTtcclxuICAgIHByb2Nlc3MuZW52LkdST1VORF9DSEFSQUNURVJTX0lOVkVOVE9SWSA9ICd0cnVlJztcclxufVxyXG5mdW5jdGlvbiBkaXNwbGF5RGlhbG9nKF9hKSB7XHJcbiAgICB2YXIgY3VycmVudERpYWxvZ0NoYXJhY3RlciA9IF9hLmN1cnJlbnREaWFsb2dDaGFyYWN0ZXIsIGN1cnJlbnREaWFsb2cgPSBfYS5jdXJyZW50RGlhbG9nLCBkYXRhID0gX2EuZGF0YSwgc2VhcmNoVGFyZ2V0ID0gX2Euc2VhcmNoVGFyZ2V0LCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCByZXF1aXJlRGF0YSA9IF9hLnJlcXVpcmVEYXRhLCBjb25zdHJ1Y3RvcnMgPSBfYS5jb25zdHJ1Y3RvcnMsIGdyb3VuZFBsYXllciA9IF9hLmdyb3VuZFBsYXllcjtcclxuICAgIGlmICghY3VycmVudERpYWxvZ0NoYXJhY3RlciB8fCBjdXJyZW50RGlhbG9nICE9IDAgJiYgIWN1cnJlbnREaWFsb2cgfHwgIWN1cnJlbnREaWFsb2dDaGFyYWN0ZXIuZGV0YWlscy5kaWFsb2cpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGRlZmF1bHROcGNEYXRhID0gY3VycmVudERpYWxvZ0NoYXJhY3Rlci5kZXRhaWxzLmRpYWxvZy5kZWZhdWx0O1xyXG4gICAgdmFyIGRpYWxvZ0Fuc3dlcnNOcGNEYXRhID0gY3VycmVudERpYWxvZ0NoYXJhY3Rlci5kZXRhaWxzLmRpYWxvZy5kaWFsb2dBbnN3ZXJzO1xyXG4gICAgdmFyIGJhY2twYWNrQm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiYWNrcGFjay1ib2R5Jyk7XHJcbiAgICB2YXIgbG9jYWxJZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgaWYgKGN1cnJlbnREaWFsb2dDaGFyYWN0ZXIuaWRTdGFydERpYWxvZyAmJiBjdXJyZW50RGlhbG9nID09PSAwKVxyXG4gICAgICAgIGN1cnJlbnREaWFsb2cgPSBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLmlkU3RhcnREaWFsb2c7XHJcbiAgICBiYWNrcGFja0JvZHkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB2YXIgZGlhbG9nSGVhZGVyID0gcGFnZXNCdWlsZGVyXzEuY3JlYXRlU2ltcGxlRWxlbWVudHMoe1xyXG4gICAgICAgIHRhZ25hbWU6ICdkaXYnLFxyXG4gICAgICAgIGNsYXNzTGlzdDogJ2RpYWxvZy1oZWFkZXInLFxyXG4gICAgICAgIGlubmVyVGV4dDogXCJcXG4gICAgICAgIDxoMz5cIiArIGRlZmF1bHROcGNEYXRhLm5hbWUgKyBcIjwvaDM+XFxuICAgICAgICA8aW1nIGNsYXNzPVxcXCJkaWFsb2ctcGljdHVyZVxcXCIgc3JjPVxcXCJcIiArICgoZGVmYXVsdE5wY0RhdGEuZmFjZVBpY3R1cmVBYnNvbHV0ZSkgPyBkZWZhdWx0TnBjRGF0YS5mYWNlUGljdHVyZUFic29sdXRlIDogcHJvY2Vzcy5lbnYuSE9TVCArIGRlZmF1bHROcGNEYXRhLmZhY2VQaWN0dXJlKSArIFwiXFxcIiBhbHQ9XFxcIlwiICsgZGVmYXVsdE5wY0RhdGEubmFtZSArIFwiXFxcIj5cIixcclxuICAgICAgICBpZE5hbWU6IG51bGxcclxuICAgIH0pO1xyXG4gICAgYmFja3BhY2tCb2R5LmFwcGVuZENoaWxkKGRpYWxvZ0hlYWRlcik7XHJcbiAgICBpZiAoIWRpYWxvZ0Fuc3dlcnNOcGNEYXRhKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBzZWxlY3RlRGlhbG9nID0gZGlhbG9nQW5zd2Vyc05wY0RhdGEuZmluZChmdW5jdGlvbiAoZGlhbG9nKSB7IHJldHVybiBkaWFsb2cuaWQgPT0gY3VycmVudERpYWxvZzsgfSk7XHJcbiAgICBpZiAoIXNlbGVjdGVEaWFsb2cgfHwgIXNlbGVjdGVEaWFsb2cucXVlc3Rpb25zKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBpbm5lckRpYWxvZyA9IHBhZ2VzQnVpbGRlcl8xLmNyZWF0ZVNpbXBsZUVsZW1lbnRzKHtcclxuICAgICAgICB0YWduYW1lOiAnZGl2JyxcclxuICAgICAgICBjbGFzc0xpc3Q6ICdkaWFsb2ctYm9keScsXHJcbiAgICAgICAgaW5uZXJUZXh0OiBcIjxwIGNsYXNzPVxcXCJkaWFsb2ctdGV4dC13cmFwcGVyXFxcIiBpZD1cXFwibWFpbi1kaWFsb2ctYXJyZWEtXCIgKyBsb2NhbElkICsgXCJcXFwiPlwiICsgc2VsZWN0ZURpYWxvZy50ZXh0ICsgXCI8L3A+XCIsXHJcbiAgICAgICAgaWROYW1lOiBudWxsXHJcbiAgICB9KTtcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGFuc3dlckJ1dHRvbnMpIHtcclxuICAgICAgICB2YXIgcXVlc3Rpb25zQnV0dG9uID0gcGFnZXNCdWlsZGVyXzEuY3JlYXRlU2ltcGxlRWxlbWVudHMoe1xyXG4gICAgICAgICAgICB0YWduYW1lOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgY2xhc3NMaXN0OiAnYW5zd2VyLWRpYWxvZy1idXR0b24nLFxyXG4gICAgICAgICAgICBpbm5lclRleHQ6IFwiXFxuICAgICAgICAgICAgPHA+XCIgKyBhbnN3ZXJCdXR0b25zLnRleHQgKyBcIjwvcD5cXG4gICAgICAgICAgXCIsXHJcbiAgICAgICAgICAgIGlkTmFtZTogbnVsbFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHF1ZXN0aW9uc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFuc3dlclN0YXRlID0gY2hlY2tEaWFsb2dUYXNrQ29uZGl0aW9ucyh7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyOiBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLFxyXG4gICAgICAgICAgICAgICAgaW52ZW50b3J5OiBncm91bmRQbGF5ZXIuaW52ZW50b3J5LFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0RGlhbG9nOiBhbnN3ZXJCdXR0b25zLmlkLFxyXG4gICAgICAgICAgICAgICAgZGlhbG9nVGV4dElkOiBcIm1haW4tZGlhbG9nLWFycmVhLVwiICsgbG9jYWxJZCxcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFhbnN3ZXJTdGF0ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgZGlzcGxheURpYWxvZyh7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyOiBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLCBjdXJyZW50RGlhbG9nOiBwYXJzZUludChhbnN3ZXJCdXR0b25zLmlkKSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUYXJnZXQ6IHNlYXJjaFRhcmdldCxcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVEYXRhOiByZXF1aXJlRGF0YSxcclxuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzLFxyXG4gICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyOiBncm91bmRQbGF5ZXJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlRGlhbG9nLmFjdGlvbiA9PT0gXCJnaXZlX29iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLmlkU3RhcnREaWFsb2cgPSAoY3VycmVudERpYWxvZ0NoYXJhY3Rlci5kZXRhaWxzLmRlZmF1bHRTdWNjZXNzRGlhbG9nSWQpID8gY3VycmVudERpYWxvZ0NoYXJhY3Rlci5kZXRhaWxzLmRlZmF1bHRTdWNjZXNzRGlhbG9nSWQgOiAwO1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZURhdGEgPSBzZWFyY2hJblBsYXllckludmVudG9yeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZ3JvdW5kUGxheWVyLmludmVudG9yeSxcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2hUYXJnZXQ6IG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMucmVxdWlyZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmF0ZUludGVyYWN0T2JqZWN0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVEYXRhOiByZXF1aXJlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9ycyxcclxuICAgICAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXI6IGdyb3VuZFBsYXllcixcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyOiBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlubmVyRGlhbG9nLmFwcGVuZENoaWxkKHF1ZXN0aW9uc0J1dHRvbik7XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IHNlbGVjdGVEaWFsb2cucXVlc3Rpb25zOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBhbnN3ZXJCdXR0b25zID0gX2JbX2ldO1xyXG4gICAgICAgIF9sb29wXzEoYW5zd2VyQnV0dG9ucyk7XHJcbiAgICB9XHJcbiAgICBiYWNrcGFja0JvZHkuYXBwZW5kQ2hpbGQoaW5uZXJEaWFsb2cpO1xyXG59XHJcbmZ1bmN0aW9uIGNoZWNrRGlhbG9nVGFza0NvbmRpdGlvbnMoX2EpIHtcclxuICAgIHZhciBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyID0gX2EuY3VycmVudERpYWxvZ0NoYXJhY3RlciwgaW52ZW50b3J5ID0gX2EuaW52ZW50b3J5LCB0YXJnZXREaWFsb2cgPSBfYS50YXJnZXREaWFsb2csIGRpYWxvZ1RleHRJZCA9IF9hLmRpYWxvZ1RleHRJZCwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBkaWFsb2dUZXh0QXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgZGlhbG9nVGV4dElkKTtcclxuICAgIHZhciBucGNEZXRhaWxzID0gY3VycmVudERpYWxvZ0NoYXJhY3Rlci5kZXRhaWxzO1xyXG4gICAgdmFyIHJlcXVpcmVPYmplY3QgPSBucGNEZXRhaWxzLnJ1bGVzLnJlcXVpcmU7XHJcbiAgICB2YXIgZGlhbG9nQXJlYSA9IG5wY0RldGFpbHMuZGlhbG9nLmRpYWxvZ0Fuc3dlcnMuZmluZChmdW5jdGlvbiAoZGlhbG9nKSB7IHJldHVybiBkaWFsb2cuaWQgPT0gdGFyZ2V0RGlhbG9nOyB9KTtcclxuICAgIHZhciByZXF1aXJlRGF0YSA9IHNlYXJjaEluUGxheWVySW52ZW50b3J5KHtcclxuICAgICAgICBkYXRhOiBpbnZlbnRvcnksXHJcbiAgICAgICAgc2VhcmNoVGFyZ2V0OiByZXF1aXJlT2JqZWN0XHJcbiAgICB9KTtcclxuICAgIHZhciB0YXNrQ29tcGxlYXRlID0gdHJ1ZTtcclxuICAgIGlmIChkaWFsb2dBcmVhICYmIHJlcXVpcmVPYmplY3QpIHtcclxuICAgICAgICBpZiAoZGlhbG9nQXJlYS5udW1iZXJPZlJlcXVpcmVJdGVtcykge1xyXG4gICAgICAgICAgICBqb3VybmFsTW9kdWxlc18xLndyaXRlRGF0YVRvSm91cm5hbCh7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBkaWFsb2dBcmVhOiBkaWFsb2dBcmVhLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZURhdGE6IHJlcXVpcmVEYXRhLFxyXG4gICAgICAgICAgICAgICAgbnBjRGV0YWlsczogbnBjRGV0YWlscyxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVPYmplY3Q6IHJlcXVpcmVPYmplY3RcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChyZXF1aXJlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGFza0NvbXBsZWF0ZSA9IChkaWFsb2dBcmVhLm51bWJlck9mUmVxdWlyZUl0ZW1zICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZURhdGEubnVtYmVyT2ZJdGVtcyA+PSBwYXJzZUludChkaWFsb2dBcmVhLm51bWJlck9mUmVxdWlyZUl0ZW1zKSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRhc2tDb21wbGVhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaWFsb2dUZXh0QXJlYS5pbm5lckhUTUwgPSBcIkkgY2FudCBkbyB0aGF0LCBmaXJzdCBpIG5lZWQgPHNwYW4+XCIgKyBkaWFsb2dBcmVhLm51bWJlck9mUmVxdWlyZUl0ZW1zICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cIiArIHJlcXVpcmVPYmplY3Quc3BsaXQoXCJfXCIpLmpvaW4oXCIgXCIpICsgXCI8L3NwYW4+IHlvdSBnb3QgPHNwYW4+XCIgKyAoKHJlcXVpcmVEYXRhLm51bWJlck9mSXRlbXMpID8gcmVxdWlyZURhdGEubnVtYmVyT2ZJdGVtcyA6IDApICsgXCI8L3NwYW4+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudERpYWxvZ0NoYXJhY3Rlci5pZFN0YXJ0RGlhbG9nID0gKGN1cnJlbnREaWFsb2dDaGFyYWN0ZXIuZGV0YWlscy5kZWZhdWx0UmVxdWVzdERpYWxvZ0lkKSA/IGN1cnJlbnREaWFsb2dDaGFyYWN0ZXIuZGV0YWlscy5kZWZhdWx0UmVxdWVzdERpYWxvZ0lkIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaWFsb2dBcmVhLm51bWJlck9mUmVxdWlyZUl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBkaWFsb2dUZXh0QXJlYS5pbm5lckhUTUwgPSBcIkkgY2FudCBkbyB0aGF0LCBmaXJzdCBpIG5lZWQgPHNwYW4+XCIgKyBkaWFsb2dBcmVhLm51bWJlck9mUmVxdWlyZUl0ZW1zICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuPlwiICsgcmVxdWlyZU9iamVjdC5zcGxpdChcIl9cIikuam9pbihcIiBcIikgKyBcIjwvc3Bhbj5cIjtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnREaWFsb2dDaGFyYWN0ZXIuaWRTdGFydERpYWxvZyA9IChjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLmRldGFpbHMuZGVmYXVsdFJlcXVlc3REaWFsb2dJZCkgPyBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLmRldGFpbHMuZGVmYXVsdFJlcXVlc3REaWFsb2dJZCA6IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkaWFsb2dBcmVhICYmIG5wY0RldGFpbHMuZGlhbG9nLmRlZmF1bHQuam91cm5hbFRhc2spIHtcclxuICAgICAgICBpZiAoZGlhbG9nQXJlYS5hY3Rpb24gPT09IFwiZ2l2ZV9vYmplY3RcIiAmJiBucGNEZXRhaWxzLnJ1bGVzLmNvbnRhaW4pIHtcclxuICAgICAgICAgICAgam91cm5hbE1vZHVsZXNfMS53cml0ZURhdGFUb0pvdXJuYWwoe1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgZGlhbG9nQXJlYTogZGlhbG9nQXJlYSxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVEYXRhOiByZXF1aXJlRGF0YSxcclxuICAgICAgICAgICAgICAgIG5wY0RldGFpbHM6IG5wY0RldGFpbHMsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlT2JqZWN0OiByZXF1aXJlT2JqZWN0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0YXNrQ29tcGxlYXRlO1xyXG59XHJcbmZ1bmN0aW9uIGRpc3BsYXlUZXh0KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgcGxheWVyID0gX2EucGxheWVyLCBpdGVtID0gX2EuaXRlbTtcclxuICAgIHZhciBjb250ZXh0cyA9IG1haW5HYW1lT2JqZWN0LnJldHVybkNvbnRleHQoKTtcclxuICAgIG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50ID0gaXRlbTtcclxuICAgIHZhciBkZXRhaWxzID0gaXRlbS5kZXRhaWxzO1xyXG4gICAgaWYgKGRldGFpbHMucnVsZXMucmVxdWlyZVRleHQpIHtcclxuICAgICAgICByZW5kZXJUZXh0KGNvbnRleHRzLCBkZXRhaWxzLnJ1bGVzLnJlcXVpcmVUZXh0LCBwbGF5ZXIueCwgcGxheWVyLnkgKyA3MCwgJ3JlZCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRldGFpbHMucnVsZXMuc3VjY2Vzc1RleHQgJiYgIWRldGFpbHMucnVsZXMucmVxdWlyZVRleHQgJiYgIWRldGFpbHMucnVsZXMudGlwcyB8fFxyXG4gICAgICAgIGRldGFpbHMudHlwZSA9PT0gJ2Rvb3InICYmIGRldGFpbHMucnVsZXMuc3VjY2Vzc1RleHQpIHtcclxuICAgICAgICByZW5kZXJUZXh0KGNvbnRleHRzLCBkZXRhaWxzLnJ1bGVzLnN1Y2Nlc3NUZXh0LCBwbGF5ZXIueCwgcGxheWVyLnkgLSA1MCwgJ3doaXRlJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoZGV0YWlscy5ydWxlcy50aXBzKSB7XHJcbiAgICAgICAgcmVuZGVyVGV4dChjb250ZXh0cywgZGV0YWlscy5ydWxlcy50aXBzLCBwbGF5ZXIueCwgcGxheWVyLnkgLSAyMCwgJ29yYW5nZScpO1xyXG4gICAgfVxyXG4gICAgcHJvY2Vzcy5lbnYuR1JPVU5EX0FDVElWRV9CTE9DS19JTl9SQU5HRSA9ICd0cnVlJztcclxuICAgIHJldHVybiBpdGVtO1xyXG59XHJcbmV4cG9ydHMuZGlzcGxheVRleHQgPSBkaXNwbGF5VGV4dDtcclxuZnVuY3Rpb24gcmVuZGVyVGV4dChjb250ZXh0cywgZGlzcGxheVRleHQsIHgsIHksIGNvbG9yKSB7XHJcbiAgICB2YXIgdGV4dERpdmlkZXIgPSBkaXNwbGF5VGV4dC5zcGxpdCgnKicpO1xyXG4gICAgdGV4dERpdmlkZXIuZm9yRWFjaChmdW5jdGlvbiAodGV4dCwgaW5kZXgpIHtcclxuICAgICAgICBjb250ZXh0cy5nYW1lRGlhbG9nRmllbGQuc2hhZG93Q29sb3IgPSAncmdiYSgwLCAwLCAwLCAxKSc7XHJcbiAgICAgICAgY29udGV4dHMuZ2FtZURpYWxvZ0ZpZWxkLnNoYWRvd0JsdXIgPSA0O1xyXG4gICAgICAgIGNvbnRleHRzLmdhbWVEaWFsb2dGaWVsZC5mb250ID0gJ2JvbGQgMTRweCBDb3VyaWVyIE5ldyc7XHJcbiAgICAgICAgY29udGV4dHMuZ2FtZURpYWxvZ0ZpZWxkLnRleHRBbGlnbiA9ICdsZWZ0JztcclxuICAgICAgICBjb250ZXh0cy5nYW1lRGlhbG9nRmllbGQuZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgY29udGV4dHMuZ2FtZURpYWxvZ0ZpZWxkLmZpbGxUZXh0KHRleHQsIHgsIHkgKyAoaW5kZXggKiAxMikpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gaW50ZXJhY3RXaXRoT2JqZWN0cyhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xLmRvb3JGdW5jdGlvbmFsaXR5LmNhbGwoZ3JvdW5kUGxheWVyLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMgfSk7XHJcbiAgICBkeW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXzEudGVsZXBvcnRGdW5jdGlvbmFsaXR5LmNhbGwoZ3JvdW5kUGxheWVyLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfQUNUSVZFX0JMT0NLX0lOX1JBTkdFID09PSAndHJ1ZScpIHtcclxuICAgICAgICB2YXIgcmVxdWlyZURhdGEgPSB2b2lkIDA7XHJcbiAgICAgICAgaWYgKCFtYWluR2FtZU9iamVjdC5tYXBOZWFyQWN0aXZlRWxlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChncm91bmRQbGF5ZXIuY3VycmVudERpYWxvZ0NoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICBucGNEaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgY3VycmVudERpYWxvZ0NoYXJhY3RlcjogZ3JvdW5kUGxheWVyLmN1cnJlbnREaWFsb2dDaGFyYWN0ZXIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBncm91bmRQbGF5ZXIuaW52ZW50b3J5LFxyXG4gICAgICAgICAgICAgICAgc2VhcmNoVGFyZ2V0OiBtYWluR2FtZU9iamVjdC5tYXBOZWFyQWN0aXZlRWxlbWVudC5kZXRhaWxzLnJ1bGVzLnJlcXVpcmUsXHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlRGF0YTogcmVxdWlyZURhdGEsXHJcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9ycyxcclxuICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcXVpcmVEYXRhID0gc2VhcmNoSW5QbGF5ZXJJbnZlbnRvcnkoe1xyXG4gICAgICAgICAgICBkYXRhOiBncm91bmRQbGF5ZXIuaW52ZW50b3J5LFxyXG4gICAgICAgICAgICBzZWFyY2hUYXJnZXQ6IG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMucmVxdWlyZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFjdGl2YXRlSW50ZXJhY3RPYmplY3REYXRhKHtcclxuICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICByZXF1aXJlRGF0YTogcmVxdWlyZURhdGEsXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzLFxyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXI6IGdyb3VuZFBsYXllcixcclxuICAgICAgICAgICAgY3VycmVudERpYWxvZ0NoYXJhY3RlcjogbnVsbFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuaW50ZXJhY3RXaXRoT2JqZWN0cyA9IGludGVyYWN0V2l0aE9iamVjdHM7XHJcbmZ1bmN0aW9uIGFjdGl2YXRlSW50ZXJhY3RPYmplY3REYXRhKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgcmVxdWlyZURhdGEgPSBfYS5yZXF1aXJlRGF0YSwgY29uc3RydWN0b3JzID0gX2EuY29uc3RydWN0b3JzLCBncm91bmRQbGF5ZXIgPSBfYS5ncm91bmRQbGF5ZXIsIGN1cnJlbnREaWFsb2dDaGFyYWN0ZXIgPSBfYS5jdXJyZW50RGlhbG9nQ2hhcmFjdGVyO1xyXG4gICAgaWYgKG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMuY29udGFpbiAmJiAhbWFpbkdhbWVPYmplY3QubWFwTmVhckFjdGl2ZUVsZW1lbnQuZGV0YWlscy5ydWxlcy5yZXF1aXJlIHx8XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QubWFwTmVhckFjdGl2ZUVsZW1lbnQuZGV0YWlscy5ydWxlcy5yZXF1aXJlICYmIHJlcXVpcmVEYXRhKSB7XHJcbiAgICAgICAgaWYgKG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMuY29udGFpbiA9PSAnZXhpdCcpIHtcclxuICAgICAgICAgICAgbGV2ZWxSZXN0b3JlKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9ycyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9iamVjdERldGFpbHMgPSBtYWluR2FtZU9iamVjdC5tYXBOZWFyQWN0aXZlRWxlbWVudC5kZXRhaWxzO1xyXG4gICAgICAgIHZhciBwcmV2aWV3UGljdHVyZSA9IChvYmplY3REZXRhaWxzLnJ1bGVzLm9iamVjdFBpY3R1cmUpID8gb2JqZWN0RGV0YWlscy5ydWxlcy5vYmplY3RQaWN0dXJlIDogcHJvY2Vzcy5lbnYuSE9TVCArIG9iamVjdERldGFpbHMudGV4dHVyZTtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QubWFwTmVhckFjdGl2ZUVsZW1lbnQuZGV0YWlscy5ydWxlcy5jb250YWluICYmIGdyb3VuZFBsYXllciAmJiBwcmV2aWV3UGljdHVyZSkge1xyXG4gICAgICAgICAgICBkZWxldGVJbnZlbnRvcnlPYmplY3Qoe1xyXG4gICAgICAgICAgICAgICAgY3VycmVudERpYWxvZ0NoYXJhY3RlcjogY3VycmVudERpYWxvZ0NoYXJhY3RlcixcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVEYXRhOiByZXF1aXJlRGF0YSxcclxuICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QubWFwTmVhckFjdGl2ZUVsZW1lbnQuZGV0YWlscy5kZWxldGVGcm9tSXRlbXNSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGVJbnZlbnRvcnlPYmplY3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREaWFsb2dDaGFyYWN0ZXI6IG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVEYXRhOiByZXF1aXJlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXI6IGdyb3VuZFBsYXllcixcclxuICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlU2luZ2xlSXRlbTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSk7IC8qKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzYXZlT2JqZWN0VG9CYWNrUGFjayh7XHJcbiAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXI6IGdyb3VuZFBsYXllcixcclxuICAgICAgICAgICAgICAgIGRhdGE6IG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMuY29udGFpbixcclxuICAgICAgICAgICAgICAgIHByZXZpZXdQaWN0dXJlOiBwcmV2aWV3UGljdHVyZSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IChtYWluR2FtZU9iamVjdC5tYXBOZWFyQWN0aXZlRWxlbWVudC5kZXRhaWxzLm9iamVjdE5hbWUpID8gbWFpbkdhbWVPYmplY3QubWFwTmVhckFjdGl2ZUVsZW1lbnQuZGV0YWlscy5vYmplY3ROYW1lIDogbnVsbFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QubWFwTmVhckFjdGl2ZUVsZW1lbnQuZGV0YWlscy5ydWxlcy50aXBzID0gbnVsbDtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5tYXBOZWFyQWN0aXZlRWxlbWVudC5kZXRhaWxzLnJ1bGVzLmNvbnRhaW4gPSBudWxsO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMucmVxdWlyZVRleHQgPSBudWxsO1xyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50LmRldGFpbHMucnVsZXMucmVxdWlyZSA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGRlbGV0ZUludmVudG9yeU9iamVjdChfYSkge1xyXG4gICAgdmFyIGN1cnJlbnREaWFsb2dDaGFyYWN0ZXIgPSBfYS5jdXJyZW50RGlhbG9nQ2hhcmFjdGVyLCByZXF1aXJlRGF0YSA9IF9hLnJlcXVpcmVEYXRhLCBncm91bmRQbGF5ZXIgPSBfYS5ncm91bmRQbGF5ZXIsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIF9iID0gX2EuZGVsZXRlU2luZ2xlSXRlbSwgZGVsZXRlU2luZ2xlSXRlbSA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xyXG4gICAgaWYgKCFjdXJyZW50RGlhbG9nQ2hhcmFjdGVyKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciByZXF1aXJlU3RhdG1lbnQgPSBjdXJyZW50RGlhbG9nQ2hhcmFjdGVyLmRldGFpbHMucnVsZXMucmVxdWlyZTtcclxuICAgIGlmICghcmVxdWlyZVN0YXRtZW50KVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBpbnZlbnRvcnkgPSBncm91bmRQbGF5ZXIuaW52ZW50b3J5O1xyXG4gICAgdmFyIHNlYXJjaERhdGFOYW1lID0gcmVxdWlyZURhdGEuaW5uZXJEYXRhO1xyXG4gICAgdmFyIG51bWJlck9mUmVxdWlyZUVsZW1lbnRzID0gcmVxdWlyZURhdGEubnVtYmVyT2ZJdGVtcztcclxuICAgIHZhciBhbGxSZXF1aXJlT2JqZWN0cyA9IGludmVudG9yeS5maW5kKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLmlubmVyRGF0YSA9PT0gc2VhcmNoRGF0YU5hbWU7IH0pO1xyXG4gICAgaWYgKCFkZWxldGVTaW5nbGVJdGVtKVxyXG4gICAgICAgIGpvdXJuYWxNb2R1bGVzXzEuY29tcGxldGVKb3VybmFsVGFzayh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgYWxsUmVxdWlyZU9iamVjdHM6IGFsbFJlcXVpcmVPYmplY3RzIH0pO1xyXG4gICAgaWYgKCFkZWxldGVTaW5nbGVJdGVtKVxyXG4gICAgICAgIGdyb3VuZFBsYXllci5pbnZlbnRvcnkuc3BsaWNlKGludmVudG9yeS5pbmRleE9mKGFsbFJlcXVpcmVPYmplY3RzKSwgMSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgZGVsZXRlU2luZ2xlT2JqZWN0RnJvbUludmVudG9yeSh7IGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyLCBhbGxSZXF1aXJlT2JqZWN0czogYWxsUmVxdWlyZU9iamVjdHMgfSk7XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlU2luZ2xlT2JqZWN0RnJvbUludmVudG9yeShfYSkge1xyXG4gICAgdmFyIGdyb3VuZFBsYXllciA9IF9hLmdyb3VuZFBsYXllciwgYWxsUmVxdWlyZU9iamVjdHMgPSBfYS5hbGxSZXF1aXJlT2JqZWN0cztcclxuICAgIHZhciBpbnZlbnRvcnkgPSBncm91bmRQbGF5ZXIuaW52ZW50b3J5O1xyXG4gICAgdmFyIGluZGV4ID0gaW52ZW50b3J5LmluZGV4T2YoYWxsUmVxdWlyZU9iamVjdHMpO1xyXG4gICAgaWYgKGludmVudG9yeVtpbmRleF0ubnVtYmVyT2ZJdGVtcykge1xyXG4gICAgICAgIGlmIChpbnZlbnRvcnlbaW5kZXhdLm51bWJlck9mSXRlbXMgPiAwKVxyXG4gICAgICAgICAgICBpbnZlbnRvcnlbaW5kZXhdLm51bWJlck9mSXRlbXMgLT0gMTtcclxuICAgICAgICBpZiAoaW52ZW50b3J5W2luZGV4XS5udW1iZXJPZkl0ZW1zID09PSAwKVxyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXIuaW52ZW50b3J5LnNwbGljZShpbnZlbnRvcnkuaW5kZXhPZihhbGxSZXF1aXJlT2JqZWN0cyksIDEpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNhdmVPYmplY3RUb0JhY2tQYWNrKF9hKSB7XHJcbiAgICB2YXIgZ3JvdW5kUGxheWVyID0gX2EuZ3JvdW5kUGxheWVyLCBkYXRhID0gX2EuZGF0YSwgcHJldmlld1BpY3R1cmUgPSBfYS5wcmV2aWV3UGljdHVyZSwgbmFtZSA9IF9hLm5hbWU7XHJcbiAgICBwbGF5ZXJVbml0TW9kdWxlXzEuaGlkZUludmVudG9yeSgpO1xyXG4gICAgdmFyIGludmVudG9yeVN0YWNrID0gc3RhY2tJdGVtQXRJbnZlbnRvcnkoeyBkYXRhOiBkYXRhLCBpbnZlbnRvcnk6IGdyb3VuZFBsYXllci5pbnZlbnRvcnkgfSk7XHJcbiAgICBpZiAoaW52ZW50b3J5U3RhY2spXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgZ3JvdW5kUGxheWVyLmludmVudG9yeSA9IGdyb3VuZFBsYXllci5pbnZlbnRvcnkuY29uY2F0KHtcclxuICAgICAgICBpbm5lckRhdGE6IGRhdGEsXHJcbiAgICAgICAgdGV4dHVyZTogcHJldmlld1BpY3R1cmUsXHJcbiAgICAgICAgbnVtYmVyT2ZJdGVtczogMSxcclxuICAgICAgICBuYW1lOiBuYW1lXHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNhdmVPYmplY3RUb0JhY2tQYWNrID0gc2F2ZU9iamVjdFRvQmFja1BhY2s7XHJcbmZ1bmN0aW9uIHNlYXJjaEluUGxheWVySW52ZW50b3J5KF9hKSB7XHJcbiAgICB2YXIgZGF0YSA9IF9hLmRhdGEsIHNlYXJjaFRhcmdldCA9IF9hLnNlYXJjaFRhcmdldDtcclxuICAgIGlmIChkYXRhLmxlbmd0aCA8PSAwIHx8ICFkYXRhKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBzZWFyY2hEYXRhID0gZGF0YS5maW5kKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhLmlubmVyRGF0YSA9PT0gc2VhcmNoVGFyZ2V0OyB9KTtcclxuICAgIHJldHVybiBzZWFyY2hEYXRhO1xyXG59XHJcbmV4cG9ydHMuc2VhcmNoSW5QbGF5ZXJJbnZlbnRvcnkgPSBzZWFyY2hJblBsYXllckludmVudG9yeTtcclxuZnVuY3Rpb24gc3RhY2tJdGVtQXRJbnZlbnRvcnkoX2EpIHtcclxuICAgIHZhciBkYXRhID0gX2EuZGF0YSwgaW52ZW50b3J5ID0gX2EuaW52ZW50b3J5O1xyXG4gICAgdmFyIGZpbmRPYmplY3RBdEludmVudG9yeSA9IHNlYXJjaEluUGxheWVySW52ZW50b3J5KHsgZGF0YTogaW52ZW50b3J5LCBzZWFyY2hUYXJnZXQ6IGRhdGEgfSk7XHJcbiAgICBpZiAoZmluZE9iamVjdEF0SW52ZW50b3J5KVxyXG4gICAgICAgIGZpbmRPYmplY3RBdEludmVudG9yeS5udW1iZXJPZkl0ZW1zICs9IDE7XHJcbiAgICByZXR1cm4gZmluZE9iamVjdEF0SW52ZW50b3J5O1xyXG59XHJcbmZ1bmN0aW9uIGxldmVsUmVzdG9yZShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYWxsR2FtZUJhY2tncm91bmRFbGVtZW50cywgX2ksIGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMSwgYmFja2dyb3VuZDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEJhY2tncm91bmRPYmplY3RzXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzXzEgPSBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzOyBfaSA8IGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZCA9IGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQuc3BlZWQgPSBiYWNrZ3JvdW5kLmRlZmF1bHRTcGVlZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubGV2ZWxDaGFuZ2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LndhcnBFZmZlY3QoY29uc3RydWN0b3JzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMubGV2ZWxSZXN0b3JlID0gbGV2ZWxSZXN0b3JlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGR5bmFtaWNEaWFsb2dfMSA9IHJlcXVpcmUoXCIuL2R5bmFtaWNEaWFsb2dcIik7XHJcbnZhciBwbGF5ZXJVbml0TW9kdWxlXzEgPSByZXF1aXJlKFwiLi9wbGF5ZXJVbml0TW9kdWxlXCIpO1xyXG52YXIgc291bmRNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vc291bmRNb2R1bGVzXCIpO1xyXG5mdW5jdGlvbiBlbGV2YXRvclBsYXllck1vdmUoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBsZXZlbEluZm9ybWF0aW9uID0gX2EubGV2ZWxJbmZvcm1hdGlvbiwgZWxldmF0b3IgPSBfYS5lbGV2YXRvciwgcGxheWVyID0gX2EucGxheWVyO1xyXG4gICAgaWYgKHBsYXllci5vYmplY3RPd25lciAhPSBcImdyb3VuZFBsYXllclwiKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBncmF2aXR5ID0gbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5O1xyXG4gICAgaWYgKGVsZXZhdG9yLmRldGFpbHMubW92ZURpcmVjdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XHJcbiAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzID0gKE1hdGguc2lnbihlbGV2YXRvci5kZXRhaWxzLnNwZWVkKSA+IDApID8gLTEgOiAwOyAvLyhNYXRoLnNpZ24oZWxldmF0b3IuZGV0YWlscy5zcGVlZCkgPiAwKT8gKGVsZXZhdG9yLmRldGFpbHMuc3BlZWQgKyBncmF2aXR5LTEpKiAtMVxyXG4gICAgICAgIC8vOiAoZWxldmF0b3IuZGV0YWlscy5zcGVlZCApO1xyXG4gICAgICAgIHBsYXllci5vbkVsZXZhdG9yU3BlZWQgPSAoTWF0aC5zaWduKGVsZXZhdG9yLmRldGFpbHMuc3BlZWQpID4gMCkgPyAoZWxldmF0b3IuZGV0YWlscy5zcGVlZCArIGdyYXZpdHkgLSAxKSAqIC0xXHJcbiAgICAgICAgICAgIDogKGVsZXZhdG9yLmRldGFpbHMuc3BlZWQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZWxldmF0b3IuZGV0YWlscy5tb3ZlRGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIikge1xyXG4gICAgICAgIGxldmVsSW5mb3JtYXRpb24uaG9yaXpvbnRhbFNwZWVkID0gKGVsZXZhdG9yLmRldGFpbHMuY3VycmVudERpcmVjdGlvbikgPyBlbGV2YXRvci5kZXRhaWxzLnNwZWVkIC8gNSA6IChlbGV2YXRvci5kZXRhaWxzLnNwZWVkIC8gNSkgKiAtMTtcclxuICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPSAwO1xyXG4gICAgICAgIHBsYXllci5vbkVsZXZhdG9yU3BlZWQgPSAwO1xyXG4gICAgfVxyXG4gICAgcGxheWVyLmNlaWxpbmdUb3VjaCA9IGZhbHNlO1xyXG4gICAgLy9wbGF5ZXIuZ3JvdW5kVG91Y2ggPSB0cnVlO1xyXG59XHJcbmV4cG9ydHMuZWxldmF0b3JQbGF5ZXJNb3ZlID0gZWxldmF0b3JQbGF5ZXJNb3ZlO1xyXG5mdW5jdGlvbiBlbGV2YXRvck1vdmUoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgaWYgKCF0aGlzLmRldGFpbHMpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHRoaXMuZGV0YWlscy50eXBlID09PSAnZWxldmF0b3InKSB7XHJcbiAgICAgICAgdmFyIGVsZXZhdG9yQ29tcGVuc2F0aW9uID0gNTtcclxuICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gdGhpcy5kZXRhaWxzLmN1cnJlbnRWYWx1ZU9mTW92ZTtcclxuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gdGhpcy5kZXRhaWxzLnZhbHVlT2ZNb3ZlO1xyXG4gICAgICAgIGlmICh0aGlzLmRldGFpbHMuY3VycmVudERpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZXRhaWxzLm1vdmVEaXJlY3Rpb24gPT09IFwidmVydGljYWxcIilcclxuICAgICAgICAgICAgICAgIHRoaXMueSArPSB0aGlzLmRldGFpbHMuc3BlZWQgLyBlbGV2YXRvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGV0YWlscy5tb3ZlRGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIilcclxuICAgICAgICAgICAgICAgIHRoaXMueCArPSB0aGlzLmRldGFpbHMuc3BlZWQgLyBlbGV2YXRvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5kZXRhaWxzLmN1cnJlbnRWYWx1ZU9mTW92ZSAtPSB0aGlzLmRldGFpbHMuc3BlZWQgLyBlbGV2YXRvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldGFpbHMuY3VycmVudERpcmVjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLmRldGFpbHMuY3VycmVudERpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZXRhaWxzLm1vdmVEaXJlY3Rpb24gPT09IFwidmVydGljYWxcIilcclxuICAgICAgICAgICAgICAgIHRoaXMueSAtPSB0aGlzLmRldGFpbHMuc3BlZWQgLyBlbGV2YXRvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGV0YWlscy5tb3ZlRGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIilcclxuICAgICAgICAgICAgICAgIHRoaXMueCAtPSB0aGlzLmRldGFpbHMuc3BlZWQgLyBlbGV2YXRvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5kZXRhaWxzLmN1cnJlbnRWYWx1ZU9mTW92ZSArPSB0aGlzLmRldGFpbHMuc3BlZWQgLyBlbGV2YXRvckNvbXBlbnNhdGlvbjtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBkZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlscy5jdXJyZW50RGlyZWN0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmVsZXZhdG9yTW92ZSA9IGVsZXZhdG9yTW92ZTtcclxuZnVuY3Rpb24gc3RhaXJzTW92ZShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGxldmVsSW5mb3JtYXRpb24gPSBfYS5sZXZlbEluZm9ybWF0aW9uLCBzdGFpcnMgPSBfYS5zdGFpcnMsIHBsYXllciA9IF9hLnBsYXllciwgeCA9IF9hLngsIHkgPSBfYS55O1xyXG4gICAgdmFyIHN0YWlyc1ZlcnRpY2FsSW5kZXggPSBzdGFpcnMuaGVpZ2h0IC8gc3RhaXJzLndpZHRoO1xyXG4gICAgdmFyIGV4dHJhU2Vjb25kcyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRXh0cmFTZWNvbmRzO1xyXG4gICAgdmFyIGdyb3VuZFBsYXllciA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5ncm91bmRQbGF5ZXJDaGFyYWN0ZXI7XHJcbiAgICBwbGF5ZXIub25TdGFpcnMgPSB0cnVlO1xyXG4gICAgaWYgKHBsYXllci5vYmplY3RPd25lciA9PT0gXCJncm91bmRFbmVteVwiIHx8IHBsYXllci5vYmplY3RPd25lciA9PT0gXCJncm91bmROUENcIikge1xyXG4gICAgICAgIGlmIChleHRyYVNlY29uZHMgJSA1ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMueSArPSB0aGlzLmp1bXBJbXB1bHM7XHJcbiAgICAgICAgICAgIGlmIChzdGFpcnMuZGV0YWlscy50eXBlID09PSBcInN0YWlycy1sZWZ0XCIgJiYgcGxheWVyLmlzUnVuKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIueSArPSAocGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcpID9cclxuICAgICAgICAgICAgICAgICAgICAobGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5ICsgc3RhaXJzVmVydGljYWxJbmRleCAqIDIpICogLTEgOlxyXG4gICAgICAgICAgICAgICAgICAgIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhaXJzLmRldGFpbHMudHlwZSA9PT0gXCJzdGFpcnMtcmlnaHRcIiAmJiBwbGF5ZXIuaXNSdW4pIHtcclxuICAgICAgICAgICAgICAgIHBsYXllci55ICs9IChwbGF5ZXIucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JykgP1xyXG4gICAgICAgICAgICAgICAgICAgIDAgOiAobGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5ICsgc3RhaXJzVmVydGljYWxJbmRleCAqIDIpICogLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yaWdodFdhbGxUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmxlZnRXYWxsVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwbGF5ZXIuZ3JvdW5kVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHBsYXllci5vblN0YWlycyA9IHRydWU7XHJcbiAgICBpZiAoIXBsYXllci5pc1J1bikge1xyXG4gICAgICAgIHBsYXllci5ncm91bmRUb3VjaCA9IHRydWU7XHJcbiAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzID0gLTE7XHJcbiAgICAgICAgaWYgKHBsYXllci55IDwgc3RhaXJzLnkgJiYgcGxheWVyLm9uU3RhaXJzICYmIHBsYXllci54IDw9IHN0YWlycy54ICYmIHN0YWlycy5kZXRhaWxzLnR5cGUgPT09IFwic3RhaXJzLWxlZnRcIiB8fFxyXG4gICAgICAgICAgICBwbGF5ZXIueSA8IHN0YWlycy55ICYmIHBsYXllci5vblN0YWlycyAmJiBwbGF5ZXIueCArIChwbGF5ZXIud2lkdGggLyAyKSA8PSBzdGFpcnMueCArIHN0YWlycy53aWR0aCAmJiBzdGFpcnMuZGV0YWlscy50eXBlID09PSBcInN0YWlycy1yaWdodFwiKSB7XHJcbiAgICAgICAgICAgIHBsYXllci5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPSBsZXZlbEluZm9ybWF0aW9uLmdyYXZpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHZhciB4TWF4ID0gTWF0aC5tYXgocGxheWVyLnggKyBwbGF5ZXIud2lkdGgsIHN0YWlycy54KSAtIE1hdGgubWluKHBsYXllci54ICsgcGxheWVyLndpZHRoLCBzdGFpcnMueCk7XHJcbiAgICBpZiAoc3RhaXJzLmRldGFpbHMudHlwZSA9PT0gXCJzdGFpcnMtbGVmdFwiKSB7XHJcbiAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5qdW1wSW1wdWxzID0gKHBsYXllci5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID09PSAncmlnaHQnKSA/XHJcbiAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb24uZ3Jhdml0eSAqIC0xIDogbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5O1xyXG4gICAgICAgIHBsYXllci5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoc3RhaXJzLmRldGFpbHMudHlwZSA9PT0gXCJzdGFpcnMtcmlnaHRcIiAmJiBwbGF5ZXIuaXNSdW4pIHtcclxuICAgICAgICBsZXZlbEluZm9ybWF0aW9uLmp1bXBJbXB1bHMgPSAocGxheWVyLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPT09ICdyaWdodCcpID9cclxuICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5ncmF2aXR5IDogKGxldmVsSW5mb3JtYXRpb24uZ3Jhdml0eSArIHN0YWlyc1ZlcnRpY2FsSW5kZXggKiAyKSAqIC0xO1xyXG4gICAgICAgIHBsYXllci5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc3RhaXJzTW92ZSA9IHN0YWlyc01vdmU7XHJcbi8vIE9wZW4gZG9vciBieSBwcmVzc2luZyBFXHJcbmZ1bmN0aW9uIGRvb3JGdW5jdGlvbmFsaXR5KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzID0gX2EuY29uc3RydWN0b3JzO1xyXG4gICAgdmFyIGN1cnJlbnRXYWxsQmxvY2sgPSB0aGlzLmN1cnJlbnRXYWxsQmxvY2s7XHJcbiAgICB2YXIgY3VycmVudEdyb3VuZEJsb2NrID0gdGhpcy5jdXJyZW50R3JvdW5kQmxvY2s7XHJcbiAgICB2YXIgbGV2ZWxJbmZvcm1hdGlvbiA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGE7XHJcbiAgICB2YXIgYWxsQmxvY2tzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgIHZhciBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgIHZhciBjdXJyZW50QmxvY2tJbmRleCA9IChjdXJyZW50R3JvdW5kQmxvY2spID8gY3VycmVudEdyb3VuZEJsb2NrLmluZGV4IDogbnVsbDtcclxuICAgIHZhciBjb21wYXJlQmxvY2sgPSBhbGxCbG9ja3MuZmluZChmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICB2YXIgYm90dG9tQmxvY2tJbmRleCA9IGN1cnJlbnRCbG9ja0luZGV4IC0gMTtcclxuICAgICAgICByZXR1cm4gYmxvY2suaW5kZXggPT09IGJvdHRvbUJsb2NrSW5kZXg7XHJcbiAgICB9KTtcclxuICAgIGlmICghY3VycmVudFdhbGxCbG9jayB8fCBjdXJyZW50R3JvdW5kQmxvY2sgPT09IGN1cnJlbnRXYWxsQmxvY2sgfHxcclxuICAgICAgICBjb21wYXJlQmxvY2sgPT09IGN1cnJlbnRXYWxsQmxvY2sgJiYgdGhpcy54ICsgdGhpcy53aWR0aCA+IGN1cnJlbnRXYWxsQmxvY2sueCArIGN1cnJlbnRXYWxsQmxvY2sud2lkdGggJiYgdGhpcy54IDwgY3VycmVudFdhbGxCbG9jay54ICsgY3VycmVudFdhbGxCbG9jay53aWR0aCAtIDUpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKGN1cnJlbnRXYWxsQmxvY2suZGV0YWlscy50eXBlID09PSAnZG9vcicpIHtcclxuICAgICAgICBpZiAoY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLnJ1bGVzLnJlcXVpcmUpIHtcclxuICAgICAgICAgICAgdmFyIHNlYXJjaE9iamVjdCA9IGR5bmFtaWNEaWFsb2dfMS5zZWFyY2hJblBsYXllckludmVudG9yeSh7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmludmVudG9yeSxcclxuICAgICAgICAgICAgICAgIHNlYXJjaFRhcmdldDogY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLnJ1bGVzLnJlcXVpcmVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghc2VhcmNoT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLnNvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc291bmRNb2R1bGVzXzEuaW5pdFNvdW5kT2JqZWN0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU291bmRDcmVhdG9yOiBjb25zdHJ1Y3RvcnMuU291bmRDcmVhdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kVXJsOiBjdXJyZW50V2FsbEJsb2NrLmRldGFpbHMuc291bmQuc2Vjb25kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291bmRMb29wOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN1cnJlbnRXYWxsQmxvY2suZGV0YWlscy5jb2xsaXNpb24gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLnJ1bGVzLnN1Y2Nlc3NUZXh0ID0gXCJkb29yIGlzIG9wZW5cIjtcclxuICAgICAgICAgICAgY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLmNvbGxpc2lvbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLnJ1bGVzLnN1Y2Nlc3NUZXh0ID0gXCJkb29yIGlzIGNsb3NlZFwiO1xyXG4gICAgICAgICAgICBjdXJyZW50V2FsbEJsb2NrLmRldGFpbHMuY29sbGlzaW9uID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbi5ob3Jpem9udGFsU3BlZWQgPSAzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZG9vckZ1bmN0aW9uYWxpdHkgPSBkb29yRnVuY3Rpb25hbGl0eTtcclxuZnVuY3Rpb24gdGVsZXBvcnRGdW5jdGlvbmFsaXR5KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYWxsQmxvY2tzLCBjdXJyZW50R3JvdW5kQmxvY2ssIGN1cnJlbnRCbG9ja0luZGV4LCB0ZWxlcG9ydERvb3IsIHNlYXJjaE9iamVjdCwgZG9vcklkLCB0YXJnZXRJZF8xLCBzcGF3blBvaW50LCBwb3NpdGlvblJhbmdlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGFsbEJsb2NrcyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3M7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VuZEJsb2NrID0gdGhpcy5jdXJyZW50R3JvdW5kQmxvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJsb2NrSW5kZXggPSAoY3VycmVudEdyb3VuZEJsb2NrKSA/IGN1cnJlbnRHcm91bmRCbG9jay5pbmRleCA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50R3JvdW5kQmxvY2sgfHwgIWN1cnJlbnRCbG9ja0luZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbGVwb3J0RG9vciA9IGFsbEJsb2Nrcy5maW5kKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm90dG9tQmxvY2tJbmRleCA9IGN1cnJlbnRCbG9ja0luZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrLmluZGV4ID09IGJvdHRvbUJsb2NrSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZWxlcG9ydERvb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZWxlcG9ydERvb3IuZGV0YWlscylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ZWxlcG9ydERvb3IuZGV0YWlscy50eXBlID09PSBcInRlbGVwb3J0X2Rvb3JcIikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWxlcG9ydERvb3IuZGV0YWlscy5ydWxlcy5yZXF1aXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaE9iamVjdCA9IGR5bmFtaWNEaWFsb2dfMS5zZWFyY2hJblBsYXllckludmVudG9yeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmludmVudG9yeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaFRhcmdldDogdGVsZXBvcnREb29yLmRldGFpbHMucnVsZXMucmVxdWlyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWFyY2hPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZG9vcklkID0gdGVsZXBvcnREb29yLmRldGFpbHMucnVsZXMuZG9vcklkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldElkXzEgPSB0ZWxlcG9ydERvb3IuZGV0YWlscy5ydWxlcy50YXJnZXRJZDtcclxuICAgICAgICAgICAgICAgICAgICBzcGF3blBvaW50ID0gYWxsQmxvY2tzLmZpbHRlcihmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmouZGV0YWlscylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmouZGV0YWlscy50eXBlID09PSBcInRlbGVwb3J0X2Rvb3JcIjtcclxuICAgICAgICAgICAgICAgICAgICB9KS5maW5kKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5kZXRhaWxzLnJ1bGVzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldElkXzEgPT0gb2JqLmRldGFpbHMucnVsZXMuZG9vcklkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3Bhd25Qb2ludClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwbGF5ZXJVbml0TW9kdWxlXzEucGxheWVyQ2hhbmdlTWFwUG9zaXRpb24oeyBuZXdTcGF3blBvaW50OiBzcGF3blBvaW50LCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uUmFuZ2UgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENoYW5nZSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcG9zaXRpb25SYW5nZTogcG9zaXRpb25SYW5nZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy50ZWxlcG9ydEZ1bmN0aW9uYWxpdHkgPSB0ZWxlcG9ydEZ1bmN0aW9uYWxpdHk7XHJcbmZ1bmN0aW9uIG9wZW5DbG9zZWREb29yQW5pbWF0aW9uKF9hKSB7XHJcbiAgICB2YXIgY3VycmVudFdhbGxCbG9jayA9IF9hLmN1cnJlbnRXYWxsQmxvY2ssIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHZhciBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgIGlmIChjdXJyZW50V2FsbEJsb2NrLmRldGFpbHMudHlwZSAhPSAnZG9vcicpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGRvb3JTdGF0ZSA9IGN1cnJlbnRXYWxsQmxvY2suZGV0YWlscy5jb2xsaXNpb247XHJcbiAgICB2YXIgZG9vckFuaW1hdGlvbkl0ZW1zID0gY3VycmVudFdhbGxCbG9jay5kZXRhaWxzLm51bWJlck9mSXRlbXM7XHJcbiAgICB2YXIgZG9vclBpY3R1cmVXaWR0aCA9IGN1cnJlbnRXYWxsQmxvY2suZGV0YWlscy5zV2lkdGg7XHJcbiAgICBpZiAoZXh0cmFTZWNvbmRzICUgNSA9PT0gMCkge1xyXG4gICAgICAgIGlmIChkb29yU3RhdGUgJiYgY3VycmVudFdhbGxCbG9jay5zeCA+IDApIHtcclxuICAgICAgICAgICAgY3VycmVudFdhbGxCbG9jay5zeCAtPSBkb29yUGljdHVyZVdpZHRoO1xyXG4gICAgICAgICAgICBkb29yU291bmQoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGRvb3I6IGN1cnJlbnRXYWxsQmxvY2ssIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghZG9vclN0YXRlICYmIGN1cnJlbnRXYWxsQmxvY2suc3ggPj0gMCAmJiBjdXJyZW50V2FsbEJsb2NrLnN4IDwgZG9vclBpY3R1cmVXaWR0aCAqIChkb29yQW5pbWF0aW9uSXRlbXMgLSAxKSkge1xyXG4gICAgICAgICAgICBjdXJyZW50V2FsbEJsb2NrLnN4ICs9IGRvb3JQaWN0dXJlV2lkdGg7XHJcbiAgICAgICAgICAgIGRvb3JTb3VuZCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgZG9vcjogY3VycmVudFdhbGxCbG9jaywgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMub3BlbkNsb3NlZERvb3JBbmltYXRpb24gPSBvcGVuQ2xvc2VkRG9vckFuaW1hdGlvbjtcclxuZnVuY3Rpb24gZG9vclNvdW5kKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgZG9vciA9IF9hLmRvb3IsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIGlmICghZG9vci5kZXRhaWxzLnNvdW5kKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHNvdW5kTW9kdWxlc18xLmluaXRTb3VuZE9iamVjdCh7XHJcbiAgICAgICAgU291bmRDcmVhdG9yOiBjb25zdHJ1Y3RvcnMuU291bmRDcmVhdG9yLFxyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICBzb3VuZFByb3BzOiB7XHJcbiAgICAgICAgICAgIHNvdW5kVXJsOiBkb29yLmRldGFpbHMuc291bmQubWFpbixcclxuICAgICAgICAgICAgc291bmRMb29wOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGxlYWRlcnNGdW5jdGlvbmFsaXR5KCkge1xyXG4gICAgaWYgKHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kRW5lbXlcIiB8fCB0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZE5QQ1wiKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmICghdGhpcy5jdXJyZW50R3JvdW5kQmxvY2spXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB2YXIgY3VycmVudEdyb3VuZEJsb2NrID0gdGhpcy5jdXJyZW50R3JvdW5kQmxvY2s7XHJcbiAgICBpZiAoY3VycmVudEdyb3VuZEJsb2NrLmRldGFpbHMudHlwZSAhPSBcImxlYWRlclwiKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLmxlYWRlcnNGdW5jdGlvbmFsaXR5ID0gbGVhZGVyc0Z1bmN0aW9uYWxpdHk7XHJcbmZ1bmN0aW9uIGJhY2tncm91bmRDaGFuZ2UoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBwb3NpdGlvblJhbmdlID0gX2EucG9zaXRpb25SYW5nZTtcclxuICAgIHZhciBsZXZlbEluZm9ybWF0aW9uID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YTtcclxuICAgIHZhciBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEJhY2tncm91bmRPYmplY3RzO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzXzEgPSBhbGxHYW1lQmFja2dyb3VuZEVsZW1lbnRzOyBfaSA8IGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgaXRlbSA9IGFsbEdhbWVCYWNrZ3JvdW5kRWxlbWVudHNfMVtfaV07XHJcbiAgICAgICAgaXRlbS55ICs9IChpdGVtLmRlZmF1bHRTcGVlZCAvICgxMCkpICogKHBvc2l0aW9uUmFuZ2UueVJhbmdlQ29tcGVuc2F0aW9uIC0gMSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZGVhZGx5QmxvY2tzKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgY3VyZW50QmxvY2sgPSBfYS5jdXJlbnRCbG9jaywgY29uc3RydWN0b3JzID0gX2EuY29uc3RydWN0b3JzO1xyXG4gICAgaWYgKCFjdXJlbnRCbG9jay5kZXRhaWxzKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgIGlmICh0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kRW5lbXlcIiAmJiB0aGlzLm9iamVjdE93bmVyICE9IFwiZ3JvdW5kTlBDXCIgJiYgY3VyZW50QmxvY2suZGV0YWlscy5kZWFkbHkpIHtcclxuICAgICAgICB2YXIgYWxsRW5lbXkgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsRW5lbXk7XHJcbiAgICAgICAgaWYgKChleHRyYVNlY29uZHMgJSA1MCA9PT0gMCAmJiBjdXJlbnRCbG9jay5kZXRhaWxzLmlkICE9IFwiZGVhZGx5LXNwaWtlc1wiICYmIGN1cmVudEJsb2NrLmRldGFpbHMuaWQgIT0gXCJkZWFkbHktaWNlLXNwaWtlcy0xXCIpXHJcbiAgICAgICAgICAgIHx8IGN1cmVudEJsb2NrLmRldGFpbHMuaWQgPT09IFwiZGVhZGx5LXNwaWtlc1wiIHx8IGN1cmVudEJsb2NrLmRldGFpbHMuaWQgPT09IFwiZGVhZGx5LWljZS1zcGlrZXNcIikge1xyXG4gICAgICAgICAgICB2YXIgYWxsQmxvY2tzID0gW10uY29uY2F0KG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3MsIGFsbEVuZW15KTtcclxuICAgICAgICAgICAgcGxheWVyVW5pdE1vZHVsZV8xLnBvc2l0aW9uVG9TcGF3bmVyKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBhbGxCbG9ja3M6IGFsbEJsb2NrcyB9KTtcclxuICAgICAgICAgICAgcGxheWVyVW5pdE1vZHVsZV8xLmdyb3VuZFBsYXllck1pbnVzTGlmZSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY3VyZW50QmxvY2suZGV0YWlscy5kZWFkbHkgJiYgKHRoaXMub2JqZWN0T3duZXIgPT09IFwiZ3JvdW5kRW5lbXlcIiB8fCB0aGlzLm9iamVjdE93bmVyID09PSBcImdyb3VuZE5QQ1wiKSkge1xyXG4gICAgICAgIHRoaXMuaGVhbHRoUG9pbnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5oZWFsdGhQb2ludCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlYWRseUJsb2NrcyA9IGRlYWRseUJsb2NrcztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL3BsYXllclVuaXRNb2R1bGVcIik7XHJcbmZ1bmN0aW9uIG9wZW5Kb3VybmFsKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgdXNlclNoaXBEYXRhID0gX2EudXNlclNoaXBEYXRhO1xyXG4gICAgdmFyIGdhbWVJbmZvID0gbWFpbkdhbWVPYmplY3Quc2hvd0dhbWVJbmZvKCk7XHJcbiAgICB2YXIgdXNlclNoaXBKb3VybmFsID0gdXNlclNoaXBEYXRhLmpvdXJuYWw7XHJcbiAgICB2YXIgYmFja3BhY2tCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2JhY2twYWNrLWJvZHknKTtcclxuICAgIGJhY2twYWNrQm9keS5pbm5lckhUTUwgPSAnJztcclxuICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPT09ICdmYWxzZScpIHtcclxuICAgICAgICBmaWxsSm91cm5hbERlZmF1bHREYXRhKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgIGRpc3BsYXlKb3VybmFsRGF0YSh7IHVzZXJTaGlwSm91cm5hbDogdXNlclNoaXBKb3VybmFsLCBiYWNrcGFja0JvZHk6IGJhY2twYWNrQm9keSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgIHBsYXllclVuaXRNb2R1bGVfMS5vcGVuSW52ZW50b3J5KCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBwbGF5ZXJVbml0TW9kdWxlXzEuaGlkZUludmVudG9yeSgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMub3BlbkpvdXJuYWwgPSBvcGVuSm91cm5hbDtcclxuZnVuY3Rpb24gZmlsbEpvdXJuYWxEZWZhdWx0RGF0YShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgZ2FtZUluZm8gPSBtYWluR2FtZU9iamVjdC5zaG93R2FtZUluZm8oKTtcclxuICAgIHZhciB1c2VyU2hpcERhdGEgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgdmFyIHVzZXJTaGlwSm91cm5hbCA9IHVzZXJTaGlwRGF0YS5qb3VybmFsO1xyXG4gICAgaWYgKHVzZXJTaGlwSm91cm5hbC5sZXZlbFRhc2tzICYmICF1c2VyU2hpcEpvdXJuYWwubGV2ZWxUYXNrc1tnYW1lSW5mby5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWxdICYmIGdhbWVJbmZvLmdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbCkge1xyXG4gICAgICAgIHZhciBsZXZlbERhdGFEZXNjcmlwdGlvbiA9IGdhbWVJbmZvLmdhbWVEYXRhLmxldmVsRGF0YS5kZXNjcmlwdGlvbjtcclxuICAgICAgICB2YXIgY3VyZWVudExldmFsVGFza3MgPSB7XHJcbiAgICAgICAgICAgIGxldmVsTmFtZTogZ2FtZUluZm8uZ2FtZURhdGEubGV2ZWxEYXRhLmRlc2NyaXB0aW9uLm5hbWUsXHJcbiAgICAgICAgICAgIGxldmVsRGVzY3JpcHRpb246IChsZXZlbERhdGFEZXNjcmlwdGlvbi5sZXZlbE1haW5UYXNrKSA/IGxldmVsRGF0YURlc2NyaXB0aW9uLmxldmVsTWFpblRhc2sgOiBsZXZlbERhdGFEZXNjcmlwdGlvbi5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgbGV2ZWw6IGdhbWVJbmZvLmdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbCxcclxuICAgICAgICAgICAgdGFza0FjdGl2ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGxldmVsVGFza3M6IFtdXHJcbiAgICAgICAgfTtcclxuICAgICAgICB1c2VyU2hpcEpvdXJuYWwubGV2ZWxUYXNrc1tnYW1lSW5mby5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWxdID0gY3VyZWVudExldmFsVGFza3M7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5maWxsSm91cm5hbERlZmF1bHREYXRhID0gZmlsbEpvdXJuYWxEZWZhdWx0RGF0YTtcclxuZnVuY3Rpb24gZGlzcGxheUpvdXJuYWxEYXRhKF9hKSB7XHJcbiAgICB2YXIgdXNlclNoaXBKb3VybmFsID0gX2EudXNlclNoaXBKb3VybmFsLCBiYWNrcGFja0JvZHkgPSBfYS5iYWNrcGFja0JvZHksIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgZ2FtZUluZm8gPSBtYWluR2FtZU9iamVjdC5zaG93R2FtZUluZm8oKTtcclxuICAgIHZhciBqb3VybmFsTGV2ZWxFbGVtZW50ID0gJzxoMyBjbGFzcz1cInNpZGUtcGFuZWwtbmFtZVwiPkpvdXJuYWw8cD5QcmVzcyBKIHRvIGNsb3NlPC9wPjwvaDM+JztcclxuICAgIHZhciBqb3VybmFsRGF0YSA9IE9iamVjdC5hc3NpZ24oW10sIHVzZXJTaGlwSm91cm5hbC5sZXZlbFRhc2tzKS5yZXZlcnNlKCk7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGpvdXJuYWxEYXRhXzEgPSBqb3VybmFsRGF0YTsgX2kgPCBqb3VybmFsRGF0YV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciB0YXNrID0gam91cm5hbERhdGFfMVtfaV07XHJcbiAgICAgICAgaWYgKCF0YXNrKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBqb3VybmFsTGV2ZWxFbGVtZW50ICs9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJnYW1lLXJhbmtlZC1kYXRhXFxcIj5cXG4gICAgICAgICAgICA8aDQ+RW5lbXkgbG9nPC9oND5cXG4gICAgICAgICAgICA8cD5lbmVteSBzaGlwczogXCIgKyB1c2VyU2hpcEpvdXJuYWwuZGVmYXVsdERhdGEubnVtYmVyRmx5T2ZFbmVteSArIFwiPC9wPlxcbiAgICAgICAgICAgIDxwPmVuZW15IHVuaXRzOiBcIiArIHVzZXJTaGlwSm91cm5hbC5kZWZhdWx0RGF0YS5udW1iZXJPZkdyb3VuZEVuZW15ICsgXCI8L3A+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDx1bCBjbGFzcz1cXFwiam91cm5hbC1saXN0LWNvbnRhaW5lclxcXCI+XFxuICAgICAgICAgICAgPGg0IGNsYXNzPVxcXCJcIiArICgoZ2FtZUluZm8uZ2FtZURhdGEubGV2ZWxEYXRhLmxldmVsICE9IHRhc2subGV2ZWwpID8gJ2NvbXBsZXRlLXRhc2snIDogJycpICsgXCJcXFwiPkxldmVsIFwiICsgdGFzay5sZXZlbCArIFwiIFwiICsgdGFzay5sZXZlbE5hbWUgKyBcIjwvaDQ+XFxuICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJcIiArICgodGFzay50YXNrQWN0aXZlIHx8IGdhbWVJbmZvLmdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbCAhPSB0YXNrLmxldmVsKSA/ICdjb21wbGV0ZS10YXNrJyA6ICdhY3RpdmUtdGFzaycpICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICBcIiArICgodGFzay5sZXZlbE1haW5UYXNrKSA/IHRhc2subGV2ZWxNYWluVGFzayA6IHRhc2subGV2ZWxEZXNjcmlwdGlvbikgKyBcIlxcbiAgICAgICAgICAgIDwvbGk+XFxuICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJqb3VybmFsLWxldmVsLWlubmVyLWRhdGFcXFwiPlwiICsgam91cm5hbERldGFpbHModGFzay5sZXZlbFRhc2tzLCB0YXNrKSArIFwiPC91bD5cXG4gICAgICAgIDwvdWw+XCI7XHJcbiAgICB9XHJcbiAgICBiYWNrcGFja0JvZHkuaW5uZXJIVE1MID0gam91cm5hbExldmVsRWxlbWVudDtcclxuICAgIGZ1bmN0aW9uIGpvdXJuYWxEZXRhaWxzKGxldmVsVGFza3MsIHRhc2spIHtcclxuICAgICAgICB2YXIgaW5uZXJUYXNrcyA9ICcnO1xyXG4gICAgICAgIGlmICghbGV2ZWxUYXNrcylcclxuICAgICAgICAgICAgcmV0dXJuIGlubmVyVGFza3M7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBsZXZlbFRhc2tzXzEgPSBsZXZlbFRhc2tzOyBfaSA8IGxldmVsVGFza3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGRldGFpbFRhc2sgPSBsZXZlbFRhc2tzXzFbX2ldO1xyXG4gICAgICAgICAgICB2YXIgbG9jYWxUYXNrID0gKGRldGFpbFRhc2subnVtYmVyT2ZJdGVtcykgPyBkZXRhaWxUYXNrLmRpYWxvZ093bmVyICsgXCIgcmVxdWlyZTogXCIgKyBkZXRhaWxUYXNrLm51bWJlck9mSXRlbXMgKyBcIiBcIiArIGRldGFpbFRhc2sucmVxdWlyZU9iamVjdCA6XHJcbiAgICAgICAgICAgICAgICAoZGV0YWlsVGFzay5yZXF1aXJlT2JqZWN0KSA/IGRldGFpbFRhc2sucmVxdWlyZU9iamVjdCA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghbG9jYWxUYXNrKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIGlubmVyVGFza3MgKz0gXCI8bGkgY2xhc3M9XFxcIlwiICsgKChkZXRhaWxUYXNrLnRhc2tBY3RpdmUgfHwgZ2FtZUluZm8uZ2FtZURhdGEubGV2ZWxEYXRhLmxldmVsICE9IHRhc2subGV2ZWwpID8gJ2NvbXBsZXRlLXRhc2snIDogJ2FjdGl2ZS10YXNrJykgKyBcIlxcXCI+XFxuICAgICAgICAgICAgPHA+XCIgKyBsb2NhbFRhc2sgKyBcIjwvcD48L2xpPlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5uZXJUYXNrcztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB3cml0ZURhdGFUb0pvdXJuYWwoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBkaWFsb2dBcmVhID0gX2EuZGlhbG9nQXJlYSwgcmVxdWlyZURhdGEgPSBfYS5yZXF1aXJlRGF0YSwgbnBjRGV0YWlscyA9IF9hLm5wY0RldGFpbHMsIHJlcXVpcmVPYmplY3QgPSBfYS5yZXF1aXJlT2JqZWN0O1xyXG4gICAgdmFyIGdhbWVJbmZvID0gbWFpbkdhbWVPYmplY3Quc2hvd0dhbWVJbmZvKCk7XHJcbiAgICB2YXIgdXNlclNoaXBEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgIHZhciB1c2VyU2hpcEpvdXJuYWwgPSB1c2VyU2hpcERhdGEuam91cm5hbDtcclxuICAgIHZhciBucGNEaWFsb2cgPSBucGNEZXRhaWxzLmRpYWxvZztcclxuICAgIGlmICh1c2VyU2hpcEpvdXJuYWwubGV2ZWxUYXNrcyAmJiAhdXNlclNoaXBKb3VybmFsLmxldmVsVGFza3NbZ2FtZUluZm8uZ2FtZURhdGEubGV2ZWxEYXRhLmxldmVsXSkge1xyXG4gICAgICAgIGZpbGxKb3VybmFsRGVmYXVsdERhdGEoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAodXNlclNoaXBKb3VybmFsLmxldmVsVGFza3NbZ2FtZUluZm8uZ2FtZURhdGEubGV2ZWxEYXRhLmxldmVsXSkge1xyXG4gICAgICAgIHZhciBjaGVja1Rhc2sgPSB1c2VyU2hpcEpvdXJuYWwubGV2ZWxUYXNrc1tnYW1lSW5mby5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWxdLmxldmVsVGFza3MuZmluZChmdW5jdGlvbiAodGFzaykgeyByZXR1cm4gdGFzay5pZCA9PT0gcmVxdWlyZU9iamVjdDsgfSk7XHJcbiAgICAgICAgaWYgKGNoZWNrVGFzaylcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBqb3VybmFsRGV0YWlsID0gdm9pZCAwO1xyXG4gICAgICAgIGlmIChkaWFsb2dBcmVhICYmIG5wY0RpYWxvZy5kZWZhdWx0LmpvdXJuYWxUYXNrKSB7XHJcbiAgICAgICAgICAgIGlmIChkaWFsb2dBcmVhLmFjdGlvbiA9PT0gXCJnaXZlX29iamVjdFwiICYmIG5wY0RldGFpbHMucnVsZXMuY29udGFpbikge1xyXG4gICAgICAgICAgICAgICAgam91cm5hbERldGFpbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogcmVxdWlyZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlT2JqZWN0OiBucGNEaWFsb2cuZGVmYXVsdC5qb3VybmFsVGFzayxcclxuICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkl0ZW1zOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ093bmVyOiBucGNEaWFsb2cuZGVmYXVsdC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhc2tBY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBqb3VybmFsRGV0YWlsID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVpcmVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlT2JqZWN0OiByZXF1aXJlT2JqZWN0LnNwbGl0KCdfJykuam9pbignICcpLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZJdGVtczogcGFyc2VJbnQoZGlhbG9nQXJlYS5udW1iZXJPZlJlcXVpcmVJdGVtcyksXHJcbiAgICAgICAgICAgICAgICBkaWFsb2dPd25lcjogbnBjRGlhbG9nLmRlZmF1bHQubmFtZSxcclxuICAgICAgICAgICAgICAgIHRhc2tBY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVzZXJTaGlwSm91cm5hbC5sZXZlbFRhc2tzW2dhbWVJbmZvLmdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbF0ubGV2ZWxUYXNrcy5wdXNoKGpvdXJuYWxEZXRhaWwpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMud3JpdGVEYXRhVG9Kb3VybmFsID0gd3JpdGVEYXRhVG9Kb3VybmFsO1xyXG5mdW5jdGlvbiBjb21wbGV0ZUpvdXJuYWxUYXNrKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgYWxsUmVxdWlyZU9iamVjdHMgPSBfYS5hbGxSZXF1aXJlT2JqZWN0cztcclxuICAgIHZhciBnYW1lSW5mbyA9IG1haW5HYW1lT2JqZWN0LnNob3dHYW1lSW5mbygpO1xyXG4gICAgdmFyIGxldmUgPSBnYW1lSW5mby5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWw7XHJcbiAgICB2YXIgdXNlclNoaXBEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgIHZhciB1c2VyU2hpcEpvdXJuYWwgPSB1c2VyU2hpcERhdGEuam91cm5hbDtcclxuICAgIGlmICghYWxsUmVxdWlyZU9iamVjdHMpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGN1cnJlbnRUYXNrID0gdXNlclNoaXBKb3VybmFsLmxldmVsVGFza3NbbGV2ZV0ubGV2ZWxUYXNrcy5maW5kKGZ1bmN0aW9uICh0YXNrKSB7IHJldHVybiB0YXNrLmlkID09PSBhbGxSZXF1aXJlT2JqZWN0cy5pbm5lckRhdGE7IH0pO1xyXG4gICAgY3VycmVudFRhc2sudGFza0FjdGl2ZSA9IHRydWU7XHJcbn1cclxuZXhwb3J0cy5jb21wbGV0ZUpvdXJuYWxUYXNrID0gY29tcGxldGVKb3VybmFsVGFzaztcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGNvbnN0cnVjdG9ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vY29uc3RydWN0b3JzL1wiKSk7XHJcbnZhciBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5lbWllcy9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpO1xyXG52YXIgc2hvcEV2ZW50c01vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi91aS9zaG9wL3Nob3BFdmVudHMvc2hvcEV2ZW50c01vZHVsZXNcIik7XHJcbnZhciBnYW1lSW52ZW50b3J5TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL3VpL3Nob3AvZ2FtZUludmVudG9yeU1vZHVsZXNcIik7XHJcbnZhciBnYW1lU2hvcE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL3VpL3Nob3AvZ2FtZVNob3BNb2R1bGVcIik7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi4vYXBwTWVudS9hcHBNZW51XCIpO1xyXG52YXIgcGxheWVyVW5pdE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9keW5hbWljTGV2ZWxzL3BsYXllclVuaXRNb2R1bGVcIik7XHJcbnZhciBkeW5hbWljRGlhbG9nXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2R5bmFtaWNMZXZlbHMvZHluYW1pY0RpYWxvZ1wiKTtcclxudmFyIGR5bmFtaWNMZXZlbEludGVyYWN0aXZlRWxlbWVudHNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXCIpO1xyXG52YXIgbWluaW1hcF8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9keW5hbWljTGV2ZWxzL21pbmltYXBcIik7XHJcbnZhciBqb3VybmFsTW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9keW5hbWljTGV2ZWxzL2pvdXJuYWxNb2R1bGVzXCIpO1xyXG52YXIgcGxheWVyVW5pdE1vZHVsZV8yID0gcmVxdWlyZShcIi4vZHluYW1pY0xldmVscy9wbGF5ZXJVbml0TW9kdWxlXCIpO1xyXG52YXIgc291bmRNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL3NvdW5kTW9kdWxlc1wiKTtcclxuZnVuY3Rpb24gaW5pdFBsYXllclNoaXAoKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgaWYgKHRoaXMuY3R4KSB7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5wbGFjZVBsYXllclNoaXApIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBsYWNlUGxheWVyU2hpcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5pbWc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnBsYXllclNoaXBUZXh0dXJlQ2hhbmdlKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5pbml0UGxheWVyU2hpcCA9IGluaXRQbGF5ZXJTaGlwO1xyXG5mdW5jdGlvbiBwbGF5ZXJTaGlwVGV4dHVyZUNoYW5nZSgpIHtcclxuICAgIHRoaXMuaW1nLnNyYyA9IF9fZGlybmFtZSArIHRoaXMuZGF0YS50ZXh0dXJlO1xyXG59XHJcbmV4cG9ydHMucGxheWVyU2hpcFRleHR1cmVDaGFuZ2UgPSBwbGF5ZXJTaGlwVGV4dHVyZUNoYW5nZTtcclxuZnVuY3Rpb24gdXNlcktleUFjdGlvbihfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGNvbnRyb2xLZXlzID0gX2EuY29udHJvbEtleXMsIGV2ZW50ID0gX2EuZXZlbnQ7XHJcbiAgICB2YXIgdXNlclNoaXBEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfUExBWUVSX0FMTE9XX01PVkUgPT09ICdmYWxzZScpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKCFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSkge1xyXG4gICAgICAgIGlmIChjb250cm9sS2V5cy5pbnZlbnRvcnkuc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBldmVudC5rZXlDb2RlID09IG9iajsgfSkpXHJcbiAgICAgICAgICAgIG9wZW5JbnZlbnRvcnkoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgaWYgKG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMuZG93bi5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGV2ZW50LmtleUNvZGUgPT0gb2JqOyB9KSlcclxuICAgICAgICAgICAgdXNlclNoaXBEYXRhLm1vdmVTaGlwKHsgeFBvczogMCwgeVBvczogdXNlclNoaXBEYXRhLmRhdGEuc3BlZWQgfSk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xLZXlzLmxlZnQuc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBldmVudC5rZXlDb2RlID09IG9iajsgfSkpXHJcbiAgICAgICAgICAgIHVzZXJTaGlwRGF0YS5tb3ZlU2hpcCh7IHhQb3M6IHVzZXJTaGlwRGF0YS5kYXRhLnNwZWVkICogLTEsIHlQb3M6IDAgfSk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xLZXlzLnJpZ2h0LnNvbWUoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gZXZlbnQua2V5Q29kZSA9PSBvYmo7IH0pKVxyXG4gICAgICAgICAgICB1c2VyU2hpcERhdGEubW92ZVNoaXAoeyB4UG9zOiB1c2VyU2hpcERhdGEuZGF0YS5zcGVlZCwgeVBvczogMCB9KTtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMudXAuc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBldmVudC5rZXlDb2RlID09IG9iajsgfSkpXHJcbiAgICAgICAgICAgIHVzZXJTaGlwRGF0YS5tb3ZlU2hpcCh7IHhQb3M6IDAsIHlQb3M6IHVzZXJTaGlwRGF0YS5kYXRhLnNwZWVkICogLTEgfSk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xLZXlzLnJvY2tldC5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGV2ZW50LmtleUNvZGUgPT0gb2JqOyB9KSlcclxuICAgICAgICAgICAgYWN0aXZlSW52ZW50b3J5RWZmZWN0cyh7IHVzZXJTaGlwRGF0YTogdXNlclNoaXBEYXRhLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIG5hbWU6ICdyb2NrZXQnIH0pO1xyXG4gICAgICAgIGlmIChjb250cm9sS2V5cy5ob21pbmdSb2NrZXQuc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBldmVudC5rZXlDb2RlID09IG9iajsgfSkpXHJcbiAgICAgICAgICAgIGFjdGl2ZUludmVudG9yeUVmZmVjdHMoeyB1c2VyU2hpcERhdGE6IHVzZXJTaGlwRGF0YSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBuYW1lOiAnSG9taW5nIFJvY2tldCcgfSk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xLZXlzLmRlc3Ryb3lFbmVteS5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGV2ZW50LmtleUNvZGUgPT0gb2JqOyB9KSlcclxuICAgICAgICAgICAgYWN0aXZlSW52ZW50b3J5RWZmZWN0cyh7IHVzZXJTaGlwRGF0YTogdXNlclNoaXBEYXRhLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIG5hbWU6ICdOdWNsZWFyIEJsYXN0JyB9KTtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMuc2hpZWxkLnNvbWUoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gZXZlbnQua2V5Q29kZSA9PSBvYmo7IH0pKVxyXG4gICAgICAgICAgICBhY3RpdmVJbnZlbnRvcnlFZmZlY3RzKHsgdXNlclNoaXBEYXRhOiB1c2VyU2hpcERhdGEsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgbmFtZTogJ0RlZmVuY2UgU2hpZWxkJyB9KTtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMuam91cm5hbC5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGV2ZW50LmtleUNvZGUgPT0gb2JqOyB9KSlcclxuICAgICAgICAgICAgam91cm5hbE1vZHVsZXNfMS5vcGVuSm91cm5hbCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgdXNlclNoaXBEYXRhOiB1c2VyU2hpcERhdGEgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMuaW52ZW50b3J5LnNvbWUoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gZXZlbnQua2V5Q29kZSA9PSBvYmo7IH0pKVxyXG4gICAgICAgICAgICBwbGF5ZXJVbml0TW9kdWxlXzEuc2hvd0dyb3VuZFBsYXllckludmVudG9yeSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMudXNlS2V5LnNvbWUoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gZXZlbnQua2V5Q29kZSA9PSBvYmo7IH0pKVxyXG4gICAgICAgICAgICBkeW5hbWljRGlhbG9nXzEuaW50ZXJhY3RXaXRoT2JqZWN0cyh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMgfSk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xLZXlzLm1pbmlNYXAuc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBldmVudC5rZXlDb2RlID09IG9iajsgfSkpXHJcbiAgICAgICAgICAgIG1pbmltYXBfMS5jcmVhdGVNYXBSZW5kZXJGaWVsZCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICBpZiAoY29udHJvbEtleXMuam91cm5hbC5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGV2ZW50LmtleUNvZGUgPT0gb2JqOyB9KSlcclxuICAgICAgICAgICAgam91cm5hbE1vZHVsZXNfMS5vcGVuSm91cm5hbCh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgdXNlclNoaXBEYXRhOiB1c2VyU2hpcERhdGEgfSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc3luY0tleUNvbnRyb2woX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtYXBLZXlDb2RlLCBjb250cm9sS2V5cywgX2xvb3BfMSwgX2ksIF9iLCBfYywga2V5LCB2YWx1ZSwgc3RhdGVfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9kKSB7XHJcbiAgICAgICAgICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhIHx8ICFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgIG1hcEtleUNvZGUgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubWFwS2V5Q29kZTtcclxuICAgICAgICAgICAgY29udHJvbEtleXMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ2FtZVNldGluZ3Mua2V5Q29udHJvbHM7XHJcbiAgICAgICAgICAgIGlmICghbWFwS2V5Q29kZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFrZXkgfHwgIXZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJzY4JyAmJiBtYXBLZXlDb2RlWyc2NSddIHx8IGtleSA9PT0gJzY1JyAmJiBtYXBLZXlDb2RlWyc2OCddKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbEtleXMuZG93bi5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGtleSA9PSBvYmo7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVVuaXQoeyB4UG9zOiAwLCB5UG9zOiAwLjUsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyRGlyZWN0aW9uOiBcImRvd25cIiB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sS2V5cy5sZWZ0LnNvbWUoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4ga2V5ID09IG9iajsgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXZlbnRTaXRNb3ZlKHsga2V5OiBrZXksIG1hcEtleUNvZGU6IG1hcEtleUNvZGUgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVVuaXQoeyB4UG9zOiAyICogLTEsIHlQb3M6IDAsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyRGlyZWN0aW9uOiBcImxlZnRcIiB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sS2V5cy5yaWdodC5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGtleSA9PSBvYmo7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2ZW50U2l0TW92ZSh7IGtleToga2V5LCBtYXBLZXlDb2RlOiBtYXBLZXlDb2RlIH0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVVbml0KHsgeFBvczogMiwgeVBvczogMCwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBwbGF5ZXJEaXJlY3Rpb246IFwicmlnaHRcIiB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sS2V5cy51cC5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGtleSA9PSBvYmo7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVVuaXQoeyB4UG9zOiAwLCB5UG9zOiAtNjAsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgcGxheWVyRGlyZWN0aW9uOiBcInVwXCIgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYiA9IE9iamVjdC5lbnRyaWVzKG1hcEtleUNvZGUpOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgX2MgPSBfYltfaV0sIGtleSA9IF9jWzBdLCB2YWx1ZSA9IF9jWzFdO1xyXG4gICAgICAgICAgICAgICAgc3RhdGVfMSA9IF9sb29wXzEoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHN0YXRlXzEudmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc3luY0tleUNvbnRyb2wgPSBzeW5jS2V5Q29udHJvbDtcclxuZnVuY3Rpb24gcHJldmVudFNpdE1vdmUoX2EpIHtcclxuICAgIHZhciBrZXkgPSBfYS5rZXksIG1hcEtleUNvZGUgPSBfYS5tYXBLZXlDb2RlO1xyXG4gICAgaWYgKGtleSA9PT0gJzgzJyAmJiBtYXBLZXlDb2RlWyc2OCddIHx8IGtleSA9PT0gJzY4JyAmJiBtYXBLZXlDb2RlWyc4MyddIHx8XHJcbiAgICAgICAga2V5ID09PSAnODMnICYmIG1hcEtleUNvZGVbJzY1J10gfHwga2V5ID09PSAnNjUnICYmIG1hcEtleUNvZGVbJzgzJ10pXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gc2hpcENvbnRyb2wobWFpbkdhbWVPYmplY3QpIHtcclxuICAgIHZhciBjb250cm9sS2V5cyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5nYW1lU2V0aW5ncy5rZXlDb250cm9scztcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEtleUNvZGVbZXZlbnQua2V5Q29kZV0gPSBldmVudC50eXBlID09ICdrZXlkb3duJztcclxuICAgICAgICB1c2VyS2V5QWN0aW9uKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBjb250cm9sS2V5czogY29udHJvbEtleXMsIGV2ZW50OiBldmVudCB9KTtcclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGRlbGV0ZSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubWFwS2V5Q29kZVtldmVudC5rZXlDb2RlXTtcclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgdXNlclNoaXBEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSA9PT0gXCJDQU5WQVNcIlxyXG4gICAgICAgICAgICAmJiAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZVxyXG4gICAgICAgICAgICAmJiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykge1xyXG4gICAgICAgICAgICB2YXIgeCA9IGV2ZW50LmNsaWVudFggLSBldmVudC50YXJnZXQub2Zmc2V0TGVmdCwgeSA9IGV2ZW50LmNsaWVudFkgLSBldmVudC50YXJnZXQub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICB1c2VyU2hpcERhdGEueEZpbmFsID0gKCh4ICUgdXNlclNoaXBEYXRhLmRhdGEuc3BlZWQgPT0gMCkgPyB4IDogdXNlclNoaXBEYXRhLmRhdGEuc3BlZWQgKiBNYXRoLmZsb29yKHggLyB1c2VyU2hpcERhdGEuZGF0YS5zcGVlZCkpIC0gKHVzZXJTaGlwRGF0YS53aWR0aCAvIDIpO1xyXG4gICAgICAgICAgICB1c2VyU2hpcERhdGEueUZpbmFsID0gKCh5ICUgdXNlclNoaXBEYXRhLmRhdGEuc3BlZWQgPT0gMCkgPyB5IDogdXNlclNoaXBEYXRhLmRhdGEuc3BlZWQgKiBNYXRoLmZsb29yKHkgLyB1c2VyU2hpcERhdGEuZGF0YS5zcGVlZCkpIC0gKHVzZXJTaGlwRGF0YS5oZWlnaHQgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgdXNlclNoaXBEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgICAgICB2YXIgZGF0YSA9IG1haW5HYW1lT2JqZWN0LmdldExldmVsVXNlckRhdGEoKTtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgfHwgZGF0YS5jdXJyZW50TGV2ZWwgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSB8fCAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEuc2hvdC5jYWxsKHVzZXJTaGlwRGF0YSwgY29uc3RydWN0b3JzLkJ1bGxldENvbnN0cnVjdCwgbWFpbkdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycy5Tb3VuZENyZWF0b3IsIFwicGxheWVyXCIsIFwiYWxsR2FtZUJ1bGxldHNcIik7XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHZhciBncm91bmRQbGF5ZXJfMSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5ncm91bmRQbGF5ZXJDaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgIGdyb3VuZFBsYXllcl8xLnNob3RBbmdsZSA9IHBsYXllclVuaXRNb2R1bGVfMS5ncm91bmRQbGF5ZXJTaG90KHsgZ3JvdW5kUGxheWVyOiBncm91bmRQbGF5ZXJfMSwgZXZlbnQ6IGV2ZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpIHtcclxuICAgICAgICAgICAgdmFyIGdyb3VuZFBsYXllcl8yID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdyb3VuZFBsYXllckNoYXJhY3RlcjtcclxuICAgICAgICAgICAgZ3JvdW5kUGxheWVyXzIuc2hvdFN0YXRlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmIChtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgZ3JvdW5kUGxheWVyXzMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXJfMy5zaG90U3RhdGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNoaXBDb250cm9sID0gc2hpcENvbnRyb2w7XHJcbmZ1bmN0aW9uIGFjdGl2ZUludmVudG9yeUVmZmVjdHMoX2EpIHtcclxuICAgIHZhciB1c2VyU2hpcERhdGEgPSBfYS51c2VyU2hpcERhdGEsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIG5hbWUgPSBfYS5uYW1lO1xyXG4gICAgdmFyIGludmVudG9yeSA9IHVzZXJTaGlwRGF0YS5kYXRhLmludmVudG9yeTtcclxuICAgIHZhciBvYmplY3RQcmVzZW50ID0gc2hvcEV2ZW50c01vZHVsZXNfMS5maW5kSW50SW52ZW50b3J5KHsgaW52ZW50b3J5OiBpbnZlbnRvcnksIHNlYXJjaE9iamVjdDogeyBuYW1lOiBuYW1lIH0gfSk7XHJcbiAgICBpZiAoIW9iamVjdFByZXNlbnQpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgcGxheWVyR3Vuc09wZXJhdGUoeyB1c2VyU2hpcERhdGE6IHVzZXJTaGlwRGF0YSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCByb2NrZXRQcmVzZW50OiBvYmplY3RQcmVzZW50IH0pO1xyXG59XHJcbmZ1bmN0aW9uIHBsYXllckd1bnNPcGVyYXRlKF9hKSB7XHJcbiAgICB2YXIgdXNlclNoaXBEYXRhID0gX2EudXNlclNoaXBEYXRhLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCByb2NrZXRQcmVzZW50ID0gX2Eucm9ja2V0UHJlc2VudDtcclxuICAgIHVzZXJTaGlwRGF0YS5kYXRhLmludmVudG9yeVtyb2NrZXRQcmVzZW50LmluZGV4XS5ncmFwcGxlUG93ZXIubnVtYmVyIC09IDE7XHJcbiAgICBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEuYnVsbGV0c0NyZWF0ZU1vZHVsZS5jYWxsKHVzZXJTaGlwRGF0YSwge1xyXG4gICAgICAgIGl0ZW06IHVzZXJTaGlwRGF0YS5kYXRhLmludmVudG9yeVtyb2NrZXRQcmVzZW50LmluZGV4XS5ncmFwcGxlUG93ZXIudmFsdWUsXHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgIG93bmVyOiAncGxheWVyJyxcclxuICAgICAgICBCdWxsZXRDb25zdHJ1Y3Q6IGNvbnN0cnVjdG9ycy5CdWxsZXRDb25zdHJ1Y3QsXHJcbiAgICAgICAgU291bmRDcmVhdG9yOiBjb25zdHJ1Y3RvcnMuU291bmRDcmVhdG9yLFxyXG4gICAgICAgIGJ1bGxldEFycmF5OiBcImFsbEdhbWVCdWxsZXRzXCJcclxuICAgIH0pO1xyXG4gICAgaWYgKHVzZXJTaGlwRGF0YS5kYXRhLmludmVudG9yeVtyb2NrZXRQcmVzZW50LmluZGV4XS5ncmFwcGxlUG93ZXIubnVtYmVyIDw9IDApIHtcclxuICAgICAgICBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnJlcGxhY2VJdGVtRnJvbVN0b3JhZ2UoeyBpbmRleDogcm9ja2V0UHJlc2VudC5pbmRleCwgc3RvcmFnZTogdXNlclNoaXBEYXRhLmRhdGEuaW52ZW50b3J5LCB2YWx1ZTogbnVsbCB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBvcGVuSW52ZW50b3J5KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMgfHwgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVPdmVyIHx8XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVXaW4gfHxcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEubGV2ZWxDaGFuZ2UpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKCFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuaW52ZW50b3J5QWN0aXZlICYmICFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlKSB7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmludmVudG9yeUFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSA9IHRydWU7XHJcbiAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5lbnRlclRvVGhlU2hvcERpYWxvZyh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgdHJhZGVQcm9wZXJ0eWVzOiBudWxsIH0pO1xyXG4gICAgICAgIGFwcE1lbnVfMS5oaWRlKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BBcmVhKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5pbnZlbnRvcnlBY3RpdmUpIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuaW52ZW50b3J5QWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5sZWF2ZVNob3Aoe1xyXG4gICAgICAgICAgICBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSxcclxuICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICB0ZXh0OiAnUmV0dXJuIHRvIGdhbWU/J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFkZFZlaGljbGVTcGVlZChfYSkge1xyXG4gICAgdmFyIHZhbHVlID0gX2EudmFsdWUsIGZsYWcgPSBfYS5mbGFnO1xyXG4gICAgaWYgKGZsYWcpXHJcbiAgICAgICAgdGhpcy5kYXRhLm1pblNwZWVkICs9IHZhbHVlO1xyXG4gICAgaWYgKCFmbGFnICYmIHRoaXMuZGF0YS5taW5TcGVlZCA+IHRoaXMuZGVmYXVsdFNwZWVkKVxyXG4gICAgICAgIHRoaXMuZGF0YS5taW5TcGVlZCAtPSB2YWx1ZTtcclxufVxyXG5leHBvcnRzLmFkZFZlaGljbGVTcGVlZCA9IGFkZFZlaGljbGVTcGVlZDtcclxuZnVuY3Rpb24gc2V0Q29udGV4dChjb250ZXh0KSB7XHJcbiAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XHJcbn1cclxuZXhwb3J0cy5zZXRDb250ZXh0ID0gc2V0Q29udGV4dDtcclxuZnVuY3Rpb24gcGxhY2VTaGlwKCkge1xyXG4gICAgdmFyIHhBZGogPSAodGhpcy54RmluYWwgLSB0aGlzLngpIC8gdGhpcy5kYXRhLnNwZWVkO1xyXG4gICAgdmFyIHlBZGogPSAodGhpcy55RmluYWwgLSB0aGlzLnkpIC8gdGhpcy5kYXRhLnNwZWVkO1xyXG4gICAgeEFkaiA9IChNYXRoLnNpZ24oeEFkaikgPiAwKSA/IHhBZGogOiB4QWRqICogLTE7XHJcbiAgICB5QWRqID0gKE1hdGguc2lnbih5QWRqKSA+IDApID8geUFkaiA6IHlBZGogKiAtMTtcclxuICAgIHhBZGogPSAoeEFkaiA+IHRoaXMuZGF0YS5taW5TcGVlZCkgPyB0aGlzLmRhdGEubWluU3BlZWQgOiB4QWRqO1xyXG4gICAgeUFkaiA9ICh5QWRqID4gdGhpcy5kYXRhLm1pblNwZWVkKSA/IHRoaXMuZGF0YS5taW5TcGVlZCA6IHlBZGo7XHJcbiAgICB0aGlzLnhBZGogPSAodGhpcy54ID4gdGhpcy54RmluYWwpID8gMCA6IHhBZGo7XHJcbiAgICB0aGlzLnggPSAodGhpcy54ID4gdGhpcy54RmluYWwpID8gdGhpcy54IC0geEFkaiA6XHJcbiAgICAgICAgKHRoaXMueCA8IHRoaXMueEZpbmFsKSA/IHRoaXMueCArIHhBZGogOiB0aGlzLnhGaW5hbDtcclxuICAgIHRoaXMueSA9ICh0aGlzLnkgPiB0aGlzLnlGaW5hbCkgPyB0aGlzLnkgLSB5QWRqIDpcclxuICAgICAgICAodGhpcy55IDwgdGhpcy55RmluYWwpID8gdGhpcy55ICsgeUFkaiA6IHRoaXMueUZpbmFsO1xyXG59XHJcbmV4cG9ydHMucGxhY2VTaGlwID0gcGxhY2VTaGlwO1xyXG5mdW5jdGlvbiBtb3ZlU2hpcChfYSkge1xyXG4gICAgdmFyIF9iID0gX2EueFBvcywgeFBvcyA9IF9iID09PSB2b2lkIDAgPyAwIDogX2IsIF9jID0gX2EueVBvcywgeVBvcyA9IF9jID09PSB2b2lkIDAgPyAwIDogX2M7XHJcbiAgICB0aGlzLnggKz0geFBvcztcclxuICAgIHRoaXMueSArPSB5UG9zO1xyXG59XHJcbmV4cG9ydHMubW92ZVNoaXAgPSBtb3ZlU2hpcDtcclxuZnVuY3Rpb24gbW92ZVVuaXQoX2EpIHtcclxuICAgIHZhciBfYiA9IF9hLnhQb3MsIHhQb3MgPSBfYiA9PT0gdm9pZCAwID8gMCA6IF9iLCBfYyA9IF9hLnlQb3MsIHlQb3MgPSBfYyA9PT0gdm9pZCAwID8gMCA6IF9jLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBwbGF5ZXJEaXJlY3Rpb24gPSBfYS5wbGF5ZXJEaXJlY3Rpb247XHJcbiAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSB8fCAhbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMgfHwgcHJvY2Vzcy5lbnYuR1JPVU5EX1BMQVlFUl9BTExPV19NT1ZFID09PSAnZmFsc2UnKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgdmFyIGFsbEVuZW15ID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15O1xyXG4gICAgdmFyIGFsbEdyb3VuZEdhbWVCdWxsZXRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdyb3VuZEdhbWVCdWxsZXRzO1xyXG4gICAgdmFyIGFsbEdhbWVTaWRlT2JqZWN0cyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lU2lkZU9iamVjdHM7XHJcbiAgICB2YXIgZHluYW1pY0xldmVsTWFwQmxvY2tzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgIHZhciBhbGxHYW1lU2NlbmVPYmplY3RzID0gW10uY29uY2F0KGR5bmFtaWNMZXZlbE1hcEJsb2NrcywgYWxsR2FtZVNpZGVPYmplY3RzLCBhbGxHcm91bmRHYW1lQnVsbGV0cyk7XHJcbiAgICB2YXIgZXh0cmFTZWNvbmRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICB2YXIgbGFzdEFjdGlvblZlcnRpY2FsID0gZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsO1xyXG4gICAgc3dpdGNoIChwbGF5ZXJEaXJlY3Rpb24pIHtcclxuICAgICAgICBjYXNlIFwiZG93blwiOlxyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPSBwbGF5ZXJEaXJlY3Rpb247XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJsZWZ0XCI6XHJcbiAgICAgICAgICAgIGdyb3VuZFBsYXllci5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID0gcGxheWVyRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPSBcInN0YW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9IHBsYXllckRpcmVjdGlvbjtcclxuICAgICAgICAgICAgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID0gXCJzdGFuZFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwidXBcIjpcclxuICAgICAgICAgICAgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID0gcGxheWVyRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGdyb3VuZFBsYXllci54UG9zID0gKHhQb3MpID8geFBvcyA6IGdyb3VuZFBsYXllci54UG9zO1xyXG4gICAgaWYgKCFncm91bmRQbGF5ZXIub25MZWFkZXIgJiYgIWdyb3VuZFBsYXllci5sZWFkZXJDbGltYiAmJiBncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggJiYgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID09PSBcInVwXCIpIHtcclxuICAgICAgICBjaGFyYWN0ZXJTb3VuZCh7XHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgdGltaW5nOiBleHRyYVNlY29uZHMsXHJcbiAgICAgICAgICAgIHNvdW5kVXJsOiBncm91bmRQbGF5ZXIuc291bmQuanVtcCxcclxuICAgICAgICAgICAgc291bmRMb29wOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxHYW1lU2NlbmVPYmplY3RzXzEgPSBhbGxHYW1lU2NlbmVPYmplY3RzOyBfaSA8IGFsbEdhbWVTY2VuZU9iamVjdHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgYmxvY2sgPSBhbGxHYW1lU2NlbmVPYmplY3RzXzFbX2ldO1xyXG4gICAgICAgIGlmIChncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uSG9yaXpvbnRhbCA9PT0gXCJsZWZ0XCIgJiYgIWdyb3VuZFBsYXllci5sZWZ0V2FsbFRvdWNoIHx8XHJcbiAgICAgICAgICAgIGdyb3VuZFBsYXllci5wbGF5ZXJEaXJlY3Rpb25Ib3Jpem9udGFsID09PSBcInJpZ2h0XCIgJiYgIWdyb3VuZFBsYXllci5yaWdodFdhbGxUb3VjaCkge1xyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXIuaXNSdW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmhvcml6b250YWxTcGVlZCA9IHhQb3M7XHJcbiAgICAgICAgICAgIGJsb2NrLnggLT0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YS5ob3Jpem9udGFsU3BlZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZ3JvdW5kUGxheWVyLmNlaWxpbmdUb3VjaCAmJiB5UG9zICYmIGdyb3VuZFBsYXllci5ncm91bmRUb3VjaCAmJiBncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPT09IFwidXBcIiB8fFxyXG4gICAgICAgICAgICB5UG9zICYmIGdyb3VuZFBsYXllci5vbkVsZXZhdG9yKSB7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLnNpZ24obWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YS5qdW1wSW1wdWxzKSA+IDAgJiYgZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ3Jhdml0eSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGEuZ3Jhdml0eTtcclxuICAgICAgICAgICAgICAgIHZhciBncmF2aXR5SW5kZXggPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmdyYXZpdHlJbmRleDtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGEuanVtcEltcHVscyArPSAoZ3Jhdml0eSAvIGdyYXZpdHlJbmRleCkgKyAoKGxhc3RBY3Rpb25WZXJ0aWNhbCA9PT0gXCJkb3duXCIpID8gMSA6IDApOyAvLyAxLjQgIDIuNVxyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YS5qdW1wSW1wdWxzICo9IC0xO1xyXG4gICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGdyb3VuZFBsYXllci5vbkVsZXZhdG9yICYmIGdyb3VuZFBsYXllci5wbGF5ZXJEaXJlY3Rpb25WZXJ0aWNhbCA9PT0gXCJ1cFwiKSB7XHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmp1bXBJbXB1bHMgPSA2ICsgKChsYXN0QWN0aW9uVmVydGljYWwgPT09IFwiZG93blwiKSA/IDEgOiAwKTtcclxuICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGEuanVtcEltcHVscyAqPSAtMTtcclxuICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllci5ncm91bmRUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJsb2NrLnZlcnRpY2FsU3BlZWQgPSB5UG9zO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChncm91bmRQbGF5ZXIub25MZWFkZXIpIHtcclxuICAgICAgICBncm91bmRQbGF5ZXIubGVhZGVyQ2xpbWIgPSB0cnVlO1xyXG4gICAgICAgIGlmIChncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPT09IFwidXBcIikge1xyXG4gICAgICAgICAgICBncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID09PSBcImRvd25cIikge1xyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmp1bXBJbXB1bHMgPSA2O1xyXG4gICAgICAgICAgICB2YXIgZG93bkJsb2NrID0gZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xLmxlYWRlcnNGdW5jdGlvbmFsaXR5LmNhbGwoZ3JvdW5kUGxheWVyKTtcclxuICAgICAgICAgICAgZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoID0gKGRvd25CbG9jaykgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggJiYgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID09PSBcImRvd25cIiAmJiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmdyYXZpdHlJbmRleCA8IDEpIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmp1bXBJbXB1bHMgPSAzO1xyXG4gICAgfVxyXG4gICAgaWYgKCFncm91bmRQbGF5ZXIuZ3JvdW5kVG91Y2ggJiYgZ3JvdW5kUGxheWVyLnBsYXllckRpcmVjdGlvblZlcnRpY2FsID09PSBcInVwXCIgJiYgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YS5ncmF2aXR5SW5kZXggPCAwLjEpIHtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmp1bXBJbXB1bHMgPSAtMztcclxuICAgIH1cclxuICAgIGlmIChwbGF5ZXJEaXJlY3Rpb24gPT09IFwiZG93blwiICYmICFncm91bmRQbGF5ZXIub25MZWFkZXIpIHtcclxuICAgICAgICBncm91bmRQbGF5ZXIuaXNSdW4gPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIF9kID0gMCwgYWxsRW5lbXlfMSA9IGFsbEVuZW15OyBfZCA8IGFsbEVuZW15XzEubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgdmFyIGVuZW15ID0gYWxsRW5lbXlfMVtfZF07XHJcbiAgICAgICAgaWYgKGdyb3VuZFBsYXllci5yaWdodFdhbGxUb3VjaCB8fCBncm91bmRQbGF5ZXIubGVmdFdhbGxUb3VjaClcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgZW5lbXkueCAtPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxEYXRhLmhvcml6b250YWxTcGVlZDtcclxuICAgIH1cclxuICAgIG1haW5HYW1lT2JqZWN0Lm1hcE5lYXJBY3RpdmVFbGVtZW50ID0gbnVsbDtcclxuICAgIHBsYXllclVuaXRNb2R1bGVfMS5wbGF5ZXJBbmltYXRpb24oeyBncm91bmRQbGF5ZXI6IGdyb3VuZFBsYXllciwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgaWYgKGdyb3VuZFBsYXllci5vbkxlYWRlciAmJiBncm91bmRQbGF5ZXIubGVhZGVyQ2xpbWIpIHtcclxuICAgICAgICBjaGFyYWN0ZXJTb3VuZCh7XHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgdGltaW5nOiAyMCxcclxuICAgICAgICAgICAgc291bmRVcmw6IGdyb3VuZFBsYXllci5zb3VuZC5sZWFkZXJDbGltYixcclxuICAgICAgICAgICAgc291bmRMb29wOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHBsYXllckRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiBncm91bmRQbGF5ZXIuaXNSdW4gJiYgZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoIHx8XHJcbiAgICAgICAgcGxheWVyRGlyZWN0aW9uID09PSAnbGVmdCcgJiYgZ3JvdW5kUGxheWVyLmlzUnVuICYmIGdyb3VuZFBsYXllci5ncm91bmRUb3VjaCkge1xyXG4gICAgICAgIGNoYXJhY3RlclNvdW5kKHtcclxuICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICB0aW1pbmc6IDIwLFxyXG4gICAgICAgICAgICBzb3VuZFVybDogZ3JvdW5kUGxheWVyLnNvdW5kLnJ1bixcclxuICAgICAgICAgICAgc291bmRMb29wOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoYXJhY3RlclNvdW5kKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgdGltaW5nID0gX2EudGltaW5nLCBzb3VuZFVybCA9IF9hLnNvdW5kVXJsLCBzb3VuZExvb3AgPSBfYS5zb3VuZExvb3A7XHJcbiAgICB2YXIgZXh0cmFTZWNvbmRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICBpZiAoZXh0cmFTZWNvbmRzICUgdGltaW5nID09PSAwKSB7XHJcbiAgICAgICAgc291bmRNb2R1bGVzXzEuaW5pdFNvdW5kT2JqZWN0KHtcclxuICAgICAgICAgICAgU291bmRDcmVhdG9yOiBjb25zdHJ1Y3RvcnMuU291bmRDcmVhdG9yLFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgIHNvdW5kUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIHNvdW5kVXJsOiAoc291bmRVcmwpID8gc291bmRVcmwgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc291bmRMb29wOiBzb3VuZExvb3BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNoaXBJblNwYWNlKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgcGxheWVyU2hpcCA9IF9hLnBsYXllclNoaXAsIGNvbnN0cnVjdG9ycyA9IF9hLmNvbnN0cnVjdG9ycztcclxuICAgIHZhciBsZXZlbEluZm9ybWF0aW9uID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YTtcclxuICAgIHZhciBleHRyYVNlY29uZHMgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUV4dHJhU2Vjb25kcztcclxuICAgIGlmIChleHRyYVNlY29uZHMgJSAxMDAwID09PSAwKSB7XHJcbiAgICAgICAgaWYgKHBsYXllclNoaXAuZGF0YS5zdGF0dXMgPT09IFwic21hbGwgZmlnaHRlclwiICYmIGxldmVsSW5mb3JtYXRpb24uc3BhY2UpIHtcclxuICAgICAgICAgICAgcGxheWVyVW5pdE1vZHVsZV8yLmdyb3VuZFBsYXllck1pbnVzTGlmZSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuc2hpcEluU3BhY2UgPSBzaGlwSW5TcGFjZTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBtaW5pbWF0Y2hcbm1pbmltYXRjaC5NaW5pbWF0Y2ggPSBNaW5pbWF0Y2hcblxudmFyIHBhdGggPSB7IHNlcDogJy8nIH1cbnRyeSB7XG4gIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbn0gY2F0Y2ggKGVyKSB7fVxuXG52YXIgR0xPQlNUQVIgPSBtaW5pbWF0Y2guR0xPQlNUQVIgPSBNaW5pbWF0Y2guR0xPQlNUQVIgPSB7fVxudmFyIGV4cGFuZCA9IHJlcXVpcmUoJ2JyYWNlLWV4cGFuc2lvbicpXG5cbnZhciBwbFR5cGVzID0ge1xuICAnISc6IHsgb3BlbjogJyg/Oig/ISg/OicsIGNsb3NlOiAnKSlbXi9dKj8pJ30sXG4gICc/JzogeyBvcGVuOiAnKD86JywgY2xvc2U6ICcpPycgfSxcbiAgJysnOiB7IG9wZW46ICcoPzonLCBjbG9zZTogJykrJyB9LFxuICAnKic6IHsgb3BlbjogJyg/OicsIGNsb3NlOiAnKSonIH0sXG4gICdAJzogeyBvcGVuOiAnKD86JywgY2xvc2U6ICcpJyB9XG59XG5cbi8vIGFueSBzaW5nbGUgdGhpbmcgb3RoZXIgdGhhbiAvXG4vLyBkb24ndCBuZWVkIHRvIGVzY2FwZSAvIHdoZW4gdXNpbmcgbmV3IFJlZ0V4cCgpXG52YXIgcW1hcmsgPSAnW14vXSdcblxuLy8gKiA9PiBhbnkgbnVtYmVyIG9mIGNoYXJhY3RlcnNcbnZhciBzdGFyID0gcW1hcmsgKyAnKj8nXG5cbi8vICoqIHdoZW4gZG90cyBhcmUgYWxsb3dlZC4gIEFueXRoaW5nIGdvZXMsIGV4Y2VwdCAuLiBhbmQgLlxuLy8gbm90ICheIG9yIC8gZm9sbG93ZWQgYnkgb25lIG9yIHR3byBkb3RzIGZvbGxvd2VkIGJ5ICQgb3IgLyksXG4vLyBmb2xsb3dlZCBieSBhbnl0aGluZywgYW55IG51bWJlciBvZiB0aW1lcy5cbnZhciB0d29TdGFyRG90ID0gJyg/Oig/ISg/OlxcXFxcXC98XikoPzpcXFxcLnsxLDJ9KSgkfFxcXFxcXC8pKS4pKj8nXG5cbi8vIG5vdCBhIF4gb3IgLyBmb2xsb3dlZCBieSBhIGRvdCxcbi8vIGZvbGxvd2VkIGJ5IGFueXRoaW5nLCBhbnkgbnVtYmVyIG9mIHRpbWVzLlxudmFyIHR3b1N0YXJOb0RvdCA9ICcoPzooPyEoPzpcXFxcXFwvfF4pXFxcXC4pLikqPydcblxuLy8gY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZXNjYXBlZCBpbiBSZWdFeHAuXG52YXIgcmVTcGVjaWFscyA9IGNoYXJTZXQoJygpLip7fSs/W11eJFxcXFwhJylcblxuLy8gXCJhYmNcIiAtPiB7IGE6dHJ1ZSwgYjp0cnVlLCBjOnRydWUgfVxuZnVuY3Rpb24gY2hhclNldCAocykge1xuICByZXR1cm4gcy5zcGxpdCgnJykucmVkdWNlKGZ1bmN0aW9uIChzZXQsIGMpIHtcbiAgICBzZXRbY10gPSB0cnVlXG4gICAgcmV0dXJuIHNldFxuICB9LCB7fSlcbn1cblxuLy8gbm9ybWFsaXplcyBzbGFzaGVzLlxudmFyIHNsYXNoU3BsaXQgPSAvXFwvKy9cblxubWluaW1hdGNoLmZpbHRlciA9IGZpbHRlclxuZnVuY3Rpb24gZmlsdGVyIChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHJldHVybiBmdW5jdGlvbiAocCwgaSwgbGlzdCkge1xuICAgIHJldHVybiBtaW5pbWF0Y2gocCwgcGF0dGVybiwgb3B0aW9ucylcbiAgfVxufVxuXG5mdW5jdGlvbiBleHQgKGEsIGIpIHtcbiAgYSA9IGEgfHwge31cbiAgYiA9IGIgfHwge31cbiAgdmFyIHQgPSB7fVxuICBPYmplY3Qua2V5cyhiKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgdFtrXSA9IGJba11cbiAgfSlcbiAgT2JqZWN0LmtleXMoYSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIHRba10gPSBhW2tdXG4gIH0pXG4gIHJldHVybiB0XG59XG5cbm1pbmltYXRjaC5kZWZhdWx0cyA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYgfHwgIU9iamVjdC5rZXlzKGRlZikubGVuZ3RoKSByZXR1cm4gbWluaW1hdGNoXG5cbiAgdmFyIG9yaWcgPSBtaW5pbWF0Y2hcblxuICB2YXIgbSA9IGZ1bmN0aW9uIG1pbmltYXRjaCAocCwgcGF0dGVybiwgb3B0aW9ucykge1xuICAgIHJldHVybiBvcmlnLm1pbmltYXRjaChwLCBwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSlcbiAgfVxuXG4gIG0uTWluaW1hdGNoID0gZnVuY3Rpb24gTWluaW1hdGNoIChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBvcmlnLk1pbmltYXRjaChwYXR0ZXJuLCBleHQoZGVmLCBvcHRpb25zKSlcbiAgfVxuXG4gIHJldHVybiBtXG59XG5cbk1pbmltYXRjaC5kZWZhdWx0cyA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYgfHwgIU9iamVjdC5rZXlzKGRlZikubGVuZ3RoKSByZXR1cm4gTWluaW1hdGNoXG4gIHJldHVybiBtaW5pbWF0Y2guZGVmYXVsdHMoZGVmKS5NaW5pbWF0Y2hcbn1cblxuZnVuY3Rpb24gbWluaW1hdGNoIChwLCBwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnbG9iIHBhdHRlcm4gc3RyaW5nIHJlcXVpcmVkJylcbiAgfVxuXG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG5cbiAgLy8gc2hvcnRjdXQ6IGNvbW1lbnRzIG1hdGNoIG5vdGhpbmcuXG4gIGlmICghb3B0aW9ucy5ub2NvbW1lbnQgJiYgcGF0dGVybi5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gXCJcIiBvbmx5IG1hdGNoZXMgXCJcIlxuICBpZiAocGF0dGVybi50cmltKCkgPT09ICcnKSByZXR1cm4gcCA9PT0gJydcblxuICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKS5tYXRjaChwKVxufVxuXG5mdW5jdGlvbiBNaW5pbWF0Y2ggKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1pbmltYXRjaCkpIHtcbiAgICByZXR1cm4gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dsb2IgcGF0dGVybiBzdHJpbmcgcmVxdWlyZWQnKVxuICB9XG5cbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cbiAgcGF0dGVybiA9IHBhdHRlcm4udHJpbSgpXG5cbiAgLy8gd2luZG93cyBzdXBwb3J0OiBuZWVkIHRvIHVzZSAvLCBub3QgXFxcbiAgaWYgKHBhdGguc2VwICE9PSAnLycpIHtcbiAgICBwYXR0ZXJuID0gcGF0dGVybi5zcGxpdChwYXRoLnNlcCkuam9pbignLycpXG4gIH1cblxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gIHRoaXMuc2V0ID0gW11cbiAgdGhpcy5wYXR0ZXJuID0gcGF0dGVyblxuICB0aGlzLnJlZ2V4cCA9IG51bGxcbiAgdGhpcy5uZWdhdGUgPSBmYWxzZVxuICB0aGlzLmNvbW1lbnQgPSBmYWxzZVxuICB0aGlzLmVtcHR5ID0gZmFsc2VcblxuICAvLyBtYWtlIHRoZSBzZXQgb2YgcmVnZXhwcyBldGMuXG4gIHRoaXMubWFrZSgpXG59XG5cbk1pbmltYXRjaC5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAoKSB7fVxuXG5NaW5pbWF0Y2gucHJvdG90eXBlLm1ha2UgPSBtYWtlXG5mdW5jdGlvbiBtYWtlICgpIHtcbiAgLy8gZG9uJ3QgZG8gaXQgbW9yZSB0aGFuIG9uY2UuXG4gIGlmICh0aGlzLl9tYWRlKSByZXR1cm5cblxuICB2YXIgcGF0dGVybiA9IHRoaXMucGF0dGVyblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuXG4gIC8vIGVtcHR5IHBhdHRlcm5zIGFuZCBjb21tZW50cyBtYXRjaCBub3RoaW5nLlxuICBpZiAoIW9wdGlvbnMubm9jb21tZW50ICYmIHBhdHRlcm4uY2hhckF0KDApID09PSAnIycpIHtcbiAgICB0aGlzLmNvbW1lbnQgPSB0cnVlXG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFwYXR0ZXJuKSB7XG4gICAgdGhpcy5lbXB0eSA9IHRydWVcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIHN0ZXAgMTogZmlndXJlIG91dCBuZWdhdGlvbiwgZXRjLlxuICB0aGlzLnBhcnNlTmVnYXRlKClcblxuICAvLyBzdGVwIDI6IGV4cGFuZCBicmFjZXNcbiAgdmFyIHNldCA9IHRoaXMuZ2xvYlNldCA9IHRoaXMuYnJhY2VFeHBhbmQoKVxuXG4gIGlmIChvcHRpb25zLmRlYnVnKSB0aGlzLmRlYnVnID0gY29uc29sZS5lcnJvclxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgLy8gc3RlcCAzOiBub3cgd2UgaGF2ZSBhIHNldCwgc28gdHVybiBlYWNoIG9uZSBpbnRvIGEgc2VyaWVzIG9mIHBhdGgtcG9ydGlvblxuICAvLyBtYXRjaGluZyBwYXR0ZXJucy5cbiAgLy8gVGhlc2Ugd2lsbCBiZSByZWdleHBzLCBleGNlcHQgaW4gdGhlIGNhc2Ugb2YgXCIqKlwiLCB3aGljaCBpc1xuICAvLyBzZXQgdG8gdGhlIEdMT0JTVEFSIG9iamVjdCBmb3IgZ2xvYnN0YXIgYmVoYXZpb3IsXG4gIC8vIGFuZCB3aWxsIG5vdCBjb250YWluIGFueSAvIGNoYXJhY3RlcnNcbiAgc2V0ID0gdGhpcy5nbG9iUGFydHMgPSBzZXQubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMuc3BsaXQoc2xhc2hTcGxpdClcbiAgfSlcblxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgc2V0KVxuXG4gIC8vIGdsb2IgLS0+IHJlZ2V4cHNcbiAgc2V0ID0gc2V0Lm1hcChmdW5jdGlvbiAocywgc2ksIHNldCkge1xuICAgIHJldHVybiBzLm1hcCh0aGlzLnBhcnNlLCB0aGlzKVxuICB9LCB0aGlzKVxuXG4gIHRoaXMuZGVidWcodGhpcy5wYXR0ZXJuLCBzZXQpXG5cbiAgLy8gZmlsdGVyIG91dCBldmVyeXRoaW5nIHRoYXQgZGlkbid0IGNvbXBpbGUgcHJvcGVybHkuXG4gIHNldCA9IHNldC5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcy5pbmRleE9mKGZhbHNlKSA9PT0gLTFcbiAgfSlcblxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgc2V0KVxuXG4gIHRoaXMuc2V0ID0gc2V0XG59XG5cbk1pbmltYXRjaC5wcm90b3R5cGUucGFyc2VOZWdhdGUgPSBwYXJzZU5lZ2F0ZVxuZnVuY3Rpb24gcGFyc2VOZWdhdGUgKCkge1xuICB2YXIgcGF0dGVybiA9IHRoaXMucGF0dGVyblxuICB2YXIgbmVnYXRlID0gZmFsc2VcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcbiAgdmFyIG5lZ2F0ZU9mZnNldCA9IDBcblxuICBpZiAob3B0aW9ucy5ub25lZ2F0ZSkgcmV0dXJuXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXR0ZXJuLmxlbmd0aFxuICAgIDsgaSA8IGwgJiYgcGF0dGVybi5jaGFyQXQoaSkgPT09ICchJ1xuICAgIDsgaSsrKSB7XG4gICAgbmVnYXRlID0gIW5lZ2F0ZVxuICAgIG5lZ2F0ZU9mZnNldCsrXG4gIH1cblxuICBpZiAobmVnYXRlT2Zmc2V0KSB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuLnN1YnN0cihuZWdhdGVPZmZzZXQpXG4gIHRoaXMubmVnYXRlID0gbmVnYXRlXG59XG5cbi8vIEJyYWNlIGV4cGFuc2lvbjpcbi8vIGF7YixjfWQgLT4gYWJkIGFjZFxuLy8gYXtiLH1jIC0+IGFiYyBhY1xuLy8gYXswLi4zfWQgLT4gYTBkIGExZCBhMmQgYTNkXG4vLyBhe2IsY3tkLGV9Zn1nIC0+IGFiZyBhY2RmZyBhY2VmZ1xuLy8gYXtiLGN9ZHtlLGZ9ZyAtPiBhYmRlZyBhY2RlZyBhYmRlZyBhYmRmZ1xuLy9cbi8vIEludmFsaWQgc2V0cyBhcmUgbm90IGV4cGFuZGVkLlxuLy8gYXsyLi59YiAtPiBhezIuLn1iXG4vLyBhe2J9YyAtPiBhe2J9Y1xubWluaW1hdGNoLmJyYWNlRXhwYW5kID0gZnVuY3Rpb24gKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJyYWNlRXhwYW5kKHBhdHRlcm4sIG9wdGlvbnMpXG59XG5cbk1pbmltYXRjaC5wcm90b3R5cGUuYnJhY2VFeHBhbmQgPSBicmFjZUV4cGFuZFxuXG5mdW5jdGlvbiBicmFjZUV4cGFuZCAocGF0dGVybiwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIE1pbmltYXRjaCkge1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG4gIH1cblxuICBwYXR0ZXJuID0gdHlwZW9mIHBhdHRlcm4gPT09ICd1bmRlZmluZWQnXG4gICAgPyB0aGlzLnBhdHRlcm4gOiBwYXR0ZXJuXG5cbiAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuZGVmaW5lZCBwYXR0ZXJuJylcbiAgfVxuXG4gIGlmIChvcHRpb25zLm5vYnJhY2UgfHxcbiAgICAhcGF0dGVybi5tYXRjaCgvXFx7LipcXH0vKSkge1xuICAgIC8vIHNob3J0Y3V0LiBubyBuZWVkIHRvIGV4cGFuZC5cbiAgICByZXR1cm4gW3BhdHRlcm5dXG4gIH1cblxuICByZXR1cm4gZXhwYW5kKHBhdHRlcm4pXG59XG5cbi8vIHBhcnNlIGEgY29tcG9uZW50IG9mIHRoZSBleHBhbmRlZCBzZXQuXG4vLyBBdCB0aGlzIHBvaW50LCBubyBwYXR0ZXJuIG1heSBjb250YWluIFwiL1wiIGluIGl0XG4vLyBzbyB3ZSdyZSBnb2luZyB0byByZXR1cm4gYSAyZCBhcnJheSwgd2hlcmUgZWFjaCBlbnRyeSBpcyB0aGUgZnVsbFxuLy8gcGF0dGVybiwgc3BsaXQgb24gJy8nLCBhbmQgdGhlbiB0dXJuZWQgaW50byBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbi8vIEEgcmVnZXhwIGlzIG1hZGUgYXQgdGhlIGVuZCB3aGljaCBqb2lucyBlYWNoIGFycmF5IHdpdGggYW5cbi8vIGVzY2FwZWQgLywgYW5kIGFub3RoZXIgZnVsbCBvbmUgd2hpY2ggam9pbnMgZWFjaCByZWdleHAgd2l0aCB8LlxuLy9cbi8vIEZvbGxvd2luZyB0aGUgbGVhZCBvZiBCYXNoIDQuMSwgbm90ZSB0aGF0IFwiKipcIiBvbmx5IGhhcyBzcGVjaWFsIG1lYW5pbmdcbi8vIHdoZW4gaXQgaXMgdGhlICpvbmx5KiB0aGluZyBpbiBhIHBhdGggcG9ydGlvbi4gIE90aGVyd2lzZSwgYW55IHNlcmllc1xuLy8gb2YgKiBpcyBlcXVpdmFsZW50IHRvIGEgc2luZ2xlICouICBHbG9ic3RhciBiZWhhdmlvciBpcyBlbmFibGVkIGJ5XG4vLyBkZWZhdWx0LCBhbmQgY2FuIGJlIGRpc2FibGVkIGJ5IHNldHRpbmcgb3B0aW9ucy5ub2dsb2JzdGFyLlxuTWluaW1hdGNoLnByb3RvdHlwZS5wYXJzZSA9IHBhcnNlXG52YXIgU1VCUEFSU0UgPSB7fVxuZnVuY3Rpb24gcGFyc2UgKHBhdHRlcm4sIGlzU3ViKSB7XG4gIGlmIChwYXR0ZXJuLmxlbmd0aCA+IDEwMjQgKiA2NCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdHRlcm4gaXMgdG9vIGxvbmcnKVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNcblxuICAvLyBzaG9ydGN1dHNcbiAgaWYgKCFvcHRpb25zLm5vZ2xvYnN0YXIgJiYgcGF0dGVybiA9PT0gJyoqJykgcmV0dXJuIEdMT0JTVEFSXG4gIGlmIChwYXR0ZXJuID09PSAnJykgcmV0dXJuICcnXG5cbiAgdmFyIHJlID0gJydcbiAgdmFyIGhhc01hZ2ljID0gISFvcHRpb25zLm5vY2FzZVxuICB2YXIgZXNjYXBpbmcgPSBmYWxzZVxuICAvLyA/ID0+IG9uZSBzaW5nbGUgY2hhcmFjdGVyXG4gIHZhciBwYXR0ZXJuTGlzdFN0YWNrID0gW11cbiAgdmFyIG5lZ2F0aXZlTGlzdHMgPSBbXVxuICB2YXIgc3RhdGVDaGFyXG4gIHZhciBpbkNsYXNzID0gZmFsc2VcbiAgdmFyIHJlQ2xhc3NTdGFydCA9IC0xXG4gIHZhciBjbGFzc1N0YXJ0ID0gLTFcbiAgLy8gLiBhbmQgLi4gbmV2ZXIgbWF0Y2ggYW55dGhpbmcgdGhhdCBkb2Vzbid0IHN0YXJ0IHdpdGggLixcbiAgLy8gZXZlbiB3aGVuIG9wdGlvbnMuZG90IGlzIHNldC5cbiAgdmFyIHBhdHRlcm5TdGFydCA9IHBhdHRlcm4uY2hhckF0KDApID09PSAnLicgPyAnJyAvLyBhbnl0aGluZ1xuICAvLyBub3QgKHN0YXJ0IG9yIC8gZm9sbG93ZWQgYnkgLiBvciAuLiBmb2xsb3dlZCBieSAvIG9yIGVuZClcbiAgOiBvcHRpb25zLmRvdCA/ICcoPyEoPzpefFxcXFxcXC8pXFxcXC57MSwyfSg/OiR8XFxcXFxcLykpJ1xuICA6ICcoPyFcXFxcLiknXG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGZ1bmN0aW9uIGNsZWFyU3RhdGVDaGFyICgpIHtcbiAgICBpZiAoc3RhdGVDaGFyKSB7XG4gICAgICAvLyB3ZSBoYWQgc29tZSBzdGF0ZS10cmFja2luZyBjaGFyYWN0ZXJcbiAgICAgIC8vIHRoYXQgd2Fzbid0IGNvbnN1bWVkIGJ5IHRoaXMgcGFzcy5cbiAgICAgIHN3aXRjaCAoc3RhdGVDaGFyKSB7XG4gICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgIHJlICs9IHN0YXJcbiAgICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnPyc6XG4gICAgICAgICAgcmUgKz0gcW1hcmtcbiAgICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZSArPSAnXFxcXCcgKyBzdGF0ZUNoYXJcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHNlbGYuZGVidWcoJ2NsZWFyU3RhdGVDaGFyICVqICVqJywgc3RhdGVDaGFyLCByZSlcbiAgICAgIHN0YXRlQ2hhciA9IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhdHRlcm4ubGVuZ3RoLCBjXG4gICAgOyAoaSA8IGxlbikgJiYgKGMgPSBwYXR0ZXJuLmNoYXJBdChpKSlcbiAgICA7IGkrKykge1xuICAgIHRoaXMuZGVidWcoJyVzXFx0JXMgJXMgJWonLCBwYXR0ZXJuLCBpLCByZSwgYylcblxuICAgIC8vIHNraXAgb3ZlciBhbnkgdGhhdCBhcmUgZXNjYXBlZC5cbiAgICBpZiAoZXNjYXBpbmcgJiYgcmVTcGVjaWFsc1tjXSkge1xuICAgICAgcmUgKz0gJ1xcXFwnICsgY1xuICAgICAgZXNjYXBpbmcgPSBmYWxzZVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGMpIHtcbiAgICAgIGNhc2UgJy8nOlxuICAgICAgICAvLyBjb21wbGV0ZWx5IG5vdCBhbGxvd2VkLCBldmVuIGVzY2FwZWQuXG4gICAgICAgIC8vIFNob3VsZCBhbHJlYWR5IGJlIHBhdGgtc3BsaXQgYnkgbm93LlxuICAgICAgICByZXR1cm4gZmFsc2VcblxuICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgIGNsZWFyU3RhdGVDaGFyKClcbiAgICAgICAgZXNjYXBpbmcgPSB0cnVlXG4gICAgICBjb250aW51ZVxuXG4gICAgICAvLyB0aGUgdmFyaW91cyBzdGF0ZUNoYXIgdmFsdWVzXG4gICAgICAvLyBmb3IgdGhlIFwiZXh0Z2xvYlwiIHN0dWZmLlxuICAgICAgY2FzZSAnPyc6XG4gICAgICBjYXNlICcqJzpcbiAgICAgIGNhc2UgJysnOlxuICAgICAgY2FzZSAnQCc6XG4gICAgICBjYXNlICchJzpcbiAgICAgICAgdGhpcy5kZWJ1ZygnJXNcXHQlcyAlcyAlaiA8LS0gc3RhdGVDaGFyJywgcGF0dGVybiwgaSwgcmUsIGMpXG5cbiAgICAgICAgLy8gYWxsIG9mIHRob3NlIGFyZSBsaXRlcmFscyBpbnNpZGUgYSBjbGFzcywgZXhjZXB0IHRoYXRcbiAgICAgICAgLy8gdGhlIGdsb2IgWyFhXSBtZWFucyBbXmFdIGluIHJlZ2V4cFxuICAgICAgICBpZiAoaW5DbGFzcykge1xuICAgICAgICAgIHRoaXMuZGVidWcoJyAgaW4gY2xhc3MnKVxuICAgICAgICAgIGlmIChjID09PSAnIScgJiYgaSA9PT0gY2xhc3NTdGFydCArIDEpIGMgPSAnXidcbiAgICAgICAgICByZSArPSBjXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHN0YXRlQ2hhciwgdGhlbiBpdCBtZWFuc1xuICAgICAgICAvLyB0aGF0IHRoZXJlIHdhcyBzb21ldGhpbmcgbGlrZSAqKiBvciArPyBpbiB0aGVyZS5cbiAgICAgICAgLy8gSGFuZGxlIHRoZSBzdGF0ZUNoYXIsIHRoZW4gcHJvY2VlZCB3aXRoIHRoaXMgb25lLlxuICAgICAgICBzZWxmLmRlYnVnKCdjYWxsIGNsZWFyU3RhdGVDaGFyICVqJywgc3RhdGVDaGFyKVxuICAgICAgICBjbGVhclN0YXRlQ2hhcigpXG4gICAgICAgIHN0YXRlQ2hhciA9IGNcbiAgICAgICAgLy8gaWYgZXh0Z2xvYiBpcyBkaXNhYmxlZCwgdGhlbiArKGFzZGZ8Zm9vKSBpc24ndCBhIHRoaW5nLlxuICAgICAgICAvLyBqdXN0IGNsZWFyIHRoZSBzdGF0ZWNoYXIgKm5vdyosIHJhdGhlciB0aGFuIGV2ZW4gZGl2aW5nIGludG9cbiAgICAgICAgLy8gdGhlIHBhdHRlcm5MaXN0IHN0dWZmLlxuICAgICAgICBpZiAob3B0aW9ucy5ub2V4dCkgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgY29udGludWVcblxuICAgICAgY2FzZSAnKCc6XG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgcmUgKz0gJygnXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3RhdGVDaGFyKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwoJ1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBwYXR0ZXJuTGlzdFN0YWNrLnB1c2goe1xuICAgICAgICAgIHR5cGU6IHN0YXRlQ2hhcixcbiAgICAgICAgICBzdGFydDogaSAtIDEsXG4gICAgICAgICAgcmVTdGFydDogcmUubGVuZ3RoLFxuICAgICAgICAgIG9wZW46IHBsVHlwZXNbc3RhdGVDaGFyXS5vcGVuLFxuICAgICAgICAgIGNsb3NlOiBwbFR5cGVzW3N0YXRlQ2hhcl0uY2xvc2VcbiAgICAgICAgfSlcbiAgICAgICAgLy8gbmVnYXRpb24gaXMgKD86KD8hanMpW14vXSopXG4gICAgICAgIHJlICs9IHN0YXRlQ2hhciA9PT0gJyEnID8gJyg/Oig/ISg/OicgOiAnKD86J1xuICAgICAgICB0aGlzLmRlYnVnKCdwbFR5cGUgJWogJWonLCBzdGF0ZUNoYXIsIHJlKVxuICAgICAgICBzdGF0ZUNoYXIgPSBmYWxzZVxuICAgICAgY29udGludWVcblxuICAgICAgY2FzZSAnKSc6XG4gICAgICAgIGlmIChpbkNsYXNzIHx8ICFwYXR0ZXJuTGlzdFN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIHJlICs9ICdcXFxcKSdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgdmFyIHBsID0gcGF0dGVybkxpc3RTdGFjay5wb3AoKVxuICAgICAgICAvLyBuZWdhdGlvbiBpcyAoPzooPyFqcylbXi9dKilcbiAgICAgICAgLy8gVGhlIG90aGVycyBhcmUgKD86PHBhdHRlcm4+KTx0eXBlPlxuICAgICAgICByZSArPSBwbC5jbG9zZVxuICAgICAgICBpZiAocGwudHlwZSA9PT0gJyEnKSB7XG4gICAgICAgICAgbmVnYXRpdmVMaXN0cy5wdXNoKHBsKVxuICAgICAgICB9XG4gICAgICAgIHBsLnJlRW5kID0gcmUubGVuZ3RoXG4gICAgICBjb250aW51ZVxuXG4gICAgICBjYXNlICd8JzpcbiAgICAgICAgaWYgKGluQ2xhc3MgfHwgIXBhdHRlcm5MaXN0U3RhY2subGVuZ3RoIHx8IGVzY2FwaW5nKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFx8J1xuICAgICAgICAgIGVzY2FwaW5nID0gZmFsc2VcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuICAgICAgICByZSArPSAnfCdcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIC8vIHRoZXNlIGFyZSBtb3N0bHkgdGhlIHNhbWUgaW4gcmVnZXhwIGFuZCBnbG9iXG4gICAgICBjYXNlICdbJzpcbiAgICAgICAgLy8gc3dhbGxvdyBhbnkgc3RhdGUtdHJhY2tpbmcgY2hhciBiZWZvcmUgdGhlIFtcbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuXG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwnICsgY1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpbkNsYXNzID0gdHJ1ZVxuICAgICAgICBjbGFzc1N0YXJ0ID0gaVxuICAgICAgICByZUNsYXNzU3RhcnQgPSByZS5sZW5ndGhcbiAgICAgICAgcmUgKz0gY1xuICAgICAgY29udGludWVcblxuICAgICAgY2FzZSAnXSc6XG4gICAgICAgIC8vICBhIHJpZ2h0IGJyYWNrZXQgc2hhbGwgbG9zZSBpdHMgc3BlY2lhbFxuICAgICAgICAvLyAgbWVhbmluZyBhbmQgcmVwcmVzZW50IGl0c2VsZiBpblxuICAgICAgICAvLyAgYSBicmFja2V0IGV4cHJlc3Npb24gaWYgaXQgb2NjdXJzXG4gICAgICAgIC8vICBmaXJzdCBpbiB0aGUgbGlzdC4gIC0tIFBPU0lYLjIgMi44LjMuMlxuICAgICAgICBpZiAoaSA9PT0gY2xhc3NTdGFydCArIDEgfHwgIWluQ2xhc3MpIHtcbiAgICAgICAgICByZSArPSAnXFxcXCcgKyBjXG4gICAgICAgICAgZXNjYXBpbmcgPSBmYWxzZVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgbGVmdCBhIGNsYXNzIG9wZW4uXG4gICAgICAgIC8vIFwiW3otYV1cIiBpcyB2YWxpZCwgZXF1aXZhbGVudCB0byBcIlxcW3otYVxcXVwiXG4gICAgICAgIGlmIChpbkNsYXNzKSB7XG4gICAgICAgICAgLy8gc3BsaXQgd2hlcmUgdGhlIGxhc3QgWyB3YXMsIG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAgLy8gYW4gaW52YWxpZCByZS4gaWYgc28sIHJlLXdhbGsgdGhlIGNvbnRlbnRzIG9mIHRoZVxuICAgICAgICAgIC8vIHdvdWxkLWJlIGNsYXNzIHRvIHJlLXRyYW5zbGF0ZSBhbnkgY2hhcmFjdGVycyB0aGF0XG4gICAgICAgICAgLy8gd2VyZSBwYXNzZWQgdGhyb3VnaCBhcy1pc1xuICAgICAgICAgIC8vIFRPRE86IEl0IHdvdWxkIHByb2JhYmx5IGJlIGZhc3RlciB0byBkZXRlcm1pbmUgdGhpc1xuICAgICAgICAgIC8vIHdpdGhvdXQgYSB0cnkvY2F0Y2ggYW5kIGEgbmV3IFJlZ0V4cCwgYnV0IGl0J3MgdHJpY2t5XG4gICAgICAgICAgLy8gdG8gZG8gc2FmZWx5LiAgRm9yIG5vdywgdGhpcyBpcyBzYWZlIGFuZCB3b3Jrcy5cbiAgICAgICAgICB2YXIgY3MgPSBwYXR0ZXJuLnN1YnN0cmluZyhjbGFzc1N0YXJ0ICsgMSwgaSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVnRXhwKCdbJyArIGNzICsgJ10nKVxuICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgICAvLyBub3QgYSB2YWxpZCBjbGFzcyFcbiAgICAgICAgICAgIHZhciBzcCA9IHRoaXMucGFyc2UoY3MsIFNVQlBBUlNFKVxuICAgICAgICAgICAgcmUgPSByZS5zdWJzdHIoMCwgcmVDbGFzc1N0YXJ0KSArICdcXFxcWycgKyBzcFswXSArICdcXFxcXSdcbiAgICAgICAgICAgIGhhc01hZ2ljID0gaGFzTWFnaWMgfHwgc3BbMV1cbiAgICAgICAgICAgIGluQ2xhc3MgPSBmYWxzZVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5pc2ggdXAgdGhlIGNsYXNzLlxuICAgICAgICBoYXNNYWdpYyA9IHRydWVcbiAgICAgICAgaW5DbGFzcyA9IGZhbHNlXG4gICAgICAgIHJlICs9IGNcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIHN3YWxsb3cgYW55IHN0YXRlIGNoYXIgdGhhdCB3YXNuJ3QgY29uc3VtZWRcbiAgICAgICAgY2xlYXJTdGF0ZUNoYXIoKVxuXG4gICAgICAgIGlmIChlc2NhcGluZykge1xuICAgICAgICAgIC8vIG5vIG5lZWRcbiAgICAgICAgICBlc2NhcGluZyA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAocmVTcGVjaWFsc1tjXVxuICAgICAgICAgICYmICEoYyA9PT0gJ14nICYmIGluQ2xhc3MpKSB7XG4gICAgICAgICAgcmUgKz0gJ1xcXFwnXG4gICAgICAgIH1cblxuICAgICAgICByZSArPSBjXG5cbiAgICB9IC8vIHN3aXRjaFxuICB9IC8vIGZvclxuXG4gIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBsZWZ0IGEgY2xhc3Mgb3Blbi5cbiAgLy8gXCJbYWJjXCIgaXMgdmFsaWQsIGVxdWl2YWxlbnQgdG8gXCJcXFthYmNcIlxuICBpZiAoaW5DbGFzcykge1xuICAgIC8vIHNwbGl0IHdoZXJlIHRoZSBsYXN0IFsgd2FzLCBhbmQgZXNjYXBlIGl0XG4gICAgLy8gdGhpcyBpcyBhIGh1Z2UgcGl0YS4gIFdlIG5vdyBoYXZlIHRvIHJlLXdhbGtcbiAgICAvLyB0aGUgY29udGVudHMgb2YgdGhlIHdvdWxkLWJlIGNsYXNzIHRvIHJlLXRyYW5zbGF0ZVxuICAgIC8vIGFueSBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBwYXNzZWQgdGhyb3VnaCBhcy1pc1xuICAgIGNzID0gcGF0dGVybi5zdWJzdHIoY2xhc3NTdGFydCArIDEpXG4gICAgc3AgPSB0aGlzLnBhcnNlKGNzLCBTVUJQQVJTRSlcbiAgICByZSA9IHJlLnN1YnN0cigwLCByZUNsYXNzU3RhcnQpICsgJ1xcXFxbJyArIHNwWzBdXG4gICAgaGFzTWFnaWMgPSBoYXNNYWdpYyB8fCBzcFsxXVxuICB9XG5cbiAgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGhhZCBhICsoIHRoaW5nIGF0IHRoZSAqZW5kKlxuICAvLyBvZiB0aGUgcGF0dGVybi5cbiAgLy8gZWFjaCBwYXR0ZXJuIGxpc3Qgc3RhY2sgYWRkcyAzIGNoYXJzLCBhbmQgd2UgbmVlZCB0byBnbyB0aHJvdWdoXG4gIC8vIGFuZCBlc2NhcGUgYW55IHwgY2hhcnMgdGhhdCB3ZXJlIHBhc3NlZCB0aHJvdWdoIGFzLWlzIGZvciB0aGUgcmVnZXhwLlxuICAvLyBHbyB0aHJvdWdoIGFuZCBlc2NhcGUgdGhlbSwgdGFraW5nIGNhcmUgbm90IHRvIGRvdWJsZS1lc2NhcGUgYW55XG4gIC8vIHwgY2hhcnMgdGhhdCB3ZXJlIGFscmVhZHkgZXNjYXBlZC5cbiAgZm9yIChwbCA9IHBhdHRlcm5MaXN0U3RhY2sucG9wKCk7IHBsOyBwbCA9IHBhdHRlcm5MaXN0U3RhY2sucG9wKCkpIHtcbiAgICB2YXIgdGFpbCA9IHJlLnNsaWNlKHBsLnJlU3RhcnQgKyBwbC5vcGVuLmxlbmd0aClcbiAgICB0aGlzLmRlYnVnKCdzZXR0aW5nIHRhaWwnLCByZSwgcGwpXG4gICAgLy8gbWF5YmUgc29tZSBldmVuIG51bWJlciBvZiBcXCwgdGhlbiBtYXliZSAxIFxcLCBmb2xsb3dlZCBieSBhIHxcbiAgICB0YWlsID0gdGFpbC5yZXBsYWNlKC8oKD86XFxcXHsyfSl7MCw2NH0pKFxcXFw/KVxcfC9nLCBmdW5jdGlvbiAoXywgJDEsICQyKSB7XG4gICAgICBpZiAoISQyKSB7XG4gICAgICAgIC8vIHRoZSB8IGlzbid0IGFscmVhZHkgZXNjYXBlZCwgc28gZXNjYXBlIGl0LlxuICAgICAgICAkMiA9ICdcXFxcJ1xuICAgICAgfVxuXG4gICAgICAvLyBuZWVkIHRvIGVzY2FwZSBhbGwgdGhvc2Ugc2xhc2hlcyAqYWdhaW4qLCB3aXRob3V0IGVzY2FwaW5nIHRoZVxuICAgICAgLy8gb25lIHRoYXQgd2UgbmVlZCBmb3IgZXNjYXBpbmcgdGhlIHwgY2hhcmFjdGVyLiAgQXMgaXQgd29ya3Mgb3V0LFxuICAgICAgLy8gZXNjYXBpbmcgYW4gZXZlbiBudW1iZXIgb2Ygc2xhc2hlcyBjYW4gYmUgZG9uZSBieSBzaW1wbHkgcmVwZWF0aW5nXG4gICAgICAvLyBpdCBleGFjdGx5IGFmdGVyIGl0c2VsZi4gIFRoYXQncyB3aHkgdGhpcyB0cmljayB3b3Jrcy5cbiAgICAgIC8vXG4gICAgICAvLyBJIGFtIHNvcnJ5IHRoYXQgeW91IGhhdmUgdG8gc2VlIHRoaXMuXG4gICAgICByZXR1cm4gJDEgKyAkMSArICQyICsgJ3wnXG4gICAgfSlcblxuICAgIHRoaXMuZGVidWcoJ3RhaWw9JWpcXG4gICAlcycsIHRhaWwsIHRhaWwsIHBsLCByZSlcbiAgICB2YXIgdCA9IHBsLnR5cGUgPT09ICcqJyA/IHN0YXJcbiAgICAgIDogcGwudHlwZSA9PT0gJz8nID8gcW1hcmtcbiAgICAgIDogJ1xcXFwnICsgcGwudHlwZVxuXG4gICAgaGFzTWFnaWMgPSB0cnVlXG4gICAgcmUgPSByZS5zbGljZSgwLCBwbC5yZVN0YXJ0KSArIHQgKyAnXFxcXCgnICsgdGFpbFxuICB9XG5cbiAgLy8gaGFuZGxlIHRyYWlsaW5nIHRoaW5ncyB0aGF0IG9ubHkgbWF0dGVyIGF0IHRoZSB2ZXJ5IGVuZC5cbiAgY2xlYXJTdGF0ZUNoYXIoKVxuICBpZiAoZXNjYXBpbmcpIHtcbiAgICAvLyB0cmFpbGluZyBcXFxcXG4gICAgcmUgKz0gJ1xcXFxcXFxcJ1xuICB9XG5cbiAgLy8gb25seSBuZWVkIHRvIGFwcGx5IHRoZSBub2RvdCBzdGFydCBpZiB0aGUgcmUgc3RhcnRzIHdpdGhcbiAgLy8gc29tZXRoaW5nIHRoYXQgY291bGQgY29uY2VpdmFibHkgY2FwdHVyZSBhIGRvdFxuICB2YXIgYWRkUGF0dGVyblN0YXJ0ID0gZmFsc2VcbiAgc3dpdGNoIChyZS5jaGFyQXQoMCkpIHtcbiAgICBjYXNlICcuJzpcbiAgICBjYXNlICdbJzpcbiAgICBjYXNlICcoJzogYWRkUGF0dGVyblN0YXJ0ID0gdHJ1ZVxuICB9XG5cbiAgLy8gSGFjayB0byB3b3JrIGFyb3VuZCBsYWNrIG9mIG5lZ2F0aXZlIGxvb2tiZWhpbmQgaW4gSlNcbiAgLy8gQSBwYXR0ZXJuIGxpa2U6ICouISh4KS4hKHl8eikgbmVlZHMgdG8gZW5zdXJlIHRoYXQgYSBuYW1lXG4gIC8vIGxpa2UgJ2EueHl6Lnl6JyBkb2Vzbid0IG1hdGNoLiAgU28sIHRoZSBmaXJzdCBuZWdhdGl2ZVxuICAvLyBsb29rYWhlYWQsIGhhcyB0byBsb29rIEFMTCB0aGUgd2F5IGFoZWFkLCB0byB0aGUgZW5kIG9mXG4gIC8vIHRoZSBwYXR0ZXJuLlxuICBmb3IgKHZhciBuID0gbmVnYXRpdmVMaXN0cy5sZW5ndGggLSAxOyBuID4gLTE7IG4tLSkge1xuICAgIHZhciBubCA9IG5lZ2F0aXZlTGlzdHNbbl1cblxuICAgIHZhciBubEJlZm9yZSA9IHJlLnNsaWNlKDAsIG5sLnJlU3RhcnQpXG4gICAgdmFyIG5sRmlyc3QgPSByZS5zbGljZShubC5yZVN0YXJ0LCBubC5yZUVuZCAtIDgpXG4gICAgdmFyIG5sTGFzdCA9IHJlLnNsaWNlKG5sLnJlRW5kIC0gOCwgbmwucmVFbmQpXG4gICAgdmFyIG5sQWZ0ZXIgPSByZS5zbGljZShubC5yZUVuZClcblxuICAgIG5sTGFzdCArPSBubEFmdGVyXG5cbiAgICAvLyBIYW5kbGUgbmVzdGVkIHN0dWZmIGxpa2UgKigqLmpzfCEoKi5qc29uKSksIHdoZXJlIG9wZW4gcGFyZW5zXG4gICAgLy8gbWVhbiB0aGF0IHdlIHNob3VsZCAqbm90KiBpbmNsdWRlIHRoZSApIGluIHRoZSBiaXQgdGhhdCBpcyBjb25zaWRlcmVkXG4gICAgLy8gXCJhZnRlclwiIHRoZSBuZWdhdGVkIHNlY3Rpb24uXG4gICAgdmFyIG9wZW5QYXJlbnNCZWZvcmUgPSBubEJlZm9yZS5zcGxpdCgnKCcpLmxlbmd0aCAtIDFcbiAgICB2YXIgY2xlYW5BZnRlciA9IG5sQWZ0ZXJcbiAgICBmb3IgKGkgPSAwOyBpIDwgb3BlblBhcmVuc0JlZm9yZTsgaSsrKSB7XG4gICAgICBjbGVhbkFmdGVyID0gY2xlYW5BZnRlci5yZXBsYWNlKC9cXClbKyo/XT8vLCAnJylcbiAgICB9XG4gICAgbmxBZnRlciA9IGNsZWFuQWZ0ZXJcblxuICAgIHZhciBkb2xsYXIgPSAnJ1xuICAgIGlmIChubEFmdGVyID09PSAnJyAmJiBpc1N1YiAhPT0gU1VCUEFSU0UpIHtcbiAgICAgIGRvbGxhciA9ICckJ1xuICAgIH1cbiAgICB2YXIgbmV3UmUgPSBubEJlZm9yZSArIG5sRmlyc3QgKyBubEFmdGVyICsgZG9sbGFyICsgbmxMYXN0XG4gICAgcmUgPSBuZXdSZVxuICB9XG5cbiAgLy8gaWYgdGhlIHJlIGlzIG5vdCBcIlwiIGF0IHRoaXMgcG9pbnQsIHRoZW4gd2UgbmVlZCB0byBtYWtlIHN1cmVcbiAgLy8gaXQgZG9lc24ndCBtYXRjaCBhZ2FpbnN0IGFuIGVtcHR5IHBhdGggcGFydC5cbiAgLy8gT3RoZXJ3aXNlIGEvKiB3aWxsIG1hdGNoIGEvLCB3aGljaCBpdCBzaG91bGQgbm90LlxuICBpZiAocmUgIT09ICcnICYmIGhhc01hZ2ljKSB7XG4gICAgcmUgPSAnKD89LiknICsgcmVcbiAgfVxuXG4gIGlmIChhZGRQYXR0ZXJuU3RhcnQpIHtcbiAgICByZSA9IHBhdHRlcm5TdGFydCArIHJlXG4gIH1cblxuICAvLyBwYXJzaW5nIGp1c3QgYSBwaWVjZSBvZiBhIGxhcmdlciBwYXR0ZXJuLlxuICBpZiAoaXNTdWIgPT09IFNVQlBBUlNFKSB7XG4gICAgcmV0dXJuIFtyZSwgaGFzTWFnaWNdXG4gIH1cblxuICAvLyBza2lwIHRoZSByZWdleHAgZm9yIG5vbi1tYWdpY2FsIHBhdHRlcm5zXG4gIC8vIHVuZXNjYXBlIGFueXRoaW5nIGluIGl0LCB0aG91Z2gsIHNvIHRoYXQgaXQnbGwgYmVcbiAgLy8gYW4gZXhhY3QgbWF0Y2ggYWdhaW5zdCBhIGZpbGUgZXRjLlxuICBpZiAoIWhhc01hZ2ljKSB7XG4gICAgcmV0dXJuIGdsb2JVbmVzY2FwZShwYXR0ZXJuKVxuICB9XG5cbiAgdmFyIGZsYWdzID0gb3B0aW9ucy5ub2Nhc2UgPyAnaScgOiAnJ1xuICB0cnkge1xuICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKCdeJyArIHJlICsgJyQnLCBmbGFncylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICAvLyBJZiBpdCB3YXMgYW4gaW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb24sIHRoZW4gaXQgY2FuJ3QgbWF0Y2hcbiAgICAvLyBhbnl0aGluZy4gIFRoaXMgdHJpY2sgbG9va3MgZm9yIGEgY2hhcmFjdGVyIGFmdGVyIHRoZSBlbmQgb2ZcbiAgICAvLyB0aGUgc3RyaW5nLCB3aGljaCBpcyBvZiBjb3Vyc2UgaW1wb3NzaWJsZSwgZXhjZXB0IGluIG11bHRpLWxpbmVcbiAgICAvLyBtb2RlLCBidXQgaXQncyBub3QgYSAvbSByZWdleC5cbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnJC4nKVxuICB9XG5cbiAgcmVnRXhwLl9nbG9iID0gcGF0dGVyblxuICByZWdFeHAuX3NyYyA9IHJlXG5cbiAgcmV0dXJuIHJlZ0V4cFxufVxuXG5taW5pbWF0Y2gubWFrZVJlID0gZnVuY3Rpb24gKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBNaW5pbWF0Y2gocGF0dGVybiwgb3B0aW9ucyB8fCB7fSkubWFrZVJlKClcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5tYWtlUmUgPSBtYWtlUmVcbmZ1bmN0aW9uIG1ha2VSZSAoKSB7XG4gIGlmICh0aGlzLnJlZ2V4cCB8fCB0aGlzLnJlZ2V4cCA9PT0gZmFsc2UpIHJldHVybiB0aGlzLnJlZ2V4cFxuXG4gIC8vIGF0IHRoaXMgcG9pbnQsIHRoaXMuc2V0IGlzIGEgMmQgYXJyYXkgb2YgcGFydGlhbFxuICAvLyBwYXR0ZXJuIHN0cmluZ3MsIG9yIFwiKipcIi5cbiAgLy9cbiAgLy8gSXQncyBiZXR0ZXIgdG8gdXNlIC5tYXRjaCgpLiAgVGhpcyBmdW5jdGlvbiBzaG91bGRuJ3RcbiAgLy8gYmUgdXNlZCwgcmVhbGx5LCBidXQgaXQncyBwcmV0dHkgY29udmVuaWVudCBzb21ldGltZXMsXG4gIC8vIHdoZW4geW91IGp1c3Qgd2FudCB0byB3b3JrIHdpdGggYSByZWdleC5cbiAgdmFyIHNldCA9IHRoaXMuc2V0XG5cbiAgaWYgKCFzZXQubGVuZ3RoKSB7XG4gICAgdGhpcy5yZWdleHAgPSBmYWxzZVxuICAgIHJldHVybiB0aGlzLnJlZ2V4cFxuICB9XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgdmFyIHR3b1N0YXIgPSBvcHRpb25zLm5vZ2xvYnN0YXIgPyBzdGFyXG4gICAgOiBvcHRpb25zLmRvdCA/IHR3b1N0YXJEb3RcbiAgICA6IHR3b1N0YXJOb0RvdFxuICB2YXIgZmxhZ3MgPSBvcHRpb25zLm5vY2FzZSA/ICdpJyA6ICcnXG5cbiAgdmFyIHJlID0gc2V0Lm1hcChmdW5jdGlvbiAocGF0dGVybikge1xuICAgIHJldHVybiBwYXR0ZXJuLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIChwID09PSBHTE9CU1RBUikgPyB0d29TdGFyXG4gICAgICA6ICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpID8gcmVnRXhwRXNjYXBlKHApXG4gICAgICA6IHAuX3NyY1xuICAgIH0pLmpvaW4oJ1xcXFxcXC8nKVxuICB9KS5qb2luKCd8JylcblxuICAvLyBtdXN0IG1hdGNoIGVudGlyZSBwYXR0ZXJuXG4gIC8vIGVuZGluZyBpbiBhICogb3IgKiogd2lsbCBtYWtlIGl0IGxlc3Mgc3RyaWN0LlxuICByZSA9ICdeKD86JyArIHJlICsgJykkJ1xuXG4gIC8vIGNhbiBtYXRjaCBhbnl0aGluZywgYXMgbG9uZyBhcyBpdCdzIG5vdCB0aGlzLlxuICBpZiAodGhpcy5uZWdhdGUpIHJlID0gJ14oPyEnICsgcmUgKyAnKS4qJCdcblxuICB0cnkge1xuICAgIHRoaXMucmVnZXhwID0gbmV3IFJlZ0V4cChyZSwgZmxhZ3MpXG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgdGhpcy5yZWdleHAgPSBmYWxzZVxuICB9XG4gIHJldHVybiB0aGlzLnJlZ2V4cFxufVxuXG5taW5pbWF0Y2gubWF0Y2ggPSBmdW5jdGlvbiAobGlzdCwgcGF0dGVybiwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgbW0gPSBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIG9wdGlvbnMpXG4gIGxpc3QgPSBsaXN0LmZpbHRlcihmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBtbS5tYXRjaChmKVxuICB9KVxuICBpZiAobW0ub3B0aW9ucy5ub251bGwgJiYgIWxpc3QubGVuZ3RoKSB7XG4gICAgbGlzdC5wdXNoKHBhdHRlcm4pXG4gIH1cbiAgcmV0dXJuIGxpc3Rcbn1cblxuTWluaW1hdGNoLnByb3RvdHlwZS5tYXRjaCA9IG1hdGNoXG5mdW5jdGlvbiBtYXRjaCAoZiwgcGFydGlhbCkge1xuICB0aGlzLmRlYnVnKCdtYXRjaCcsIGYsIHRoaXMucGF0dGVybilcbiAgLy8gc2hvcnQtY2lyY3VpdCBpbiB0aGUgY2FzZSBvZiBidXN0ZWQgdGhpbmdzLlxuICAvLyBjb21tZW50cywgZXRjLlxuICBpZiAodGhpcy5jb21tZW50KSByZXR1cm4gZmFsc2VcbiAgaWYgKHRoaXMuZW1wdHkpIHJldHVybiBmID09PSAnJ1xuXG4gIGlmIChmID09PSAnLycgJiYgcGFydGlhbCkgcmV0dXJuIHRydWVcblxuICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc1xuXG4gIC8vIHdpbmRvd3M6IG5lZWQgdG8gdXNlIC8sIG5vdCBcXFxuICBpZiAocGF0aC5zZXAgIT09ICcvJykge1xuICAgIGYgPSBmLnNwbGl0KHBhdGguc2VwKS5qb2luKCcvJylcbiAgfVxuXG4gIC8vIHRyZWF0IHRoZSB0ZXN0IHBhdGggYXMgYSBzZXQgb2YgcGF0aHBhcnRzLlxuICBmID0gZi5zcGxpdChzbGFzaFNwbGl0KVxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgJ3NwbGl0JywgZilcblxuICAvLyBqdXN0IE9ORSBvZiB0aGUgcGF0dGVybiBzZXRzIGluIHRoaXMuc2V0IG5lZWRzIHRvIG1hdGNoXG4gIC8vIGluIG9yZGVyIGZvciBpdCB0byBiZSB2YWxpZC4gIElmIG5lZ2F0aW5nLCB0aGVuIGp1c3Qgb25lXG4gIC8vIG1hdGNoIG1lYW5zIHRoYXQgd2UgaGF2ZSBmYWlsZWQuXG4gIC8vIEVpdGhlciB3YXksIHJldHVybiBvbiB0aGUgZmlyc3QgaGl0LlxuXG4gIHZhciBzZXQgPSB0aGlzLnNldFxuICB0aGlzLmRlYnVnKHRoaXMucGF0dGVybiwgJ3NldCcsIHNldClcblxuICAvLyBGaW5kIHRoZSBiYXNlbmFtZSBvZiB0aGUgcGF0aCBieSBsb29raW5nIGZvciB0aGUgbGFzdCBub24tZW1wdHkgc2VnbWVudFxuICB2YXIgZmlsZW5hbWVcbiAgdmFyIGlcbiAgZm9yIChpID0gZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGZpbGVuYW1lID0gZltpXVxuICAgIGlmIChmaWxlbmFtZSkgYnJlYWtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGF0dGVybiA9IHNldFtpXVxuICAgIHZhciBmaWxlID0gZlxuICAgIGlmIChvcHRpb25zLm1hdGNoQmFzZSAmJiBwYXR0ZXJuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZmlsZSA9IFtmaWxlbmFtZV1cbiAgICB9XG4gICAgdmFyIGhpdCA9IHRoaXMubWF0Y2hPbmUoZmlsZSwgcGF0dGVybiwgcGFydGlhbClcbiAgICBpZiAoaGl0KSB7XG4gICAgICBpZiAob3B0aW9ucy5mbGlwTmVnYXRlKSByZXR1cm4gdHJ1ZVxuICAgICAgcmV0dXJuICF0aGlzLm5lZ2F0ZVxuICAgIH1cbiAgfVxuXG4gIC8vIGRpZG4ndCBnZXQgYW55IGhpdHMuICB0aGlzIGlzIHN1Y2Nlc3MgaWYgaXQncyBhIG5lZ2F0aXZlXG4gIC8vIHBhdHRlcm4sIGZhaWx1cmUgb3RoZXJ3aXNlLlxuICBpZiAob3B0aW9ucy5mbGlwTmVnYXRlKSByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRoaXMubmVnYXRlXG59XG5cbi8vIHNldCBwYXJ0aWFsIHRvIHRydWUgdG8gdGVzdCBpZiwgZm9yIGV4YW1wbGUsXG4vLyBcIi9hL2JcIiBtYXRjaGVzIHRoZSBzdGFydCBvZiBcIi8qL2IvKi9kXCJcbi8vIFBhcnRpYWwgbWVhbnMsIGlmIHlvdSBydW4gb3V0IG9mIGZpbGUgYmVmb3JlIHlvdSBydW5cbi8vIG91dCBvZiBwYXR0ZXJuLCB0aGVuIHRoYXQncyBmaW5lLCBhcyBsb25nIGFzIGFsbFxuLy8gdGhlIHBhcnRzIG1hdGNoLlxuTWluaW1hdGNoLnByb3RvdHlwZS5tYXRjaE9uZSA9IGZ1bmN0aW9uIChmaWxlLCBwYXR0ZXJuLCBwYXJ0aWFsKSB7XG4gIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zXG5cbiAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUnLFxuICAgIHsgJ3RoaXMnOiB0aGlzLCBmaWxlOiBmaWxlLCBwYXR0ZXJuOiBwYXR0ZXJuIH0pXG5cbiAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUnLCBmaWxlLmxlbmd0aCwgcGF0dGVybi5sZW5ndGgpXG5cbiAgZm9yICh2YXIgZmkgPSAwLFxuICAgICAgcGkgPSAwLFxuICAgICAgZmwgPSBmaWxlLmxlbmd0aCxcbiAgICAgIHBsID0gcGF0dGVybi5sZW5ndGhcbiAgICAgIDsgKGZpIDwgZmwpICYmIChwaSA8IHBsKVxuICAgICAgOyBmaSsrLCBwaSsrKSB7XG4gICAgdGhpcy5kZWJ1ZygnbWF0Y2hPbmUgbG9vcCcpXG4gICAgdmFyIHAgPSBwYXR0ZXJuW3BpXVxuICAgIHZhciBmID0gZmlsZVtmaV1cblxuICAgIHRoaXMuZGVidWcocGF0dGVybiwgcCwgZilcblxuICAgIC8vIHNob3VsZCBiZSBpbXBvc3NpYmxlLlxuICAgIC8vIHNvbWUgaW52YWxpZCByZWdleHAgc3R1ZmYgaW4gdGhlIHNldC5cbiAgICBpZiAocCA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxuXG4gICAgaWYgKHAgPT09IEdMT0JTVEFSKSB7XG4gICAgICB0aGlzLmRlYnVnKCdHTE9CU1RBUicsIFtwYXR0ZXJuLCBwLCBmXSlcblxuICAgICAgLy8gXCIqKlwiXG4gICAgICAvLyBhLyoqL2IvKiovYyB3b3VsZCBtYXRjaCB0aGUgZm9sbG93aW5nOlxuICAgICAgLy8gYS9iL3gveS96L2NcbiAgICAgIC8vIGEveC95L3ovYi9jXG4gICAgICAvLyBhL2IveC9iL3gvY1xuICAgICAgLy8gYS9iL2NcbiAgICAgIC8vIFRvIGRvIHRoaXMsIHRha2UgdGhlIHJlc3Qgb2YgdGhlIHBhdHRlcm4gYWZ0ZXJcbiAgICAgIC8vIHRoZSAqKiwgYW5kIHNlZSBpZiBpdCB3b3VsZCBtYXRjaCB0aGUgZmlsZSByZW1haW5kZXIuXG4gICAgICAvLyBJZiBzbywgcmV0dXJuIHN1Y2Nlc3MuXG4gICAgICAvLyBJZiBub3QsIHRoZSAqKiBcInN3YWxsb3dzXCIgYSBzZWdtZW50LCBhbmQgdHJ5IGFnYWluLlxuICAgICAgLy8gVGhpcyBpcyByZWN1cnNpdmVseSBhd2Z1bC5cbiAgICAgIC8vXG4gICAgICAvLyBhLyoqL2IvKiovYyBtYXRjaGluZyBhL2IveC95L3ovY1xuICAgICAgLy8gLSBhIG1hdGNoZXMgYVxuICAgICAgLy8gLSBkb3VibGVzdGFyXG4gICAgICAvLyAgIC0gbWF0Y2hPbmUoYi94L3kvei9jLCBiLyoqL2MpXG4gICAgICAvLyAgICAgLSBiIG1hdGNoZXMgYlxuICAgICAgLy8gICAgIC0gZG91Ymxlc3RhclxuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh4L3kvei9jLCBjKSAtPiBub1xuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZSh5L3ovYywgYykgLT4gbm9cbiAgICAgIC8vICAgICAgIC0gbWF0Y2hPbmUoei9jLCBjKSAtPiBub1xuICAgICAgLy8gICAgICAgLSBtYXRjaE9uZShjLCBjKSB5ZXMsIGhpdFxuICAgICAgdmFyIGZyID0gZmlcbiAgICAgIHZhciBwciA9IHBpICsgMVxuICAgICAgaWYgKHByID09PSBwbCkge1xuICAgICAgICB0aGlzLmRlYnVnKCcqKiBhdCB0aGUgZW5kJylcbiAgICAgICAgLy8gYSAqKiBhdCB0aGUgZW5kIHdpbGwganVzdCBzd2FsbG93IHRoZSByZXN0LlxuICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbWF0Y2guXG4gICAgICAgIC8vIGhvd2V2ZXIsIGl0IHdpbGwgbm90IHN3YWxsb3cgLy54LCB1bmxlc3NcbiAgICAgICAgLy8gb3B0aW9ucy5kb3QgaXMgc2V0LlxuICAgICAgICAvLyAuIGFuZCAuLiBhcmUgKm5ldmVyKiBtYXRjaGVkIGJ5ICoqLCBmb3IgZXhwbG9zaXZlbHlcbiAgICAgICAgLy8gZXhwb25lbnRpYWwgcmVhc29ucy5cbiAgICAgICAgZm9yICg7IGZpIDwgZmw7IGZpKyspIHtcbiAgICAgICAgICBpZiAoZmlsZVtmaV0gPT09ICcuJyB8fCBmaWxlW2ZpXSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBmaWxlW2ZpXS5jaGFyQXQoMCkgPT09ICcuJykpIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG5cbiAgICAgIC8vIG9rLCBsZXQncyBzZWUgaWYgd2UgY2FuIHN3YWxsb3cgd2hhdGV2ZXIgd2UgY2FuLlxuICAgICAgd2hpbGUgKGZyIDwgZmwpIHtcbiAgICAgICAgdmFyIHN3YWxsb3dlZSA9IGZpbGVbZnJdXG5cbiAgICAgICAgdGhpcy5kZWJ1ZygnXFxuZ2xvYnN0YXIgd2hpbGUnLCBmaWxlLCBmciwgcGF0dGVybiwgcHIsIHN3YWxsb3dlZSlcblxuICAgICAgICAvLyBYWFggcmVtb3ZlIHRoaXMgc2xpY2UuICBKdXN0IHBhc3MgdGhlIHN0YXJ0IGluZGV4LlxuICAgICAgICBpZiAodGhpcy5tYXRjaE9uZShmaWxlLnNsaWNlKGZyKSwgcGF0dGVybi5zbGljZShwciksIHBhcnRpYWwpKSB7XG4gICAgICAgICAgdGhpcy5kZWJ1ZygnZ2xvYnN0YXIgZm91bmQgbWF0Y2ghJywgZnIsIGZsLCBzd2FsbG93ZWUpXG4gICAgICAgICAgLy8gZm91bmQgYSBtYXRjaC5cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNhbid0IHN3YWxsb3cgXCIuXCIgb3IgXCIuLlwiIGV2ZXIuXG4gICAgICAgICAgLy8gY2FuIG9ubHkgc3dhbGxvdyBcIi5mb29cIiB3aGVuIGV4cGxpY2l0bHkgYXNrZWQuXG4gICAgICAgICAgaWYgKHN3YWxsb3dlZSA9PT0gJy4nIHx8IHN3YWxsb3dlZSA9PT0gJy4uJyB8fFxuICAgICAgICAgICAgKCFvcHRpb25zLmRvdCAmJiBzd2FsbG93ZWUuY2hhckF0KDApID09PSAnLicpKSB7XG4gICAgICAgICAgICB0aGlzLmRlYnVnKCdkb3QgZGV0ZWN0ZWQhJywgZmlsZSwgZnIsIHBhdHRlcm4sIHByKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyAqKiBzd2FsbG93cyBhIHNlZ21lbnQsIGFuZCBjb250aW51ZS5cbiAgICAgICAgICB0aGlzLmRlYnVnKCdnbG9ic3RhciBzd2FsbG93IGEgc2VnbWVudCwgYW5kIGNvbnRpbnVlJylcbiAgICAgICAgICBmcisrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gbm8gbWF0Y2ggd2FzIGZvdW5kLlxuICAgICAgLy8gSG93ZXZlciwgaW4gcGFydGlhbCBtb2RlLCB3ZSBjYW4ndCBzYXkgdGhpcyBpcyBuZWNlc3NhcmlseSBvdmVyLlxuICAgICAgLy8gSWYgdGhlcmUncyBtb3JlICpwYXR0ZXJuKiBsZWZ0LCB0aGVuXG4gICAgICBpZiAocGFydGlhbCkge1xuICAgICAgICAvLyByYW4gb3V0IG9mIGZpbGVcbiAgICAgICAgdGhpcy5kZWJ1ZygnXFxuPj4+IG5vIG1hdGNoLCBwYXJ0aWFsPycsIGZpbGUsIGZyLCBwYXR0ZXJuLCBwcilcbiAgICAgICAgaWYgKGZyID09PSBmbCkgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIHNvbWV0aGluZyBvdGhlciB0aGFuICoqXG4gICAgLy8gbm9uLW1hZ2ljIHBhdHRlcm5zIGp1c3QgaGF2ZSB0byBtYXRjaCBleGFjdGx5XG4gICAgLy8gcGF0dGVybnMgd2l0aCBtYWdpYyBoYXZlIGJlZW4gdHVybmVkIGludG8gcmVnZXhwcy5cbiAgICB2YXIgaGl0XG4gICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKG9wdGlvbnMubm9jYXNlKSB7XG4gICAgICAgIGhpdCA9IGYudG9Mb3dlckNhc2UoKSA9PT0gcC50b0xvd2VyQ2FzZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoaXQgPSBmID09PSBwXG4gICAgICB9XG4gICAgICB0aGlzLmRlYnVnKCdzdHJpbmcgbWF0Y2gnLCBwLCBmLCBoaXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGhpdCA9IGYubWF0Y2gocClcbiAgICAgIHRoaXMuZGVidWcoJ3BhdHRlcm4gbWF0Y2gnLCBwLCBmLCBoaXQpXG4gICAgfVxuXG4gICAgaWYgKCFoaXQpIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gTm90ZTogZW5kaW5nIGluIC8gbWVhbnMgdGhhdCB3ZSdsbCBnZXQgYSBmaW5hbCBcIlwiXG4gIC8vIGF0IHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4uICBUaGlzIGNhbiBvbmx5IG1hdGNoIGFcbiAgLy8gY29ycmVzcG9uZGluZyBcIlwiIGF0IHRoZSBlbmQgb2YgdGhlIGZpbGUuXG4gIC8vIElmIHRoZSBmaWxlIGVuZHMgaW4gLywgdGhlbiBpdCBjYW4gb25seSBtYXRjaCBhXG4gIC8vIGEgcGF0dGVybiB0aGF0IGVuZHMgaW4gLywgdW5sZXNzIHRoZSBwYXR0ZXJuIGp1c3RcbiAgLy8gZG9lc24ndCBoYXZlIGFueSBtb3JlIGZvciBpdC4gQnV0LCBhL2IvIHNob3VsZCAqbm90KlxuICAvLyBtYXRjaCBcImEvYi8qXCIsIGV2ZW4gdGhvdWdoIFwiXCIgbWF0Y2hlcyBhZ2FpbnN0IHRoZVxuICAvLyBbXi9dKj8gcGF0dGVybiwgZXhjZXB0IGluIHBhcnRpYWwgbW9kZSwgd2hlcmUgaXQgbWlnaHRcbiAgLy8gc2ltcGx5IG5vdCBiZSByZWFjaGVkIHlldC5cbiAgLy8gSG93ZXZlciwgYS9iLyBzaG91bGQgc3RpbGwgc2F0aXNmeSBhLypcblxuICAvLyBub3cgZWl0aGVyIHdlIGZlbGwgb2ZmIHRoZSBlbmQgb2YgdGhlIHBhdHRlcm4sIG9yIHdlJ3JlIGRvbmUuXG4gIGlmIChmaSA9PT0gZmwgJiYgcGkgPT09IHBsKSB7XG4gICAgLy8gcmFuIG91dCBvZiBwYXR0ZXJuIGFuZCBmaWxlbmFtZSBhdCB0aGUgc2FtZSB0aW1lLlxuICAgIC8vIGFuIGV4YWN0IGhpdCFcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2UgaWYgKGZpID09PSBmbCkge1xuICAgIC8vIHJhbiBvdXQgb2YgZmlsZSwgYnV0IHN0aWxsIGhhZCBwYXR0ZXJuIGxlZnQuXG4gICAgLy8gdGhpcyBpcyBvayBpZiB3ZSdyZSBkb2luZyB0aGUgbWF0Y2ggYXMgcGFydCBvZlxuICAgIC8vIGEgZ2xvYiBmcyB0cmF2ZXJzYWwuXG4gICAgcmV0dXJuIHBhcnRpYWxcbiAgfSBlbHNlIGlmIChwaSA9PT0gcGwpIHtcbiAgICAvLyByYW4gb3V0IG9mIHBhdHRlcm4sIHN0aWxsIGhhdmUgZmlsZSBsZWZ0LlxuICAgIC8vIHRoaXMgaXMgb25seSBhY2NlcHRhYmxlIGlmIHdlJ3JlIG9uIHRoZSB2ZXJ5IGxhc3RcbiAgICAvLyBlbXB0eSBzZWdtZW50IG9mIGEgZmlsZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2guXG4gICAgLy8gYS8qIHNob3VsZCBtYXRjaCBhL2IvXG4gICAgdmFyIGVtcHR5RmlsZUVuZCA9IChmaSA9PT0gZmwgLSAxKSAmJiAoZmlsZVtmaV0gPT09ICcnKVxuICAgIHJldHVybiBlbXB0eUZpbGVFbmRcbiAgfVxuXG4gIC8vIHNob3VsZCBiZSB1bnJlYWNoYWJsZS5cbiAgdGhyb3cgbmV3IEVycm9yKCd3dGY/Jylcbn1cblxuLy8gcmVwbGFjZSBzdHVmZiBsaWtlIFxcKiB3aXRoICpcbmZ1bmN0aW9uIGdsb2JVbmVzY2FwZSAocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9cXFxcKC4pL2csICckMScpXG59XG5cbmZ1bmN0aW9uIHJlZ0V4cEVzY2FwZSAocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9bLVtcXF17fSgpKis/LixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHBvc2l4KHBhdGgpIHtcblx0cmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7XG59XG5cbmZ1bmN0aW9uIHdpbjMyKHBhdGgpIHtcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvYjNmY2MyNDVmYjI1NTM5OTA5ZWYxZDVlYWEwMWRiZjkyZTE2ODYzMy9saWIvcGF0aC5qcyNMNTZcblx0dmFyIHNwbGl0RGV2aWNlUmUgPSAvXihbYS16QS1aXTp8W1xcXFxcXC9dezJ9W15cXFxcXFwvXStbXFxcXFxcL10rW15cXFxcXFwvXSspPyhbXFxcXFxcL10pPyhbXFxzXFxTXSo/KSQvO1xuXHR2YXIgcmVzdWx0ID0gc3BsaXREZXZpY2VSZS5leGVjKHBhdGgpO1xuXHR2YXIgZGV2aWNlID0gcmVzdWx0WzFdIHx8ICcnO1xuXHR2YXIgaXNVbmMgPSBCb29sZWFuKGRldmljZSAmJiBkZXZpY2UuY2hhckF0KDEpICE9PSAnOicpO1xuXG5cdC8vIFVOQyBwYXRocyBhcmUgYWx3YXlzIGFic29sdXRlXG5cdHJldHVybiBCb29sZWFuKHJlc3VsdFsyXSB8fCBpc1VuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/IHdpbjMyIDogcG9zaXg7XG5tb2R1bGUuZXhwb3J0cy5wb3NpeCA9IHBvc2l4O1xubW9kdWxlLmV4cG9ydHMud2luMzIgPSB3aW4zMjtcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi4vYXBwTWVudS9hcHBNZW51XCIpO1xyXG52YXIgc2F0YXJ0R2FtZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lTW9kdWxlcy9zYXRhcnRHYW1lXCIpO1xyXG5mdW5jdGlvbiBoaWRlTG9hZFNjcmVlbigpIHtcclxuICAgIHZhciBsb2FkU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4tbG9hZC1zY3JlZW4nKTtcclxuICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3QobG9hZFNjcmVlbiwgJ2hpZGUtYW5pbWF0aW9uJyk7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBhcHBNZW51XzEuaGlkZShsb2FkU2NyZWVuKTtcclxuICAgIH0sIDEwMDApO1xyXG59XHJcbmV4cG9ydHMuaGlkZUxvYWRTY3JlZW4gPSBoaWRlTG9hZFNjcmVlbjtcclxuZnVuY3Rpb24gbG9hZFdpbmRvdyhfYSkge1xyXG4gICAgdmFyIGxvYWRTdGF0dXMgPSBfYS5sb2FkU3RhdHVzO1xyXG4gICAgdmFyIHdpbmRvd0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9hZC1zY3JlZW4nKTtcclxuICAgIHdpbmRvd0VsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIHN3aXRjaCAobG9hZFN0YXR1cykge1xyXG4gICAgICAgIGNhc2UgXCJsb2FkXCI6XHJcbiAgICAgICAgICAgIGFwcE1lbnVfMS5zaG93KHdpbmRvd0VsZW1lbnQpO1xyXG4gICAgICAgICAgICB3aW5kb3dFbGVtZW50LmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz1cXFwibG9hZC1jaXJjbGUtaW1hZ2UgbG9hZC1jaXJjZS13cmFwcGVyXFxcIj48L2Rpdj48cD5XYWl0aW5nLi4uPC9wPlwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwic2VydmVyRXJyb3JcIjpcclxuICAgICAgICAgICAgd2luZG93RWxlbWVudC5pbm5lckhUTUwgPSBcIjxwPkZhaWwgdG8gbG9hZCBkYXRhPC9wPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImxvYWQtc2NyZWVuLWJ1dHRvbi13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwicmVsb2FkLXBhZ2VcXFwiIGNsYXNzPVxcXCJidG4tb3JhbmdlIGJ0bi1tYWluXFxcIj5SZWxvYWQ8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwiZXhpdC1idG5cXFwiIGNsYXNzPVxcXCJidG4tb3JhbmdlIGJ0bi1tYWluXFxcIj5leGl0PC9idXR0b24+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgXCI7XHJcbiAgICAgICAgICAgIHJlbG9hZFBhZ2UoXCIjcmVsb2FkLXBhZ2VcIik7XHJcbiAgICAgICAgICAgIGV4aXRQYWdlKFwiI2V4aXQtYnRuXCIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwic3VjY2Vzc1wiOlxyXG4gICAgICAgICAgICBhcHBNZW51XzEuaGlkZSh3aW5kb3dFbGVtZW50KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5sb2FkV2luZG93ID0gbG9hZFdpbmRvdztcclxuZnVuY3Rpb24gcmVsb2FkUGFnZShzZWxlY3Rvcikge1xyXG4gICAgdmFyIHJlbG9hZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG4gICAgcmVsb2FkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnJlbG9hZFBhZ2UgPSByZWxvYWRQYWdlO1xyXG5mdW5jdGlvbiBleGl0UGFnZShzZWxlY3Rvcikge1xyXG4gICAgdmFyIGV4aXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgIGV4aXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgc2F0YXJ0R2FtZV8xLmV4aXRUaGVHYW1lKCk7XHJcbiAgICB9KTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGdhbWVEYXRhUmVxdWVzdHNTZXJ2aWNlc01vZHVsZV8xID0gcmVxdWlyZShcIi4uL3NlcnZlci9nYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVcIik7XHJcbmZ1bmN0aW9uIGVuZW15U2hpcExvZ2ljVmVydGljYWwodGFyZ2V0LCBtYWluR2FtZU9iamVjdCkge1xyXG4gICAgdmFyIG1heFBvc2l0aW9uWCA9IE1hdGgubWF4KHRhcmdldC54LCB0aGlzLngpO1xyXG4gICAgdmFyIG1pblBvc2l0aW9uWCA9IE1hdGgubWluKHRhcmdldC54LCB0aGlzLngpO1xyXG4gICAgdmFyIG1heFBvc2l0aW9uWSA9IE1hdGgubWF4KHRhcmdldC55IC0gdGhpcy5oZWlnaHQgLyAyLCB0aGlzLnkpO1xyXG4gICAgdmFyIG1pblBvc2l0aW9uWSA9IE1hdGgubWluKHRhcmdldC55IC0gdGhpcy5oZWlnaHQgLyAyLCB0aGlzLnkpO1xyXG4gICAgdmFyIGRpc3RhbmNlVG9UYXJnZXRYID0gbWF4UG9zaXRpb25YIC0gbWluUG9zaXRpb25YO1xyXG4gICAgdmFyIGRpc3RhbmNlVG9UYXJnZXRZID0gbWF4UG9zaXRpb25ZIC0gbWluUG9zaXRpb25ZO1xyXG4gICAgaWYgKHRoaXMuaXNNb3ZlICYmIHRoaXMuYmVoYXZpb3IpIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuYmVoYXZpb3IpIHtcclxuICAgICAgICAgICAgY2FzZSAncGF0cm9vbCc6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpcnJlY3Rpb25SYW5kb20gPSBtYWluR2FtZU9iamVjdC5nYW1lUmFuZG9taXplcigyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IChkaXJyZWN0aW9uUmFuZG9tID09IDEpID8gXCJ1cFwiIDogXCJkb3duXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRyb29sLmNhbGwodGhpcywgbWFpbkdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ZpbmQnOlxyXG4gICAgICAgICAgICAgICAgc3RyYWZlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYXR0YWNrJzpcclxuICAgICAgICAgICAgICAgIGF0dGFjay5jYWxsKHRoaXMsIGRpc3RhbmNlVG9UYXJnZXRZLCBkaXN0YW5jZVRvVGFyZ2V0WCwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdjb21lRW5kRmluZCc6XHJcbiAgICAgICAgICAgICAgICBzdHJhZmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHVuaXRTdG9wLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBnb0JhY2tBbkZvcndhcmQuY2FsbCh0aGlzLCBtYWluR2FtZU9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncnVzaCc6XHJcbiAgICAgICAgICAgICAgICBzdHJhZmUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHVuaXRTdG9wLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBydXNoQXR0YWNrLmNhbGwodGhpcywgbWFpbkdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBzdHJhZmUuY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBydXNoQXR0YWNrKG1haW5HYW1lT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIHJhbmRvbUF0dGFjayA9IG1haW5HYW1lT2JqZWN0LmdhbWVSYW5kb21pemVyKDEwMDApO1xyXG4gICAgICAgIHZhciBzY3JlZW5EYXRhID0gbWFpbkdhbWVPYmplY3QuZ2V0U2NyZWVuU2l6ZSgpO1xyXG4gICAgICAgIGlmIChyYW5kb21BdHRhY2sgPCAxICYmICF0aGlzLnJ1c2hBdGFjayAmJiAhdGhpcy5zZWFyY2hVc2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucnVzaEF0YWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5ydXNoRGF0YSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMueEZpbmFsID0gMDtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hVc2VyID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IChNYXRoLnNpZ24odGhpcy5zcGVlZCkgPiAwKSA/IDE2IDogMTY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnggPD0gMikge1xyXG4gICAgICAgICAgICB0aGlzLnJ1c2hBdGFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gdGhpcy5kZWZhdWx0U3BlZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlWHBvc2l0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy54RmluYWwgPSBzY3JlZW5EYXRhLndpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdmb3J3YXJkJztcclxuICAgICAgICAgICAgZ29CYWNrQW5Gb3J3YXJkLmNhbGwodGhpcywgbWFpbkdhbWVPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMucnVzaEF0YWNrKVxyXG4gICAgICAgICAgICBnb0JhY2tBbkZvcndhcmQuY2FsbCh0aGlzLCBtYWluR2FtZU9iamVjdCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnb0JhY2tBbkZvcndhcmQobWFpbkdhbWVPYmplY3QpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGFuZ2VYcG9zaXRpb24gJiYgdGhpcy5kaXJlY3Rpb24gIT0gJ2JhY2t3YXJkcycgfHxcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VYcG9zaXRpb24gJiYgdGhpcy54IDwgdGhpcy54RmluYWwgJiYgdGhpcy5kaXJlY3Rpb24gIT0gJ2JhY2t3YXJkcycpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnYmFja3dhcmRzJztcclxuICAgICAgICAgICAgdmFyIHNjcmVlbkRhdGEgPSBtYWluR2FtZU9iamVjdC5nZXRTY3JlZW5TaXplKCk7XHJcbiAgICAgICAgICAgIHZhciByYW5kb21Qb2ludCA9IG1haW5HYW1lT2JqZWN0LmdhbWVSYW5kb21pemVyKHRoaXMud2lkdGggKiAyKTtcclxuICAgICAgICAgICAgdmFyIHJhbmdlID0gc2NyZWVuRGF0YS53aWR0aCAtIHJhbmRvbVBvaW50O1xyXG4gICAgICAgICAgICB0aGlzLnhGaW5hbCA9IHJhbmdlO1xyXG4gICAgICAgICAgICB0aGlzLnJ1c2hBdGFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjYWhuZ2VEaXJyZWN0aW9uLmNhbGwodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2hhbmdlWHBvc2l0aW9uICYmIHRoaXMueCA+IHRoaXMueEZpbmFsICYmIHRoaXMuZGlyZWN0aW9uICE9ICdmb3J3YXJkJykge1xyXG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdmb3J3YXJkJztcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VYcG9zaXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hVc2VyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNhaG5nZURpcnJlY3Rpb24uY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjYWhuZ2VEaXJyZWN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSB0aGlzLnNwZWVkICogLTE7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1bml0U3RvcCgpIHtcclxuICAgICAgICB2YXIgc2NyZWVuRGF0YSA9IG1haW5HYW1lT2JqZWN0LmdldFNjcmVlblNpemUoKTtcclxuICAgICAgICB2YXIgc3RvcFJhbmdlID0gc2NyZWVuRGF0YS53aWR0aCAtIHRoaXMud2lkdGggKiAyO1xyXG4gICAgICAgIGlmICh0aGlzLnggPCBzdG9wUmFuZ2UgJiYgIXRoaXMuY2hhbmdlWHBvc2l0aW9uICYmICF0aGlzLnJ1c2hBdGFjaykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2hhbmdlU3BlZWQpXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VTdHJhZmVTcGVlZC5jYWxsKHRoaXMsIDMpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVNwZWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VYcG9zaXRpb24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoYW5nZVN0cmFmZVNwZWVkKGNvZWZpY2llbnQpIHtcclxuICAgICAgICB0aGlzLnNwZWVkID0gdGhpcy5zcGVlZCAvIGNvZWZpY2llbnQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzdHJhZmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoVXNlcilcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnNwb3REaXN0YW5jZSA+IGRpc3RhbmNlVG9UYXJnZXRYIHx8IHRoaXMuc3BvdERpc3RhbmNlID4gZGlzdGFuY2VUb1RhcmdldFkpIHtcclxuICAgICAgICAgICAgdGhpcy55RmluYWwgPSB0YXJnZXQueSAtIHRoaXMuaGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgdGhpcy5lbmVteVZlcnRpY2FsTW92ZUNhbGN1bGF0aW9uKGRpc3RhbmNlVG9UYXJnZXRZKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXR0YWNrKGRpc3RhbmNlVG9UYXJnZXRZLCBkaXN0YW5jZVRvVGFyZ2V0WCwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy55RmluYWwgPSB0YXJnZXQueSAtIHRoaXMuaGVpZ2h0IC8gMjtcclxuICAgICAgICBpZiAoZGlzdGFuY2VUb1RhcmdldFggPCAxMDApXHJcbiAgICAgICAgICAgIHRoaXMuZW5lbXlWZXJ0aWNhbE1vdmVDYWxjdWxhdGlvbihkaXN0YW5jZVRvVGFyZ2V0WSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBwYXRyb29sKG1haW5HYW1lT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIHNjcmVlbkRhdGEgPSBtYWluR2FtZU9iamVjdC5nZXRTY3JlZW5TaXplKCk7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlVG9UYXJnZXRZID0gTWF0aC5tYXgodGhpcy55LCB0aGlzLnlGaW5hbCkgLSBNYXRoLm1pbih0aGlzLnksIHRoaXMueUZpbmFsKTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1cFwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy55RmluYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueSAtIHRoaXMuaGVpZ2h0IDwgdGhpcy55RmluYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IFwiZG93blwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkb3duXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnlGaW5hbCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnkgKyB0aGlzLmhlaWdodCA+IHRoaXMueUZpbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBcInVwXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMueUZpbmFsID0gd2luZG93LmlubmVySGVpZ2h0IC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbmVteVZlcnRpY2FsTW92ZUNhbGN1bGF0aW9uKGRpc3RhbmNlVG9UYXJnZXRZKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmVuZW15U2hpcExvZ2ljVmVydGljYWwgPSBlbmVteVNoaXBMb2dpY1ZlcnRpY2FsO1xyXG5mdW5jdGlvbiBlbmVteVZlcnRpY2FsTW92ZUNhbGN1bGF0aW9uKGRpc3RhbmNlVG9UYXJnZXRZKSB7XHJcbiAgICB2YXIgeUFkaiA9IGRpc3RhbmNlVG9UYXJnZXRZIC8gdGhpcy52ZXJ0aWNhbFNwZWVkO1xyXG4gICAgeUFkaiA9IChNYXRoLnNpZ24oeUFkaikgPiAwKSA/IHlBZGogOiB5QWRqICogLTE7XHJcbiAgICB5QWRqID0gKHlBZGogPiB0aGlzLnZlcnRpY2FsU3BlZWQpID8gdGhpcy52ZXJ0aWNhbFNwZWVkIDogeUFkajtcclxuICAgIHRoaXMueSA9ICh0aGlzLnkgPiB0aGlzLnlGaW5hbCkgPyB0aGlzLnkgLSB5QWRqIDpcclxuICAgICAgICAodGhpcy55IDwgdGhpcy55RmluYWwpID8gdGhpcy55ICsgeUFkaiA6IHRoaXMueUZpbmFsO1xyXG59XHJcbmV4cG9ydHMuZW5lbXlWZXJ0aWNhbE1vdmVDYWxjdWxhdGlvbiA9IGVuZW15VmVydGljYWxNb3ZlQ2FsY3VsYXRpb247XHJcbmZ1bmN0aW9uIHNwYXduRW5lbXlMb2dpYyhFbmVteU9iamVjdCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGVuZW15U3Bhd24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGVja1NwYXduVHlwZSwgbnVtYmVyRW5lbXlQZXJTcGF3biwgaSwgZW5lbXlTaGlwLCBlbmVteVNoaXBPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja1NwYXduVHlwZSA9IHRoaXMuZ2FtZVJhbmRvbWl6ZXIobGV2ZWxEYXRhLmVuZW15UHJvYmFiaWxpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2hlY2tTcGF3blR5cGUgPD0gbGV2ZWxEYXRhLmVuZW15UmFuZG9taXplckluZGV4KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJFbmVteVBlclNwYXduID0gdGhpcy5nYW1lUmFuZG9taXplcihsZXZlbERhdGEuZW5lbXlNYXhOdW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG51bWJlckVuZW15UGVyU3Bhd247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGkgPCBsZXZlbERhdGEuZW5lbXlNYXhOdW1iZXIpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15U2hpcCA9IGVuZW15RGF0YVt0aGlzLmdhbWVSYW5kb21pemVyKGVuZW15RGF0YS5sZW5ndGgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW5lbXlTaGlwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZW15U2hpcC5kZXRhaWxzIHx8IGVuZW15U2hpcC5kZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZW15U2hpcC5kZXRhaWxzLmlzQm9zcyAmJiBwcm9jZXNzLmVudi5CT1NTX0xPQURfQVRfTEVWRUwgPT09IFwidHJ1ZVwiIHx8IGVuZW15U2hpcC5kZXRhaWxzLnN1YkJvc3MgJiYgcHJvY2Vzcy5lbnYuU1VCX0xPQURfQVRfTEVWRUwgPT09IFwidHJ1ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVNoaXAuZGV0YWlscy5pc0Jvc3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkJPU1NfTE9BRF9BVF9MRVZFTCA9IFwidHJ1ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmVteVNoaXAuZGV0YWlscy5zdWJCb3NzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LlNVQl9MT0FEX0FUX0xFVkVMID0gXCJ0cnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jcmVhdGVOZXdFbmVteSh7IGVuZW15RGF0YTogZW5lbXlTaGlwLCBFbmVteU9iamVjdDogRW5lbXlPYmplY3QgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmVteVNoaXBPYmplY3QgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZW15U2hpcE9iamVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlTaGlwT2JqZWN0LmxvYWRUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS5hbGxHYW1lRW5lbWllcyA9IHRoaXMuZ2FtZUluaXREYXRhLmFsbEdhbWVFbmVtaWVzLmNvbmNhdChlbmVteVNoaXBPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZ2FtZURhdGEsIGxldmVsRGF0YSwgZW5lbXlEYXRhLCBsZXZlbFVzZXJEYXRhLCBib3NzUHJlc2VudDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbWVJbml0RGF0YS5zaG9wQWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICBnYW1lRGF0YSA9IHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLCBsZXZlbERhdGEgPSBnYW1lRGF0YS5sZXZlbERhdGEsIGVuZW15RGF0YSA9IGdhbWVEYXRhLmVuZW15RGF0YSwgbGV2ZWxVc2VyRGF0YSA9IHRoaXMuZ2V0TGV2ZWxVc2VyRGF0YSgpLCBib3NzUHJlc2VudCA9IChsZXZlbFVzZXJEYXRhLnNvdXJjZS5sZXZlbERhdGEuYm9zc1ByZXNlbnQpID8gbGV2ZWxVc2VyRGF0YS5zb3VyY2UubGV2ZWxEYXRhLmJvc3NQcmVzZW50IDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbENoYW5nZSlcclxuICAgICAgICAgICAgICAgIGVuZW15U3Bhd24uY2FsbCh0aGlzLCB7IGxldmVsU3RhdHVzOiBcInJlZ3VsZXItbGV2ZWxcIiB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zcGF3bkVuZW15TG9naWMgPSBzcGF3bkVuZW15TG9naWM7XHJcbmZ1bmN0aW9uIGNyZWF0ZU5ld0VuZW15KF9hKSB7XHJcbiAgICB2YXIgZW5lbXlEYXRhID0gX2EuZW5lbXlEYXRhLCBFbmVteU9iamVjdCA9IF9hLkVuZW15T2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB4LCB5LCBzaGlwRGV0YWlscywgYmVoYXZpb3IsIGV4dHJhT2JqZWN0cywgX2I7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmVteURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbm8gc2hpcCBkYXRhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHggPSB3aW5kb3cuaW5uZXJXaWR0aCArIDMwMCwgeSA9IHRoaXMuZ2FtZVJhbmRvbWl6ZXIod2luZG93LmlubmVySGVpZ2h0IC0gMjAwLCAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZW5lbXlEYXRhLmRldGFpbHMpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHNoaXBEZXRhaWxzID0gZW5lbXlEYXRhLmRldGFpbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3IgPSAoc2hpcERldGFpbHMuYmVoYXZpb3IpID8gc2hpcERldGFpbHMuYmVoYXZpb3JbdGhpcy5nYW1lUmFuZG9taXplcihzaGlwRGV0YWlscy5iZWhhdmlvci5sZW5ndGgpXSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2hpcERldGFpbHMuZXh0cmFPYmplY3RzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbG9hZEV4dHJhT2JqZWN0LmNhbGwodGhpcywgc2hpcERldGFpbHMuZXh0cmFPYmplY3RzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFPYmplY3RzID0gX2I7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBFbmVteU9iamVjdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB4LCB5OiB5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g6IChzaGlwRGV0YWlscy5zeCkgPyBzaGlwRGV0YWlscy5zeCA6IDAsIHN5OiAoc2hpcERldGFpbHMuc3kpID8gc2hpcERldGFpbHMuc3kgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc1dpZHRoOiBzaGlwRGV0YWlscy5pbWFnZVdpZHRoIC8gc2hpcERldGFpbHMubnVtYmVyT2ZJdGVtcywgc0hlaWdodDogc2hpcERldGFpbHMuaW1hZ2VIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWN0dXJlc1dpZHRoOiBzaGlwRGV0YWlscy5pbWFnZVdpZHRoLCBudW1iZXJPZkl0ZW1zOiBzaGlwRGV0YWlscy5udW1iZXJPZkl0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHNoaXBEZXRhaWxzLndpZHRoLCBoZWlnaHQ6IHNoaXBEZXRhaWxzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmU6IHNoaXBEZXRhaWxzLnNraW5OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IHNoaXBEZXRhaWxzLnNwZWVkLCBpc1Nob3Q6IHNoaXBEZXRhaWxzLmlzU2hvdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc2hpcERldGFpbHMuc3RhdHVzLCBuYW1lOiBzaGlwRGV0YWlscy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVsbGV0VHlwZU51bWJlcjogc2hpcERldGFpbHMuYnVsbGV0VHlwZSwgcmFwaWRGaXJlOiBzaGlwRGV0YWlscy5yYXBpZEZpcmUsIHBvaW50c1BlclVuaXQ6IHNoaXBEZXRhaWxzLnBvaW50c1BlclVuaXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFsdGhQb2ludDogc2hpcERldGFpbHMuaGVhbHRoUG9pbnQsIGFuaW1hdGlvblN0ZXBzOiBzaGlwRGV0YWlscy5hbmltYXRpb25TdGVwcywgZGFtYWdlOiBzaGlwRGV0YWlscy5kYW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RPd25lcjogc2hpcERldGFpbHMub2JqZWN0T3duZXIsIGd1bnM6IChzaGlwRGV0YWlscy5ndW5zKSA/IHNoaXBEZXRhaWxzLmd1bnMgOiBbXSwgZXhwbG9zaW9uOiBzaGlwRGV0YWlscy5leHBsb3Npb25BbmltYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJPZlZlcnRpY2FsSXRlbXM6IHNoaXBEZXRhaWxzLm51bWJlck9mVmVydGljYWxJdGVtcywgaXNNb3ZlOiBzaGlwRGV0YWlscy5pc01vdmUsIGlzU2hvb3Q6IHNoaXBEZXRhaWxzLmlzU2hvb3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcG90RGlzdGFuY2U6IHNoaXBEZXRhaWxzLnNwb3REaXN0YW5jZSwgYmVoYXZpb3I6IGJlaGF2aW9yLCB2ZXJ0aWNhbFNwZWVkOiAoc2hpcERldGFpbHMudmVydGljYWxTcGVlZCkgPyBzaGlwRGV0YWlscy52ZXJ0aWNhbFNwZWVkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQm9zczogKHNoaXBEZXRhaWxzLmlzQm9zcykgPyBzaGlwRGV0YWlscy5pc0Jvc3MgOiBmYWxzZSwgZXh0cmFPYmplY3RzOiBleHRyYU9iamVjdHMsIGNvbGxpZGVFeHBsb3Npb25BbmltYXRpb246IHNoaXBEZXRhaWxzLmNvbGxpZGVFeHBsb3Npb25BbmltYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QW5nbGU6IChzaGlwRGV0YWlscy5kZWZhdWx0QW5nbGUpID8gc2hpcERldGFpbHMuZGVmYXVsdEFuZ2xlIDogbnVsbCwgaGl0U2hhcGU6IChzaGlwRGV0YWlscy5oaXRTaGFwZSkgPyBzaGlwRGV0YWlscy5oaXRTaGFwZSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1N1YkJvc3M6IChzaGlwRGV0YWlscy5zdWJCb3NzKSA/IHNoaXBEZXRhaWxzLnN1YkJvc3MgOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZU5ld0VuZW15ID0gY3JlYXRlTmV3RW5lbXk7XHJcbmZ1bmN0aW9uIGxvYWRFeHRyYU9iamVjdChleHRyYU9iamVjdHMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmFuZG9tT2JqZWN0LCBsb2FkUHJvYmFiaWxpdHksIG51bWJlck9mRWxlbWVudCwgcmVzdWx0LCBjYWxsT2JqZWN0LCBpO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmRvbU9iamVjdCA9IGV4dHJhT2JqZWN0c1t0aGlzLmdhbWVSYW5kb21pemVyKGV4dHJhT2JqZWN0cy5sZW5ndGgpXSwgbG9hZFByb2JhYmlsaXR5ID0gdGhpcy5nYW1lUmFuZG9taXplcihyYW5kb21PYmplY3QucmFuZG9taXplciksIG51bWJlck9mRWxlbWVudCA9IHRoaXMuZ2FtZVJhbmRvbWl6ZXIocmFuZG9tT2JqZWN0Lm1heE51bWJlciArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5kb21PYmplY3Qub2JqZWN0ICE9ICdnb2xkQ29pbicgJiYgbG9hZFByb2JhYmlsaXR5ID4gcmFuZG9tT2JqZWN0LnJhbmRvbWl6ZXIgLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5kb21PYmplY3QgPSBleHRyYU9iamVjdHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEuZ2V0RXh0cmFPYmplY3RzKHsgcmFuZG9tT2JqZWN0OiByYW5kb21PYmplY3QgfSldOyAvL2F3YWl0IGdldERhdGEoe3VybDogcHJvY2Vzcy5lbnYuSE9TVCArIFwiYXBpL2dyYXBwbGUtb2JqZWN0c1wiLCBtZXRob2Q6IFwiR0VUXCIsIGRhdGE6IG51bGwsIGhlYWRlcnM6IHsgJ2dyYXBwbGVPYmplY3QnOiByYW5kb21PYmplY3Qub2JqZWN0fX0pXHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbE9iamVjdCA9IF9hLnNlbnQoKSAvL2F3YWl0IGdldERhdGEoe3VybDogcHJvY2Vzcy5lbnYuSE9TVCArIFwiYXBpL2dyYXBwbGUtb2JqZWN0c1wiLCBtZXRob2Q6IFwiR0VUXCIsIGRhdGE6IG51bGwsIGhlYWRlcnM6IHsgJ2dyYXBwbGVPYmplY3QnOiByYW5kb21PYmplY3Qub2JqZWN0fX0pXHJcbiAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1iZXJPZkVsZW1lbnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGNhbGxPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzdWx0XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5sb2FkRXh0cmFPYmplY3QgPSBsb2FkRXh0cmFPYmplY3Q7XHJcbmZ1bmN0aW9uIGdhbWVSYW5kb21pemVyKG1heE51bWJlciwgbWluTnVtYmVyKSB7XHJcbiAgICBpZiAobWluTnVtYmVyID09PSB2b2lkIDApIHsgbWluTnVtYmVyID0gMDsgfVxyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heE51bWJlciArIG1pbk51bWJlcik7XHJcbn1cclxuZXhwb3J0cy5nYW1lUmFuZG9taXplciA9IGdhbWVSYW5kb21pemVyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZGlzcGxheU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi92aWV3L2Rpc3BsYXlNb2R1bGVzXCIpO1xyXG5mdW5jdGlvbiBsb2FkSGFuZ2FyKF9hKSB7XHJcbiAgICB2YXIgZWxlbWVudCA9IF9hLmVsZW1lbnQsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgaGFuZ2FyVGV4dEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2hhbmdhci10ZXh0XCIpO1xyXG4gICAgdmFyIHBsYXllck9iamVjdCA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Q7XHJcbiAgICB2YXIgcGxheWVyT2JqZWN0RGF0YSA9IHBsYXllck9iamVjdC5kYXRhO1xyXG4gICAgdmFyIGN0eCA9IGVsZW1lbnQuaGFuZ2FyU2hpcEFyZWEuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGVsZW1lbnQuaGFuZ2FyU2hpcEFyZWEud2lkdGggPSA2MDA7XHJcbiAgICBlbGVtZW50LmhhbmdhclNoaXBBcmVhLmhlaWdodCA9IDM1MDtcclxuICAgIGltZy5zcmMgPSBwcm9jZXNzLmVudi5IT1NUICsgcGxheWVyT2JqZWN0RGF0YS5oYW5nYXJJbWFnZTtcclxuICAgIGhhbmdhclRleHRBcmVhLmlubmVySFRNTCA9IFwiPHA+XCIgKyBwbGF5ZXJPYmplY3REYXRhLm5hbWUuc3BsaXQoJ18nKS5qb2luKCcgJykgKyBcIjwvcD5cIjtcclxuICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jcmVhdGVJbWFnZShjdHgsIGltZywgODAsIDIwLCA1MDAsIDMwMCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGF5ZXJPYmplY3REYXRhLmZpcmVzcG90Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZUNsaWNhYmxlQXJlYSh7IHBvc2l0aW9uOiBwbGF5ZXJPYmplY3REYXRhLmZpcmVzcG90W2ldLCBpbmRleDogaSwgZ3VuOiBwbGF5ZXJPYmplY3QuZGF0YS5ndW5zW2ldIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVDbGljYWJsZUFyZWEoX2EpIHtcclxuICAgICAgICB2YXIgcG9zaXRpb24gPSBfYS5wb3NpdGlvbiwgaW5kZXggPSBfYS5pbmRleCwgZ3VuID0gX2EuZ3VuO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAobWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJTZWxlY3RlZEl0ZW0gPT09IGluZGV4KSA/IFwicmdiYSgyNTUsIDIyMSwgMCwgLjcpXCIgOiBcInJnYmEoMjM0LCA3MCwgNzIsIC41KVwiO1xyXG4gICAgICAgIGN0eC5maWxsUmVjdChwb3NpdGlvbi5wb3NpdGlvblgsIHBvc2l0aW9uLnBvc2l0aW9uWSwgNjAsIDUwKTtcclxuICAgICAgICBpZiAoZ3VuKSB7XHJcbiAgICAgICAgICAgIHZhciBpbWdfMSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWdfMS5zcmMgPSBwcm9jZXNzLmVudi5IT1NUICsgZ3VuLmxvYWRJbWFnZTtcclxuICAgICAgICAgICAgaW1nXzEub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jcmVhdGVJbWFnZShjdHgsIGltZ18xLCBwb3NpdGlvbi5wb3NpdGlvblgsIHBvc2l0aW9uLnBvc2l0aW9uWSwgNjAsIDUwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJFbGVtZW50c1tpbmRleF0gPSB7XHJcbiAgICAgICAgICAgIG9iamVjdDogZ3VuLFxyXG4gICAgICAgICAgICBwb3NpdGlvblg6IHBvc2l0aW9uLnBvc2l0aW9uWCxcclxuICAgICAgICAgICAgcG9zaXRpb25ZOiBwb3NpdGlvbi5wb3NpdGlvblksXHJcbiAgICAgICAgICAgIHNoaXBYUG9zaXRpb246IDUsXHJcbiAgICAgICAgICAgIHNoaXBZUG9zaXRpb246IDEyLFxyXG4gICAgICAgICAgICB3aWR0aDogNjAsXHJcbiAgICAgICAgICAgIGhlaWdodDogNTBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMubG9hZEhhbmdhciA9IGxvYWRIYW5nYXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZ2FtZVNob3BNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9nYW1lU2hvcE1vZHVsZVwiKTtcclxudmFyIGdhbWVIYW5nYXJNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZ2FtZUhhbmdhck1vZHVsZXNcIik7XHJcbnZhciBnYW1lSW52ZW50b3J5TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2dhbWVJbnZlbnRvcnlNb2R1bGVzXCIpO1xyXG5mdW5jdGlvbiBoYW5nYXJNb3VzZU1vdmVFdmVudChfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGV2ZW50ID0gX2EuZXZlbnQ7XHJcbiAgICB2YXIgaGFuZ2FyRWxlbWVudHMgPSBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmhhbmdhckVsZW1lbnRzO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5nYXJFbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChoYW5nYXJFbGVtZW50c1tpXSkge1xyXG4gICAgICAgICAgICB2YXIgaGl0T2JqZWN0ID0gZ2FtZVNob3BNb2R1bGVfMS5zaG9wSGl0T2JqZWN0c0RldGVjdGlvbih7XHJcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsIGhhbmdhckVsZW1lbnRzOiBoYW5nYXJFbGVtZW50cywgaW5kZXg6IGlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChoaXRPYmplY3QgPT09IFwiY29sbGlzaW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaGFuZ2FyRWxlbWVudHNbaV0ub2JqZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2hvd0Rlc2NyaXB0aW9uQXJlYSh7IHNlbGVjdE9iamVjdDogaGFuZ2FyRWxlbWVudHNbaV0ub2JqZWN0LCBldmVudDogZXZlbnQsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLmhhbmdhck1vdXNlTW92ZUV2ZW50ID0gaGFuZ2FyTW91c2VNb3ZlRXZlbnQ7XHJcbmZ1bmN0aW9uIGNoZWNrSXRlbXMoX2EpIHtcclxuICAgIHZhciBpdGVtID0gX2EuaXRlbTtcclxuICAgIGlmICghaXRlbS5ncmFwcGxlUG93ZXIgfHwgIWl0ZW0pXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAoaXRlbS50eXBlID09PSAnaW52ZW50b3J5IHdlYXBvbicpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gZmluZEludEludmVudG9yeShfYSkge1xyXG4gICAgdmFyIGludmVudG9yeSA9IF9hLmludmVudG9yeSwgc2VhcmNoT2JqZWN0ID0gX2Euc2VhcmNoT2JqZWN0O1xyXG4gICAgdmFyIHJlc3VsdCA9IGludmVudG9yeS5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gJiYgc2VhcmNoT2JqZWN0KVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBzZWFyY2hPYmplY3QubmFtZTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgZGF0YU9iamVjdDogcmVzdWx0LFxyXG4gICAgICAgICAgICBpbmRleDogaW52ZW50b3J5LmluZGV4T2YocmVzdWx0KVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLmZpbmRJbnRJbnZlbnRvcnkgPSBmaW5kSW50SW52ZW50b3J5O1xyXG5mdW5jdGlvbiBpbnZlbnRvcnlDb2xpc2lvbkV2ZW50KF9hKSB7XHJcbiAgICB2YXIgaGl0T2JqZWN0ID0gX2EuaGl0T2JqZWN0LCBwbGF5ZXJPYmplY3REYXRhID0gX2EucGxheWVyT2JqZWN0RGF0YSwgc2hvcEFyZWFJdGVtcyA9IF9hLnNob3BBcmVhSXRlbXMsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHBsYXllck9iamVjdCA9IF9hLnBsYXllck9iamVjdCwgaW5kZXggPSBfYS5pbmRleDtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2hlY2tTdGF0dXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaGl0T2JqZWN0ID09PSBcImNvbGxpc2lvblwiKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllck9iamVjdERhdGEuZ3Vuc1tpbmRleF0gJiYgKCFzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSB8fCBzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSAhPSAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSA9IChzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSA9PSBpbmRleCkgPyBudWxsIDogaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gfHwgc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gPT09IDApKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja1N0YXR1cyA9IGNoZWNrSXRlbXMoeyBpdGVtOiBwbGF5ZXJPYmplY3REYXRhLmludmVudG9yeVtzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbV0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja1N0YXR1cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lSW52ZW50b3J5TW9kdWxlc18xLmFzc2lnbkVmZmVjdHNUb1NoaXAoeyBwbGF5ZXJPYmplY3Q6IHBsYXllck9iamVjdCwgaXRlbTogcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnlbc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW1dIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZUludmVudG9yeU1vZHVsZXNfMS5wdXRJdGVtVG9TdG9yYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ291dHNpZGUtc3RvcmFnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dEluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2U6IHBsYXllck9iamVjdERhdGEuaW52ZW50b3J5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFN0b3JhZ2U6IHBsYXllck9iamVjdERhdGEuZ3VucyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSB8fCBzaG9wQXJlYUl0ZW1zLmhhbmdhclNlbGVjdGVkSXRlbSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnB1dEl0ZW1Ub1N0b3JhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2luc2lkZS1zdG9yYWdlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dEluZGV4OiBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IHNob3BBcmVhSXRlbXMuaGFuZ2FyU2VsZWN0ZWRJdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZTogcGxheWVyT2JqZWN0RGF0YS5ndW5zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRTdG9yYWdlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBnYW1lSGFuZ2FyTW9kdWxlc18xLmxvYWRIYW5nYXIoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmludmVudG9yeUNvbGlzaW9uRXZlbnQgPSBpbnZlbnRvcnlDb2xpc2lvbkV2ZW50O1xyXG5mdW5jdGlvbiBzYWxlQm94RXZlbnQoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgdmFyIHBsYXllck9iamVjdERhdGEgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LmRhdGE7XHJcbiAgICB2YXIgc2hvcEFyZWFJdGVtcyA9IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW07XHJcbiAgICBpZiAoKCFzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSAmJiBzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSAhPSAwKSAmJlxyXG4gICAgICAgICghc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW0gJiYgc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW0gIT0gMCkpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9TQUxFX1dJTkRPVyA9ICd0cnVlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfQUNUSVZFX1dJTkRPVyA9ICd0cnVlJztcclxuICAgIGlmIChzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSB8fCBzaG9wQXJlYUl0ZW1zLmludmVudG9yeVNlbGVjdGVkSXRlbSA9PT0gMCkge1xyXG4gICAgICAgIHZhciBpbnZlbnRvcnlJdGVtID0gcGxheWVyT2JqZWN0RGF0YS5pbnZlbnRvcnlbc2hvcEFyZWFJdGVtcy5pbnZlbnRvcnlTZWxlY3RlZEl0ZW1dO1xyXG4gICAgICAgIHZhciBzYWxlUHJpY2UgPSAoaW52ZW50b3J5SXRlbSkgPyBpbnZlbnRvcnlJdGVtLnByaWNlIDogMDtcclxuICAgICAgICB2YXIgZmluYWxQcmljZVBlcmNlbnQgPSBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNhbGVQZXJjZW50QWRkVG9QcmljZSh7IHByaWNlOiBzYWxlUHJpY2UsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICBpZiAoIWludmVudG9yeUl0ZW0pXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBnYW1lU2hvcE1vZHVsZV8xLmxlYXZlU2hvcCh7IGVsZW1lbnQ6IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgIHRleHQ6IChmaW5hbFByaWNlUGVyY2VudCkgPyBcIllvdSB3YW50IHRvIHNhbGUgXCIgKyAoKGludmVudG9yeUl0ZW0udGl0bGUpID8gaW52ZW50b3J5SXRlbS50aXRsZSA6ICd0aGlzIGl0ZW0/JykgKyBcIlxcbiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBcIiArIGZpbmFsUHJpY2VQZXJjZW50ICsgXCIgY3JlZGl0c1wiIDogXCJZb3Ugd2FudCB0byBkZXN0cm95IHRoaXMgaXRlbT9cIiB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHNob3BBcmVhSXRlbXMuaGFuZ2FyU2VsZWN0ZWRJdGVtIHx8IHNob3BBcmVhSXRlbXMuaGFuZ2FyU2VsZWN0ZWRJdGVtID09PSAwKSB7XHJcbiAgICAgICAgdmFyIGhhbmdhckl0ZW0gPSBwbGF5ZXJPYmplY3REYXRhLmd1bnNbc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW1dO1xyXG4gICAgICAgIHZhciBzYWxlUHJpY2UgPSBwbGF5ZXJPYmplY3REYXRhLmd1bnNbc2hvcEFyZWFJdGVtcy5oYW5nYXJTZWxlY3RlZEl0ZW1dLnByaWNlO1xyXG4gICAgICAgIGdhbWVTaG9wTW9kdWxlXzEubGVhdmVTaG9wKHsgZWxlbWVudDogbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEsXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgdGV4dDogXCJZb3Ugd2FudCB0byBzYWxlIFwiICsgKChoYW5nYXJJdGVtKSA/IGhhbmdhckl0ZW0udGl0bGUgOiAndGhpcyBpdGVtPycpICsgXCJcXG4gICAgICAgICAgICAgICAgICAgIGZvciB0aGUgXCIgKyBnYW1lSW52ZW50b3J5TW9kdWxlc18xLnNhbGVQZXJjZW50QWRkVG9QcmljZSh7IHByaWNlOiBzYWxlUHJpY2UsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KSArIFwiIGNyZWRpdHNcIiB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNhbGVCb3hFdmVudCA9IHNhbGVCb3hFdmVudDtcclxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xNSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcy5sZW5ndGggPyBpdGVyYXRlZXMgOiBbaWRlbnRpdHldLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciBjcml0ZXJpYSA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgJ2NyaXRlcmlhJzogY3JpdGVyaWEsICdpbmRleCc6ICsraW5kZXgsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnBpY2tgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2sob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGhhc0luKG9iamVjdCwgcGF0aCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiAgYF8ucGlja0J5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXRoID0gcGF0aHNbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgcGF0aCkpIHtcbiAgICAgICAgICBiYXNlU2V0KHJlc3VsdCwgY2FzdFBhdGgocGF0aCwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQWxsQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAgICAgKiBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXhPZiA9IGNvbXBhcmF0b3IgPyBiYXNlSW5kZXhPZldpdGggOiBiYXNlSW5kZXhPZixcbiAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgc2VlbiA9IGFycmF5O1xuXG4gICAgICBpZiAoYXJyYXkgPT09IHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMgPSBjb3B5QXJyYXkodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGZyb21JbmRleCA9IDAsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tSW5kZXggPSBpbmRleE9mKHNlZW4sIGNvbXB1dGVkLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpKSA+IC0xKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IGFycmF5KSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChzZWVuLCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogaW5kZXhlcyBvciBjYXB0dXJpbmcgdGhlIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gaW5kZXhlcyBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID8gaW5kZXhlcy5sZW5ndGggOiAwLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGlmIChsZW5ndGggPT0gbGFzdEluZGV4IHx8IGluZGV4ICE9PSBwcmV2aW91cykge1xuICAgICAgICAgIHZhciBwcmV2aW91cyA9IGluZGV4O1xuICAgICAgICAgIGlmIChpc0luZGV4KGluZGV4KSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGluZGV4LCAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZVVuc2V0KGFycmF5LCBpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZG9tYCB3aXRob3V0IHN1cHBvcnQgZm9yIHJldHVybmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dlciBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKSB7XG4gICAgICByZXR1cm4gbG93ZXIgKyBuYXRpdmVGbG9vcihuYXRpdmVSYW5kb20oKSAqICh1cHBlciAtIGxvd2VyICsgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICAgICAqIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVwZWF0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlcGVhdChzdHJpbmcsIG4pIHtcbiAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgIGlmICghc3RyaW5nIHx8IG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBMZXZlcmFnZSB0aGUgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcgYWxnb3JpdGhtIGZvciBhIGZhc3RlciByZXBlYXQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXhwb25lbnRpYXRpb25fYnlfc3F1YXJpbmcgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG4gJSAyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICBuID0gbmF0aXZlRmxvb3IobiAvIDIpO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgIHN0cmluZyArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKG4pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYXJyYXlTYW1wbGUodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVTaXplYCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4pIHtcbiAgICAgIHZhciBhcnJheSA9IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihhcnJheSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMSxcbiAgICAgICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgICAgIHdoaWxlIChuZXN0ZWQgIT0gbnVsbCAmJiArK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSksXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChpbmRleCAhPSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuZXN0ZWRba2V5XTtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaXNPYmplY3Qob2JqVmFsdWUpXG4gICAgICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICAgICAgOiAoaXNJbmRleChwYXRoW2luZGV4ICsgMV0pID8gW10gOiB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzc2lnblZhbHVlKG5lc3RlZCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG5lc3RlZCA9IG5lc3RlZFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0RGF0YWAgd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0RGF0YSA9ICFtZXRhTWFwID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBkYXRhKSB7XG4gICAgICBtZXRhTWFwLnNldChmdW5jLCBkYXRhKTtcbiAgICAgIHJldHVybiBmdW5jO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAgICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNodWZmbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZih2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICAgICAgc3RhcnQgPj4+PSAwO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBhcnJheVtpbmRleCArIHN0YXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29tZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiAhcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhgIHdoaWNoXG4gICAgICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT09IHZhbHVlICYmIGhpZ2ggPD0gSEFMRl9NQVhfQVJSQVlfTEVOR1RIKSB7XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBhcnJheVttaWRdO1xuXG4gICAgICAgICAgaWYgKGNvbXB1dGVkICE9PSBudWxsICYmICFpc1N5bWJvbChjb21wdXRlZCkgJiZcbiAgICAgICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpZGVudGl0eSwgcmV0SGlnaGVzdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkSW5kZXhCeWAgYW5kIGBfLnNvcnRlZExhc3RJbmRleEJ5YFxuICAgICAqIHdoaWNoIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZVxuICAgICAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiIG9yIFwiY29uc3RydWN0b3JcIi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gd2l0aCBsb29rdXAgKGluIGNhc2Ugb2YgZS5nLiBwcm90b3R5cGUgcG9sbHV0aW9uKSwgYW5kIHN0cmlwIG5ld2xpbmVzIGlmIGFueS5cbiAgICAgIC8vIEEgbmV3bGluZSB3b3VsZG4ndCBiZSBhIHZhbGlkIHNvdXJjZVVSTCBhbnl3YXksIGFuZCBpdCdkIGVuYWJsZSBjb2RlIGluamVjdGlvbi5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvW1xcclxcbl0vZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICAvLyBMaWtlIHdpdGggc291cmNlVVJMLCB3ZSB0YWtlIGNhcmUgdG8gbm90IGNoZWNrIHRoZSBvcHRpb24ncyBwcm90b3R5cGUsXG4gICAgICAvLyBhcyB0aGlzIGNvbmZpZ3VyYXRpb24gaXMgYSBjb2RlIGluamVjdGlvbiB2ZWN0b3IuXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbUVuZCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8vIEFwcHJvYWNoOlxuLy9cbi8vIDEuIEdldCB0aGUgbWluaW1hdGNoIHNldFxuLy8gMi4gRm9yIGVhY2ggcGF0dGVybiBpbiB0aGUgc2V0LCBQUk9DRVNTKHBhdHRlcm4sIGZhbHNlKVxuLy8gMy4gU3RvcmUgbWF0Y2hlcyBwZXItc2V0LCB0aGVuIHVuaXEgdGhlbVxuLy9cbi8vIFBST0NFU1MocGF0dGVybiwgaW5HbG9iU3Rhcilcbi8vIEdldCB0aGUgZmlyc3QgW25dIGl0ZW1zIGZyb20gcGF0dGVybiB0aGF0IGFyZSBhbGwgc3RyaW5nc1xuLy8gSm9pbiB0aGVzZSB0b2dldGhlci4gIFRoaXMgaXMgUFJFRklYLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtb3JlIHJlbWFpbmluZywgdGhlbiBzdGF0KFBSRUZJWCkgYW5kXG4vLyAgIGFkZCB0byBtYXRjaGVzIGlmIGl0IHN1Y2NlZWRzLiAgRU5ELlxuLy9cbi8vIElmIGluR2xvYlN0YXIgYW5kIFBSRUZJWCBpcyBzeW1saW5rIGFuZCBwb2ludHMgdG8gZGlyXG4vLyAgIHNldCBFTlRSSUVTID0gW11cbi8vIGVsc2UgcmVhZGRpcihQUkVGSVgpIGFzIEVOVFJJRVNcbi8vICAgSWYgZmFpbCwgRU5EXG4vL1xuLy8gd2l0aCBFTlRSSUVTXG4vLyAgIElmIHBhdHRlcm5bbl0gaXMgR0xPQlNUQVJcbi8vICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGdsb2JzdGFyIG1hdGNoIGlzIGVtcHR5XG4vLyAgICAgLy8gYnkgcHJ1bmluZyBpdCBvdXQsIGFuZCB0ZXN0aW5nIHRoZSByZXN1bHRpbmcgcGF0dGVyblxuLy8gICAgIFBST0NFU1MocGF0dGVyblswLi5uXSArIHBhdHRlcm5bbisxIC4uICRdLCBmYWxzZSlcbi8vICAgICAvLyBoYW5kbGUgb3RoZXIgY2FzZXMuXG4vLyAgICAgZm9yIEVOVFJZIGluIEVOVFJJRVMgKG5vdCBkb3RmaWxlcylcbi8vICAgICAgIC8vIGF0dGFjaCBnbG9ic3RhciArIHRhaWwgb250byB0aGUgZW50cnlcbi8vICAgICAgIC8vIE1hcmsgdGhhdCB0aGlzIGVudHJ5IGlzIGEgZ2xvYnN0YXIgbWF0Y2hcbi8vICAgICAgIFBST0NFU1MocGF0dGVyblswLi5uXSArIEVOVFJZICsgcGF0dGVybltuIC4uICRdLCB0cnVlKVxuLy9cbi8vICAgZWxzZSAvLyBub3QgZ2xvYnN0YXJcbi8vICAgICBmb3IgRU5UUlkgaW4gRU5UUklFUyAobm90IGRvdGZpbGVzLCB1bmxlc3MgcGF0dGVybltuXSBpcyBkb3QpXG4vLyAgICAgICBUZXN0IEVOVFJZIGFnYWluc3QgcGF0dGVybltuXVxuLy8gICAgICAgSWYgZmFpbHMsIGNvbnRpbnVlXG4vLyAgICAgICBJZiBwYXNzZXMsIFBST0NFU1MocGF0dGVyblswLi5uXSArIGl0ZW0gKyBwYXR0ZXJuW24rMSAuLiAkXSlcbi8vXG4vLyBDYXZlYXQ6XG4vLyAgIENhY2hlIGFsbCBzdGF0cyBhbmQgcmVhZGRpcnMgcmVzdWx0cyB0byBtaW5pbWl6ZSBzeXNjYWxsLiAgU2luY2UgYWxsXG4vLyAgIHdlIGV2ZXIgY2FyZSBhYm91dCBpcyBleGlzdGVuY2UgYW5kIGRpcmVjdG9yeS1uZXNzLCB3ZSBjYW4ganVzdCBrZWVwXG4vLyAgIGB0cnVlYCBmb3IgZmlsZXMsIGFuZCBbY2hpbGRyZW4sLi4uXSBmb3IgZGlyZWN0b3JpZXMsIG9yIGBmYWxzZWAgZm9yXG4vLyAgIHRoaW5ncyB0aGF0IGRvbid0IGV4aXN0LlxuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JcblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxudmFyIHJwID0gcmVxdWlyZSgnZnMucmVhbHBhdGgnKVxudmFyIG1pbmltYXRjaCA9IHJlcXVpcmUoJ21pbmltYXRjaCcpXG52YXIgTWluaW1hdGNoID0gbWluaW1hdGNoLk1pbmltYXRjaFxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgaXNBYnNvbHV0ZSA9IHJlcXVpcmUoJ3BhdGgtaXMtYWJzb2x1dGUnKVxudmFyIGdsb2JTeW5jID0gcmVxdWlyZSgnLi9zeW5jLmpzJylcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbi5qcycpXG52YXIgYWxwaGFzb3J0ID0gY29tbW9uLmFscGhhc29ydFxudmFyIGFscGhhc29ydGkgPSBjb21tb24uYWxwaGFzb3J0aVxudmFyIHNldG9wdHMgPSBjb21tb24uc2V0b3B0c1xudmFyIG93blByb3AgPSBjb21tb24ub3duUHJvcFxudmFyIGluZmxpZ2h0ID0gcmVxdWlyZSgnaW5mbGlnaHQnKVxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcbnZhciBjaGlsZHJlbklnbm9yZWQgPSBjb21tb24uY2hpbGRyZW5JZ25vcmVkXG52YXIgaXNJZ25vcmVkID0gY29tbW9uLmlzSWdub3JlZFxuXG52YXIgb25jZSA9IHJlcXVpcmUoJ29uY2UnKVxuXG5mdW5jdGlvbiBnbG9iIChwYXR0ZXJuLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIGNiID0gb3B0aW9ucywgb3B0aW9ucyA9IHt9XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG5cbiAgaWYgKG9wdGlvbnMuc3luYykge1xuICAgIGlmIChjYilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGxiYWNrIHByb3ZpZGVkIHRvIHN5bmMgZ2xvYicpXG4gICAgcmV0dXJuIGdsb2JTeW5jKHBhdHRlcm4sIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gbmV3IEdsb2IocGF0dGVybiwgb3B0aW9ucywgY2IpXG59XG5cbmdsb2Iuc3luYyA9IGdsb2JTeW5jXG52YXIgR2xvYlN5bmMgPSBnbG9iLkdsb2JTeW5jID0gZ2xvYlN5bmMuR2xvYlN5bmNcblxuLy8gb2xkIGFwaSBzdXJmYWNlXG5nbG9iLmdsb2IgPSBnbG9iXG5cbmZ1bmN0aW9uIGV4dGVuZCAob3JpZ2luLCBhZGQpIHtcbiAgaWYgKGFkZCA9PT0gbnVsbCB8fCB0eXBlb2YgYWRkICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvcmlnaW5cbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKVxuICB2YXIgaSA9IGtleXMubGVuZ3RoXG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV1cbiAgfVxuICByZXR1cm4gb3JpZ2luXG59XG5cbmdsb2IuaGFzTWFnaWMgPSBmdW5jdGlvbiAocGF0dGVybiwgb3B0aW9uc18pIHtcbiAgdmFyIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnNfKVxuICBvcHRpb25zLm5vcHJvY2VzcyA9IHRydWVcblxuICB2YXIgZyA9IG5ldyBHbG9iKHBhdHRlcm4sIG9wdGlvbnMpXG4gIHZhciBzZXQgPSBnLm1pbmltYXRjaC5zZXRcblxuICBpZiAoIXBhdHRlcm4pXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKHNldC5sZW5ndGggPiAxKVxuICAgIHJldHVybiB0cnVlXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCBzZXRbMF0ubGVuZ3RoOyBqKyspIHtcbiAgICBpZiAodHlwZW9mIHNldFswXVtqXSAhPT0gJ3N0cmluZycpXG4gICAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmdsb2IuR2xvYiA9IEdsb2JcbmluaGVyaXRzKEdsb2IsIEVFKVxuZnVuY3Rpb24gR2xvYiAocGF0dGVybiwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IG51bGxcbiAgfVxuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc3luYykge1xuICAgIGlmIChjYilcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGxiYWNrIHByb3ZpZGVkIHRvIHN5bmMgZ2xvYicpXG4gICAgcmV0dXJuIG5ldyBHbG9iU3luYyhwYXR0ZXJuLCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEdsb2IpKVxuICAgIHJldHVybiBuZXcgR2xvYihwYXR0ZXJuLCBvcHRpb25zLCBjYilcblxuICBzZXRvcHRzKHRoaXMsIHBhdHRlcm4sIG9wdGlvbnMpXG4gIHRoaXMuX2RpZFJlYWxQYXRoID0gZmFsc2VcblxuICAvLyBwcm9jZXNzIGVhY2ggcGF0dGVybiBpbiB0aGUgbWluaW1hdGNoIHNldFxuICB2YXIgbiA9IHRoaXMubWluaW1hdGNoLnNldC5sZW5ndGhcblxuICAvLyBUaGUgbWF0Y2hlcyBhcmUgc3RvcmVkIGFzIHs8ZmlsZW5hbWU+OiB0cnVlLC4uLn0gc28gdGhhdFxuICAvLyBkdXBsaWNhdGVzIGFyZSBhdXRvbWFnaWNhbGx5IHBydW5lZC5cbiAgLy8gTGF0ZXIsIHdlIGRvIGFuIE9iamVjdC5rZXlzKCkgb24gdGhlc2UuXG4gIC8vIEtlZXAgdGhlbSBhcyBhIGxpc3Qgc28gd2UgY2FuIGZpbGwgaW4gd2hlbiBub251bGwgaXMgc2V0LlxuICB0aGlzLm1hdGNoZXMgPSBuZXcgQXJyYXkobilcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBvbmNlKGNiKVxuICAgIHRoaXMub24oJ2Vycm9yJywgY2IpXG4gICAgdGhpcy5vbignZW5kJywgZnVuY3Rpb24gKG1hdGNoZXMpIHtcbiAgICAgIGNiKG51bGwsIG1hdGNoZXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICB0aGlzLl9wcm9jZXNzaW5nID0gMFxuXG4gIHRoaXMuX2VtaXRRdWV1ZSA9IFtdXG4gIHRoaXMuX3Byb2Nlc3NRdWV1ZSA9IFtdXG4gIHRoaXMucGF1c2VkID0gZmFsc2VcblxuICBpZiAodGhpcy5ub3Byb2Nlc3MpXG4gICAgcmV0dXJuIHRoaXNcblxuICBpZiAobiA9PT0gMClcbiAgICByZXR1cm4gZG9uZSgpXG5cbiAgdmFyIHN5bmMgPSB0cnVlXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSArKykge1xuICAgIHRoaXMuX3Byb2Nlc3ModGhpcy5taW5pbWF0Y2guc2V0W2ldLCBpLCBmYWxzZSwgZG9uZSlcbiAgfVxuICBzeW5jID0gZmFsc2VcblxuICBmdW5jdGlvbiBkb25lICgpIHtcbiAgICAtLXNlbGYuX3Byb2Nlc3NpbmdcbiAgICBpZiAoc2VsZi5fcHJvY2Vzc2luZyA8PSAwKSB7XG4gICAgICBpZiAoc3luYykge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9maW5pc2goKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fZmluaXNoKClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuR2xvYi5wcm90b3R5cGUuX2ZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBHbG9iKVxuICBpZiAodGhpcy5hYm9ydGVkKVxuICAgIHJldHVyblxuXG4gIGlmICh0aGlzLnJlYWxwYXRoICYmICF0aGlzLl9kaWRSZWFscGF0aClcbiAgICByZXR1cm4gdGhpcy5fcmVhbHBhdGgoKVxuXG4gIGNvbW1vbi5maW5pc2godGhpcylcbiAgdGhpcy5lbWl0KCdlbmQnLCB0aGlzLmZvdW5kKVxufVxuXG5HbG9iLnByb3RvdHlwZS5fcmVhbHBhdGggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kaWRSZWFscGF0aClcbiAgICByZXR1cm5cblxuICB0aGlzLl9kaWRSZWFscGF0aCA9IHRydWVcblxuICB2YXIgbiA9IHRoaXMubWF0Y2hlcy5sZW5ndGhcbiAgaWYgKG4gPT09IDApXG4gICAgcmV0dXJuIHRoaXMuX2ZpbmlzaCgpXG5cbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYXRjaGVzLmxlbmd0aDsgaSsrKVxuICAgIHRoaXMuX3JlYWxwYXRoU2V0KGksIG5leHQpXG5cbiAgZnVuY3Rpb24gbmV4dCAoKSB7XG4gICAgaWYgKC0tbiA9PT0gMClcbiAgICAgIHNlbGYuX2ZpbmlzaCgpXG4gIH1cbn1cblxuR2xvYi5wcm90b3R5cGUuX3JlYWxwYXRoU2V0ID0gZnVuY3Rpb24gKGluZGV4LCBjYikge1xuICB2YXIgbWF0Y2hzZXQgPSB0aGlzLm1hdGNoZXNbaW5kZXhdXG4gIGlmICghbWF0Y2hzZXQpXG4gICAgcmV0dXJuIGNiKClcblxuICB2YXIgZm91bmQgPSBPYmplY3Qua2V5cyhtYXRjaHNldClcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBuID0gZm91bmQubGVuZ3RoXG5cbiAgaWYgKG4gPT09IDApXG4gICAgcmV0dXJuIGNiKClcblxuICB2YXIgc2V0ID0gdGhpcy5tYXRjaGVzW2luZGV4XSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgZm91bmQuZm9yRWFjaChmdW5jdGlvbiAocCwgaSkge1xuICAgIC8vIElmIHRoZXJlJ3MgYSBwcm9ibGVtIHdpdGggdGhlIHN0YXQsIHRoZW4gaXQgbWVhbnMgdGhhdFxuICAgIC8vIG9uZSBvciBtb3JlIG9mIHRoZSBsaW5rcyBpbiB0aGUgcmVhbHBhdGggY291bGRuJ3QgYmVcbiAgICAvLyByZXNvbHZlZC4gIGp1c3QgcmV0dXJuIHRoZSBhYnMgdmFsdWUgaW4gdGhhdCBjYXNlLlxuICAgIHAgPSBzZWxmLl9tYWtlQWJzKHApXG4gICAgcnAucmVhbHBhdGgocCwgc2VsZi5yZWFscGF0aENhY2hlLCBmdW5jdGlvbiAoZXIsIHJlYWwpIHtcbiAgICAgIGlmICghZXIpXG4gICAgICAgIHNldFtyZWFsXSA9IHRydWVcbiAgICAgIGVsc2UgaWYgKGVyLnN5c2NhbGwgPT09ICdzdGF0JylcbiAgICAgICAgc2V0W3BdID0gdHJ1ZVxuICAgICAgZWxzZVxuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXIpIC8vIHNyc2x5IHd0ZiByaWdodCBoZXJlXG5cbiAgICAgIGlmICgtLW4gPT09IDApIHtcbiAgICAgICAgc2VsZi5tYXRjaGVzW2luZGV4XSA9IHNldFxuICAgICAgICBjYigpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxuR2xvYi5wcm90b3R5cGUuX21hcmsgPSBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gY29tbW9uLm1hcmsodGhpcywgcClcbn1cblxuR2xvYi5wcm90b3R5cGUuX21ha2VBYnMgPSBmdW5jdGlvbiAoZikge1xuICByZXR1cm4gY29tbW9uLm1ha2VBYnModGhpcywgZilcbn1cblxuR2xvYi5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYWJvcnRlZCA9IHRydWVcbiAgdGhpcy5lbWl0KCdhYm9ydCcpXG59XG5cbkdsb2IucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlXG4gICAgdGhpcy5lbWl0KCdwYXVzZScpXG4gIH1cbn1cblxuR2xvYi5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYXVzZWQpIHtcbiAgICB0aGlzLmVtaXQoJ3Jlc3VtZScpXG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZVxuICAgIGlmICh0aGlzLl9lbWl0UXVldWUubGVuZ3RoKSB7XG4gICAgICB2YXIgZXEgPSB0aGlzLl9lbWl0UXVldWUuc2xpY2UoMClcbiAgICAgIHRoaXMuX2VtaXRRdWV1ZS5sZW5ndGggPSAwXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVxLmxlbmd0aDsgaSArKykge1xuICAgICAgICB2YXIgZSA9IGVxW2ldXG4gICAgICAgIHRoaXMuX2VtaXRNYXRjaChlWzBdLCBlWzFdKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fcHJvY2Vzc1F1ZXVlLmxlbmd0aCkge1xuICAgICAgdmFyIHBxID0gdGhpcy5fcHJvY2Vzc1F1ZXVlLnNsaWNlKDApXG4gICAgICB0aGlzLl9wcm9jZXNzUXVldWUubGVuZ3RoID0gMFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcS5sZW5ndGg7IGkgKyspIHtcbiAgICAgICAgdmFyIHAgPSBwcVtpXVxuICAgICAgICB0aGlzLl9wcm9jZXNzaW5nLS1cbiAgICAgICAgdGhpcy5fcHJvY2VzcyhwWzBdLCBwWzFdLCBwWzJdLCBwWzNdKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5HbG9iLnByb3RvdHlwZS5fcHJvY2VzcyA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBpbmRleCwgaW5HbG9iU3RhciwgY2IpIHtcbiAgYXNzZXJ0KHRoaXMgaW5zdGFuY2VvZiBHbG9iKVxuICBhc3NlcnQodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKVxuXG4gIGlmICh0aGlzLmFib3J0ZWQpXG4gICAgcmV0dXJuXG5cbiAgdGhpcy5fcHJvY2Vzc2luZysrXG4gIGlmICh0aGlzLnBhdXNlZCkge1xuICAgIHRoaXMuX3Byb2Nlc3NRdWV1ZS5wdXNoKFtwYXR0ZXJuLCBpbmRleCwgaW5HbG9iU3RhciwgY2JdKVxuICAgIHJldHVyblxuICB9XG5cbiAgLy9jb25zb2xlLmVycm9yKCdQUk9DRVNTICVkJywgdGhpcy5fcHJvY2Vzc2luZywgcGF0dGVybilcblxuICAvLyBHZXQgdGhlIGZpcnN0IFtuXSBwYXJ0cyBvZiBwYXR0ZXJuIHRoYXQgYXJlIGFsbCBzdHJpbmdzLlxuICB2YXIgbiA9IDBcbiAgd2hpbGUgKHR5cGVvZiBwYXR0ZXJuW25dID09PSAnc3RyaW5nJykge1xuICAgIG4gKytcbiAgfVxuICAvLyBub3cgbiBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IG9uZSB0aGF0IGlzICpub3QqIGEgc3RyaW5nLlxuXG4gIC8vIHNlZSBpZiB0aGVyZSdzIGFueXRoaW5nIGVsc2VcbiAgdmFyIHByZWZpeFxuICBzd2l0Y2ggKG4pIHtcbiAgICAvLyBpZiBub3QsIHRoZW4gdGhpcyBpcyByYXRoZXIgc2ltcGxlXG4gICAgY2FzZSBwYXR0ZXJuLmxlbmd0aDpcbiAgICAgIHRoaXMuX3Byb2Nlc3NTaW1wbGUocGF0dGVybi5qb2luKCcvJyksIGluZGV4LCBjYilcbiAgICAgIHJldHVyblxuXG4gICAgY2FzZSAwOlxuICAgICAgLy8gcGF0dGVybiAqc3RhcnRzKiB3aXRoIHNvbWUgbm9uLXRyaXZpYWwgaXRlbS5cbiAgICAgIC8vIGdvaW5nIHRvIHJlYWRkaXIoY3dkKSwgYnV0IG5vdCBpbmNsdWRlIHRoZSBwcmVmaXggaW4gbWF0Y2hlcy5cbiAgICAgIHByZWZpeCA9IG51bGxcbiAgICAgIGJyZWFrXG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gcGF0dGVybiBoYXMgc29tZSBzdHJpbmcgYml0cyBpbiB0aGUgZnJvbnQuXG4gICAgICAvLyB3aGF0ZXZlciBpdCBzdGFydHMgd2l0aCwgd2hldGhlciB0aGF0J3MgJ2Fic29sdXRlJyBsaWtlIC9mb28vYmFyLFxuICAgICAgLy8gb3IgJ3JlbGF0aXZlJyBsaWtlICcuLi9iYXonXG4gICAgICBwcmVmaXggPSBwYXR0ZXJuLnNsaWNlKDAsIG4pLmpvaW4oJy8nKVxuICAgICAgYnJlYWtcbiAgfVxuXG4gIHZhciByZW1haW4gPSBwYXR0ZXJuLnNsaWNlKG4pXG5cbiAgLy8gZ2V0IHRoZSBsaXN0IG9mIGVudHJpZXMuXG4gIHZhciByZWFkXG4gIGlmIChwcmVmaXggPT09IG51bGwpXG4gICAgcmVhZCA9ICcuJ1xuICBlbHNlIGlmIChpc0Fic29sdXRlKHByZWZpeCkgfHwgaXNBYnNvbHV0ZShwYXR0ZXJuLmpvaW4oJy8nKSkpIHtcbiAgICBpZiAoIXByZWZpeCB8fCAhaXNBYnNvbHV0ZShwcmVmaXgpKVxuICAgICAgcHJlZml4ID0gJy8nICsgcHJlZml4XG4gICAgcmVhZCA9IHByZWZpeFxuICB9IGVsc2VcbiAgICByZWFkID0gcHJlZml4XG5cbiAgdmFyIGFicyA9IHRoaXMuX21ha2VBYnMocmVhZClcblxuICAvL2lmIGlnbm9yZWQsIHNraXAgX3Byb2Nlc3NpbmdcbiAgaWYgKGNoaWxkcmVuSWdub3JlZCh0aGlzLCByZWFkKSlcbiAgICByZXR1cm4gY2IoKVxuXG4gIHZhciBpc0dsb2JTdGFyID0gcmVtYWluWzBdID09PSBtaW5pbWF0Y2guR0xPQlNUQVJcbiAgaWYgKGlzR2xvYlN0YXIpXG4gICAgdGhpcy5fcHJvY2Vzc0dsb2JTdGFyKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBjYilcbiAgZWxzZVxuICAgIHRoaXMuX3Byb2Nlc3NSZWFkZGlyKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBjYilcbn1cblxuR2xvYi5wcm90b3R5cGUuX3Byb2Nlc3NSZWFkZGlyID0gZnVuY3Rpb24gKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdGhpcy5fcmVhZGRpcihhYnMsIGluR2xvYlN0YXIsIGZ1bmN0aW9uIChlciwgZW50cmllcykge1xuICAgIHJldHVybiBzZWxmLl9wcm9jZXNzUmVhZGRpcjIocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIsIGVudHJpZXMsIGNiKVxuICB9KVxufVxuXG5HbG9iLnByb3RvdHlwZS5fcHJvY2Vzc1JlYWRkaXIyID0gZnVuY3Rpb24gKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBlbnRyaWVzLCBjYikge1xuXG4gIC8vIGlmIHRoZSBhYnMgaXNuJ3QgYSBkaXIsIHRoZW4gbm90aGluZyBjYW4gbWF0Y2ghXG4gIGlmICghZW50cmllcylcbiAgICByZXR1cm4gY2IoKVxuXG4gIC8vIEl0IHdpbGwgb25seSBtYXRjaCBkb3QgZW50cmllcyBpZiBpdCBzdGFydHMgd2l0aCBhIGRvdCwgb3IgaWZcbiAgLy8gZG90IGlzIHNldC4gIFN0dWZmIGxpa2UgQCguZm9vfC5iYXIpIGlzbid0IGFsbG93ZWQuXG4gIHZhciBwbiA9IHJlbWFpblswXVxuICB2YXIgbmVnYXRlID0gISF0aGlzLm1pbmltYXRjaC5uZWdhdGVcbiAgdmFyIHJhd0dsb2IgPSBwbi5fZ2xvYlxuICB2YXIgZG90T2sgPSB0aGlzLmRvdCB8fCByYXdHbG9iLmNoYXJBdCgwKSA9PT0gJy4nXG5cbiAgdmFyIG1hdGNoZWRFbnRyaWVzID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGUgPSBlbnRyaWVzW2ldXG4gICAgaWYgKGUuY2hhckF0KDApICE9PSAnLicgfHwgZG90T2spIHtcbiAgICAgIHZhciBtXG4gICAgICBpZiAobmVnYXRlICYmICFwcmVmaXgpIHtcbiAgICAgICAgbSA9ICFlLm1hdGNoKHBuKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbSA9IGUubWF0Y2gocG4pXG4gICAgICB9XG4gICAgICBpZiAobSlcbiAgICAgICAgbWF0Y2hlZEVudHJpZXMucHVzaChlKVxuICAgIH1cbiAgfVxuXG4gIC8vY29uc29sZS5lcnJvcigncHJkMicsIHByZWZpeCwgZW50cmllcywgcmVtYWluWzBdLl9nbG9iLCBtYXRjaGVkRW50cmllcylcblxuICB2YXIgbGVuID0gbWF0Y2hlZEVudHJpZXMubGVuZ3RoXG4gIC8vIElmIHRoZXJlIGFyZSBubyBtYXRjaGVkIGVudHJpZXMsIHRoZW4gbm90aGluZyBtYXRjaGVzLlxuICBpZiAobGVuID09PSAwKVxuICAgIHJldHVybiBjYigpXG5cbiAgLy8gaWYgdGhpcyBpcyB0aGUgbGFzdCByZW1haW5pbmcgcGF0dGVybiBiaXQsIHRoZW4gbm8gbmVlZCBmb3JcbiAgLy8gYW4gYWRkaXRpb25hbCBzdGF0ICp1bmxlc3MqIHRoZSB1c2VyIGhhcyBzcGVjaWZpZWQgbWFyayBvclxuICAvLyBzdGF0IGV4cGxpY2l0bHkuICBXZSBrbm93IHRoZXkgZXhpc3QsIHNpbmNlIHJlYWRkaXIgcmV0dXJuZWRcbiAgLy8gdGhlbS5cblxuICBpZiAocmVtYWluLmxlbmd0aCA9PT0gMSAmJiAhdGhpcy5tYXJrICYmICF0aGlzLnN0YXQpIHtcbiAgICBpZiAoIXRoaXMubWF0Y2hlc1tpbmRleF0pXG4gICAgICB0aGlzLm1hdGNoZXNbaW5kZXhdID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKyspIHtcbiAgICAgIHZhciBlID0gbWF0Y2hlZEVudHJpZXNbaV1cbiAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgaWYgKHByZWZpeCAhPT0gJy8nKVxuICAgICAgICAgIGUgPSBwcmVmaXggKyAnLycgKyBlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBlID0gcHJlZml4ICsgZVxuICAgICAgfVxuXG4gICAgICBpZiAoZS5jaGFyQXQoMCkgPT09ICcvJyAmJiAhdGhpcy5ub21vdW50KSB7XG4gICAgICAgIGUgPSBwYXRoLmpvaW4odGhpcy5yb290LCBlKVxuICAgICAgfVxuICAgICAgdGhpcy5fZW1pdE1hdGNoKGluZGV4LCBlKVxuICAgIH1cbiAgICAvLyBUaGlzIHdhcyB0aGUgbGFzdCBvbmUsIGFuZCBubyBzdGF0cyB3ZXJlIG5lZWRlZFxuICAgIHJldHVybiBjYigpXG4gIH1cblxuICAvLyBub3cgdGVzdCBhbGwgbWF0Y2hlZCBlbnRyaWVzIGFzIHN0YW5kLWlucyBmb3IgdGhhdCBwYXJ0XG4gIC8vIG9mIHRoZSBwYXR0ZXJuLlxuICByZW1haW4uc2hpZnQoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArKykge1xuICAgIHZhciBlID0gbWF0Y2hlZEVudHJpZXNbaV1cbiAgICB2YXIgbmV3UGF0dGVyblxuICAgIGlmIChwcmVmaXgpIHtcbiAgICAgIGlmIChwcmVmaXggIT09ICcvJylcbiAgICAgICAgZSA9IHByZWZpeCArICcvJyArIGVcbiAgICAgIGVsc2VcbiAgICAgICAgZSA9IHByZWZpeCArIGVcbiAgICB9XG4gICAgdGhpcy5fcHJvY2VzcyhbZV0uY29uY2F0KHJlbWFpbiksIGluZGV4LCBpbkdsb2JTdGFyLCBjYilcbiAgfVxuICBjYigpXG59XG5cbkdsb2IucHJvdG90eXBlLl9lbWl0TWF0Y2ggPSBmdW5jdGlvbiAoaW5kZXgsIGUpIHtcbiAgaWYgKHRoaXMuYWJvcnRlZClcbiAgICByZXR1cm5cblxuICBpZiAoaXNJZ25vcmVkKHRoaXMsIGUpKVxuICAgIHJldHVyblxuXG4gIGlmICh0aGlzLnBhdXNlZCkge1xuICAgIHRoaXMuX2VtaXRRdWV1ZS5wdXNoKFtpbmRleCwgZV0pXG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYWJzID0gaXNBYnNvbHV0ZShlKSA/IGUgOiB0aGlzLl9tYWtlQWJzKGUpXG5cbiAgaWYgKHRoaXMubWFyaylcbiAgICBlID0gdGhpcy5fbWFyayhlKVxuXG4gIGlmICh0aGlzLmFic29sdXRlKVxuICAgIGUgPSBhYnNcblxuICBpZiAodGhpcy5tYXRjaGVzW2luZGV4XVtlXSlcbiAgICByZXR1cm5cblxuICBpZiAodGhpcy5ub2Rpcikge1xuICAgIHZhciBjID0gdGhpcy5jYWNoZVthYnNdXG4gICAgaWYgKGMgPT09ICdESVInIHx8IEFycmF5LmlzQXJyYXkoYykpXG4gICAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMubWF0Y2hlc1tpbmRleF1bZV0gPSB0cnVlXG5cbiAgdmFyIHN0ID0gdGhpcy5zdGF0Q2FjaGVbYWJzXVxuICBpZiAoc3QpXG4gICAgdGhpcy5lbWl0KCdzdGF0JywgZSwgc3QpXG5cbiAgdGhpcy5lbWl0KCdtYXRjaCcsIGUpXG59XG5cbkdsb2IucHJvdG90eXBlLl9yZWFkZGlySW5HbG9iU3RhciA9IGZ1bmN0aW9uIChhYnMsIGNiKSB7XG4gIGlmICh0aGlzLmFib3J0ZWQpXG4gICAgcmV0dXJuXG5cbiAgLy8gZm9sbG93IGFsbCBzeW1saW5rZWQgZGlyZWN0b3JpZXMgZm9yZXZlclxuICAvLyBqdXN0IHByb2NlZWQgYXMgaWYgdGhpcyBpcyBhIG5vbi1nbG9ic3RhciBzaXR1YXRpb25cbiAgaWYgKHRoaXMuZm9sbG93KVxuICAgIHJldHVybiB0aGlzLl9yZWFkZGlyKGFicywgZmFsc2UsIGNiKVxuXG4gIHZhciBsc3RhdGtleSA9ICdsc3RhdFxcMCcgKyBhYnNcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBsc3RhdGNiID0gaW5mbGlnaHQobHN0YXRrZXksIGxzdGF0Y2JfKVxuXG4gIGlmIChsc3RhdGNiKVxuICAgIGZzLmxzdGF0KGFicywgbHN0YXRjYilcblxuICBmdW5jdGlvbiBsc3RhdGNiXyAoZXIsIGxzdGF0KSB7XG4gICAgaWYgKGVyICYmIGVyLmNvZGUgPT09ICdFTk9FTlQnKVxuICAgICAgcmV0dXJuIGNiKClcblxuICAgIHZhciBpc1N5bSA9IGxzdGF0ICYmIGxzdGF0LmlzU3ltYm9saWNMaW5rKClcbiAgICBzZWxmLnN5bWxpbmtzW2Fic10gPSBpc1N5bVxuXG4gICAgLy8gSWYgaXQncyBub3QgYSBzeW1saW5rIG9yIGEgZGlyLCB0aGVuIGl0J3MgZGVmaW5pdGVseSBhIHJlZ3VsYXIgZmlsZS5cbiAgICAvLyBkb24ndCBib3RoZXIgZG9pbmcgYSByZWFkZGlyIGluIHRoYXQgY2FzZS5cbiAgICBpZiAoIWlzU3ltICYmIGxzdGF0ICYmICFsc3RhdC5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICBzZWxmLmNhY2hlW2Fic10gPSAnRklMRSdcbiAgICAgIGNiKClcbiAgICB9IGVsc2VcbiAgICAgIHNlbGYuX3JlYWRkaXIoYWJzLCBmYWxzZSwgY2IpXG4gIH1cbn1cblxuR2xvYi5wcm90b3R5cGUuX3JlYWRkaXIgPSBmdW5jdGlvbiAoYWJzLCBpbkdsb2JTdGFyLCBjYikge1xuICBpZiAodGhpcy5hYm9ydGVkKVxuICAgIHJldHVyblxuXG4gIGNiID0gaW5mbGlnaHQoJ3JlYWRkaXJcXDAnK2FicysnXFwwJytpbkdsb2JTdGFyLCBjYilcbiAgaWYgKCFjYilcbiAgICByZXR1cm5cblxuICAvL2NvbnNvbGUuZXJyb3IoJ1JEICVqICVqJywgK2luR2xvYlN0YXIsIGFicylcbiAgaWYgKGluR2xvYlN0YXIgJiYgIW93blByb3AodGhpcy5zeW1saW5rcywgYWJzKSlcbiAgICByZXR1cm4gdGhpcy5fcmVhZGRpckluR2xvYlN0YXIoYWJzLCBjYilcblxuICBpZiAob3duUHJvcCh0aGlzLmNhY2hlLCBhYnMpKSB7XG4gICAgdmFyIGMgPSB0aGlzLmNhY2hlW2Fic11cbiAgICBpZiAoIWMgfHwgYyA9PT0gJ0ZJTEUnKVxuICAgICAgcmV0dXJuIGNiKClcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKVxuICAgICAgcmV0dXJuIGNiKG51bGwsIGMpXG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXNcbiAgZnMucmVhZGRpcihhYnMsIHJlYWRkaXJDYih0aGlzLCBhYnMsIGNiKSlcbn1cblxuZnVuY3Rpb24gcmVhZGRpckNiIChzZWxmLCBhYnMsIGNiKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXIsIGVudHJpZXMpIHtcbiAgICBpZiAoZXIpXG4gICAgICBzZWxmLl9yZWFkZGlyRXJyb3IoYWJzLCBlciwgY2IpXG4gICAgZWxzZVxuICAgICAgc2VsZi5fcmVhZGRpckVudHJpZXMoYWJzLCBlbnRyaWVzLCBjYilcbiAgfVxufVxuXG5HbG9iLnByb3RvdHlwZS5fcmVhZGRpckVudHJpZXMgPSBmdW5jdGlvbiAoYWJzLCBlbnRyaWVzLCBjYikge1xuICBpZiAodGhpcy5hYm9ydGVkKVxuICAgIHJldHVyblxuXG4gIC8vIGlmIHdlIGhhdmVuJ3QgYXNrZWQgdG8gc3RhdCBldmVyeXRoaW5nLCB0aGVuIGp1c3RcbiAgLy8gYXNzdW1lIHRoYXQgZXZlcnl0aGluZyBpbiB0aGVyZSBleGlzdHMsIHNvIHdlIGNhbiBhdm9pZFxuICAvLyBoYXZpbmcgdG8gc3RhdCBpdCBhIHNlY29uZCB0aW1lLlxuICBpZiAoIXRoaXMubWFyayAmJiAhdGhpcy5zdGF0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSArKykge1xuICAgICAgdmFyIGUgPSBlbnRyaWVzW2ldXG4gICAgICBpZiAoYWJzID09PSAnLycpXG4gICAgICAgIGUgPSBhYnMgKyBlXG4gICAgICBlbHNlXG4gICAgICAgIGUgPSBhYnMgKyAnLycgKyBlXG4gICAgICB0aGlzLmNhY2hlW2VdID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuY2FjaGVbYWJzXSA9IGVudHJpZXNcbiAgcmV0dXJuIGNiKG51bGwsIGVudHJpZXMpXG59XG5cbkdsb2IucHJvdG90eXBlLl9yZWFkZGlyRXJyb3IgPSBmdW5jdGlvbiAoZiwgZXIsIGNiKSB7XG4gIGlmICh0aGlzLmFib3J0ZWQpXG4gICAgcmV0dXJuXG5cbiAgLy8gaGFuZGxlIGVycm9ycywgYW5kIGNhY2hlIHRoZSBpbmZvcm1hdGlvblxuICBzd2l0Y2ggKGVyLmNvZGUpIHtcbiAgICBjYXNlICdFTk9UU1VQJzogLy8gaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9ub2RlLWdsb2IvaXNzdWVzLzIwNVxuICAgIGNhc2UgJ0VOT1RESVInOiAvLyB0b3RhbGx5IG5vcm1hbC4gbWVhbnMgaXQgKmRvZXMqIGV4aXN0LlxuICAgICAgdmFyIGFicyA9IHRoaXMuX21ha2VBYnMoZilcbiAgICAgIHRoaXMuY2FjaGVbYWJzXSA9ICdGSUxFJ1xuICAgICAgaWYgKGFicyA9PT0gdGhpcy5jd2RBYnMpIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGVyLmNvZGUgKyAnIGludmFsaWQgY3dkICcgKyB0aGlzLmN3ZClcbiAgICAgICAgZXJyb3IucGF0aCA9IHRoaXMuY3dkXG4gICAgICAgIGVycm9yLmNvZGUgPSBlci5jb2RlXG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcilcbiAgICAgICAgdGhpcy5hYm9ydCgpXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnRU5PRU5UJzogLy8gbm90IHRlcnJpYmx5IHVudXN1YWxcbiAgICBjYXNlICdFTE9PUCc6XG4gICAgY2FzZSAnRU5BTUVUT09MT05HJzpcbiAgICBjYXNlICdVTktOT1dOJzpcbiAgICAgIHRoaXMuY2FjaGVbdGhpcy5fbWFrZUFicyhmKV0gPSBmYWxzZVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6IC8vIHNvbWUgdW51c3VhbCBlcnJvci4gIFRyZWF0IGFzIGZhaWx1cmUuXG4gICAgICB0aGlzLmNhY2hlW3RoaXMuX21ha2VBYnMoZildID0gZmFsc2VcbiAgICAgIGlmICh0aGlzLnN0cmljdCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXIpXG4gICAgICAgIC8vIElmIHRoZSBlcnJvciBpcyBoYW5kbGVkLCB0aGVuIHdlIGFib3J0XG4gICAgICAgIC8vIGlmIG5vdCwgd2UgdGhyZXcgb3V0IG9mIGhlcmVcbiAgICAgICAgdGhpcy5hYm9ydCgpXG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc2lsZW50KVxuICAgICAgICBjb25zb2xlLmVycm9yKCdnbG9iIGVycm9yJywgZXIpXG4gICAgICBicmVha1xuICB9XG5cbiAgcmV0dXJuIGNiKClcbn1cblxuR2xvYi5wcm90b3R5cGUuX3Byb2Nlc3NHbG9iU3RhciA9IGZ1bmN0aW9uIChwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3RhciwgY2IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHRoaXMuX3JlYWRkaXIoYWJzLCBpbkdsb2JTdGFyLCBmdW5jdGlvbiAoZXIsIGVudHJpZXMpIHtcbiAgICBzZWxmLl9wcm9jZXNzR2xvYlN0YXIyKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyLCBlbnRyaWVzLCBjYilcbiAgfSlcbn1cblxuXG5HbG9iLnByb3RvdHlwZS5fcHJvY2Vzc0dsb2JTdGFyMiA9IGZ1bmN0aW9uIChwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3RhciwgZW50cmllcywgY2IpIHtcbiAgLy9jb25zb2xlLmVycm9yKCdwZ3MyJywgcHJlZml4LCByZW1haW5bMF0sIGVudHJpZXMpXG5cbiAgLy8gbm8gZW50cmllcyBtZWFucyBub3QgYSBkaXIsIHNvIGl0IGNhbiBuZXZlciBoYXZlIG1hdGNoZXNcbiAgLy8gZm9vLnR4dC8qKiBkb2Vzbid0IG1hdGNoIGZvby50eHRcbiAgaWYgKCFlbnRyaWVzKVxuICAgIHJldHVybiBjYigpXG5cbiAgLy8gdGVzdCB3aXRob3V0IHRoZSBnbG9ic3RhciwgYW5kIHdpdGggZXZlcnkgY2hpbGQgYm90aCBiZWxvd1xuICAvLyBhbmQgcmVwbGFjaW5nIHRoZSBnbG9ic3Rhci5cbiAgdmFyIHJlbWFpbldpdGhvdXRHbG9iU3RhciA9IHJlbWFpbi5zbGljZSgxKVxuICB2YXIgZ3NwcmVmID0gcHJlZml4ID8gWyBwcmVmaXggXSA6IFtdXG4gIHZhciBub0dsb2JTdGFyID0gZ3NwcmVmLmNvbmNhdChyZW1haW5XaXRob3V0R2xvYlN0YXIpXG5cbiAgLy8gdGhlIG5vR2xvYlN0YXIgcGF0dGVybiBleGl0cyB0aGUgaW5HbG9iU3RhciBzdGF0ZVxuICB0aGlzLl9wcm9jZXNzKG5vR2xvYlN0YXIsIGluZGV4LCBmYWxzZSwgY2IpXG5cbiAgdmFyIGlzU3ltID0gdGhpcy5zeW1saW5rc1thYnNdXG4gIHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aFxuXG4gIC8vIElmIGl0J3MgYSBzeW1saW5rLCBhbmQgd2UncmUgaW4gYSBnbG9ic3RhciwgdGhlbiBzdG9wXG4gIGlmIChpc1N5bSAmJiBpbkdsb2JTdGFyKVxuICAgIHJldHVybiBjYigpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBlID0gZW50cmllc1tpXVxuICAgIGlmIChlLmNoYXJBdCgwKSA9PT0gJy4nICYmICF0aGlzLmRvdClcbiAgICAgIGNvbnRpbnVlXG5cbiAgICAvLyB0aGVzZSB0d28gY2FzZXMgZW50ZXIgdGhlIGluR2xvYlN0YXIgc3RhdGVcbiAgICB2YXIgaW5zdGVhZCA9IGdzcHJlZi5jb25jYXQoZW50cmllc1tpXSwgcmVtYWluV2l0aG91dEdsb2JTdGFyKVxuICAgIHRoaXMuX3Byb2Nlc3MoaW5zdGVhZCwgaW5kZXgsIHRydWUsIGNiKVxuXG4gICAgdmFyIGJlbG93ID0gZ3NwcmVmLmNvbmNhdChlbnRyaWVzW2ldLCByZW1haW4pXG4gICAgdGhpcy5fcHJvY2VzcyhiZWxvdywgaW5kZXgsIHRydWUsIGNiKVxuICB9XG5cbiAgY2IoKVxufVxuXG5HbG9iLnByb3RvdHlwZS5fcHJvY2Vzc1NpbXBsZSA9IGZ1bmN0aW9uIChwcmVmaXgsIGluZGV4LCBjYikge1xuICAvLyBYWFggcmV2aWV3IHRoaXMuICBTaG91bGRuJ3QgaXQgYmUgZG9pbmcgdGhlIG1vdW50aW5nIGV0Y1xuICAvLyBiZWZvcmUgZG9pbmcgc3RhdD8gIGtpbmRhIHdlaXJkP1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdGhpcy5fc3RhdChwcmVmaXgsIGZ1bmN0aW9uIChlciwgZXhpc3RzKSB7XG4gICAgc2VsZi5fcHJvY2Vzc1NpbXBsZTIocHJlZml4LCBpbmRleCwgZXIsIGV4aXN0cywgY2IpXG4gIH0pXG59XG5HbG9iLnByb3RvdHlwZS5fcHJvY2Vzc1NpbXBsZTIgPSBmdW5jdGlvbiAocHJlZml4LCBpbmRleCwgZXIsIGV4aXN0cywgY2IpIHtcblxuICAvL2NvbnNvbGUuZXJyb3IoJ3BzMicsIHByZWZpeCwgZXhpc3RzKVxuXG4gIGlmICghdGhpcy5tYXRjaGVzW2luZGV4XSlcbiAgICB0aGlzLm1hdGNoZXNbaW5kZXhdID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG4gIC8vIElmIGl0IGRvZXNuJ3QgZXhpc3QsIHRoZW4ganVzdCBtYXJrIHRoZSBsYWNrIG9mIHJlc3VsdHNcbiAgaWYgKCFleGlzdHMpXG4gICAgcmV0dXJuIGNiKClcblxuICBpZiAocHJlZml4ICYmIGlzQWJzb2x1dGUocHJlZml4KSAmJiAhdGhpcy5ub21vdW50KSB7XG4gICAgdmFyIHRyYWlsID0gL1tcXC9cXFxcXSQvLnRlc3QocHJlZml4KVxuICAgIGlmIChwcmVmaXguY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHByZWZpeCA9IHBhdGguam9pbih0aGlzLnJvb3QsIHByZWZpeClcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlZml4ID0gcGF0aC5yZXNvbHZlKHRoaXMucm9vdCwgcHJlZml4KVxuICAgICAgaWYgKHRyYWlsKVxuICAgICAgICBwcmVmaXggKz0gJy8nXG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpXG4gICAgcHJlZml4ID0gcHJlZml4LnJlcGxhY2UoL1xcXFwvZywgJy8nKVxuXG4gIC8vIE1hcmsgdGhpcyBhcyBhIG1hdGNoXG4gIHRoaXMuX2VtaXRNYXRjaChpbmRleCwgcHJlZml4KVxuICBjYigpXG59XG5cbi8vIFJldHVybnMgZWl0aGVyICdESVInLCAnRklMRScsIG9yIGZhbHNlXG5HbG9iLnByb3RvdHlwZS5fc3RhdCA9IGZ1bmN0aW9uIChmLCBjYikge1xuICB2YXIgYWJzID0gdGhpcy5fbWFrZUFicyhmKVxuICB2YXIgbmVlZERpciA9IGYuc2xpY2UoLTEpID09PSAnLydcblxuICBpZiAoZi5sZW5ndGggPiB0aGlzLm1heExlbmd0aClcbiAgICByZXR1cm4gY2IoKVxuXG4gIGlmICghdGhpcy5zdGF0ICYmIG93blByb3AodGhpcy5jYWNoZSwgYWJzKSkge1xuICAgIHZhciBjID0gdGhpcy5jYWNoZVthYnNdXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSlcbiAgICAgIGMgPSAnRElSJ1xuXG4gICAgLy8gSXQgZXhpc3RzLCBidXQgbWF5YmUgbm90IGhvdyB3ZSBuZWVkIGl0XG4gICAgaWYgKCFuZWVkRGlyIHx8IGMgPT09ICdESVInKVxuICAgICAgcmV0dXJuIGNiKG51bGwsIGMpXG5cbiAgICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgICByZXR1cm4gY2IoKVxuXG4gICAgLy8gb3RoZXJ3aXNlIHdlIGhhdmUgdG8gc3RhdCwgYmVjYXVzZSBtYXliZSBjPXRydWVcbiAgICAvLyBpZiB3ZSBrbm93IGl0IGV4aXN0cywgYnV0IG5vdCB3aGF0IGl0IGlzLlxuICB9XG5cbiAgdmFyIGV4aXN0c1xuICB2YXIgc3RhdCA9IHRoaXMuc3RhdENhY2hlW2Fic11cbiAgaWYgKHN0YXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzdGF0ID09PSBmYWxzZSlcbiAgICAgIHJldHVybiBjYihudWxsLCBzdGF0KVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHR5cGUgPSBzdGF0LmlzRGlyZWN0b3J5KCkgPyAnRElSJyA6ICdGSUxFJ1xuICAgICAgaWYgKG5lZWREaXIgJiYgdHlwZSA9PT0gJ0ZJTEUnKVxuICAgICAgICByZXR1cm4gY2IoKVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gY2IobnVsbCwgdHlwZSwgc3RhdClcbiAgICB9XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHN0YXRjYiA9IGluZmxpZ2h0KCdzdGF0XFwwJyArIGFicywgbHN0YXRjYl8pXG4gIGlmIChzdGF0Y2IpXG4gICAgZnMubHN0YXQoYWJzLCBzdGF0Y2IpXG5cbiAgZnVuY3Rpb24gbHN0YXRjYl8gKGVyLCBsc3RhdCkge1xuICAgIGlmIChsc3RhdCAmJiBsc3RhdC5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgICAvLyBJZiBpdCdzIGEgc3ltbGluaywgdGhlbiB0cmVhdCBpdCBhcyB0aGUgdGFyZ2V0LCB1bmxlc3NcbiAgICAgIC8vIHRoZSB0YXJnZXQgZG9lcyBub3QgZXhpc3QsIHRoZW4gdHJlYXQgaXQgYXMgYSBmaWxlLlxuICAgICAgcmV0dXJuIGZzLnN0YXQoYWJzLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICAgICAgaWYgKGVyKVxuICAgICAgICAgIHNlbGYuX3N0YXQyKGYsIGFicywgbnVsbCwgbHN0YXQsIGNiKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgc2VsZi5fc3RhdDIoZiwgYWJzLCBlciwgc3RhdCwgY2IpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLl9zdGF0MihmLCBhYnMsIGVyLCBsc3RhdCwgY2IpXG4gICAgfVxuICB9XG59XG5cbkdsb2IucHJvdG90eXBlLl9zdGF0MiA9IGZ1bmN0aW9uIChmLCBhYnMsIGVyLCBzdGF0LCBjYikge1xuICBpZiAoZXIgJiYgKGVyLmNvZGUgPT09ICdFTk9FTlQnIHx8IGVyLmNvZGUgPT09ICdFTk9URElSJykpIHtcbiAgICB0aGlzLnN0YXRDYWNoZVthYnNdID0gZmFsc2VcbiAgICByZXR1cm4gY2IoKVxuICB9XG5cbiAgdmFyIG5lZWREaXIgPSBmLnNsaWNlKC0xKSA9PT0gJy8nXG4gIHRoaXMuc3RhdENhY2hlW2Fic10gPSBzdGF0XG5cbiAgaWYgKGFicy5zbGljZSgtMSkgPT09ICcvJyAmJiBzdGF0ICYmICFzdGF0LmlzRGlyZWN0b3J5KCkpXG4gICAgcmV0dXJuIGNiKG51bGwsIGZhbHNlLCBzdGF0KVxuXG4gIHZhciBjID0gdHJ1ZVxuICBpZiAoc3RhdClcbiAgICBjID0gc3RhdC5pc0RpcmVjdG9yeSgpID8gJ0RJUicgOiAnRklMRSdcbiAgdGhpcy5jYWNoZVthYnNdID0gdGhpcy5jYWNoZVthYnNdIHx8IGNcblxuICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgcmV0dXJuIGNiKClcblxuICByZXR1cm4gY2IobnVsbCwgYywgc3RhdClcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVhbHBhdGhcbnJlYWxwYXRoLnJlYWxwYXRoID0gcmVhbHBhdGhcbnJlYWxwYXRoLnN5bmMgPSByZWFscGF0aFN5bmNcbnJlYWxwYXRoLnJlYWxwYXRoU3luYyA9IHJlYWxwYXRoU3luY1xucmVhbHBhdGgubW9ua2V5cGF0Y2ggPSBtb25rZXlwYXRjaFxucmVhbHBhdGgudW5tb25rZXlwYXRjaCA9IHVubW9ua2V5cGF0Y2hcblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxudmFyIG9yaWdSZWFscGF0aCA9IGZzLnJlYWxwYXRoXG52YXIgb3JpZ1JlYWxwYXRoU3luYyA9IGZzLnJlYWxwYXRoU3luY1xuXG52YXIgdmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvblxudmFyIG9rID0gL152WzAtNV1cXC4vLnRlc3QodmVyc2lvbilcbnZhciBvbGQgPSByZXF1aXJlKCcuL29sZC5qcycpXG5cbmZ1bmN0aW9uIG5ld0Vycm9yIChlcikge1xuICByZXR1cm4gZXIgJiYgZXIuc3lzY2FsbCA9PT0gJ3JlYWxwYXRoJyAmJiAoXG4gICAgZXIuY29kZSA9PT0gJ0VMT09QJyB8fFxuICAgIGVyLmNvZGUgPT09ICdFTk9NRU0nIHx8XG4gICAgZXIuY29kZSA9PT0gJ0VOQU1FVE9PTE9ORydcbiAgKVxufVxuXG5mdW5jdGlvbiByZWFscGF0aCAocCwgY2FjaGUsIGNiKSB7XG4gIGlmIChvaykge1xuICAgIHJldHVybiBvcmlnUmVhbHBhdGgocCwgY2FjaGUsIGNiKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjYWNoZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2FjaGVcbiAgICBjYWNoZSA9IG51bGxcbiAgfVxuICBvcmlnUmVhbHBhdGgocCwgY2FjaGUsIGZ1bmN0aW9uIChlciwgcmVzdWx0KSB7XG4gICAgaWYgKG5ld0Vycm9yKGVyKSkge1xuICAgICAgb2xkLnJlYWxwYXRoKHAsIGNhY2hlLCBjYilcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoZXIsIHJlc3VsdClcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWxwYXRoU3luYyAocCwgY2FjaGUpIHtcbiAgaWYgKG9rKSB7XG4gICAgcmV0dXJuIG9yaWdSZWFscGF0aFN5bmMocCwgY2FjaGUpXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBvcmlnUmVhbHBhdGhTeW5jKHAsIGNhY2hlKVxuICB9IGNhdGNoIChlcikge1xuICAgIGlmIChuZXdFcnJvcihlcikpIHtcbiAgICAgIHJldHVybiBvbGQucmVhbHBhdGhTeW5jKHAsIGNhY2hlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlclxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtb25rZXlwYXRjaCAoKSB7XG4gIGZzLnJlYWxwYXRoID0gcmVhbHBhdGhcbiAgZnMucmVhbHBhdGhTeW5jID0gcmVhbHBhdGhTeW5jXG59XG5cbmZ1bmN0aW9uIHVubW9ua2V5cGF0Y2ggKCkge1xuICBmcy5yZWFscGF0aCA9IG9yaWdSZWFscGF0aFxuICBmcy5yZWFscGF0aFN5bmMgPSBvcmlnUmVhbHBhdGhTeW5jXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwiZXhwb3J0cy5hbHBoYXNvcnQgPSBhbHBoYXNvcnRcbmV4cG9ydHMuYWxwaGFzb3J0aSA9IGFscGhhc29ydGlcbmV4cG9ydHMuc2V0b3B0cyA9IHNldG9wdHNcbmV4cG9ydHMub3duUHJvcCA9IG93blByb3BcbmV4cG9ydHMubWFrZUFicyA9IG1ha2VBYnNcbmV4cG9ydHMuZmluaXNoID0gZmluaXNoXG5leHBvcnRzLm1hcmsgPSBtYXJrXG5leHBvcnRzLmlzSWdub3JlZCA9IGlzSWdub3JlZFxuZXhwb3J0cy5jaGlsZHJlbklnbm9yZWQgPSBjaGlsZHJlbklnbm9yZWRcblxuZnVuY3Rpb24gb3duUHJvcCAob2JqLCBmaWVsZCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgZmllbGQpXG59XG5cbnZhciBwYXRoID0gcmVxdWlyZShcInBhdGhcIilcbnZhciBtaW5pbWF0Y2ggPSByZXF1aXJlKFwibWluaW1hdGNoXCIpXG52YXIgaXNBYnNvbHV0ZSA9IHJlcXVpcmUoXCJwYXRoLWlzLWFic29sdXRlXCIpXG52YXIgTWluaW1hdGNoID0gbWluaW1hdGNoLk1pbmltYXRjaFxuXG5mdW5jdGlvbiBhbHBoYXNvcnRpIChhLCBiKSB7XG4gIHJldHVybiBhLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLnRvTG93ZXJDYXNlKCkpXG59XG5cbmZ1bmN0aW9uIGFscGhhc29ydCAoYSwgYikge1xuICByZXR1cm4gYS5sb2NhbGVDb21wYXJlKGIpXG59XG5cbmZ1bmN0aW9uIHNldHVwSWdub3JlcyAoc2VsZiwgb3B0aW9ucykge1xuICBzZWxmLmlnbm9yZSA9IG9wdGlvbnMuaWdub3JlIHx8IFtdXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHNlbGYuaWdub3JlKSlcbiAgICBzZWxmLmlnbm9yZSA9IFtzZWxmLmlnbm9yZV1cblxuICBpZiAoc2VsZi5pZ25vcmUubGVuZ3RoKSB7XG4gICAgc2VsZi5pZ25vcmUgPSBzZWxmLmlnbm9yZS5tYXAoaWdub3JlTWFwKVxuICB9XG59XG5cbi8vIGlnbm9yZSBwYXR0ZXJucyBhcmUgYWx3YXlzIGluIGRvdDp0cnVlIG1vZGUuXG5mdW5jdGlvbiBpZ25vcmVNYXAgKHBhdHRlcm4pIHtcbiAgdmFyIGdtYXRjaGVyID0gbnVsbFxuICBpZiAocGF0dGVybi5zbGljZSgtMykgPT09ICcvKionKSB7XG4gICAgdmFyIGdwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC8oXFwvXFwqXFwqKSskLywgJycpXG4gICAgZ21hdGNoZXIgPSBuZXcgTWluaW1hdGNoKGdwYXR0ZXJuLCB7IGRvdDogdHJ1ZSB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVyOiBuZXcgTWluaW1hdGNoKHBhdHRlcm4sIHsgZG90OiB0cnVlIH0pLFxuICAgIGdtYXRjaGVyOiBnbWF0Y2hlclxuICB9XG59XG5cbmZ1bmN0aW9uIHNldG9wdHMgKHNlbGYsIHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fVxuXG4gIC8vIGJhc2UtbWF0Y2hpbmc6IGp1c3QgdXNlIGdsb2JzdGFyIGZvciB0aGF0LlxuICBpZiAob3B0aW9ucy5tYXRjaEJhc2UgJiYgLTEgPT09IHBhdHRlcm4uaW5kZXhPZihcIi9cIikpIHtcbiAgICBpZiAob3B0aW9ucy5ub2dsb2JzdGFyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYXNlIG1hdGNoaW5nIHJlcXVpcmVzIGdsb2JzdGFyXCIpXG4gICAgfVxuICAgIHBhdHRlcm4gPSBcIioqL1wiICsgcGF0dGVyblxuICB9XG5cbiAgc2VsZi5zaWxlbnQgPSAhIW9wdGlvbnMuc2lsZW50XG4gIHNlbGYucGF0dGVybiA9IHBhdHRlcm5cbiAgc2VsZi5zdHJpY3QgPSBvcHRpb25zLnN0cmljdCAhPT0gZmFsc2VcbiAgc2VsZi5yZWFscGF0aCA9ICEhb3B0aW9ucy5yZWFscGF0aFxuICBzZWxmLnJlYWxwYXRoQ2FjaGUgPSBvcHRpb25zLnJlYWxwYXRoQ2FjaGUgfHwgT2JqZWN0LmNyZWF0ZShudWxsKVxuICBzZWxmLmZvbGxvdyA9ICEhb3B0aW9ucy5mb2xsb3dcbiAgc2VsZi5kb3QgPSAhIW9wdGlvbnMuZG90XG4gIHNlbGYubWFyayA9ICEhb3B0aW9ucy5tYXJrXG4gIHNlbGYubm9kaXIgPSAhIW9wdGlvbnMubm9kaXJcbiAgaWYgKHNlbGYubm9kaXIpXG4gICAgc2VsZi5tYXJrID0gdHJ1ZVxuICBzZWxmLnN5bmMgPSAhIW9wdGlvbnMuc3luY1xuICBzZWxmLm5vdW5pcXVlID0gISFvcHRpb25zLm5vdW5pcXVlXG4gIHNlbGYubm9udWxsID0gISFvcHRpb25zLm5vbnVsbFxuICBzZWxmLm5vc29ydCA9ICEhb3B0aW9ucy5ub3NvcnRcbiAgc2VsZi5ub2Nhc2UgPSAhIW9wdGlvbnMubm9jYXNlXG4gIHNlbGYuc3RhdCA9ICEhb3B0aW9ucy5zdGF0XG4gIHNlbGYubm9wcm9jZXNzID0gISFvcHRpb25zLm5vcHJvY2Vzc1xuICBzZWxmLmFic29sdXRlID0gISFvcHRpb25zLmFic29sdXRlXG5cbiAgc2VsZi5tYXhMZW5ndGggPSBvcHRpb25zLm1heExlbmd0aCB8fCBJbmZpbml0eVxuICBzZWxmLmNhY2hlID0gb3B0aW9ucy5jYWNoZSB8fCBPYmplY3QuY3JlYXRlKG51bGwpXG4gIHNlbGYuc3RhdENhY2hlID0gb3B0aW9ucy5zdGF0Q2FjaGUgfHwgT2JqZWN0LmNyZWF0ZShudWxsKVxuICBzZWxmLnN5bWxpbmtzID0gb3B0aW9ucy5zeW1saW5rcyB8fCBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgc2V0dXBJZ25vcmVzKHNlbGYsIG9wdGlvbnMpXG5cbiAgc2VsZi5jaGFuZ2VkQ3dkID0gZmFsc2VcbiAgdmFyIGN3ZCA9IHByb2Nlc3MuY3dkKClcbiAgaWYgKCFvd25Qcm9wKG9wdGlvbnMsIFwiY3dkXCIpKVxuICAgIHNlbGYuY3dkID0gY3dkXG4gIGVsc2Uge1xuICAgIHNlbGYuY3dkID0gcGF0aC5yZXNvbHZlKG9wdGlvbnMuY3dkKVxuICAgIHNlbGYuY2hhbmdlZEN3ZCA9IHNlbGYuY3dkICE9PSBjd2RcbiAgfVxuXG4gIHNlbGYucm9vdCA9IG9wdGlvbnMucm9vdCB8fCBwYXRoLnJlc29sdmUoc2VsZi5jd2QsIFwiL1wiKVxuICBzZWxmLnJvb3QgPSBwYXRoLnJlc29sdmUoc2VsZi5yb290KVxuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiKVxuICAgIHNlbGYucm9vdCA9IHNlbGYucm9vdC5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKVxuXG4gIC8vIFRPRE86IGlzIGFuIGFic29sdXRlIGBjd2RgIHN1cHBvc2VkIHRvIGJlIHJlc29sdmVkIGFnYWluc3QgYHJvb3RgP1xuICAvLyBlLmcuIHsgY3dkOiAnL3Rlc3QnLCByb290OiBfX2Rpcm5hbWUgfSA9PT0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy90ZXN0JylcbiAgc2VsZi5jd2RBYnMgPSBpc0Fic29sdXRlKHNlbGYuY3dkKSA/IHNlbGYuY3dkIDogbWFrZUFicyhzZWxmLCBzZWxmLmN3ZClcbiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09IFwid2luMzJcIilcbiAgICBzZWxmLmN3ZEFicyA9IHNlbGYuY3dkQWJzLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpXG4gIHNlbGYubm9tb3VudCA9ICEhb3B0aW9ucy5ub21vdW50XG5cbiAgLy8gZGlzYWJsZSBjb21tZW50cyBhbmQgbmVnYXRpb24gaW4gTWluaW1hdGNoLlxuICAvLyBOb3RlIHRoYXQgdGhleSBhcmUgbm90IHN1cHBvcnRlZCBpbiBHbG9iIGl0c2VsZiBhbnl3YXkuXG4gIG9wdGlvbnMubm9uZWdhdGUgPSB0cnVlXG4gIG9wdGlvbnMubm9jb21tZW50ID0gdHJ1ZVxuXG4gIHNlbGYubWluaW1hdGNoID0gbmV3IE1pbmltYXRjaChwYXR0ZXJuLCBvcHRpb25zKVxuICBzZWxmLm9wdGlvbnMgPSBzZWxmLm1pbmltYXRjaC5vcHRpb25zXG59XG5cbmZ1bmN0aW9uIGZpbmlzaCAoc2VsZikge1xuICB2YXIgbm91ID0gc2VsZi5ub3VuaXF1ZVxuICB2YXIgYWxsID0gbm91ID8gW10gOiBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzZWxmLm1hdGNoZXMubGVuZ3RoOyBpIDwgbDsgaSArKykge1xuICAgIHZhciBtYXRjaGVzID0gc2VsZi5tYXRjaGVzW2ldXG4gICAgaWYgKCFtYXRjaGVzIHx8IE9iamVjdC5rZXlzKG1hdGNoZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKHNlbGYubm9udWxsKSB7XG4gICAgICAgIC8vIGRvIGxpa2UgdGhlIHNoZWxsLCBhbmQgc3BpdCBvdXQgdGhlIGxpdGVyYWwgZ2xvYlxuICAgICAgICB2YXIgbGl0ZXJhbCA9IHNlbGYubWluaW1hdGNoLmdsb2JTZXRbaV1cbiAgICAgICAgaWYgKG5vdSlcbiAgICAgICAgICBhbGwucHVzaChsaXRlcmFsKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgYWxsW2xpdGVyYWxdID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYWQgbWF0Y2hlc1xuICAgICAgdmFyIG0gPSBPYmplY3Qua2V5cyhtYXRjaGVzKVxuICAgICAgaWYgKG5vdSlcbiAgICAgICAgYWxsLnB1c2guYXBwbHkoYWxsLCBtKVxuICAgICAgZWxzZVxuICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICBhbGxbbV0gPSB0cnVlXG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaWYgKCFub3UpXG4gICAgYWxsID0gT2JqZWN0LmtleXMoYWxsKVxuXG4gIGlmICghc2VsZi5ub3NvcnQpXG4gICAgYWxsID0gYWxsLnNvcnQoc2VsZi5ub2Nhc2UgPyBhbHBoYXNvcnRpIDogYWxwaGFzb3J0KVxuXG4gIC8vIGF0ICpzb21lKiBwb2ludCB3ZSBzdGF0dGVkIGFsbCBvZiB0aGVzZVxuICBpZiAoc2VsZi5tYXJrKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGwubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFsbFtpXSA9IHNlbGYuX21hcmsoYWxsW2ldKVxuICAgIH1cbiAgICBpZiAoc2VsZi5ub2Rpcikge1xuICAgICAgYWxsID0gYWxsLmZpbHRlcihmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgbm90RGlyID0gISgvXFwvJC8udGVzdChlKSlcbiAgICAgICAgdmFyIGMgPSBzZWxmLmNhY2hlW2VdIHx8IHNlbGYuY2FjaGVbbWFrZUFicyhzZWxmLCBlKV1cbiAgICAgICAgaWYgKG5vdERpciAmJiBjKVxuICAgICAgICAgIG5vdERpciA9IGMgIT09ICdESVInICYmICFBcnJheS5pc0FycmF5KGMpXG4gICAgICAgIHJldHVybiBub3REaXJcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaWYgKHNlbGYuaWdub3JlLmxlbmd0aClcbiAgICBhbGwgPSBhbGwuZmlsdGVyKGZ1bmN0aW9uKG0pIHtcbiAgICAgIHJldHVybiAhaXNJZ25vcmVkKHNlbGYsIG0pXG4gICAgfSlcblxuICBzZWxmLmZvdW5kID0gYWxsXG59XG5cbmZ1bmN0aW9uIG1hcmsgKHNlbGYsIHApIHtcbiAgdmFyIGFicyA9IG1ha2VBYnMoc2VsZiwgcClcbiAgdmFyIGMgPSBzZWxmLmNhY2hlW2Fic11cbiAgdmFyIG0gPSBwXG4gIGlmIChjKSB7XG4gICAgdmFyIGlzRGlyID0gYyA9PT0gJ0RJUicgfHwgQXJyYXkuaXNBcnJheShjKVxuICAgIHZhciBzbGFzaCA9IHAuc2xpY2UoLTEpID09PSAnLydcblxuICAgIGlmIChpc0RpciAmJiAhc2xhc2gpXG4gICAgICBtICs9ICcvJ1xuICAgIGVsc2UgaWYgKCFpc0RpciAmJiBzbGFzaClcbiAgICAgIG0gPSBtLnNsaWNlKDAsIC0xKVxuXG4gICAgaWYgKG0gIT09IHApIHtcbiAgICAgIHZhciBtYWJzID0gbWFrZUFicyhzZWxmLCBtKVxuICAgICAgc2VsZi5zdGF0Q2FjaGVbbWFic10gPSBzZWxmLnN0YXRDYWNoZVthYnNdXG4gICAgICBzZWxmLmNhY2hlW21hYnNdID0gc2VsZi5jYWNoZVthYnNdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1cbn1cblxuLy8gbG90dGEgc2l0dXBzLi4uXG5mdW5jdGlvbiBtYWtlQWJzIChzZWxmLCBmKSB7XG4gIHZhciBhYnMgPSBmXG4gIGlmIChmLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgYWJzID0gcGF0aC5qb2luKHNlbGYucm9vdCwgZilcbiAgfSBlbHNlIGlmIChpc0Fic29sdXRlKGYpIHx8IGYgPT09ICcnKSB7XG4gICAgYWJzID0gZlxuICB9IGVsc2UgaWYgKHNlbGYuY2hhbmdlZEN3ZCkge1xuICAgIGFicyA9IHBhdGgucmVzb2x2ZShzZWxmLmN3ZCwgZilcbiAgfSBlbHNlIHtcbiAgICBhYnMgPSBwYXRoLnJlc29sdmUoZilcbiAgfVxuXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKVxuICAgIGFicyA9IGFicy5yZXBsYWNlKC9cXFxcL2csICcvJylcblxuICByZXR1cm4gYWJzXG59XG5cblxuLy8gUmV0dXJuIHRydWUsIGlmIHBhdHRlcm4gZW5kcyB3aXRoIGdsb2JzdGFyICcqKicsIGZvciB0aGUgYWNjb21wYW55aW5nIHBhcmVudCBkaXJlY3RvcnkuXG4vLyBFeDotIElmIG5vZGVfbW9kdWxlcy8qKiBpcyB0aGUgcGF0dGVybiwgYWRkICdub2RlX21vZHVsZXMnIHRvIGlnbm9yZSBsaXN0IGFsb25nIHdpdGggaXQncyBjb250ZW50c1xuZnVuY3Rpb24gaXNJZ25vcmVkIChzZWxmLCBwYXRoKSB7XG4gIGlmICghc2VsZi5pZ25vcmUubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZVxuXG4gIHJldHVybiBzZWxmLmlnbm9yZS5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5tYXRjaGVyLm1hdGNoKHBhdGgpIHx8ICEhKGl0ZW0uZ21hdGNoZXIgJiYgaXRlbS5nbWF0Y2hlci5tYXRjaChwYXRoKSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5JZ25vcmVkIChzZWxmLCBwYXRoKSB7XG4gIGlmICghc2VsZi5pZ25vcmUubGVuZ3RoKVxuICAgIHJldHVybiBmYWxzZVxuXG4gIHJldHVybiBzZWxmLmlnbm9yZS5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICByZXR1cm4gISEoaXRlbS5nbWF0Y2hlciAmJiBpdGVtLmdtYXRjaGVyLm1hdGNoKHBhdGgpKVxuICB9KVxufVxuIiwiLy8gUmV0dXJucyBhIHdyYXBwZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgd3JhcHBlZCBjYWxsYmFja1xuLy8gVGhlIHdyYXBwZXIgZnVuY3Rpb24gc2hvdWxkIGRvIHNvbWUgc3R1ZmYsIGFuZCByZXR1cm4gYVxuLy8gcHJlc3VtYWJseSBkaWZmZXJlbnQgY2FsbGJhY2sgZnVuY3Rpb24uXG4vLyBUaGlzIG1ha2VzIHN1cmUgdGhhdCBvd24gcHJvcGVydGllcyBhcmUgcmV0YWluZWQsIHNvIHRoYXRcbi8vIGRlY29yYXRpb25zIGFuZCBzdWNoIGFyZSBub3QgbG9zdCBhbG9uZyB0aGUgd2F5LlxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcHlcbmZ1bmN0aW9uIHdyYXBweSAoZm4sIGNiKSB7XG4gIGlmIChmbiAmJiBjYikgcmV0dXJuIHdyYXBweShmbikoY2IpXG5cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduZWVkIHdyYXBwZXIgZnVuY3Rpb24nKVxuXG4gIE9iamVjdC5rZXlzKGZuKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgd3JhcHBlcltrXSA9IGZuW2tdXG4gIH0pXG5cbiAgcmV0dXJuIHdyYXBwZXJcblxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldXG4gICAgfVxuICAgIHZhciByZXQgPSBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIHZhciBjYiA9IGFyZ3NbYXJncy5sZW5ndGgtMV1cbiAgICBpZiAodHlwZW9mIHJldCA9PT0gJ2Z1bmN0aW9uJyAmJiByZXQgIT09IGNiKSB7XG4gICAgICBPYmplY3Qua2V5cyhjYikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXRba10gPSBjYltrXVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9XG59XG4iLCJ2YXIgd3JhcHB5ID0gcmVxdWlyZSgnd3JhcHB5Jylcbm1vZHVsZS5leHBvcnRzID0gd3JhcHB5KG9uY2UpXG5tb2R1bGUuZXhwb3J0cy5zdHJpY3QgPSB3cmFwcHkob25jZVN0cmljdClcblxub25jZS5wcm90byA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCAnb25jZScsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG9uY2UodGhpcylcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdW5jdGlvbi5wcm90b3R5cGUsICdvbmNlU3RyaWN0Jywge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gb25jZVN0cmljdCh0aGlzKVxuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pXG59KVxuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZi5jYWxsZWQpIHJldHVybiBmLnZhbHVlXG4gICAgZi5jYWxsZWQgPSB0cnVlXG4gICAgcmV0dXJuIGYudmFsdWUgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cbiAgZi5jYWxsZWQgPSBmYWxzZVxuICByZXR1cm4gZlxufVxuXG5mdW5jdGlvbiBvbmNlU3RyaWN0IChmbikge1xuICB2YXIgZiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZi5jYWxsZWQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZi5vbmNlRXJyb3IpXG4gICAgZi5jYWxsZWQgPSB0cnVlXG4gICAgcmV0dXJuIGYudmFsdWUgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cbiAgdmFyIG5hbWUgPSBmbi5uYW1lIHx8ICdGdW5jdGlvbiB3cmFwcGVkIHdpdGggYG9uY2VgJ1xuICBmLm9uY2VFcnJvciA9IG5hbWUgKyBcIiBzaG91bGRuJ3QgYmUgY2FsbGVkIG1vcmUgdGhhbiBvbmNlXCJcbiAgZi5jYWxsZWQgPSBmYWxzZVxuICByZXR1cm4gZlxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29uc3RhbnRzXCIpOyIsIi8vIE5vdGU6IHNpbmNlIG55YyB1c2VzIHRoaXMgbW9kdWxlIHRvIG91dHB1dCBjb3ZlcmFnZSwgYW55IGxpbmVzXG4vLyB0aGF0IGFyZSBpbiB0aGUgZGlyZWN0IHN5bmMgZmxvdyBvZiBueWMncyBvdXRwdXRDb3ZlcmFnZSBhcmVcbi8vIGlnbm9yZWQsIHNpbmNlIHdlIGNhbiBuZXZlciBnZXQgY292ZXJhZ2UgZm9yIHRoZW0uXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbnZhciBzaWduYWxzID0gcmVxdWlyZSgnLi9zaWduYWxzLmpzJylcbnZhciBpc1dpbiA9IC9ed2luL2kudGVzdChwcm9jZXNzLnBsYXRmb3JtKVxuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKVxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIEVFICE9PSAnZnVuY3Rpb24nKSB7XG4gIEVFID0gRUUuRXZlbnRFbWl0dGVyXG59XG5cbnZhciBlbWl0dGVyXG5pZiAocHJvY2Vzcy5fX3NpZ25hbF9leGl0X2VtaXR0ZXJfXykge1xuICBlbWl0dGVyID0gcHJvY2Vzcy5fX3NpZ25hbF9leGl0X2VtaXR0ZXJfX1xufSBlbHNlIHtcbiAgZW1pdHRlciA9IHByb2Nlc3MuX19zaWduYWxfZXhpdF9lbWl0dGVyX18gPSBuZXcgRUUoKVxuICBlbWl0dGVyLmNvdW50ID0gMFxuICBlbWl0dGVyLmVtaXR0ZWQgPSB7fVxufVxuXG4vLyBCZWNhdXNlIHRoaXMgZW1pdHRlciBpcyBhIGdsb2JhbCwgd2UgaGF2ZSB0byBjaGVjayB0byBzZWUgaWYgYVxuLy8gcHJldmlvdXMgdmVyc2lvbiBvZiB0aGlzIGxpYnJhcnkgZmFpbGVkIHRvIGVuYWJsZSBpbmZpbml0ZSBsaXN0ZW5lcnMuXG4vLyBJIGtub3cgd2hhdCB5b3UncmUgYWJvdXQgdG8gc2F5LiAgQnV0IGxpdGVyYWxseSBldmVyeXRoaW5nIGFib3V0XG4vLyBzaWduYWwtZXhpdCBpcyBhIGNvbXByb21pc2Ugd2l0aCBldmlsLiAgR2V0IHVzZWQgdG8gaXQuXG5pZiAoIWVtaXR0ZXIuaW5maW5pdGUpIHtcbiAgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoSW5maW5pdHkpXG4gIGVtaXR0ZXIuaW5maW5pdGUgPSB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNiLCBvcHRzKSB7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgY2IsICdmdW5jdGlvbicsICdhIGNhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQgZm9yIGV4aXQgaGFuZGxlcicpXG5cbiAgaWYgKGxvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICBsb2FkKClcbiAgfVxuXG4gIHZhciBldiA9ICdleGl0J1xuICBpZiAob3B0cyAmJiBvcHRzLmFsd2F5c0xhc3QpIHtcbiAgICBldiA9ICdhZnRlcmV4aXQnXG4gIH1cblxuICB2YXIgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXYsIGNiKVxuICAgIGlmIChlbWl0dGVyLmxpc3RlbmVycygnZXhpdCcpLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICBlbWl0dGVyLmxpc3RlbmVycygnYWZ0ZXJleGl0JykubGVuZ3RoID09PSAwKSB7XG4gICAgICB1bmxvYWQoKVxuICAgIH1cbiAgfVxuICBlbWl0dGVyLm9uKGV2LCBjYilcblxuICByZXR1cm4gcmVtb3ZlXG59XG5cbm1vZHVsZS5leHBvcnRzLnVubG9hZCA9IHVubG9hZFxuZnVuY3Rpb24gdW5sb2FkICgpIHtcbiAgaWYgKCFsb2FkZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICBsb2FkZWQgPSBmYWxzZVxuXG4gIHNpZ25hbHMuZm9yRWFjaChmdW5jdGlvbiAoc2lnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoc2lnLCBzaWdMaXN0ZW5lcnNbc2lnXSlcbiAgICB9IGNhdGNoIChlcikge31cbiAgfSlcbiAgcHJvY2Vzcy5lbWl0ID0gb3JpZ2luYWxQcm9jZXNzRW1pdFxuICBwcm9jZXNzLnJlYWxseUV4aXQgPSBvcmlnaW5hbFByb2Nlc3NSZWFsbHlFeGl0XG4gIGVtaXR0ZXIuY291bnQgLT0gMVxufVxuXG5mdW5jdGlvbiBlbWl0IChldmVudCwgY29kZSwgc2lnbmFsKSB7XG4gIGlmIChlbWl0dGVyLmVtaXR0ZWRbZXZlbnRdKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZW1pdHRlci5lbWl0dGVkW2V2ZW50XSA9IHRydWVcbiAgZW1pdHRlci5lbWl0KGV2ZW50LCBjb2RlLCBzaWduYWwpXG59XG5cbi8vIHsgPHNpZ25hbD46IDxsaXN0ZW5lciBmbj4sIC4uLiB9XG52YXIgc2lnTGlzdGVuZXJzID0ge31cbnNpZ25hbHMuZm9yRWFjaChmdW5jdGlvbiAoc2lnKSB7XG4gIHNpZ0xpc3RlbmVyc1tzaWddID0gZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgIC8vIElmIHRoZXJlIGFyZSBubyBvdGhlciBsaXN0ZW5lcnMsIGFuIGV4aXQgaXMgY29taW5nIVxuICAgIC8vIFNpbXBsZXN0IHdheTogcmVtb3ZlIHVzIGFuZCB0aGVuIHJlLXNlbmQgdGhlIHNpZ25hbC5cbiAgICAvLyBXZSBrbm93IHRoYXQgdGhpcyB3aWxsIGtpbGwgdGhlIHByb2Nlc3MsIHNvIHdlIGNhblxuICAgIC8vIHNhZmVseSBlbWl0IG5vdy5cbiAgICB2YXIgbGlzdGVuZXJzID0gcHJvY2Vzcy5saXN0ZW5lcnMoc2lnKVxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID09PSBlbWl0dGVyLmNvdW50KSB7XG4gICAgICB1bmxvYWQoKVxuICAgICAgZW1pdCgnZXhpdCcsIG51bGwsIHNpZylcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBlbWl0KCdhZnRlcmV4aXQnLCBudWxsLCBzaWcpXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKGlzV2luICYmIHNpZyA9PT0gJ1NJR0hVUCcpIHtcbiAgICAgICAgLy8gXCJTSUdIVVBcIiB0aHJvd3MgYW4gYEVOT1NZU2AgZXJyb3Igb24gV2luZG93cyxcbiAgICAgICAgLy8gc28gdXNlIGEgc3VwcG9ydGVkIHNpZ25hbCBpbnN0ZWFkXG4gICAgICAgIHNpZyA9ICdTSUdJTlQnXG4gICAgICB9XG4gICAgICBwcm9jZXNzLmtpbGwocHJvY2Vzcy5waWQsIHNpZylcbiAgICB9XG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzLnNpZ25hbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBzaWduYWxzXG59XG5cbm1vZHVsZS5leHBvcnRzLmxvYWQgPSBsb2FkXG5cbnZhciBsb2FkZWQgPSBmYWxzZVxuXG5mdW5jdGlvbiBsb2FkICgpIHtcbiAgaWYgKGxvYWRlZCkge1xuICAgIHJldHVyblxuICB9XG4gIGxvYWRlZCA9IHRydWVcblxuICAvLyBUaGlzIGlzIHRoZSBudW1iZXIgb2Ygb25TaWduYWxFeGl0J3MgdGhhdCBhcmUgaW4gcGxheS5cbiAgLy8gSXQncyBpbXBvcnRhbnQgc28gdGhhdCB3ZSBjYW4gY291bnQgdGhlIGNvcnJlY3QgbnVtYmVyIG9mXG4gIC8vIGxpc3RlbmVycyBvbiBzaWduYWxzLCBhbmQgZG9uJ3Qgd2FpdCBmb3IgdGhlIG90aGVyIG9uZSB0b1xuICAvLyBoYW5kbGUgaXQgaW5zdGVhZCBvZiB1cy5cbiAgZW1pdHRlci5jb3VudCArPSAxXG5cbiAgc2lnbmFscyA9IHNpZ25hbHMuZmlsdGVyKGZ1bmN0aW9uIChzaWcpIHtcbiAgICB0cnkge1xuICAgICAgcHJvY2Vzcy5vbihzaWcsIHNpZ0xpc3RlbmVyc1tzaWddKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGNhdGNoIChlcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9KVxuXG4gIHByb2Nlc3MuZW1pdCA9IHByb2Nlc3NFbWl0XG4gIHByb2Nlc3MucmVhbGx5RXhpdCA9IHByb2Nlc3NSZWFsbHlFeGl0XG59XG5cbnZhciBvcmlnaW5hbFByb2Nlc3NSZWFsbHlFeGl0ID0gcHJvY2Vzcy5yZWFsbHlFeGl0XG5mdW5jdGlvbiBwcm9jZXNzUmVhbGx5RXhpdCAoY29kZSkge1xuICBwcm9jZXNzLmV4aXRDb2RlID0gY29kZSB8fCAwXG4gIGVtaXQoJ2V4aXQnLCBwcm9jZXNzLmV4aXRDb2RlLCBudWxsKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBlbWl0KCdhZnRlcmV4aXQnLCBwcm9jZXNzLmV4aXRDb2RlLCBudWxsKVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBvcmlnaW5hbFByb2Nlc3NSZWFsbHlFeGl0LmNhbGwocHJvY2VzcywgcHJvY2Vzcy5leGl0Q29kZSlcbn1cblxudmFyIG9yaWdpbmFsUHJvY2Vzc0VtaXQgPSBwcm9jZXNzLmVtaXRcbmZ1bmN0aW9uIHByb2Nlc3NFbWl0IChldiwgYXJnKSB7XG4gIGlmIChldiA9PT0gJ2V4aXQnKSB7XG4gICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9jZXNzLmV4aXRDb2RlID0gYXJnXG4gICAgfVxuICAgIHZhciByZXQgPSBvcmlnaW5hbFByb2Nlc3NFbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICBlbWl0KCdleGl0JywgcHJvY2Vzcy5leGl0Q29kZSwgbnVsbClcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGVtaXQoJ2FmdGVyZXhpdCcsIHByb2Nlc3MuZXhpdENvZGUsIG51bGwpXG4gICAgcmV0dXJuIHJldFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvcmlnaW5hbFByb2Nlc3NFbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi9hcHBNZW51XCIpO1xyXG52YXIgcGFnZXNCdWlsZGVyXzEgPSByZXF1aXJlKFwiLi9wYWdlc0J1aWxkZXJcIik7XHJcbnZhciBnYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9zZXJ2ZXIvZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXCIpO1xyXG52YXIgdXNlckF2YXRhck1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuL3VzZXJBdmF0YXJNb2R1bGVzXCIpO1xyXG5mdW5jdGlvbiBzaG93UmVzdWx0U2NyZWVuKCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB3aW5kb3dFbGVtZW50LCBnYW1lRGF0YSwgaW5kZXgsIGRpc3BsYXlEYXRhLCBfbG9vcF8xLCBfaSwgZGlzcGxheURhdGFfMSwgaXRlbTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Nob3ctcmVzdWx0LWFyZWEnKTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEuZ2V0R2FtZVJlc3VsdERhdGEoeyBtZXRob2Q6ICdHRVQnLCBkYXRhOiBudWxsIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBnYW1lRGF0YSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZURhdGEuaGFzT3duUHJvcGVydHkoJ21lc3NhZ2UnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dFbGVtZW50LmlubmVySFRNTCA9IFwiPGRpdiBjbGFzcz1cXFwicmVzdWx0LW1lc3NhZ2Utd3JhcHBlclxcXCI+PHA+XCIgKyBnYW1lRGF0YS5tZXNzYWdlICsgXCI8L3A+PC9kaXY+XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMCwgZGlzcGxheURhdGEgPSBnYW1lRGF0YS5zbGljZSgwLCAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZSwgeWVhciwgbW9udGgsIGRheSwgYXZhdGFySW1hZ2UsIGltZywgX2EsIG5ld0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZShpdGVtLnRpbWUpLCB5ZWFyID0gdGltZS5nZXRGdWxsWWVhcigpLCBtb250aCA9IHRpbWUuZ2V0VVRDTW9udGgoKSArIDEsIGRheSA9IHRpbWUuZ2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmF0YXJJbWFnZSA9IChpdGVtLnVzZXJBdmF0YXIpID8gaXRlbS51c2VyQXZhdGFyIDogKF9fZGlybmFtZSArICcvcHVibGljL2ltYWdlcy9taXNjL2F2YXRhcnMvcGljdHVyZV9pY29uLnBuZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBpbWc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGF2YXRhckltYWdlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNyYyA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6IFwibGlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUNsYXNzOiBcIndpbm5lci1saXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lU3R5bGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljdHVyZVVybDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rVXJsOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJDb250ZW50OiBcIjxwIGNsYXNzPVxcXCJzaW5nbGUtaXRlbVxcXCI+PHNwYW4gY2xhc3M9XFxcInJhdGUtbnVtYmVyXFxcIj5cIiArIGluZGV4ICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuPlwiICsgKFwiPGltZyBjbGFzcz0nc21hbGwtYXZhdGFyJyBzcmM9XCIgKyBpbWcuc3JjICsgXCIgd2lkdGg9JzMwJyBhbHQ9J2F2YXRhcic+XCIpICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuPm5hbWU6PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaXRlbS1uYW1lXFxcIj4gXCIgKyBpdGVtLnVzZXJOYW1lICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgIFwiICsgKChpdGVtLmRlc3Ryb3lFbmVteSkgPyBcIjxzcGFuPkRlc3Ryb3kgR3JvdW5kIFVuaXRzOjwvc3Bhbj5cIiA6IFwiXCIpICsgXCIgPHNwYW4gY2xhc3M9XFxcIml0ZW0tY29pblxcXCI+IFwiICsgKChpdGVtLmRlc3Ryb3lFbmVteSkgPyBpdGVtLmRlc3Ryb3lFbmVteSA6ICcnKSArIFwiPC9zcGFuPlxcbiAgICAgICAgICAgICAgICBcIiArICgoaXRlbS5kZXN0cm95U2hpcCkgPyBcIjxzcGFuPkRlc3Ryb3kgRmx5aW5nIFVuaXRzOjwvc3Bhbj5cIiA6IFwiXCIpICsgXCIgPHNwYW4gY2xhc3M9XFxcIml0ZW0tY29pblxcXCI+IFwiICsgKChpdGVtLmRlc3Ryb3lTaGlwKSA/IGl0ZW0uZGVzdHJveVNoaXAgOiAnJykgKyBcIjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4+Y3JlZGl0czo8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJpdGVtLWNvaW5cXFwiPiBcIiArIGl0ZW0uZ2FtZUNvaW5zICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuPnNjb3JlOjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIml0ZW0tcG9pbnRzXFxcIj4gXCIgKyBpdGVtLmdhbWVQb2ludHMgKyBcIjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIml0ZW0tZGF0ZVxcXCI+IFwiICsgeWVhciArIFwiL1wiICsgbW9udGggKyBcIi9cIiArIGRheSArIFwiPC9zcGFuPjwvcD5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnZGF0YS1idXR0b24taWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogaXRlbS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lMTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdFbGVtZW50ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0VsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4ICogMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIF9pID0gMCwgZGlzcGxheURhdGFfMSA9IGRpc3BsYXlEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShfaSA8IGRpc3BsYXlEYXRhXzEubGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGRpc3BsYXlEYXRhXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNSAvKnlpZWxkKiovLCBfbG9vcF8xKGl0ZW0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9pKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zaG93UmVzdWx0U2NyZWVuID0gc2hvd1Jlc3VsdFNjcmVlbjtcclxuZnVuY3Rpb24gaW5pdFJlc3VsdFNjcmVlbihtYWluR2FtZU9iamVjdCkge1xyXG4gICAgdmFyIHdpbmRvd0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2F2ZS1yZXN1bHQtYm94Jyk7XHJcbiAgICB2YXIgZm9ybUJ0blN3aXRjaGVyQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9ybS1idG4tc3dpdGNoZXItYXJlYVwiKTtcclxuICAgIHZhciBmb3JtTG9hZEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9ybS1sb2FkLWFyZWEnKTtcclxuICAgIGZvcm1Mb2FkQXJlYS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgZm9ybUJ0blN3aXRjaGVyQXJlYS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgYXBwTWVudV8xLnNob3cod2luZG93RWxlbWVudCk7XHJcbiAgICB2YXIgYnV0dG9uU3dpdGNoZXIgPSBbXHJcbiAgICAgICAgcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoe1xyXG4gICAgICAgICAgICB0YWdOYW1lOiBcImJ1dHRvblwiLFxyXG4gICAgICAgICAgICBzdHlsZUNsYXNzOiBcImFjY2VwdC1idG4gYnRuLW1haW5cIixcclxuICAgICAgICAgICAgaW5saW5lU3R5bGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBpY3R1cmVVcmw6IG51bGwsXHJcbiAgICAgICAgICAgIGxpbmtVcmw6IG51bGwsXHJcbiAgICAgICAgICAgIHRleHQ6IFwidXBkYXRlIHBsYXllclwiLFxyXG4gICAgICAgICAgICBpbm5lckNvbnRlbnQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IFwiZGF0YS1idG4taWRcIixcclxuICAgICAgICAgICAgYXR0cmlidXRlOiBcInVwZGF0ZS1wbGF5ZXJcIixcclxuICAgICAgICAgICAgYXR0cmlidXRlTmFtZTE6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTE6IG51bGxcclxuICAgICAgICB9KSxcclxuICAgICAgICBwYWdlc0J1aWxkZXJfMS5jcmVhdGVFbGVtZW50cyh7XHJcbiAgICAgICAgICAgIHRhZ05hbWU6IFwiYnV0dG9uXCIsXHJcbiAgICAgICAgICAgIHN0eWxlQ2xhc3M6IFwiYWNjZXB0LWJ0biBidG4tbWFpbiBzZWxlY3RlZC1mb3JtXCIsXHJcbiAgICAgICAgICAgIGlubGluZVN0eWxlOiBudWxsLFxyXG4gICAgICAgICAgICBwaWN0dXJlVXJsOiBudWxsLFxyXG4gICAgICAgICAgICBsaW5rVXJsOiBudWxsLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIm5ldyBwbGF5ZXJcIixcclxuICAgICAgICAgICAgaW5uZXJDb250ZW50OiBcIlwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiBcImRhdGEtYnRuLWlkXCIsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogXCJuZXctcGxheWVyXCIsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgfSlcclxuICAgIF07XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGJ1dHRvblN3aXRjaGVyXzEgPSBidXR0b25Td2l0Y2hlcjsgX2kgPCBidXR0b25Td2l0Y2hlcl8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gYnV0dG9uU3dpdGNoZXJfMVtfaV07XHJcbiAgICAgICAgZm9ybUJ0blN3aXRjaGVyQXJlYS5hcHBlbmRDaGlsZChpdGVtKTtcclxuICAgIH1cclxuICAgIHZhciBmb3JtU3RhdGUgPSB7XHJcbiAgICAgICAgYXZhdGFyU2VjdGlvblNob3dTdGF0ZTogZmFsc2UsXHJcbiAgICAgICAgYXZhdGFyUGljdHVyZTogbnVsbFxyXG4gICAgfTtcclxuICAgIHZhciBkaWFsb2dEYXRhID0gW1xyXG4gICAgICAgIHBhZ2VzQnVpbGRlcl8xLmNyZWF0ZUVsZW1lbnRzKHtcclxuICAgICAgICAgICAgdGFnTmFtZTogXCJmb3JtXCIsXHJcbiAgICAgICAgICAgIHN0eWxlQ2xhc3M6IFwiXCIsXHJcbiAgICAgICAgICAgIGlubGluZVN0eWxlOiBudWxsLFxyXG4gICAgICAgICAgICBwaWN0dXJlVXJsOiBudWxsLFxyXG4gICAgICAgICAgICBsaW5rVXJsOiBudWxsLFxyXG4gICAgICAgICAgICB0ZXh0OiBcInNhdmUgcmVzdWx0XCIsXHJcbiAgICAgICAgICAgIGlubmVyQ29udGVudDogXCJcXG4gICAgICAgICAgICAgICAgPGgxPkNyZWF0ZSBuZXcgcGxheWVyPC9oMT5cXG4gICAgICAgICAgICAgICAgPHA+UGxlYXNlIGZpbGwgdGhlIGZpZWxkcyB0byBzYXZlIHlvdXIgcmVzdWx0PC9wPlxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJhdmF0YXItcGljdHVyZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8cD5Zb3UgcHJvZmlsZSBwaWN0dXJlPC9wPlxcblxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwiYXZhdGFyLWJ1dHRvblxcXCIgY2xhc3M9XFxcImF2YXRhci1idXR0b25cXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9XFxcImF2YXRhci1waWN0dXJlXFxcIiBjbGFzcz1cXFwiYXZhdGFyLWlubmVyLXBpY3R1cmVcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxuXFxuICAgICAgICAgICAgICAgICAgICA8c2VjdGlvbiBpZD1cXFwiYXZhdGFyLWJveFxcXCIgY2xhc3M9XFxcImF2YXRhci1ib3hcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcImF2YXRhci1jbG9zZVxcXCIgY2xhc3M9XFxcImF2YXRhci1jbG9zZVxcXCIgPng8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDI+U2VsZWN0IHlvdSBwaWN0dXJlczwvaDI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcImZpbGVcXFwiIGlkPVxcXCJwbGF5ZXItYXZhdGFyXFxcIiBhY2NlcHQ9XFxcImltYWdlL3BuZywgaW1hZ2UvanBlZ1xcXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cXFwiYXZhdGFyLWlubmVyLWJveFxcXCIgY2xhc3M9XFxcImF2YXRhci1pbm5lci1ib3hcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxcblxcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJuYW1lXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxwPlBsZWFzZSBlbnRlciB5b3UgbmFtZTwvcD5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD1cXFwibmFtZVxcXCIgbWF4bGVuZ3RoPVxcXCIzMFxcXCIgbWlubGVuZ3RoPVxcXCIzXFxcIiBuYW1lPVxcXCJ1c2VyTmFtZVxcXCIgdHlwZT1cXFwidGV4dFxcXCIgcmVxdWlyZWQgcGxhY2Vob2xkZXI9XFxcIkVudGVyIHlvdSBuYW1lXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwibWFpbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgZW50ZXIgeW91IGVtYWlsPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPVxcXCJtYWlsXFxcIiBuYW1lPVxcXCJ1c2VyRW1haWxcXFwiIHR5cGU9XFxcImVtYWlsXFxcIiByZXF1aXJlZCBwbGFjZWhvbGRlcj1cXFwiQ3JlYXRlIHlvdSBlbWFpbCBhZGRyZXNzXFxcIj5cXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwicGFzc3dvcmRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPHA+Q3JlYXRlIHBhc3N3b3JkPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPVxcXCJwYXNzd29yZFxcXCIgbmFtZT1cXFwidXNlclBhc3N3b3JkXFxcIiBtYXhsZW5ndGg9XFxcIjIwXFxcIiBtaW5sZW5ndGg9XFxcIjRcXFwiIHR5cGU9XFxcInBhc3N3b3JkXFxcIiByZXF1aXJlZCBwbGFjZWhvbGRlcj1cXFwiUGFzc3dvcmRcXFwiPlxcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJhbGVydC1tZXNzYWdlXFxcIiBjbGFzcz1cXFwiYWxlcnQtbWVzc2FnZVxcXCI+PC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XFxcImRpYWxvZy1ib3R0b20tYXJlYVxcXCIgY2xhc3M9XFxcImRpYWxvZy1ib3R0b20tYXJlYVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XFxcInN1Ym1pdFxcXCIgZGF0YS1idXR0b24taWQ9XFxcInNhdmUtcmVzdWx0XFxcIiBjbGFzcz1cXFwiYWNjZXB0LWJ0biBidG4tbWFpblxcXCI+c2F2ZTwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLWJ1dHRvbi1pZD1cXFwiY2FuY2VsXFxcIiBjbGFzcz1cXFwicmVqZWN0LWJ0biBidG4tbWFpbiBidG4tb3JhbmdlLXJlamVjdFxcXCI+Y2FuY2VsPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbmFtZScsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogXCJzYXZlLXJlc3VsdC1mb3JtXCIsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoe1xyXG4gICAgICAgICAgICB0YWdOYW1lOiBcImZvcm1cIixcclxuICAgICAgICAgICAgc3R5bGVDbGFzczogXCJcIixcclxuICAgICAgICAgICAgaW5saW5lU3R5bGU6IFwiZGlzcGxheTogbm9uZTtcIixcclxuICAgICAgICAgICAgcGljdHVyZVVybDogbnVsbCxcclxuICAgICAgICAgICAgbGlua1VybDogbnVsbCxcclxuICAgICAgICAgICAgdGV4dDogXCJzYXZlIHJlc3VsdFwiLFxyXG4gICAgICAgICAgICBpbm5lckNvbnRlbnQ6IFwiXFxuICAgICAgICAgICAgICAgICAgICA8aDE+VXBkYXRlIHBsYXllcjwvaDE+XFxuICAgICAgICAgICAgICAgICAgICA8cD5FbnRlciBlbWFpbCBhbmQgcGFzc3dvcmQ8L3A+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJhdmF0YXItcGljdHVyZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8cD5Zb3UgcHJvZmlsZSBwaWN0dXJlPC9wPlxcblxcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwiYXZhdGFyLWJ1dHRvbi11cGRhdGVcXFwiIGNsYXNzPVxcXCJhdmF0YXItYnV0dG9uXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPVxcXCJhdmF0YXItcGljdHVyZS11cGRhdGVcXFwiIGNsYXNzPVxcXCJhdmF0YXItaW5uZXItcGljdHVyZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXG5cXG4gICAgICAgICAgICAgICAgICAgIDxzZWN0aW9uIGlkPVxcXCJhdmF0YXItYm94LXVwZGF0ZVxcXCIgY2xhc3M9XFxcImF2YXRhci1ib3hcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XFxcImF2YXRhci1jbG9zZS11cGRhdGVcXFwiIGNsYXNzPVxcXCJhdmF0YXItY2xvc2VcXFwiID54PC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlNlbGVjdCB5b3UgcGljdHVyZXM8L2gyPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBpZD1cXFwicGxheWVyLWF2YXRhci11cGRhdGVcXFwiIGFjY2VwdD1cXFwiaW1hZ2UvcG5nLCBpbWFnZS9qcGVnXFxcIj5cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVxcXCJhdmF0YXItaW5uZXItYm94LXVwZGF0ZVxcXCIgY2xhc3M9XFxcImF2YXRhci1pbm5lci1ib3hcXFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwibWFpbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+UGxlYXNlIGVudGVyIHlvdSBlbWFpbDwvcD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XFxcIm1haWxcXFwiIG5hbWU9XFxcInVzZXJFbWFpbFxcXCIgdHlwZT1cXFwiZW1haWxcXFwiIHJlcXVpcmVkIHBsYWNlaG9sZGVyPVxcXCJFbnRlciB5b3UgZW1haWwgYWRkcmVzc1xcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwicGFzc3dvcmRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNyZWF0ZSBwYXNzd29yZDwvcD5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XFxcInBhc3N3b3JkXFxcIiBuYW1lPVxcXCJ1c2VyUGFzc3dvcmRcXFwiIG1heGxlbmd0aD1cXFwiMjBcXFwiIG1pbmxlbmd0aD1cXFwiNFxcXCIgdHlwZT1cXFwicGFzc3dvcmRcXFwiIHJlcXVpcmVkIHBsYWNlaG9sZGVyPVxcXCJFbnRlciB5b3UgcGFzc3dvcmRcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XFxcImFsZXJ0LW1lc3NhZ2VcXFwiIGNsYXNzPVxcXCJhbGVydC1tZXNzYWdlXFxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XFxcImRpYWxvZy1ib3R0b20tYXJlYVxcXCIgY2xhc3M9XFxcImRpYWxvZy1ib3R0b20tYXJlYVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVxcXCJzdWJtaXRcXFwiIGRhdGEtYnV0dG9uLWlkPVxcXCJzYXZlLXJlc3VsdFxcXCIgY2xhc3M9XFxcImFjY2VwdC1idG4gYnRuLW1haW5cXFwiPnNhdmU8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGRhdGEtYnV0dG9uLWlkPVxcXCJjYW5jZWxcXFwiIGNsYXNzPVxcXCJyZWplY3QtYnRuIGJ0bi1tYWluIGJ0bi1vcmFuZ2UtcmVqZWN0XFxcIj5jYW5jZWw8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAnbmFtZScsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogXCJyZXdyaXRlLXJlc3VsdC1mb3JtXCIsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgfSlcclxuICAgIF07XHJcbiAgICBmb3IgKHZhciBfYSA9IDAsIGRpYWxvZ0RhdGFfMSA9IGRpYWxvZ0RhdGE7IF9hIDwgZGlhbG9nRGF0YV8xLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gZGlhbG9nRGF0YV8xW19hXTtcclxuICAgICAgICBmb3JtTG9hZEFyZWEuYXBwZW5kQ2hpbGQoaXRlbSk7XHJcbiAgICB9XHJcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmZvcm1zWydzYXZlLXJlc3VsdC1mb3JtJ107XHJcbiAgICB2YXIgcmV3cml0ZUZvcm0gPSBkb2N1bWVudC5mb3Jtc1sncmV3cml0ZS1yZXN1bHQtZm9ybSddO1xyXG4gICAgdmFyIGZvcm1CdG5BcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRpYWxvZy1ib3R0b20tYXJlYScpO1xyXG4gICAgdmFyIG5ld0F2YXRhclNlbGVjdG9ycyA9IHtcclxuICAgICAgICBidXR0b25TZWxlY3RvcjogJyNhdmF0YXItYnV0dG9uJyxcclxuICAgICAgICBhdmF0YXJDbG9zZVNlbGVjdG9yOiAnI2F2YXRhci1jbG9zZScsXHJcbiAgICAgICAgcGxheWVyQXZhdGFyTG9hZFNlbGVjdG9yOiAnI3BsYXllci1hdmF0YXInLFxyXG4gICAgICAgIGF2YXRhckJveFNlbGVjdG9yOiAnI2F2YXRhci1ib3gnLFxyXG4gICAgICAgIGF2YXRhcklubmVyQm94U2VsZWN0b3I6ICcjYXZhdGFyLWlubmVyLWJveCcsXHJcbiAgICAgICAgZGlzcGxheVNlbGVjdG9yOiAnI2F2YXRhci1waWN0dXJlJ1xyXG4gICAgfTtcclxuICAgIHZhciB1cGRhdGVBdmF0YXJTZWxlY3RvcnMgPSB7XHJcbiAgICAgICAgYnV0dG9uU2VsZWN0b3I6ICcjYXZhdGFyLWJ1dHRvbi11cGRhdGUnLFxyXG4gICAgICAgIGF2YXRhckNsb3NlU2VsZWN0b3I6ICcjYXZhdGFyLWNsb3NlLXVwZGF0ZScsXHJcbiAgICAgICAgcGxheWVyQXZhdGFyTG9hZFNlbGVjdG9yOiAnI3BsYXllci1hdmF0YXItdXBkYXRlJyxcclxuICAgICAgICBhdmF0YXJCb3hTZWxlY3RvcjogJyNhdmF0YXItYm94LXVwZGF0ZScsXHJcbiAgICAgICAgYXZhdGFySW5uZXJCb3hTZWxlY3RvcjogJyNhdmF0YXItaW5uZXItYm94LXVwZGF0ZScsXHJcbiAgICAgICAgZGlzcGxheVNlbGVjdG9yOiAnI2F2YXRhci1waWN0dXJlLXVwZGF0ZSdcclxuICAgIH07XHJcbiAgICB1c2VyQXZhdGFyTW9kdWxlc18xLmF2YXRhckJ1dHRvbih7IG5ld0F2YXRhclNlbGVjdG9yczogbmV3QXZhdGFyU2VsZWN0b3JzLCBmb3JtU3RhdGU6IGZvcm1TdGF0ZSB9KTtcclxuICAgIHVzZXJBdmF0YXJNb2R1bGVzXzEuYXZhdGFyQnV0dG9uKHsgbmV3QXZhdGFyU2VsZWN0b3JzOiB1cGRhdGVBdmF0YXJTZWxlY3RvcnMsIGZvcm1TdGF0ZTogZm9ybVN0YXRlIH0pO1xyXG4gICAgZm9ybUJ0blN3aXRjaGVyQXJlYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZvcm1Td2l0Y2hlcik7XHJcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGZvcm1CdG5BcmVhLCBmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlhbG9nQnV0dG9uRXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGZvcm1BY3Rpb25Xcml0ZS5jYWxsKHRoaXMsIGV2ZW50LCBmb3JtU3RhdGUpO1xyXG4gICAgfSk7XHJcbiAgICByZXdyaXRlRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmb3JtQWN0aW9uVXBkYXRlKTtcclxuICAgIGZ1bmN0aW9uIGZvcm1Td2l0Y2hlcihldmVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudGFyZ2V0LmRhdGFzZXQuYnRuSWQpIHtcclxuICAgICAgICAgICAgY2FzZSBcIm5ldy1wbGF5ZXJcIjpcclxuICAgICAgICAgICAgICAgIHJlbW92ZUJ1dHRvbkNsYXNzLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuaGlkZShyZXdyaXRlRm9ybSk7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuc2hvdyhmb3JtKTtcclxuICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3QoZXZlbnQudGFyZ2V0LCBcInNlbGVjdGVkLWZvcm1cIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInVwZGF0ZS1wbGF5ZXJcIjpcclxuICAgICAgICAgICAgICAgIHJlbW92ZUJ1dHRvbkNsYXNzLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuaGlkZShmb3JtKTtcclxuICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5zaG93KHJld3JpdGVGb3JtKTtcclxuICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3QoZXZlbnQudGFyZ2V0LCBcInNlbGVjdGVkLWZvcm1cIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUJ1dHRvbkNsYXNzKCkge1xyXG4gICAgICAgIHZhciBidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zZWxlY3RlZC1mb3JtXCIpO1xyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ1dHRvbnMpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgYXBwTWVudV8xLnJlbW92ZUNsYXNzTGlzdChpdGVtLCBcInNlbGVjdGVkLWZvcm1cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkaWFsb2dCdXR0b25FdmVudChldmVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudGFyZ2V0LmRhdGFzZXQuYnV0dG9uSWQpIHtcclxuICAgICAgICAgICAgY2FzZSAnc2F2ZS1yZXN1bHQnOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NhbmNlbCc6XHJcbiAgICAgICAgICAgICAgICBmb3JtTG9hZEFyZWEuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3dFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5oaWRlKHdpbmRvd0VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBmb3JtQWN0aW9uV3JpdGUoZXZlbnQsIGZvcm1TdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm1SZXN1bHQsIHJlcztcclxuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybVJlc3VsdCA9IHRyYW5zZmVyRGF0YVRvT2JqZWN0KHRoaXMsIG1haW5HYW1lT2JqZWN0LCBmb3JtU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvcm1SZXN1bHQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lRGF0YVJlcXVlc3RzU2VydmljZXNNb2R1bGVfMS5nZXRHYW1lUmVzdWx0RGF0YSh7IG1ldGhvZDogJ1BPU1QnLCBkYXRhOiBmb3JtUmVzdWx0IH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JGb3JtTWVzc2FnZSh7IG1lc3NhZ2U6IHJlcy5tZXNzYWdlLCBzdGF0dXM6IHJlcy5zdGF0dXMgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yRm9ybU1lc3NhZ2UoeyBtZXNzYWdlOiBcIkkgY2FudCBzZW5kIHRoaXMsIHBsZWFzZSBjaGVjayBmb3JtIGFnYWluXCIsIHN0YXR1czogXCJyZWplY3RcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGZvcm1BY3Rpb25VcGRhdGUoZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBmb3JtUmVzdWx0LCByZXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1SZXN1bHQgPSB0cmFuc2ZlckRhdGFUb09iamVjdCh0aGlzLCBtYWluR2FtZU9iamVjdCwgZm9ybVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JtUmVzdWx0KSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZURhdGFSZXF1ZXN0c1NlcnZpY2VzTW9kdWxlXzEuZ2V0R2FtZVJlc3VsdERhdGEoeyBtZXRob2Q6ICdQVVQnLCBkYXRhOiBmb3JtUmVzdWx0IH0pXTsgLyphd2FpdCBnZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5IT1NUICsgJ2FwaS9nYW1lLXJlc3VsdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1SZXN1bHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG51bGx9KSovXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYS5zZW50KCkgLyphd2FpdCBnZXREYXRhKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5IT1NUICsgJ2FwaS9nYW1lLXJlc3VsdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1SZXN1bHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG51bGx9KSovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckZvcm1NZXNzYWdlKHsgbWVzc2FnZTogcmVzLm1lc3NhZ2UsIHN0YXR1czogcmVzLnN0YXR1cyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JGb3JtTWVzc2FnZSh7IG1lc3NhZ2U6IFwiSSBjYW50IHNlbmQgdGhpcywgcGxlYXNlIGNoZWNrIGZvcm0gYWdhaW5cIiwgc3RhdHVzOiBcInJlamVjdFwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXJyb3JGb3JtTWVzc2FnZShfYSkge1xyXG4gICAgICAgIHZhciBtZXNzYWdlID0gX2EubWVzc2FnZSwgc3RhdHVzID0gX2Euc3RhdHVzO1xyXG4gICAgICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWxlcnQtbWVzc2FnZVwiKTtcclxuICAgICAgICB2YXIgYWxlcnRUZXh0ID0gXCJcIjtcclxuICAgICAgICBzd2l0Y2ggKHN0YXR1cykge1xyXG4gICAgICAgICAgICBjYXNlIFwicmVqZWN0XCI6XHJcbiAgICAgICAgICAgICAgICBhbGVydFRleHQgPSBcIjxwIGNsYXNzPVxcXCJyZWplY3QtdGV4dFxcXCI+XCIgKyBtZXNzYWdlICsgXCI8L3A+XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIndhcm5pbmdcIjpcclxuICAgICAgICAgICAgICAgIGFsZXJ0VGV4dCA9IFwiPHAgY2xhc3M9XFxcIndhcm5pbmctdGV4dFxcXCI+XCIgKyBtZXNzYWdlICsgXCI8L3A+XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcclxuICAgICAgICAgICAgICAgIGFsZXJ0VGV4dCA9IFwiPHAgY2xhc3M9XFxcInN1Y2Nlc3MtdGV4dFxcXCI+XCIgKyBtZXNzYWdlICsgXCI8L3A+XCI7XHJcbiAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICByZXdyaXRlRm9ybS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBhbGVydFRleHQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gYWxlcnRUZXh0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuaW5pdFJlc3VsdFNjcmVlbiA9IGluaXRSZXN1bHRTY3JlZW47XHJcbmZ1bmN0aW9uIHRyYW5zZmVyRGF0YVRvT2JqZWN0KGRhdGEsIG1haW5HYW1lT2JqZWN0LCBmb3JtU3RhdGUpIHtcclxuICAgIGlmICghZGF0YSlcclxuICAgICAgICB0aHJvdyBFcnJvcihcIk5vIGRhdGEgdG8gdHJhbnNmb3JtXCIpO1xyXG4gICAgdmFyIG9iaiA9IHtcclxuICAgICAgICB1c2VyTmFtZTogbnVsbCxcclxuICAgICAgICB1c2VyRW1haWw6IG51bGwsXHJcbiAgICAgICAgdXNlckF2YXRhcjogbnVsbCxcclxuICAgICAgICBnYW1lUG9pbnRzOiBudWxsLFxyXG4gICAgICAgIGdhbWVDb2luczogbnVsbCxcclxuICAgICAgICB1c2VyUGFzc3dvcmQ6IG51bGwsXHJcbiAgICAgICAgZGVzdHJveVNoaXA6IG51bGwsXHJcbiAgICAgICAgZGVzdHJveUVuZW15OiBudWxsXHJcbiAgICB9O1xyXG4gICAgdmFyIHVzZXJTaGlwRGF0YSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Q7XHJcbiAgICB2YXIgdXNlclNoaXBKb3VybmFsID0gdXNlclNoaXBEYXRhLmpvdXJuYWw7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGFfMSA9IGRhdGE7IF9pIDwgZGF0YV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gZGF0YV8xW19pXTtcclxuICAgICAgICBpZiAoaXRlbS5uYW1lICYmIGl0ZW0udmFsdWUpIHtcclxuICAgICAgICAgICAgb2JqW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpdGVtLm5hbWUgJiYgIWl0ZW0udmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBnYW1lRGF0YSA9IG1haW5HYW1lT2JqZWN0LmdldExldmVsVXNlckRhdGEoKTtcclxuICAgIG9iai5nYW1lUG9pbnRzID0gZ2FtZURhdGEucG9pbnRzO1xyXG4gICAgb2JqLmdhbWVDb2lucyA9IGdhbWVEYXRhLmdhbWVDb2lucztcclxuICAgIG9iai51c2VyQXZhdGFyID0gZm9ybVN0YXRlLmF2YXRhclBpY3R1cmU7XHJcbiAgICBvYmouZGVzdHJveVNoaXAgPSB1c2VyU2hpcEpvdXJuYWwuZGVmYXVsdERhdGEubnVtYmVyRmx5T2ZFbmVteTtcclxuICAgIG9iai5kZXN0cm95RW5lbXkgPSB1c2VyU2hpcEpvdXJuYWwuZGVmYXVsdERhdGEubnVtYmVyT2ZHcm91bmRFbmVteTtcclxuICAgIHJldHVybiBvYmo7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHRbXCJkZWZhdWx0XCJdID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgY2hhbmdlTGV2ZWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vZW5naW5lL2dhbWVNb2R1bGVzL2NoYW5nZUxldmVsc1wiKTtcclxudmFyIHNhdGFydEdhbWVfMSA9IHJlcXVpcmUoXCIuLi8uLi9lbmdpbmUvZ2FtZU1vZHVsZXMvc2F0YXJ0R2FtZVwiKTtcclxudmFyIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9nYW1lSW52ZW50b3J5TW9kdWxlc1wiKTtcclxudmFyIGNvbnN0cnVjdG9ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vY29uc3RydWN0b3JzXCIpKTtcclxuZnVuY3Rpb24gcmVwbGFjZVNoaXBEYXRhKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgYnV5U2hpcERhdGEgPSBfYS5idXlTaGlwRGF0YTtcclxuICAgIHZhciBwbGF5ZXJPYmplY3QgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgdmFyIGRhdGFOb3RUb1JlcGxhY2UgPSB7XHJcbiAgICAgICAgaW52ZW50b3J5OiBwbGF5ZXJPYmplY3QuZGF0YS5pbnZlbnRvcnksXHJcbiAgICAgICAgZmlyZXNwb3Q6IHBsYXllck9iamVjdC5kYXRhLmZpcmVzcG90LFxyXG4gICAgICAgIGd1bnM6IHBsYXllck9iamVjdC5kYXRhLmd1bnMsXHJcbiAgICAgICAgbnVtYmVyT2ZsaWZlOiBwbGF5ZXJPYmplY3QubnVtYmVyT2ZsaWZlLFxyXG4gICAgICAgIGhlYWx0aFBvaW50OiBwbGF5ZXJPYmplY3QuaGVhbHRoUG9pbnQsXHJcbiAgICAgICAgam91cm5hbDogcGxheWVyT2JqZWN0LmpvdXJuYWxcclxuICAgIH07XHJcbiAgICB2YXIgbmV3U2hpcCA9IHNhdGFydEdhbWVfMS5uZXdQbGF5ZXJTaGlwQ29uc3RydWN0KHsgUGxheWVyU2hpcDogY29uc3RydWN0b3JzLlBsYXllclNoaXAsIHVzZXJEYXRhOiBidXlTaGlwRGF0YS5kYXRhLCBzaGlwTGlmZTogNSB9KTtcclxuICAgIGNoYW5nZUxldmVsc18xLnJlbmV3UGxheWVyU2hpcCh7IG9yaWdpbkRhdGE6IHBsYXllck9iamVjdC5kYXRhLCBuZXdEYXRhOiBuZXdTaGlwLmRhdGEgfSk7XHJcbiAgICBjaGFuZ2VMZXZlbHNfMS5yZW5ld1BsYXllclNoaXAoeyBvcmlnaW5EYXRhOiBwbGF5ZXJPYmplY3QsIG5ld0RhdGE6IG5ld1NoaXAgfSk7XHJcbiAgICBwbGF5ZXJPYmplY3QucGxheWVyU2hpcFRleHR1cmVDaGFuZ2UoKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YU5vdFRvUmVwbGFjZS5pbnZlbnRvcnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBwbGF5ZXJPYmplY3QuZGF0YS5pbnZlbnRvcnlbaV0gPSBkYXRhTm90VG9SZXBsYWNlLmludmVudG9yeVtpXTtcclxuICAgICAgICBkYXRhTm90VG9SZXBsYWNlLmd1bnNbaV0gPSBnYW1lSW52ZW50b3J5TW9kdWxlc18xLmFzc2lnbkd1bnNQb3NpdGlvbih7IGd1bjogZGF0YU5vdFRvUmVwbGFjZS5ndW5zW2ldLCBmaXJlc3BvdDogcGxheWVyT2JqZWN0LmRhdGEuZmlyZXNwb3RbaV0gfSk7XHJcbiAgICAgICAgcGxheWVyT2JqZWN0LmRhdGEuZ3Vuc1tpXSA9IGRhdGFOb3RUb1JlcGxhY2UuZ3Vuc1tpXTtcclxuICAgIH1cclxuICAgIHBsYXllck9iamVjdC5udW1iZXJPZmxpZmUgPSBkYXRhTm90VG9SZXBsYWNlLm51bWJlck9mbGlmZTtcclxuICAgIHBsYXllck9iamVjdC5oZWFsdGhQb2ludCA9IGRhdGFOb3RUb1JlcGxhY2UuaGVhbHRoUG9pbnQ7XHJcbiAgICBwbGF5ZXJPYmplY3Quam91cm5hbCA9IGRhdGFOb3RUb1JlcGxhY2Uuam91cm5hbDtcclxufVxyXG5leHBvcnRzLnJlcGxhY2VTaGlwRGF0YSA9IHJlcGxhY2VTaGlwRGF0YTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL3BsYXllclVuaXRNb2R1bGVcIik7XHJcbnZhciBwYWdlc0J1aWxkZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9hcHBNZW51L3BhZ2VzQnVpbGRlclwiKTtcclxuZnVuY3Rpb24gZGV0ZWN0T2JqZWN0c0FzTWFwKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIHZhciBhbGxCbG9ja3MgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsTWFwQmxvY2tzO1xyXG4gICAgdmFyIGV4dHJhU2Vjb25kcyA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRXh0cmFTZWNvbmRzO1xyXG4gICAgaWYgKGV4dHJhU2Vjb25kcyAlIDUgPT09IDApIHtcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2sueCA+IDAgJiYgYmxvY2sueCA8IHdpbmRvdy5pbm5lcldpZHRoICYmIGJsb2NrLnkgPiAwICYmIGJsb2NrLnkgPCB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wYXJlQmxvY2sgPSB0aGlzXzEubWFwRmluZGVyLmZpbmQoZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0LmluZGV4ID09PSBibG9jay5pbmRleDsgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBhcmVCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYmxvY2suZGV0YWlscylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJsb2NrLmRldGFpbHMuY29sbGlzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrID0gT2JqZWN0LmFzc2lnbih7fSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogYmxvY2suaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNYXBYOiAoYmxvY2suZGVmYXVsdE1hcFgpID8gYmxvY2suZGVmYXVsdE1hcFggOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWFwWTogKGJsb2NrLmRlZmF1bHRNYXBZKSA/IGJsb2NrLmRlZmF1bHRNYXBZIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogKGJsb2NrLngpID8gYmxvY2sueCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IChibG9jay55KSA/IGJsb2NrLnkgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb246IChibG9jay5kZXRhaWxzLmNvbGxpc2lvbikgPyBibG9jay5kZXRhaWxzLmNvbGxpc2lvbiA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBDb2xvcjogKGJsb2NrLmRldGFpbHMubWFwQ29sb3IpID8gYmxvY2suZGV0YWlscy5tYXBDb2xvciA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNfMS5tYXBGaW5kZXIgPSB0aGlzXzEubWFwRmluZGVyLmNvbmNhdChuZXdCbG9jayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciB0aGlzXzEgPSB0aGlzLCBuZXdCbG9jaztcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFsbEJsb2Nrc18xID0gYWxsQmxvY2tzOyBfaSA8IGFsbEJsb2Nrc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYmxvY2sgPSBhbGxCbG9ja3NfMVtfaV07XHJcbiAgICAgICAgICAgIF9sb29wXzEoYmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLm1hcEZpbmRlcjtcclxufVxyXG5leHBvcnRzLmRldGVjdE9iamVjdHNBc01hcCA9IGRldGVjdE9iamVjdHNBc01hcDtcclxuZnVuY3Rpb24gY3JlYXRlTWFwUmVuZGVyRmllbGQoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgaWYgKHByb2Nlc3MuZW52LkdST1VORF9DSEFSQUNURVJTX0lOVkVOVE9SWSA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICAgIHZhciBncm91bmRQbGF5ZXIgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgICAgIHZhciBhbGxCbG9ja3MgPSBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsTWFwQmxvY2tzO1xyXG4gICAgICAgIHZhciBtYXBQcm9wcyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IHBhcnNlSW50KGFsbEJsb2Nrc1swXS5tYXBTaXplSG9yaXpvbnRhbCksXHJcbiAgICAgICAgICAgIGhlaWdodDogcGFyc2VJbnQoYWxsQmxvY2tzWzBdLm1hcFNpemVWZXJ0aWNhbCksXHJcbiAgICAgICAgICAgIGJsb2NrU2l6ZTogYWxsQmxvY2tzWzBdLndpZHRoLFxyXG4gICAgICAgICAgICBpbnZlbnRvcnlNYXA6IGdyb3VuZFBsYXllci5tYXBGaW5kZXJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHBsYXllclVuaXRNb2R1bGVfMS5vcGVuSW52ZW50b3J5KCk7XHJcbiAgICAgICAgY3JlYXRlTWFwQ29udGV4dCh7XHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICAgICAgYWxsQmxvY2tzOiBhbGxCbG9ja3MsXHJcbiAgICAgICAgICAgIG1hcFByb3BzOiBtYXBQcm9wcyxcclxuICAgICAgICAgICAgZ3JvdW5kUGxheWVyOiBncm91bmRQbGF5ZXJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHBsYXllclVuaXRNb2R1bGVfMS5oaWRlSW52ZW50b3J5KCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVNYXBSZW5kZXJGaWVsZCA9IGNyZWF0ZU1hcFJlbmRlckZpZWxkO1xyXG5mdW5jdGlvbiBjcmVhdGVNYXBDb250ZXh0KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgYWxsQmxvY2tzID0gX2EuYWxsQmxvY2tzLCBtYXBQcm9wcyA9IF9hLm1hcFByb3BzLCBncm91bmRQbGF5ZXIgPSBfYS5ncm91bmRQbGF5ZXI7XHJcbiAgICB2YXIgb2JqZWN0VG9SZW5kZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2JhY2twYWNrLWJvZHlcIik7XHJcbiAgICB2YXIgZXh0cmFTZWNvbmRzID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICB2YXIgY291bnRpbmcgPSAwO1xyXG4gICAgdmFyIHBsYXllclNob3cgPSB0cnVlO1xyXG4gICAgb2JqZWN0VG9SZW5kZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB2YXIgbWFwTmFtZSA9IHBhZ2VzQnVpbGRlcl8xLmNyZWF0ZVNpbXBsZUVsZW1lbnRzKHtcclxuICAgICAgICB0YWduYW1lOiAnaDMnLFxyXG4gICAgICAgIGNsYXNzTGlzdDogXCJzaWRlLXBhbmVsLW5hbWVcIixcclxuICAgICAgICBpbm5lclRleHQ6ICdMZXZlbCBNYXAgPHA+UHJlc3MgTSB0byBjbG9zZTwvcD4nLFxyXG4gICAgICAgIGlkTmFtZTogbnVsbFxyXG4gICAgfSk7XHJcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICB2YXIgYmxvY2tJbmRleCA9IChvYmplY3RUb1JlbmRlclsnb2Zmc2V0V2lkdGgnXSAvIChtYXBQcm9wcy53aWR0aCAqIDUwKSk7XHJcbiAgICBjYW52YXMud2lkdGggPSBtYXBQcm9wcy53aWR0aCAqIChvYmplY3RUb1JlbmRlclsnb2Zmc2V0V2lkdGgnXSAvIG1hcFByb3BzLndpZHRoKTtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSBtYXBQcm9wcy5oZWlnaHQgKiAob2JqZWN0VG9SZW5kZXJbJ29mZnNldFdpZHRoJ10gLyBtYXBQcm9wcy53aWR0aCk7XHJcbiAgICB2YXIgbWFwUGl4ZWxJbmRleCA9IG9iamVjdFRvUmVuZGVyWydvZmZzZXRXaWR0aCddIC8gbWFwUHJvcHMud2lkdGg7XHJcbiAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBvYmplY3RUb1JlbmRlci5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgb2JqZWN0VG9SZW5kZXIucHJlcGVuZChtYXBOYW1lKTtcclxuICAgIHZhciBtYXBFbmdpbmUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG1hcEJsb2NrID0gZ3JvdW5kUGxheWVyLmRldGVjdE9iamVjdHNBc01hcCh7XHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdFxyXG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrLmRldGFpbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay5kZXRhaWxzLmNvbGxpc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPT09ICdmYWxzZScgfHwgcHJvY2Vzcy5lbnYuR1JPVU5EX05QQ19ESUFMT0dfQUNUSVZFID09PSAndHJ1ZScpIHtcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChtYXBFbmdpbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBtYXBCbG9ja18xID0gbWFwQmxvY2s7IF9pIDwgbWFwQmxvY2tfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIG1hcEl0ZW0gPSBtYXBCbG9ja18xW19pXTtcclxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IChtYXBJdGVtLmRldGFpbHMubWFwQ29sb3IpID8gbWFwSXRlbS5kZXRhaWxzLm1hcENvbG9yIDogXCJyZ2JhKDIyNSwgMjA4LCAwLCAxKVwiO1xyXG4gICAgICAgICAgICB2YXIgeFBvcyA9IChtYXBJdGVtLmRlZmF1bHRNYXBYKSA/IG1hcEl0ZW0uZGVmYXVsdE1hcFggOiBtYXBJdGVtLng7XHJcbiAgICAgICAgICAgIHZhciB5UG9zID0gKG1hcEl0ZW0uZGVmYXVsdE1hcFkpID8gbWFwSXRlbS5kZWZhdWx0TWFwWSA6IG1hcEl0ZW0ueTtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHhQb3MgKiBibG9ja0luZGV4LCAoeVBvcyAqIGJsb2NrSW5kZXgpICsgNTAsIG1hcFBpeGVsSW5kZXgsIG1hcFBpeGVsSW5kZXgpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb3VudGluZyArPSAxO1xyXG4gICAgICAgIGlmIChwbGF5ZXJTaG93KSB7XHJcbiAgICAgICAgICAgIHZhciBwbGF5ZXJQb3NpdGlvblggPSBncm91bmRQbGF5ZXIuY3VycmVudEdyb3VuZEJsb2NrLmRlZmF1bHRNYXBYO1xyXG4gICAgICAgICAgICB2YXIgcGxheWVyUG9zaXRpb25ZID0gZ3JvdW5kUGxheWVyLmN1cnJlbnRHcm91bmRCbG9jay5kZWZhdWx0TWFwWSAtIG1hcFByb3BzLmJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgLy9jdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2JhKDIyNSwgOCwgMCwgMSlcIjtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHBsYXllclBvc2l0aW9uWCAqIGJsb2NrSW5kZXgsIChwbGF5ZXJQb3NpdGlvblkgKiBibG9ja0luZGV4KSArIDYwLCBtYXBQaXhlbEluZGV4ICogMiwgbWFwUGl4ZWxJbmRleCAqIDIpO1xyXG4gICAgICAgICAgICAvL2N0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIGlmIChjb3VudGluZyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb3VudGluZyA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb3VudGluZyA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJTaG93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvdW50aW5nID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIDIwMCk7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gdXBkYXRlTWFwKF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdDtcclxuICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgfHwgdGhpcy5hbHdheXNNb3ZlKVxyXG4gICAgICAgIHRoaXMubW92ZUVuZW15ZXMoKTtcclxuICAgIGlmIChNYXRoLnNpZ24odGhpcy5zcGVlZCkgPiAwICYmIHRoaXMueCArIHdpbmRvdy5pbm5lcldpZHRoIDwgMCkge1xyXG4gICAgICAgIHRoaXMueCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoTWF0aC5zaWduKHRoaXMuc3BlZWQpIDwgMCAmJiB0aGlzLnggPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xyXG4gICAgICAgIHRoaXMueCA9IDAgLSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnVwZGF0ZU1hcCA9IHVwZGF0ZU1hcDtcclxuZnVuY3Rpb24gY2hhbmdlUGFydE9mVGV4dHVyZShtYWluR2FtZU9iamVjdCwgYmFja2dyb3VuZEFycmF5KSB7XHJcbiAgICB2YXIgbGV2ZWxEYXRhID0gbWFpbkdhbWVPYmplY3QuZ2V0TGV2ZWxVc2VyRGF0YSgpO1xyXG4gICAgaWYgKGxldmVsRGF0YS5taW51dGVzIDw9IHRoaXMudGltZVRvRXh0cmFNYXBNaW51dGVzXHJcbiAgICAgICAgJiYgbGV2ZWxEYXRhLnNlY29uZHMgPD0gdGhpcy50aW1lVG9FeHRyYU1hcFNlY29uZHNcclxuICAgICAgICAmJiB0aGlzLmV4dHJhTWFwICYmIHRoaXMueCArIDIwMCA+PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IF9fZGlybmFtZSArIHRoaXMuZXh0cmFNYXA7XHJcbiAgICAgICAgdGhpcy5sb2FkVGV4dHVyZSgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuY2hhbmdlUGFydE9mVGV4dHVyZSA9IGNoYW5nZVBhcnRPZlRleHR1cmU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBlbmVteU1vZHVsZXMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uL2VuZW1pZXNcIikpO1xyXG52YXIgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2dhbWVTaWRlT2JqZWN0c01vZHVsZVwiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbnZhciBidWxsZXRzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2J1bGxldHNNb2R1bGVcIik7XHJcbnZhciBTaWRlT2JqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2lkZU9iamVjdChfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdGhpcy54ID0gZGF0YS54O1xyXG4gICAgICAgIHRoaXMueSA9IGRhdGEueTtcclxuICAgICAgICB0aGlzLnN4ID0gZGF0YS5zeDtcclxuICAgICAgICB0aGlzLnN5ID0gZGF0YS5zeTtcclxuICAgICAgICB0aGlzLnNXaWR0aCA9IGRhdGEuc1dpZHRoO1xyXG4gICAgICAgIHRoaXMuc0hlaWdodCA9IGRhdGEuc0hlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoID0gZGF0YS53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gKGRhdGEuYWJzb2x1dGVMaW5rKSA/IGRhdGEuYWJzb2x1dGVMaW5rIDogX19kaXJuYW1lICsgZGF0YS50ZXh0dXJlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RlcHMgPSBkYXRhLmFuaW1hdGlvblN0ZXBzO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZJdGVtcyA9IGRhdGEubnVtYmVyT2ZJdGVtcztcclxuICAgICAgICB0aGlzLnRhcmdldCA9IGRhdGEudGFyZ2V0O1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0RnJhbWUgPSAwO1xyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IChkYXRhLnNwZWVkKSA/IGRhdGEuc3BlZWQgOiAwO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFNwZWVkID0gKGRhdGEuc3BlZWQpID8gZGF0YS5zcGVlZCA6IDA7XHJcbiAgICAgICAgdGhpcy5waWN0dXJlc1dpZHRoID0gZGF0YS5waWN0dXJlc1dpZHRoO1xyXG4gICAgICAgIHRoaXMuZGFtYWdlID0gKGRhdGEuZGFtYWdlKSA/IGRhdGEuZGFtYWdlIDogbnVsbDtcclxuICAgICAgICB0aGlzLm9iamVjdE93bmVyID0gKGRhdGEub2JqZWN0T3duZXIpID8gZGF0YS5vYmplY3RPd25lciA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhQb2ludCA9IChkYXRhLmhlYWx0aFBvaW50KSA/IGRhdGEuaGVhbHRoUG9pbnQgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNCYWNrZ3JvdW5kID0gKGRhdGEuaXNCYWNrZ3JvdW5kKSA/IGRhdGEuaXNCYWNrZ3JvdW5kIDogbnVsbDtcclxuICAgICAgICB0aGlzLmV4cGxvc2lvbiA9IChkYXRhLmV4cGxvc2lvbikgPyBkYXRhLmV4cGxvc2lvbiA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5wb2ludHNQZXJVbml0ID0gKGRhdGEucG9pbnRzUGVyVW5pdCkgPyBkYXRhLnBvaW50c1BlclVuaXQgOiAwO1xyXG4gICAgICAgIHRoaXMuZXh0cmFPYmplY3RzID0gKGRhdGEuZXh0cmFPYmplY3RzKSA/IGRhdGEuZXh0cmFPYmplY3RzIDogMDtcclxuICAgICAgICB0aGlzLmNvbGxpZGVFeHBsb3Npb25BbmltYXRpb24gPSBkYXRhLmNvbGxpZGVFeHBsb3Npb25BbmltYXRpb247XHJcbiAgICAgICAgdGhpcy5zb3VuZCA9IChkYXRhLnNvdW5kKSA/IGRhdGEuc291bmQgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuc2lkZSA9IChkYXRhLnNpZGUpID8gZGF0YS5zaWRlIDogbnVsbDtcclxuICAgICAgICB0aGlzLmd1bnMgPSAoZGF0YS5ndW5zKSA/IGRhdGEuZ3VucyA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZWdyZWUgPSAoZGF0YS5kZWdyZWUpID8gZGF0YS5kZWdyZWUgOiAwO1xyXG4gICAgICAgIHRoaXMucmFwaWRGaXJlID0gKGRhdGEucmFwaWRGaXJlKSA/IGRhdGEucmFwaWRGaXJlIDogbnVsbDtcclxuICAgICAgICB0aGlzLmlzU2hvdCA9IChkYXRhLmlzU2hvdCkgPyBkYXRhLmlzU2hvdCA6IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2hvdEFuZ2xlID0gMDtcclxuICAgICAgICB0aGlzLnRyYWRlUHJvcGVydHllcyA9IChkYXRhLnRyYWRlUHJvcGVydHllcykgPyBkYXRhLnRyYWRlUHJvcGVydHllcyA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0QW5nbGUgPSAoZGF0YS5kZWZhdWx0QW5nbGUpID8gZGF0YS5kZWZhdWx0QW5nbGUgOiBudWxsO1xyXG4gICAgICAgIHRoaXMudGltaW5nTWludXRlc1BsYWNlZCA9IChkYXRhLnRpbWluZ01pbnV0ZXNQbGFjZWQpID8gZGF0YS50aW1pbmdNaW51dGVzUGxhY2VkIDogbnVsbDtcclxuICAgICAgICB0aGlzLnRpbWluZ1NlY29uZHNQbGFjZWQgPSAoZGF0YS50aW1pbmdTZWNvbmRzUGxhY2VkKSA/IGRhdGEudGltaW5nU2Vjb25kc1BsYWNlZCA6IG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU2lkZU9iamVjdDtcclxufSgpKTtcclxuZXhwb3J0cy5TaWRlT2JqZWN0ID0gU2lkZU9iamVjdDtcclxuU2lkZU9iamVjdC5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGVuZW15TW9kdWxlcy5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5TaWRlT2JqZWN0LnByb3RvdHlwZS5kaXNwbGF5T2JqZWN0QXRTY2VuZSA9IGVuZW15TW9kdWxlcy5kaXNwbGF5T2JqZWN0QXRTY2VuZTtcclxuU2lkZU9iamVjdC5wcm90b3R5cGUuc2hvdCA9IGVuZW15TW9kdWxlcy5zaG90O1xyXG5TaWRlT2JqZWN0LnByb3RvdHlwZS5maXJlQW5pbWF0aW9uRW5kZWQgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5maXJlQW5pbWF0aW9uRW5kZWQ7XHJcblNpZGVPYmplY3QucHJvdG90eXBlLnRha2VEYW1hZ2UgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEudGFrZURhbWFnZTtcclxuU2lkZU9iamVjdC5wcm90b3R5cGUubWFwT2JqZWN0TW92ZSA9IGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLm1hcE9iamVjdE1vdmU7XHJcblNpZGVPYmplY3QucHJvdG90eXBlLmVuZW15RGFtYWdlQW5pbWF0aW9uID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLmVuZW15RGFtYWdlQW5pbWF0aW9uO1xyXG5TaWRlT2JqZWN0LnByb3RvdHlwZS5zcGF3bkNvaW4gPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEuc3Bhd25Db2luO1xyXG5TaWRlT2JqZWN0LnByb3RvdHlwZS5zaWRlT2JqZWN0U2hvdCA9IGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLnNpZGVPYmplY3RTaG90O1xyXG5TaWRlT2JqZWN0LnByb3RvdHlwZS5idWxsZXRTcGVlZCA9IGJ1bGxldHNNb2R1bGVfMS5idWxsZXRTcGVlZDtcclxuU2lkZU9iamVjdC5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5sb2FkVGV4dHVyZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5lbWllcy9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpO1xyXG52YXIgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2dhbWVTaWRlT2JqZWN0c01vZHVsZVwiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMiA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbnZhciBwbGF5ZXJVbml0TW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2R5bmFtaWNMZXZlbHMvcGxheWVyVW5pdE1vZHVsZVwiKTtcclxudmFyIGJ1bGxldHNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvYnVsbGV0c01vZHVsZVwiKTtcclxudmFyIGVuZ2luZU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZW5naW5lTW9kdWxlc1wiKTtcclxudmFyIGR5bmFtaWNMZXZlbE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9keW5hbWljTGV2ZWxzL2R5bmFtaWNMZXZlbE1vZHVsZVwiKTtcclxudmFyIG1pbmltYXBfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9taW5pbWFwXCIpO1xyXG52YXIgRHluYW1pY1VzZXJDb25zdHJ1Y3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vLyAgc3ByaXRlT2JqZWN0c0FuaW1hdGlvblxyXG4gICAgZnVuY3Rpb24gRHluYW1pY1VzZXJDb25zdHJ1Y3RvcihfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdGhpcy54ID0gKGRhdGEueCkgPyBkYXRhLnggOiB3aW5kb3cuaW5uZXJXaWR0aCAvIDIgLSBkYXRhLndpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLnkgPSAoZGF0YS55KSA/IGRhdGEueSA6IHdpbmRvdy5pbm5lckhlaWdodCAvIDIgLSBkYXRhLmhlaWdodCAvIDI7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBkYXRhLmhlaWdodDtcclxuICAgICAgICB0aGlzLmRlZmF1bHRXaWR0aCA9IGRhdGEud2lkdGg7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0SGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5pbWFnZVdpZHRoID0gZGF0YS5pbWFnZVdpZHRoO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VIZWlnaHQgPSBkYXRhLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuaW1hZ2VXaWR0aERlZmF1bHQgPSBkYXRhLmltYWdlV2lkdGg7XHJcbiAgICAgICAgdGhpcy5pbWFnZUhlaWdodERlZmF1bHQgPSBkYXRhLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMudGV4dHVyZSA9IF9fZGlybmFtZSArIGRhdGEudGV4dHVyZTtcclxuICAgICAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuaW1nLnNyYyA9IF9fZGlybmFtZSArIGRhdGEudGV4dHVyZTtcclxuICAgICAgICB0aGlzLnN4ID0gMDtcclxuICAgICAgICB0aGlzLnN5ID0gMDtcclxuICAgICAgICB0aGlzLnBpY3R1cmVzV2lkdGggPSBkYXRhLmltYWdlV2lkdGg7XHJcbiAgICAgICAgdGhpcy5zV2lkdGggPSBkYXRhLmltYWdlV2lkdGggLyBkYXRhLm51bWJlck9mSXRlbXM7XHJcbiAgICAgICAgdGhpcy5zSGVpZ2h0ID0gZGF0YS5pbWFnZUhlaWdodCAvIGRhdGEubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zO1xyXG4gICAgICAgIHRoaXMuc1dpZHRoRGVmYXVsdCA9IGRhdGEuaW1hZ2VXaWR0aCAvIGRhdGEubnVtYmVyT2ZJdGVtcztcclxuICAgICAgICB0aGlzLnNIZWlnaHREZWZhdWx0ID0gZGF0YS5pbWFnZUhlaWdodCAvIGRhdGEubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBkYXRhLnNwZWVkO1xyXG4gICAgICAgIHRoaXMuZ3JvdW5kVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxlZnRXYWxsVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJpZ2h0V2FsbFRvdWNoID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jZWlsaW5nVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm51bWJlck9mSnVtcCA9IDI7XHJcbiAgICAgICAgdGhpcy5pbnZlbnRvcnkgPSBbXTtcclxuICAgICAgICB0aGlzLnBsYXllckRpcmVjdGlvbkhvcml6b250YWwgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJEaXJlY3Rpb25WZXJ0aWNhbCA9IFwic3RhbmRcIjtcclxuICAgICAgICB0aGlzLmlzUnVuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbkVsZXZhdG9yID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vblN0YWlycyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IGRhdGEuYW5pbWF0aW9ucztcclxuICAgICAgICB0aGlzLmFuaW1hdGlvblN0ZXBzID0gZGF0YS5hbmltYXRpb25TdGVwcztcclxuICAgICAgICB0aGlzLm51bWJlck9mVmVydGljYWxJdGVtcyA9IGRhdGEubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZJdGVtcyA9IGRhdGEubnVtYmVyT2ZJdGVtcztcclxuICAgICAgICB0aGlzLmRldGVjdEZyYW1lID0gMDtcclxuICAgICAgICB0aGlzLnhQb3MgPSAwO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEuZGF0YTtcclxuICAgICAgICB0aGlzLmlzU2hvdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zaG90QW5nbGUgPSAzNjA7XHJcbiAgICAgICAgdGhpcy54QWRqID0gMDtcclxuICAgICAgICB0aGlzLnNob3RTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub2JqZWN0T3duZXIgPSBcImdyb3VuZFBsYXllclwiO1xyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhQb2ludCA9IGRhdGEuaGVhbHRoUG9pbnQ7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0SGVhbHRoID0gZGF0YS5oZWFsdGhQb2ludDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRXYWxsQmxvY2sgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEdyb3VuZEJsb2NrID0gbnVsbDtcclxuICAgICAgICB0aGlzLmN1cnJlbnREaWFsb2dDaGFyYWN0ZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25MZWFkZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBcImdyb3VuZC1vYmplY3RcIjtcclxuICAgICAgICB0aGlzLm1hcEZpbmRlciA9IFtdO1xyXG4gICAgICAgIHRoaXMuc291bmQgPSAoZGF0YS5zb3VuZCkgPyBkYXRhLnNvdW5kIDogbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBEeW5hbWljVXNlckNvbnN0cnVjdG9yO1xyXG59KCkpO1xyXG5leHBvcnRzLkR5bmFtaWNVc2VyQ29uc3RydWN0b3IgPSBEeW5hbWljVXNlckNvbnN0cnVjdG9yO1xyXG5EeW5hbWljVXNlckNvbnN0cnVjdG9yLnByb3RvdHlwZS5kaXNwbGF5T2JqZWN0QXRTY2VuZSA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5kaXNwbGF5T2JqZWN0QXRTY2VuZTtcclxuRHluYW1pY1VzZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5sb2FkVGV4dHVyZTtcclxuRHluYW1pY1VzZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMi5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5EeW5hbWljVXNlckNvbnN0cnVjdG9yLnByb3RvdHlwZS5jaGFuZ2VBbmltYXRpb25QYXJhbWV0ZXJzID0gcGxheWVyVW5pdE1vZHVsZV8xLmNoYW5nZUFuaW1hdGlvblBhcmFtZXRlcnM7XHJcbkR5bmFtaWNVc2VyQ29uc3RydWN0b3IucHJvdG90eXBlLmNoYW5nZVZlcnRpY2FsQW5pbWF0aW9uUGljdHVyZSA9IHBsYXllclVuaXRNb2R1bGVfMS5jaGFuZ2VWZXJ0aWNhbEFuaW1hdGlvblBpY3R1cmU7XHJcbkR5bmFtaWNVc2VyQ29uc3RydWN0b3IucHJvdG90eXBlLmJ1bGxldFNwZWVkID0gYnVsbGV0c01vZHVsZV8xLmJ1bGxldFNwZWVkO1xyXG5EeW5hbWljVXNlckNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlRGFtYWdlID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLnRha2VEYW1hZ2U7XHJcbkR5bmFtaWNVc2VyQ29uc3RydWN0b3IucHJvdG90eXBlLmdldE9iamVjdFBvc2l0aW9uID0gZW5naW5lTW9kdWxlc18xLmdldE9iamVjdFBvc2l0aW9uO1xyXG5EeW5hbWljVXNlckNvbnN0cnVjdG9yLnByb3RvdHlwZS5zdGFpcnNNb3ZlID0gZHluYW1pY0xldmVsTW9kdWxlXzEuc3RhaXJzTW92ZTtcclxuRHluYW1pY1VzZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZGV0ZWN0T2JqZWN0c0FzTWFwID0gbWluaW1hcF8xLmRldGVjdE9iamVjdHNBc01hcDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBzYXZlR2FtZU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZ2FtZU1vZHVsZXMvc2F2ZV9sb2FkL3NhdmVHYW1lTW9kdWxlc1wiKTtcclxudmFyIGxvYWRHYW1lRGF0YV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lTW9kdWxlcy9zYXZlX2xvYWQvbG9hZEdhbWVEYXRhXCIpO1xyXG5mdW5jdGlvbiBpbml0U2F2ZUxvYWRTY3JlZW4oX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtZW51T2JqZWN0cywgc2F2ZURhdGE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudU9iamVjdHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGb3JtOiBkb2N1bWVudC5mb3Jtc1snbWFpbi1zYXZlLWZvcm0nXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZVNjcmVlbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zYXZlLWxvYWQtd3JhcHBlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbG9hZEdhbWVEYXRhXzEuc2hvd1NhdmVEYXRhKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVEYXRhID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRHYW1lRGF0YV8xLmRpc3BsYXlTYXZlc09uU2NyZWVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZVNjcmVlbjogbWVudU9iamVjdHMuc2F2ZVNjcmVlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZURhdGE6IHNhdmVEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZvcm06IG1lbnVPYmplY3RzLnNhdmVGb3JtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZVNjcmVlbjogbWVudU9iamVjdHMuc2F2ZVNjcmVlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuaW5pdFNhdmVMb2FkU2NyZWVuID0gaW5pdFNhdmVMb2FkU2NyZWVuO1xyXG5mdW5jdGlvbiBzYXZlR2FtZUV2ZW50cyhfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGdldENvbnRleHQ7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGluaXRTYXZlTG9hZFNjcmVlbih7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q29udGV4dCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBnZXRDb250ZXh0LnNhdmVGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2F2ZU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cyB8fCBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZU92ZXIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVdpbiB8fCBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuc2hvcEFjdGl2ZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZU5hbWUgPSBzYXZlR2FtZU1vZHVsZXNfMS5jb2xsZWN0RGF0YS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2F2ZUdhbWVNb2R1bGVzXzEuY3JlYXRlU2F2ZSh7IHNhdmVOYW1lOiBzYXZlTmFtZSwgc2F2ZURhdGE6IG1haW5HYW1lT2JqZWN0LCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zYXZlR2FtZUV2ZW50cyA9IHNhdmVHYW1lRXZlbnRzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcclxudmFyIHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcclxudmFyIHNhdmVMb2FkTWVudV8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2FwcE1lbnUvc2F2ZUxvYWRNZW51XCIpO1xyXG52YXIgc2VydmVyUmVxdWVzdE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9zZXJ2ZXIvc2VydmVyUmVxdWVzdE1vZHVsZXNcIik7XHJcbnZhciBsb2FkR2FtZURhdGFfMSA9IHJlcXVpcmUoXCIuL2xvYWRHYW1lRGF0YVwiKTtcclxuZnVuY3Rpb24gY29tcGFyZVNhdmVOYW1lKF9hKSB7XHJcbiAgICB2YXIgYWxsRGF0YSA9IF9hLmFsbERhdGEsIHNhdmVHYW1lRGF0YSA9IF9hLnNhdmVHYW1lRGF0YTtcclxuICAgIHZhciBzZWFyY2hEYXRhID0gYWxsRGF0YS5maW5kKGZ1bmN0aW9uIChzYXZlKSB7IHJldHVybiBzYXZlLnNhdmVOYW1lID09PSBzYXZlR2FtZURhdGEuc2F2ZU5hbWU7IH0pO1xyXG4gICAgaWYgKHNlYXJjaERhdGEpXHJcbiAgICAgICAgc2F2ZURpYWxvZyh7IHRleHQ6IFwiSSBjYW50IGNyZWF0ZSBzYXZlLCBOYW1lIGFscmVhZHkgRXhpc3QhXCIsIHR5cGVPZldhcm5pbmc6IFwicmVqZWN0LXRleHRcIiB9KTtcclxuICAgIHJldHVybiAoc2VhcmNoRGF0YSkgPyBmYWxzZSA6IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gc2F2ZURpYWxvZyhfYSkge1xyXG4gICAgdmFyIHRleHQgPSBfYS50ZXh0LCB0eXBlT2ZXYXJuaW5nID0gX2EudHlwZU9mV2FybmluZztcclxuICAgIHZhciB0YXJnZXQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNhdmUtZGlhbG9nLXdpbmRvd1wiKSk7XHJcbiAgICB3cml0ZUluc2lkZUVsZW1lbnRzKHsgZGF0YTogXCJcIiB9KTtcclxuICAgIGlmICghdGV4dClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB3cml0ZUluc2lkZUVsZW1lbnRzKHsgZGF0YTogdGV4dCB9KTtcclxuICAgIGZ1bmN0aW9uIHdyaXRlSW5zaWRlRWxlbWVudHMoX2EpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IF9hLmRhdGE7XHJcbiAgICAgICAgdGFyZ2V0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW0uaW5uZXJIVE1MID0gXCI8cCBjbGFzcz1cIiArIHR5cGVPZldhcm5pbmcgKyBcIj5cIiArIGRhdGEgKyBcIjwvcD5cIjsgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zYXZlRGlhbG9nID0gc2F2ZURpYWxvZztcclxuZnVuY3Rpb24gY3JlYXRlU2F2ZShfYSkge1xyXG4gICAgdmFyIHNhdmVOYW1lID0gX2Euc2F2ZU5hbWUsIHNhdmVEYXRhID0gX2Euc2F2ZURhdGEsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGdldENvbnRleHQsIHNhdmVUaW1lLCBwbGV5ZXJJbmZvcm1hdGlvbiwgaW5mb3JtYXRpb25Ub1Nob3csIHNhdmVHYW1lRGF0YSwgaW1hZ2UsIGFsbERhdGE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzYXZlTmFtZSB8fCAhc2F2ZURhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBjb25zb2xlLmVycm9yKCdUaGVyZSBpcyBubyBzYXZlTmFtZSBvciBzYXZlRGF0YScpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQocHJvY2Vzcy5lbnYuTlVNQkVSX09GX1NBVkVTKSA+PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkR2FtZURhdGFfMS5sb2FkZWRTY3JlZW5EZWFjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2F2ZURpYWxvZyh7IHRleHQ6IFwiWW91IGhhdmUgMTAgc2F2ZXMgaXRgcyBtYXhpbXVtXCIsIHR5cGVPZldhcm5pbmc6IFwid2FybmluZy10ZXh0XCIgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsb2FkR2FtZURhdGFfMS5sb2FkZWRTY3JlZW5BY3RpdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzYXZlTG9hZE1lbnVfMS5pbml0U2F2ZUxvYWRTY3JlZW4oeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGdldENvbnRleHQgPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICBwbGV5ZXJJbmZvcm1hdGlvbiA9IG1haW5HYW1lT2JqZWN0LnNob3dHYW1lSW5mbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uVG9TaG93ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWw6IHBsZXllckluZm9ybWF0aW9uLmdhbWVEYXRhLmN1cnJlbnRMZXZlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBwbGV5ZXJJbmZvcm1hdGlvbi5nYW1lRGF0YS5jdXJyZW50UG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvaW5zOiBwbGV5ZXJJbmZvcm1hdGlvbi5nYW1lRGF0YS5nYW1lQ29pbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXM6IHBsZXllckluZm9ybWF0aW9uLmdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbERldGFpbHMubGV2ZWxNaW51dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzOiBwbGV5ZXJJbmZvcm1hdGlvbi5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWxEZXRhaWxzLmxldmVsU2Vjb25kcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyTGlmZTogcGxleWVySW5mb3JtYXRpb24ucGxheWVyT2JqZWN0Lm51bWJlck9mbGlmZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZUdhbWVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlUGljdHVyZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZU5hbWU6IChzYXZlTmFtZS5zYXZlTmFtZSkgPyBzYXZlTmFtZS5zYXZlTmFtZSA6IHNhdmVUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlVGltZTogc2F2ZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckluZm9ybWF0aW9uOiBpbmZvcm1hdGlvblRvU2hvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZURhdGE6IEpTT04uc3RyaW5naWZ5KHNhdmVEYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbWFpbkdhbWVPYmplY3QuZ2V0SW1hZ2VGcm9tRmllbGRzKHsgc2F2ZUdhbWVEYXRhOiBzYXZlR2FtZURhdGEsIHNjcmVlbnNob3Q6IGZhbHNlIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzYXZlR2FtZURhdGEuc2F2ZVBpY3R1cmUgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLndyaXRlRWxlY3Ryb25Mb2NhbERhdGEoeyBmaWxlTmFtZTogKHNhdmVOYW1lLnNhdmVOYW1lKSA/IHNhdmVOYW1lLnNhdmVOYW1lIDogc2F2ZVRpbWUsIGRhdGE6IEpTT04uc3RyaW5naWZ5KHNhdmVHYW1lRGF0YSkgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBsb2FkR2FtZURhdGFfMS5zaG93U2F2ZURhdGEoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF0YSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzYXZlRGlhbG9nKHsgdGV4dDogXCJTYXZlIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5XCIsIHR5cGVPZldhcm5pbmc6IFwic3VjY2Vzcy10ZXh0XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEdhbWVEYXRhXzEuZGlzcGxheVNhdmVzT25TY3JlZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlU2NyZWVuOiBnZXRDb250ZXh0LnNhdmVTY3JlZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVEYXRhOiBhbGxEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkR2FtZURhdGFfMS5sb2FkZWRTY3JlZW5EZWFjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVTYXZlID0gY3JlYXRlU2F2ZTtcclxuZnVuY3Rpb24gY29sbGVjdERhdGEoKSB7XHJcbiAgICB2YXIgc2F2ZUZvbU5hbWUgPSB7fTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBmaWVsZERhdGEgPSBfYVtfaV07XHJcbiAgICAgICAgaWYgKGZpZWxkRGF0YS5uYW1lICYmIGZpZWxkRGF0YS52YWx1ZSkge1xyXG4gICAgICAgICAgICBzYXZlRm9tTmFtZVtmaWVsZERhdGEubmFtZV0gPSBmaWVsZERhdGEudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNhdmVGb21OYW1lO1xyXG59XHJcbmV4cG9ydHMuY29sbGVjdERhdGEgPSBjb2xsZWN0RGF0YTtcclxuZnVuY3Rpb24gZGVsZXRlU2F2ZURhdGEoX2EpIHtcclxuICAgIHZhciBjdXJyZW50U2F2ZSA9IF9hLmN1cnJlbnRTYXZlLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBnZXRDb250ZXh0LCBhbGxEYXRhLCBwaWN0dXJlVVJMLCB0YXJnZXRJdGVtLCBpbmRleCwgZXJyXzE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEdhbWVEYXRhXzEubG9hZGVkU2NyZWVuQWN0aXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2F2ZUxvYWRNZW51XzEuaW5pdFNhdmVMb2FkU2NyZWVuKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBnZXRDb250ZXh0ID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRHYW1lRGF0YV8xLnNob3dTYXZlRGF0YSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBhbGxEYXRhID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBpY3R1cmVVUkwgPSBzdG9yYWdlLmdldERhdGFQYXRoKCkgKyAnLycgKyBjdXJyZW50U2F2ZS5zYXZlTmFtZSArICcucG5nJztcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJdGVtID0gYWxsRGF0YS5maW5kKGZ1bmN0aW9uIChvYmosIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5zYXZlVGltZSA9PT0gY3VycmVudFNhdmUuc2F2ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBhbGxEYXRhLmluZGV4T2YodGFyZ2V0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYWxsRGF0YS5zcGxpY2UoaW5kZXgsIDEpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNCwgNiwgLCA3XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZnMudW5saW5rU3luYyhwaWN0dXJlVVJMKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyBpbWFnZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVEaWFsb2coeyB0ZXh0OiBcIllvdSBqdXN0IGRlbGV0ZSBzYXZlIFwiICsgY3VycmVudFNhdmUuc2F2ZU5hbWUsIHR5cGVPZldhcm5pbmc6IFwic3VjY2Vzcy10ZXh0XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZnMudW5saW5rU3luYyhzdG9yYWdlLmdldERhdGFQYXRoKCkgKyAnLycgKyBjdXJyZW50U2F2ZS5zYXZlTmFtZSArICcuanNvbicpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZEdhbWVEYXRhXzEuZGlzcGxheVNhdmVzT25TY3JlZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlU2NyZWVuOiBnZXRDb250ZXh0LnNhdmVTY3JlZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVEYXRhOiBhbGxEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkR2FtZURhdGFfMS5sb2FkZWRTY3JlZW5EZWFjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5kZWxldGVTYXZlRGF0YSA9IGRlbGV0ZVNhdmVEYXRhO1xyXG5mdW5jdGlvbiBvdmVyd3JpdGVTYXZlRGF0YShfYSkge1xyXG4gICAgdmFyIGN1cnJlbnRTYXZlID0gX2EuY3VycmVudFNhdmUsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGdldENvbnRleHQsIGFsbERhdGEsIHRhcmdldEl0ZW0sIGluZGV4LCBzYXZlVGltZSwgcGxleWVySW5mb3JtYXRpb24sIGluZm9ybWF0aW9uVG9TaG93LCBzYXZlR2FtZURhdGEsIGltYWdlO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRHYW1lRGF0YV8xLmxvYWRlZFNjcmVlbkFjdGl2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNhdmVMb2FkTWVudV8xLmluaXRTYXZlTG9hZFNjcmVlbih7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q29udGV4dCA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBsb2FkR2FtZURhdGFfMS5zaG93U2F2ZURhdGEoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF0YSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJdGVtID0gYWxsRGF0YS5maW5kKGZ1bmN0aW9uIChvYmosIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5zYXZlVGltZSA9PT0gY3VycmVudFNhdmUuc2F2ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBhbGxEYXRhLmluZGV4T2YodGFyZ2V0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZVRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgICAgICBwbGV5ZXJJbmZvcm1hdGlvbiA9IG1haW5HYW1lT2JqZWN0LnNob3dHYW1lSW5mbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uVG9TaG93ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWw6IHBsZXllckluZm9ybWF0aW9uLmdhbWVEYXRhLmN1cnJlbnRMZXZlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBwbGV5ZXJJbmZvcm1hdGlvbi5nYW1lRGF0YS5jdXJyZW50UG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvaW5zOiBwbGV5ZXJJbmZvcm1hdGlvbi5nYW1lRGF0YS5nYW1lQ29pbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXM6IHBsZXllckluZm9ybWF0aW9uLmdhbWVEYXRhLmxldmVsRGF0YS5sZXZlbERldGFpbHMubGV2ZWxNaW51dGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzOiBwbGV5ZXJJbmZvcm1hdGlvbi5nYW1lRGF0YS5sZXZlbERhdGEubGV2ZWxEZXRhaWxzLmxldmVsU2Vjb25kcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyTGlmZTogcGxleWVySW5mb3JtYXRpb24ucGxheWVyT2JqZWN0Lm51bWJlck9mbGlmZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZUdhbWVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlUGljdHVyZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZU5hbWU6IChjdXJyZW50U2F2ZS5zYXZlTmFtZSkgPyBjdXJyZW50U2F2ZS5zYXZlTmFtZSA6IHNhdmVUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlVGltZTogc2F2ZVRpbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllckluZm9ybWF0aW9uOiBpbmZvcm1hdGlvblRvU2hvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZURhdGE6IEpTT04uc3RyaW5naWZ5KG1haW5HYW1lT2JqZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZURpYWxvZyh7IHRleHQ6IFwiU2F2ZSBvdmVyd3JpdGUgc3VjY2Vzc2Z1bGx5XCIsIHR5cGVPZldhcm5pbmc6IFwic3VjY2Vzcy10ZXh0XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbWFpbkdhbWVPYmplY3QuZ2V0SW1hZ2VGcm9tRmllbGRzKHsgc2F2ZUdhbWVEYXRhOiBzYXZlR2FtZURhdGEsIHNjcmVlbnNob3Q6IGZhbHNlIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzYXZlR2FtZURhdGEuc2F2ZVBpY3R1cmUgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmcy51bmxpbmtTeW5jKHN0b3JhZ2UuZ2V0RGF0YVBhdGgoKSArICcvJyArIGN1cnJlbnRTYXZlLnNhdmVOYW1lICsgJy5qc29uJyldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLndyaXRlRWxlY3Ryb25Mb2NhbERhdGEoeyBmaWxlTmFtZTogKGN1cnJlbnRTYXZlLnNhdmVOYW1lKSA/IGN1cnJlbnRTYXZlLnNhdmVOYW1lIDogc2F2ZVRpbWUsIGRhdGE6IEpTT04uc3RyaW5naWZ5KHNhdmVHYW1lRGF0YSkgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBsb2FkR2FtZURhdGFfMS5zaG93U2F2ZURhdGEoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF0YSA9IF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkR2FtZURhdGFfMS5kaXNwbGF5U2F2ZXNPblNjcmVlbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVTY3JlZW46IGdldENvbnRleHQuc2F2ZVNjcmVlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZURhdGE6IGFsbERhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRHYW1lRGF0YV8xLmxvYWRlZFNjcmVlbkRlYWN0aXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLm92ZXJ3cml0ZVNhdmVEYXRhID0gb3ZlcndyaXRlU2F2ZURhdGE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbnZhciBzdG9yYWdlID0gcmVxdWlyZSgnZWxlY3Ryb24tanNvbi1zdG9yYWdlJyk7XHJcbnZhciBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3NlcnZlci9zZXJ2ZXJSZXF1ZXN0TW9kdWxlc1wiKTtcclxudmFyIHBhZ2VzQnVpbGRlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2FwcE1lbnUvcGFnZXNCdWlsZGVyXCIpO1xyXG52YXIgY2hhbmdlTGV2ZWxzXzEgPSByZXF1aXJlKFwiLi4vY2hhbmdlTGV2ZWxzXCIpO1xyXG52YXIgY29uc3RydWN0b3IgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL2NvbnN0cnVjdG9yc1wiKSk7XHJcbnZhciBnYW1lU2hvcFNoaXB5YXJkXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdWkvc2hvcC9nYW1lU2hvcFNoaXB5YXJkXCIpO1xyXG52YXIgc2F2ZUdhbWVNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9zYXZlR2FtZU1vZHVsZXNcIik7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vYXBwTWVudS9hcHBNZW51XCIpO1xyXG52YXIgbG9hZFNjcmVlbl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL3VpL2xvYWRTY3JlZW5cIik7XHJcbmZ1bmN0aW9uIHNob3dTYXZlRGF0YSgpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYWxsRmlsZXMsIF9hLCBfYiwgX2MsIGFsdGVybmF0ZURhdGEsIF9pLCBhbGxGaWxlc18xLCBhbHREYXRhLCBsb2NhbEFsdERhdGE7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9kLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSAoX2EgPSBPYmplY3QpLmFzc2lnbjtcclxuICAgICAgICAgICAgICAgICAgICBfYyA9IFtbXV07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbG9hZFNhdmVzRnJvbUZvbGRlcigpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBhbGxGaWxlcyA9IF9iLmFwcGx5KF9hLCBfYy5jb25jYXQoW19kLnNlbnQoKV0pKTtcclxuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGVEYXRhID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBhbGxGaWxlc18xID0gYWxsRmlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgX2QubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgYWxsRmlsZXNfMS5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBhbHREYXRhID0gYWxsRmlsZXNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHREYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWx0RGF0YS5uYW1lID09PSBcImdhbWUtc2F2ZXNcIiB8fCBhbHREYXRhLm5hbWUgPT09IFwiZ2FtZS1zZXR0aW5nc1wiIHx8IGFsdERhdGEubmFtZSA9PT0gXCJnYW1lUmVzdWx0c1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLmdldEVsZWN0cm9uTG9jYWxTYXZlcyh7IGZpbGVOYW1lOiBhbHREYXRhLm5hbWUgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsQWx0RGF0YSA9IF9kLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGVEYXRhID0gYWx0ZXJuYXRlRGF0YS5jb25jYXQobG9jYWxBbHREYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGFsdGVybmF0ZURhdGFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNob3dTYXZlRGF0YSA9IHNob3dTYXZlRGF0YTtcclxuZnVuY3Rpb24gbG9hZFNhdmVzRnJvbUZvbGRlcigpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZGlyLCBudW1iZXJPZlNhdmVzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgZGlyID0gc3RvcmFnZS5nZXREYXRhUGF0aCgpICsgJy8nO1xyXG4gICAgICAgICAgICBudW1iZXJPZlNhdmVzID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNwb25zZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnMucmVhZGRpcihkaXIsIGZ1bmN0aW9uIChlcnIsIGZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBKU09OLnN0cmluZ2lmeShmaWxlKS5zcGxpdCgnLmpzb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlTmFtZVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlTmFtZVswXSAhPSAnXCJnYW1lLXNhdmVzJyAmJiBmaWxlTmFtZVswXSAhPSAnXCJnYW1lLXNldHRpbmdzJyAmJiBmaWxlTmFtZVswXSAhPSAnXCJnYW1lUmVzdWx0cycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTYXZlcyArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OVU1CRVJfT0ZfU0FWRVMgPSBudW1iZXJPZlNhdmVzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlTmFtZVswXS5yZXBsYWNlKCdcIicsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRmlsZXMgPSBhbGxGaWxlcy5jb25jYXQoZmlsZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UoYWxsRmlsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXJDbGFzc1NlbGVjdG9yRmllbGQoX2EpIHtcclxuICAgIHZhciB0YXJnZXQgPSBfYS50YXJnZXQ7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIHRhcmdldF8xID0gdGFyZ2V0OyBfaSA8IHRhcmdldF8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gdGFyZ2V0XzFbX2ldO1xyXG4gICAgICAgIGl0ZW0ub2JqZWN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuO1xyXG59XHJcbmZ1bmN0aW9uIGRlbGF0ZUNsYXNzU2VsZWN0b3JGaWVsZChfYSkge1xyXG4gICAgdmFyIHRhcmdldCA9IF9hLnRhcmdldDtcclxuICAgIGZvciAodmFyIF9pID0gMCwgdGFyZ2V0XzIgPSB0YXJnZXQ7IF9pIDwgdGFyZ2V0XzIubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSB0YXJnZXRfMltfaV07XHJcbiAgICAgICAgaXRlbS5yZW1vdmUoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkaXNwbGF5U2F2ZXNPblNjcmVlbihfYSkge1xyXG4gICAgdmFyIHNhdmVTY3JlZW4gPSBfYS5zYXZlU2NyZWVuLCBzYXZlRGF0YSA9IF9hLnNhdmVEYXRhLCBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXN0b21QYWdlRmxhZ3MsIG1lbnVBcmVhLCBfaSwgbWVudUFyZWFfMSwgaXRlbSwgb2JqZWN0LCBfbG9vcF8xLCBfYiwgbWVudUFyZWFfMiwgaXRlbTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21QYWdlRmxhZ3MgPSBbJ3NhdmUtc2NyZWVuJywgJ2xvYWQtc2NyZWVuJ107XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudUFyZWEgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNhdmUtbG9hZC13cmFwcGVyXCIpKS5tYXAoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleEZsYWc6IGN1c3RvbVBhZ2VGbGFnc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjbGVhckNsYXNzU2VsZWN0b3JGaWVsZCh7IHRhcmdldDogbWVudUFyZWEgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2F2ZURhdGEubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgbWVudUFyZWFfMSA9IG1lbnVBcmVhOyBfaSA8IG1lbnVBcmVhXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gbWVudUFyZWFfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmlubmVySFRNTCA9IFwiPGRpdj48aDI+Tm8gc2F2ZSBkYXRhPC9oMj48L2Rpdj5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub2JqZWN0LmFwcGVuZENoaWxkKG9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFNjcmVlbl8xLmhpZGVMb2FkU2NyZWVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2F2ZURhdGEuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5zYXZlVGltZSAtIGIuc2F2ZVRpbWU7IH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2F2ZURhdGEucmV2ZXJzZSgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCwgX2xvb3BfMiwgX2ksIHNhdmVEYXRhXzEsIHNhdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2F2ZURhdGEgfHwgc2F2ZURhdGEubGVuZ3RoIDwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub2JqZWN0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzIgPSBmdW5jdGlvbiAoc2F2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUsIHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBpbWcsIHBpY3R1cmVVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gbmV3IERhdGUoc2F2ZS5zYXZlVGltZSksIHllYXIgPSB0aW1lLmdldEZ1bGxZZWFyKCksIG1vbnRoID0gdGltZS5nZXRVVENNb250aCgpICsgMSwgZGF5ID0gdGltZS5nZXREYXRlKCksIGhvdXJzID0gdGltZS5nZXRIb3VycygpLCBtaW51dGVzID0gdGltZS5nZXRNaW51dGVzKCksIHNlY29uZHMgPSB0aW1lLmdldFNlY29uZHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljdHVyZVVSTCA9IHNhdmUuc2F2ZVBpY3R1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gKHBpY3R1cmVVUkwpID8gcGljdHVyZVVSTCA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSAoc2F2ZS5zYXZlUGljdHVyZSkgPyBzYXZlLnNhdmVQaWN0dXJlIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBwaWN0dXJlVVJMOiBzYXZlLnNhdmVQaWN0dXJlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSBwYWdlc0J1aWxkZXJfMS5jcmVhdGVFbGVtZW50cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lOiBcImxpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUNsYXNzOiBcInNhdmUtbG9hZC1saXN0IFwiICsgaXRlbS5pbmRleEZsYWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVTdHlsZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY3R1cmVVcmw6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rVXJsOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyQ29udGVudDogXCJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNhdmUtY2FyZC1ib2R5XFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYXZlSW1hZ2Utd3JhcHBlci1zbWFsbFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9XFxcInByZXZpZXctaW1nLVwiICsgc2F2ZS5zYXZlVGltZSArIFwiXFxcIiBzcmM9XFxcIlwiICsgKChzYXZlLnNhdmVQaWN0dXJlKSA/IHNhdmUuc2F2ZVBpY3R1cmUgOiAnJykgKyBcIlxcXCIgYWx0PVxcXCJcIiArIHNhdmUuc2F2ZU5hbWUgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcInNpbmdsZS1pdGVtXFxcIj48c3BhbiBjbGFzcz1cXFwicmF0ZS1udW1iZXJcXFwiPlwiICsgaW5kZXggKyBcIjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5zYXZlIG5hbWU6PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaXRlbS1uYW1lXFxcIj4gXCIgKyBzYXZlLnNhdmVOYW1lICsgXCI8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIml0ZW0tZGF0ZVxcXCI+IFwiICsgeWVhciArIFwiL1wiICsgbW9udGggKyBcIi9cIiArIGRheSArIFwiICAgIFwiICsgaG91cnMgKyBcIjpcIiArIG1pbnV0ZXMgKyBcIjpcIiArIHNlY29uZHMgKyBcIjwvc3Bhbj48L3A+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTmFtZTogJ2RhdGEtYnV0dG9uLWlkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogc2F2ZS5zYXZlVGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlMTogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlR2FtZU1vZHVsZXNfMS5zYXZlRGlhbG9nKHsgdGV4dDogbnVsbCwgdHlwZU9mV2FybmluZzogXCJcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJldmlldy1pbWctXCIgKyBzYXZlLnNhdmVUaW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwaWN0dXJlVVJMID0gc2F2ZS5zYXZlUGljdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IChwaWN0dXJlVVJMKSA/IHBpY3R1cmVVUkwgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0FjY2VwdEJ1dHRvbnMuY2FsbCh0aGlzLCB7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgc2F2ZURhdGFJdGVtOiBzYXZlLCBmbGFnOiBpdGVtLmluZGV4RmxhZyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0ub2JqZWN0LmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHNhdmVEYXRhXzEgPSBzYXZlRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBzYXZlRGF0YV8xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlID0gc2F2ZURhdGFfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNSAvKnlpZWxkKiovLCBfbG9vcF8yKHNhdmUpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX2IgPSAwLCBtZW51QXJlYV8yID0gbWVudUFyZWE7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKF9iIDwgbWVudUFyZWFfMi5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gbWVudUFyZWFfMltfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs1IC8qeWllbGQqKi8sIF9sb29wXzEoaXRlbSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDY7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgX2IrKztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICBsb2FkU2NyZWVuXzEuaGlkZUxvYWRTY3JlZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZGlzcGxheVNhdmVzT25TY3JlZW4gPSBkaXNwbGF5U2F2ZXNPblNjcmVlbjtcclxuZnVuY3Rpb24gc2hvd0FjY2VwdEJ1dHRvbnMoX2EpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgc2F2ZURhdGFJdGVtID0gX2Euc2F2ZURhdGFJdGVtLCBmbGFnID0gX2EuZmxhZztcclxuICAgIGRlbGF0ZUNsYXNzU2VsZWN0b3JGaWVsZCh7IHRhcmdldDogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNhdmUtbG9hZC1idXR0b25zLWxpc3QnKSkgfSk7XHJcbiAgICB2YXIgY29udGV4dEVsZW1lbnQgPSB0aGlzO1xyXG4gICAgdmFyIGxvYWRCdXR0b25zID0gXCI8ZGl2IGNsYXNzPVxcXCJzYXZlLWxvYWQtYnV0dG9uLWFyZWFcXFwiPlxcbiAgICAgICAgPGJ1dHRvbiBkYXRhLWJ1dHRvbi1pZD1cXFwibG9hZC1zYXZlXFxcIiBjbGFzcz1cXFwiYnRuLW1haW5cXFwiPkxvYWQ8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gZGF0YS1idXR0b24taWQ9XFxcImRlbGV0ZS1zYXZlXFxcIiBjbGFzcz1cXFwiYnRuLW1haW4gYnRuLW9yYW5nZS1yZWplY3RcXFwiPkRlbGV0ZTwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cIjtcclxuICAgIHZhciBzYXZlQnV0dG9ucyA9IFwiPGRpdiBjbGFzcz1cXFwic2F2ZS1sb2FkLWJ1dHRvbi1hcmVhXFxcIj5cXG4gICAgICAgIDxidXR0b24gZGF0YS1idXR0b24taWQ9XFxcIm92ZXJ3cml0ZS1zYXZlXFxcIiBjbGFzcz1cXFwiYnRuLW1haW5cXFwiPk92ZXJ3cml0ZTwvYnV0dG9uPlxcbiAgICAgICAgPGJ1dHRvbiBkYXRhLWJ1dHRvbi1pZD1cXFwiZGVsZXRlLXNhdmVcXFwiIGNsYXNzPVxcXCJidG4tbWFpbiBidG4tb3JhbmdlLXJlamVjdFxcXCI+RGVsZXRlPC9idXR0b24+XFxuICAgIDwvZGl2PlwiO1xyXG4gICAgdmFyIHBpY3R1cmVVUkwgPSBzYXZlRGF0YUl0ZW0uc2F2ZVBpY3R1cmU7XHJcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICBpbWcuc3JjID0gKHBpY3R1cmVVUkwpID8gcGljdHVyZVVSTCA6IG51bGw7XHJcbiAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBuZXdFbGVtZW50ID0gcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoe1xyXG4gICAgICAgICAgICB0YWdOYW1lOiBcImxpXCIsXHJcbiAgICAgICAgICAgIHN0eWxlQ2xhc3M6IFwic2F2ZS1sb2FkLWJ1dHRvbnMtbGlzdFwiLFxyXG4gICAgICAgICAgICBpbmxpbmVTdHlsZTogbnVsbCxcclxuICAgICAgICAgICAgcGljdHVyZVVybDogbnVsbCxcclxuICAgICAgICAgICAgbGlua1VybDogbnVsbCxcclxuICAgICAgICAgICAgdGV4dDogbnVsbCxcclxuICAgICAgICAgICAgaW5uZXJDb250ZW50OiBcIlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNhdmUtcHJldmlldy1pbWFnZS1sYXJnZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIiArIHNhdmVEYXRhSXRlbS5zYXZlUGljdHVyZSArIFwiXFxcIiBhbHQ9XFxcIlwiICsgc2F2ZURhdGFJdGVtLnNhdmVOYW1lICsgXCJcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzYXZlLWRldGFpbHNcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGgzPlNhdmU6IFwiICsgc2F2ZURhdGFJdGVtLnNhdmVOYW1lICsgXCI8L2gzPlxcbiAgICAgICAgICAgICAgICAgICAgPHA+TGV2ZWw6IFwiICsgc2F2ZURhdGFJdGVtLnBsYXllckluZm9ybWF0aW9uLmN1cnJlbnRMZXZlbCArIFwiPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgPHA+bWludXRlczogXCIgKyAoKHNhdmVEYXRhSXRlbS5wbGF5ZXJJbmZvcm1hdGlvbi5taW51dGVzKSA/IHNhdmVEYXRhSXRlbS5wbGF5ZXJJbmZvcm1hdGlvbi5taW51dGVzIDogMCkgKyBcIjwvcD5cXG4gICAgICAgICAgICAgICAgICAgIDxwPnNlY29uZHM6IFwiICsgKChzYXZlRGF0YUl0ZW0ucGxheWVySW5mb3JtYXRpb24uc2Vjb25kcykgPyBzYXZlRGF0YUl0ZW0ucGxheWVySW5mb3JtYXRpb24uc2Vjb25kcyA6IDApICsgXCI8L3A+XFxuICAgICAgICAgICAgICAgICAgICA8cD5MaWZlOiBcIiArIHNhdmVEYXRhSXRlbS5wbGF5ZXJJbmZvcm1hdGlvbi5wbGF5ZXJMaWZlICsgXCI8L3A+XFxuICAgICAgICAgICAgICAgICAgICA8cD5Qb2ludHM6IFwiICsgc2F2ZURhdGFJdGVtLnBsYXllckluZm9ybWF0aW9uLnBvaW50cyArIFwiPC9wPlxcbiAgICAgICAgICAgICAgICAgICAgPHA+Q3JlZGl0czogXCIgKyBzYXZlRGF0YUl0ZW0ucGxheWVySW5mb3JtYXRpb24uY29pbnMgKyBcIjwvcD5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgXCIgKyAoKGZsYWcgPT09ICdzYXZlLXNjcmVlbicpID8gc2F2ZUJ1dHRvbnMgOiBsb2FkQnV0dG9ucykgKyBcIlxcbiAgICAgICAgICAgIFwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHBhcnJlbnRFbGVtZW50ID0gX3RoaXM7XHJcbiAgICAgICAgbmV3RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnRhcmdldC5kYXRhc2V0LmJ1dHRvbklkKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsb2FkLXNhdmUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZU5ld0RpYWxvZ1dpbmRvdyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6IHBhcnJlbnRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogbG9hZFNhdmVQcm9jZWR1cmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVEYXRhSXRlbTogc2F2ZURhdGFJdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiTG9hZCBzYXZlOiBcIiArIHNhdmVEYXRhSXRlbS5zYXZlTmFtZSArIFwiID9cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb3ZlcndyaXRlLXNhdmUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMgfHwgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVPdmVyIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lV2luIHx8IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5zaG9wQWN0aXZlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk9WRVJXUklURV9TQVZFID0gKHByb2Nlc3MuZW52Lk9WRVJXUklURV9TQVZFID09PSAndHJ1ZScpID8gJ2ZhbHNlJyA6ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuT1ZFUldSSVRFX1NBVkUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3QoY29udGV4dEVsZW1lbnQsICdzZWxlY3RlZC1vdmVyd3JpdGUtZGF0YScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZU5ld0RpYWxvZ1dpbmRvdyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQ6IHBhcnJlbnRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogc2F2ZUdhbWVNb2R1bGVzXzEub3ZlcndyaXRlU2F2ZURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVEYXRhSXRlbTogc2F2ZURhdGFJdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiT3ZlcndyaXRlIHNhdmU6IFwiICsgc2F2ZURhdGFJdGVtLnNhdmVOYW1lICsgXCIgd2l0aCBhIG5ldyBvbmU/XCJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZS1zYXZlJzpcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVOZXdEaWFsb2dXaW5kb3coe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50OiBwYXJyZW50RWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IHNhdmVHYW1lTW9kdWxlc18xLmRlbGV0ZVNhdmVEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlRGF0YUl0ZW06IHNhdmVEYXRhSXRlbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkRlbGV0ZSBzYXZlOiBcIiArIHNhdmVEYXRhSXRlbS5zYXZlTmFtZSArIFwiID9cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBfdGhpcy5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlTmV3RGlhbG9nV2luZG93KF9hKSB7XHJcbiAgICB2YXIgcGFyZW50RWxlbWVudCA9IF9hLnBhcmVudEVsZW1lbnQsIGNhbGxiYWNrID0gX2EuY2FsbGJhY2ssIHNhdmVEYXRhSXRlbSA9IF9hLnNhdmVEYXRhSXRlbSwgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgdGV4dCA9IF9hLnRleHQ7XHJcbiAgICBzYXZlR2FtZU1vZHVsZXNfMS5zYXZlRGlhbG9nKHsgdGV4dDogbnVsbCwgdHlwZU9mV2FybmluZzogXCJcIiB9KTtcclxuICAgIHZhciBuZXdFbGVtZW50ID0gcGFnZXNCdWlsZGVyXzEuY3JlYXRlRWxlbWVudHMoe1xyXG4gICAgICAgIHRhZ05hbWU6IFwiZGl2XCIsXHJcbiAgICAgICAgc3R5bGVDbGFzczogXCJzYXZlLWxvYWQtZGlhbG9nXCIsXHJcbiAgICAgICAgaW5saW5lU3R5bGU6IG51bGwsXHJcbiAgICAgICAgcGljdHVyZVVybDogbnVsbCxcclxuICAgICAgICBsaW5rVXJsOiBudWxsLFxyXG4gICAgICAgIHRleHQ6IG51bGwsXHJcbiAgICAgICAgaW5uZXJDb250ZW50OiBcIjxkaXYgY2xhc3M9XFxcInNhdmUtZGlhbG9nLXdyYXBwZXJcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGlhbG9nLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgICAgIDxwPlwiICsgdGV4dCArIFwiPC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8YnV0dG9uIGRhdGEtYnV0dG9uLWlkPVxcXCJhY2NlcHQtc2F2ZS1hY3Rpb25cXFwiIGNsYXNzPVxcXCJidG4tbWFpblxcXCI+b2s8L2J1dHRvbj5cXG4gICAgICAgIDxidXR0b24gZGF0YS1idXR0b24taWQ9XFxcInJlamVjdC1zYXZlLWFjdGlvblxcXCIgY2xhc3M9XFxcImJ0bi1tYWluIGJ0bi1vcmFuZ2UtcmVqZWN0XFxcIj5jYW5jZWw8L2J1dHRvbj5cXG4gICAgICAgIDwvZGl2PlwiLFxyXG4gICAgICAgIGF0dHJpYnV0ZU5hbWU6IG51bGwsXHJcbiAgICAgICAgYXR0cmlidXRlOiBudWxsLFxyXG4gICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgIGF0dHJpYnV0ZTE6IG51bGxcclxuICAgIH0pO1xyXG4gICAgbmV3RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQudGFyZ2V0LmRhdGFzZXQuYnV0dG9uSWQpIHtcclxuICAgICAgICAgICAgY2FzZSAnYWNjZXB0LXNhdmUtYWN0aW9uJzpcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHsgY3VycmVudFNhdmU6IHNhdmVEYXRhSXRlbSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyZWplY3Qtc2F2ZS1hY3Rpb24nOlxyXG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcclxufVxyXG5mdW5jdGlvbiBiYWNrVG9PYmplY3QoX2EpIHtcclxuICAgIHZhciBkYXRhID0gX2EuZGF0YSwgY29uc3RydWN0b3IgPSBfYS5jb25zdHJ1Y3RvcjtcclxuICAgIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKGNvbnN0cnVjdG9yKTtcclxuICAgIHZhciBmaW5hbE9iamVjdCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShyZXMucHJvdG90eXBlKSwgZGF0YSk7XHJcbiAgICByZXR1cm4gZmluYWxPYmplY3Q7XHJcbn1cclxuZnVuY3Rpb24gbG9hZGVkU2NyZWVuQWN0aXZlKCkge1xyXG4gICAgcHJvY2Vzcy5lbnYuR1JPVU5EX1BMQVlFUl9BTExPV19NT1ZFID0gJ2ZhbHNlJztcclxuICAgIHZhciBvYmplY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dhaXQtc2NyZWVuXCIpO1xyXG4gICAgYXBwTWVudV8xLnNob3cob2JqZWN0KTtcclxufVxyXG5leHBvcnRzLmxvYWRlZFNjcmVlbkFjdGl2ZSA9IGxvYWRlZFNjcmVlbkFjdGl2ZTtcclxuZnVuY3Rpb24gbG9hZGVkU2NyZWVuRGVhY3RpdmUoKSB7XHJcbiAgICBwcm9jZXNzLmVudi5HUk9VTkRfUExBWUVSX0FMTE9XX01PVkUgPSAndHJ1ZSc7XHJcbiAgICB2YXIgb2JqZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3YWl0LXNjcmVlblwiKTtcclxuICAgIGFwcE1lbnVfMS5oaWRlKG9iamVjdCk7XHJcbn1cclxuZXhwb3J0cy5sb2FkZWRTY3JlZW5EZWFjdGl2ZSA9IGxvYWRlZFNjcmVlbkRlYWN0aXZlO1xyXG5mdW5jdGlvbiBsb2FkU2F2ZVByb2NlZHVyZShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIGN1cnJlbnRTYXZlID0gX2EuY3VycmVudFNhdmU7XHJcbiAgICB2YXIgc2F2ZSA9IEpTT04ucGFyc2UoY3VycmVudFNhdmUuc2F2ZURhdGEpO1xyXG4gICAgdmFyIGRhdGFub3RUb0NoYW5nZSA9IHtcclxuICAgICAgICBjdHg6IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHgsXHJcbiAgICAgICAgZ2FtZUZpZWxkOiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZUZpZWxkLFxyXG4gICAgICAgIGdhbWVBY3Rpb25GaWVsZDogbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVBY3Rpb25GaWVsZCxcclxuICAgICAgICBnYW1lRGlhbG9nRmllbGQ6IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGlhbG9nRmllbGQsXHJcbiAgICAgICAgZ2FtZVVJRmllbGQ6IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lVUlGaWVsZCxcclxuICAgICAgICBjdHhBY3Rpb25GaWVsZDogbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eEFjdGlvbkZpZWxkLFxyXG4gICAgICAgIGN0eEdhbWVEaWFsb2dGaWVsZDogbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eEdhbWVEaWFsb2dGaWVsZCxcclxuICAgICAgICBjdHhVSUZpZWxkOiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuY3R4VUlGaWVsZCxcclxuICAgICAgICBzb3VuZE9iamVjdDogbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsU291bmRzLnNvdW5kT2JqZWN0LFxyXG4gICAgICAgIHNob3BBcmVhOiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYVxyXG4gICAgfTtcclxuICAgIHZhciBib3NzUHJlc2VudCA9IGZhbHNlO1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzID0gc2F2ZS5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclR5cGUgPSAoaXRlbS5vYmplY3RPd25lciA9PT0gJ2dyYXBwbGVPYmplY3QnKSA/IGNvbnN0cnVjdG9yLkdyYXBwbGVPYmplY3QgOiBjb25zdHJ1Y3Rvci5TaWRlT2JqZWN0O1xyXG4gICAgICAgIHZhciBsb2FkTWFwRWxlbWVudCA9IGJhY2tUb09iamVjdCh7IGRhdGE6IGl0ZW0sIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3RvclR5cGUgfSk7XHJcbiAgICAgICAgbG9hZE1hcEVsZW1lbnQuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgbG9hZE1hcEVsZW1lbnQubG9hZFRleHR1cmUoKTtcclxuICAgICAgICByZXR1cm4gbG9hZE1hcEVsZW1lbnQ7XHJcbiAgICB9KTtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmFsbEdhbWVFbmVtaWVzID0gc2F2ZS5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdmFyIGxvYWRNYXBFbGVtZW50ID0gYmFja1RvT2JqZWN0KHsgZGF0YTogaXRlbSwgY29uc3RydWN0b3I6IGNvbnN0cnVjdG9yLkVuZW15T2JqZWN0IH0pO1xyXG4gICAgICAgIGlmIChsb2FkTWFwRWxlbWVudC5pc0Jvc3MpIHtcclxuICAgICAgICAgICAgYm9zc1ByZXNlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5CT1NTX0xPQURfQVRfTEVWRUwgPSAndHJ1ZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvYWRNYXBFbGVtZW50LmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGxvYWRNYXBFbGVtZW50LmxvYWRUZXh0dXJlKCk7XHJcbiAgICAgICAgcmV0dXJuIGxvYWRNYXBFbGVtZW50O1xyXG4gICAgfSk7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5hbGxHYW1lQnVsbGV0cyA9IHNhdmUuZ2FtZUluaXREYXRhLmFsbEdhbWVCdWxsZXRzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHZhciBsb2FkTWFwRWxlbWVudCA9IGJhY2tUb09iamVjdCh7IGRhdGE6IGl0ZW0sIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvci5CdWxsZXRDb25zdHJ1Y3QgfSk7XHJcbiAgICAgICAgbG9hZE1hcEVsZW1lbnQuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgbG9hZE1hcEVsZW1lbnQubG9hZFRleHR1cmUoKTtcclxuICAgICAgICByZXR1cm4gbG9hZE1hcEVsZW1lbnQ7XHJcbiAgICB9KTtcclxuICAgIGlmIChzYXZlLmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3MpIHtcclxuICAgICAgICBzYXZlLmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3MgPSBzYXZlLmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2FkTWFwRWxlbWVudCA9IGJhY2tUb09iamVjdCh7IGRhdGE6IGl0ZW0sIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvci5EeW5hbWljQmxvY2tDb25zdHJ1Y3RvciB9KTtcclxuICAgICAgICAgICAgbG9hZE1hcEVsZW1lbnQuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgIGxvYWRNYXBFbGVtZW50LmxvYWRUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIGlmIChsb2FkTWFwRWxlbWVudC5iYWNrZ3JvdW5kVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAgICAgbG9hZE1hcEVsZW1lbnQuYmFja2dyb3VuZFRleHR1cmVJbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIGxvYWRNYXBFbGVtZW50LmJhY2tncm91bmRUZXh0dXJlSW1nLnNyYyA9IHByb2Nlc3MuZW52LkhPU1QgKyBsb2FkTWFwRWxlbWVudC5iYWNrZ3JvdW5kVGV4dHVyZS50ZXh0dXJlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkTWFwRWxlbWVudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vLy8vL1xyXG4gICAgaWYgKHNhdmUuZ2FtZUluaXREYXRhLmFsbEdyb3VuZEdhbWVCdWxsZXRzKSB7XHJcbiAgICAgICAgc2F2ZS5nYW1lSW5pdERhdGEuYWxsR3JvdW5kR2FtZUJ1bGxldHMgPSBzYXZlLmdhbWVJbml0RGF0YS5hbGxHcm91bmRHYW1lQnVsbGV0cy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGxvYWRNYXBFbGVtZW50ID0gYmFja1RvT2JqZWN0KHsgZGF0YTogaXRlbSwgY29uc3RydWN0b3I6IGNvbnN0cnVjdG9yLkJ1bGxldENvbnN0cnVjdCB9KTtcclxuICAgICAgICAgICAgbG9hZE1hcEVsZW1lbnQuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgIGxvYWRNYXBFbGVtZW50LmxvYWRUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkTWFwRWxlbWVudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChzYXZlLmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxFbmVteSkge1xyXG4gICAgICAgIHNhdmUuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15ID0gc2F2ZS5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsRW5lbXkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2FkTWFwRWxlbWVudCA9IGJhY2tUb09iamVjdCh7IGRhdGE6IGl0ZW0sIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvci5EeW5hbWljRW5lbXlDb25zdHJ1Y3RvciB9KTtcclxuICAgICAgICAgICAgbG9hZE1hcEVsZW1lbnQuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgIGxvYWRNYXBFbGVtZW50LmxvYWRUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2FkTWFwRWxlbWVudDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8vLy8vL1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEubWFwQmFja2dyb3VuZE9iamVjdHMgPSBzYXZlLmdhbWVJbml0RGF0YS5tYXBCYWNrZ3JvdW5kT2JqZWN0cy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICB2YXIgbG9hZE1hcEVsZW1lbnQgPSBiYWNrVG9PYmplY3QoeyBkYXRhOiBpdGVtLCBjb25zdHJ1Y3RvcjogY29uc3RydWN0b3IuR2FtZUJhY2tncm91bmQgfSk7XHJcbiAgICAgICAgbG9hZE1hcEVsZW1lbnQueCA9IChsb2FkTWFwRWxlbWVudC5wYXJ0T2ZTY3JlZW5TdGF0dXMpID8gMCAtIDEgOiB3aW5kb3cuaW5uZXJXaWR0aCArIDE7XHJcbiAgICAgICAgbG9hZE1hcEVsZW1lbnQud2lkdGggPSAobG9hZE1hcEVsZW1lbnQucGFydE9mU2NyZWVuU3RhdHVzKSA/IHdpbmRvdy5pbm5lcldpZHRoICsgMiA6IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgIGxvYWRNYXBFbGVtZW50LmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICBsb2FkTWFwRWxlbWVudC5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBsb2FkTWFwRWxlbWVudC5jdHggPSBkYXRhbm90VG9DaGFuZ2UuY3R4O1xyXG4gICAgICAgIGxvYWRNYXBFbGVtZW50LmxvYWRUZXh0dXJlKCk7XHJcbiAgICAgICAgcmV0dXJuIGxvYWRNYXBFbGVtZW50O1xyXG4gICAgfSk7XHJcbiAgICBpZiAoc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyKSB7XHJcbiAgICAgICAgc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyID0gYmFja1RvT2JqZWN0KHsgZGF0YTogc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyLCBjb25zdHJ1Y3RvcjogY29uc3RydWN0b3IuRHluYW1pY1VzZXJDb25zdHJ1Y3RvciB9KTtcclxuICAgICAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5ncm91bmRQbGF5ZXJDaGFyYWN0ZXIuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyLmxvYWRUZXh0dXJlKCk7XHJcbiAgICB9XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QgPSBiYWNrVG9PYmplY3QoeyBkYXRhOiBzYXZlLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvci5QbGF5ZXJTaGlwIH0pO1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LmN0eCA9IGRhdGFub3RUb0NoYW5nZS5nYW1lQWN0aW9uRmllbGQ7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QucGxheWVyU2hpcFRleHR1cmVDaGFuZ2UoKTtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsU291bmRzID0gYmFja1RvT2JqZWN0KHsgZGF0YTogc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxTb3VuZHMsIGNvbnN0cnVjdG9yOiBjb25zdHJ1Y3Rvci5Tb3VuZENyZWF0b3IgfSk7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbFNvdW5kcy5zb3VuZE9iamVjdCA9IGRhdGFub3RUb0NoYW5nZS5zb3VuZE9iamVjdDtcclxuICAgIHNhdmUgPSBiYWNrVG9PYmplY3QoeyBkYXRhOiBzYXZlLCBjb25zdHJ1Y3RvcjogY29uc3RydWN0b3IuR2FtZSB9KTtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmN0eCA9IGRhdGFub3RUb0NoYW5nZS5jdHg7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lRmllbGQgPSBkYXRhbm90VG9DaGFuZ2UuZ2FtZUZpZWxkO1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEuZ2FtZUFjdGlvbkZpZWxkID0gZGF0YW5vdFRvQ2hhbmdlLmdhbWVBY3Rpb25GaWVsZDtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmdhbWVEaWFsb2dGaWVsZCA9IGRhdGFub3RUb0NoYW5nZS5nYW1lRGlhbG9nRmllbGQ7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lVUlGaWVsZCA9IGRhdGFub3RUb0NoYW5nZS5nYW1lVUlGaWVsZDtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmN0eEFjdGlvbkZpZWxkID0gZGF0YW5vdFRvQ2hhbmdlLmN0eEFjdGlvbkZpZWxkO1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEuY3R4R2FtZURpYWxvZ0ZpZWxkID0gZGF0YW5vdFRvQ2hhbmdlLmN0eEdhbWVEaWFsb2dGaWVsZDtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmN0eFVJRmllbGQgPSBkYXRhbm90VG9DaGFuZ2UuY3R4VUlGaWVsZDtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLm1hcEtleUNvZGUgPSB7fTtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSA9IHRydWU7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5nYW1lVWlQYXVzZSA9IGZhbHNlO1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEuc2hvcEFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgc2F2ZS5nYW1lSW5pdERhdGEucmFuZG9tT2JqZWN0ID0gZmFsc2U7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5sZXZlbFdpbmRvd0Rlc2NyaXB0aW9uID0gZmFsc2U7XHJcbiAgICBzYXZlLmdhbWVJbml0RGF0YS5ncmFwcGxlT2JqZWN0T25TY3JlZW4gPSBmYWxzZTtcclxuICAgIHNhdmUuZ2FtZUluaXREYXRhLmludmVudG9yeUFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgcHJvY2Vzcy5lbnYuQk9TU19MT0FEX0FUX0xFVkVMID0gKGJvc3NQcmVzZW50KSA/ICd0cnVlJyA6ICdmYWxzZSc7XHJcbiAgICBzYXZlLnNob3BBcmVhID0gZGF0YW5vdFRvQ2hhbmdlLnNob3BBcmVhO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9BQ1RJVkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU0hJUFlBUkRfQUNUSVZFX1dJTkRPVyA9ICdmYWxzZSc7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX1NBTEVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU1RPUkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LkdST1VORF9DSEFSQUNURVJTX0lOVkVOVE9SWSA9ICdmYWxzZSc7XHJcbiAgICBwcm9jZXNzLmVudi5HUk9VTkRfQUNUSVZFX0JMT0NLX0lOX1JBTkdFID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LkdST1VORF9QTEFZRVJfQUxMT1dfTU9WRSA9ICd0cnVlJztcclxuICAgIHByb2Nlc3MuZW52Lk9WRVJXUklURV9TQVZFID0gJ2ZhbHNlJztcclxuICAgIHZhciBjaGFuZ2VkU2hpcCA9IHNhdmUuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdDtcclxuICAgIGFwcE1lbnVfMS5oaWRlKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BXcmFwcGVyKTtcclxuICAgIGFwcE1lbnVfMS5oaWRlKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BEaWFsb2cpO1xyXG4gICAgY2hhbmdlTGV2ZWxzXzEucmVuZXdQbGF5ZXJTaGlwKHsgb3JpZ2luRGF0YTogbWFpbkdhbWVPYmplY3QsIG5ld0RhdGE6IHNhdmUgfSk7XHJcbiAgICBjaGFuZ2VMZXZlbHNfMS5yZW5ld1BsYXllclNoaXAoeyBvcmlnaW5EYXRhOiBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LCBuZXdEYXRhOiBjaGFuZ2VkU2hpcCB9KTtcclxuICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QucGxheWVyU2hpcFRleHR1cmVDaGFuZ2UoKTtcclxuICAgIGdhbWVTaG9wU2hpcHlhcmRfMS5yZXBsYWNlU2hpcERhdGEoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGJ1eVNoaXBEYXRhOiBjaGFuZ2VkU2hpcCB9KTtcclxuICAgIG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QucGxhY2VTaGlwKCk7XHJcbiAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LnggPSBjaGFuZ2VkU2hpcC54RmluYWw7XHJcbiAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LnkgPSBjaGFuZ2VkU2hpcC55RmluYWw7XHJcbiAgICBtYWluR2FtZU9iamVjdC5tYXBTb3VuZENoYW5nZXIoeyBzb3VuZFN0YXR1czogJ3JlZ3VsYXJfbGV2ZWwnIH0pO1xyXG4gICAgbWFpbkdhbWVPYmplY3QuZ2V0U2NyZWVuU2l6ZSgpO1xyXG4gICAgbWFpbkdhbWVPYmplY3Quc2V0R2FtZUZpZWxkcygpO1xyXG4gICAgbWFpbkdhbWVPYmplY3QuaW5pdEZpZWxkKCk7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxucmVxdWlyZShcIi4uL3Nhc3MvbWFpbi5zYXNzXCIpO1xyXG52YXIgX2EgPSByZXF1aXJlKFwiZWxlY3Ryb25cIiksIGlwY1JlbmRlcmVyID0gX2EuaXBjUmVuZGVyZXIsIHJlbW90ZSA9IF9hLnJlbW90ZTtcclxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XHJcbnZhciBnYW1lRGF0YU1vZHVsZXMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZW5naW5lL2dhbWVNb2R1bGVzXCIpKTtcclxudmFyIGNvbnN0cnVjdG9ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdHJ1Y3RvcnNcIikpO1xyXG52YXIgZGlzcGxheU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuL3ZpZXcvZGlzcGxheU1vZHVsZXNcIik7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi9hcHBNZW51L2FwcE1lbnVcIik7XHJcbnZhciBnYW1lU2hvcE1vZHVsZV8xID0gcmVxdWlyZShcIi4vdWkvc2hvcC9nYW1lU2hvcE1vZHVsZVwiKTtcclxudmFyIHNhdmVMb2FkTWVudV8xID0gcmVxdWlyZShcIi4vYXBwTWVudS9zYXZlTG9hZE1lbnVcIik7XHJcbnZhciBlbmdpbmVNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9lbmdpbmUvZW5naW5lTW9kdWxlc1wiKTtcclxudmFyIGR5bmFtaWNMZXZlbE1vZHVsZV8xID0gcmVxdWlyZShcIi4vZW5naW5lL2R5bmFtaWNMZXZlbHMvZHluYW1pY0xldmVsTW9kdWxlXCIpO1xyXG52YXIgZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xID0gcmVxdWlyZShcIi4vZW5naW5lL2R5bmFtaWNMZXZlbHMvZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c1wiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuL2VuZW1pZXMvYW5pbWF0aW9uSGl0Qm94TW9kdWxlc1wiKTtcclxudmFyIHBsYXllclNoaXBNb2R1bGVfMSA9IHJlcXVpcmUoXCIuL2VuZ2luZS9wbGF5ZXJTaGlwTW9kdWxlXCIpO1xyXG52YXIgYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18yID0gcmVxdWlyZShcIi4vZW5lbWllcy9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpO1xyXG52YXIgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi9lbmdpbmUvZ2FtZVNpZGVPYmplY3RzTW9kdWxlXCIpO1xyXG52YXIgZ2xvYmFsVmFyaWFibGVzXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXIvZ2xvYmFsVmFyaWFibGVzXCIpO1xyXG52YXIgam91cm5hbE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuL2VuZ2luZS9keW5hbWljTGV2ZWxzL2pvdXJuYWxNb2R1bGVzXCIpO1xyXG52YXIgZHluYW1pY0xldmVsRW5lbXlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxFbmVteU1vZHVsZXNcIik7XHJcbmZ1bmN0aW9uIGJ1bGxldEVuZ2luZUZ1bmN0aW9uKF9hKSB7XHJcbiAgICB2YXIgZ2FtZU9iamVjdCA9IF9hLmdhbWVPYmplY3Q7XHJcbiAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZUJ1bGxldHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2IgPSBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lQnVsbGV0czsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGJ1bGxldCA9IF9iW19pXTtcclxuICAgICAgICAgICAgYnVsbGV0LmRpc3BsYXlPYmplY3RBdFNjZW5lKGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSAmJiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBidWxsZXQubW92ZUJ1bGxldHMoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LCBnYW1lT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuZGVsZXRlQnVsbGV0KGJ1bGxldCwgXCJhbGxHYW1lQnVsbGV0c1wiKTtcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuaGl0RGV0ZWN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QxOiBidWxsZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgR3JhcHBsZU9iamVjdDogY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3RcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5oaXREZXRlY3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QxOiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHNBcnI6IFtidWxsZXRdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgR3JhcHBsZU9iamVjdDogY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3RcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuaGl0RGV0ZWN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QxOiBidWxsZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIEdyYXBwbGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5HcmFwcGxlT2JqZWN0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJ1bGxldC5zcHJpdGVPYmplY3RzQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ3JvdW5kQnVsbGV0RW5naW5lRnVuY3Rpb24oX2EpIHtcclxuICAgIHZhciBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdDtcclxuICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR3JvdW5kR2FtZUJ1bGxldHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGJ1bGxldCkge1xyXG4gICAgICAgICAgICBidWxsZXQuZGlzcGxheU9iamVjdEF0U2NlbmUoZ2FtZU9iamVjdCk7XHJcbiAgICAgICAgICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlICYmIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGJ1bGxldC5tb3ZlQnVsbGV0cyhnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsIGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1bGxldC54ID4gd2luZG93LmlubmVyV2lkdGggKyAxMDAgfHwgYnVsbGV0LnggPCAtMTAwIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0LnkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKyAxMDAgfHwgYnVsbGV0LnkgPCAtMTAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmRlbGV0ZUJ1bGxldChidWxsZXQsIFwiYWxsR3JvdW5kR2FtZUJ1bGxldHNcIik7XHJcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmhpdERldGVjdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0MTogYnVsbGV0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHNBcnI6IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVFbmVtaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIEdyYXBwbGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5HcmFwcGxlT2JqZWN0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuaGl0RGV0ZWN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QxOiBidWxsZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIEdyYXBwbGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5HcmFwcGxlT2JqZWN0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuaGl0RGV0ZWN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QxOiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5ncm91bmRQbGF5ZXJDaGFyYWN0ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogW2J1bGxldF0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgR3JhcHBsZU9iamVjdDogY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3RcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5lYXJHcm91bmRFbmVteSA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15LmZpbHRlcihmdW5jdGlvbiAoZW5lbXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5tYXgoYnVsbGV0LngsIGVuZW15LngpIC0gTWF0aC5taW4oYnVsbGV0LngsIGVuZW15LngpIDwgMTAwICYmIE1hdGgubWF4KGJ1bGxldC55LCBlbmVteS55KSAtIE1hdGgubWluKGJ1bGxldC55LCBlbmVteS55KSA8IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5lbXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmhpdERldGVjdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0MTogYnVsbGV0LFxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHNBcnI6IG5lYXJHcm91bmRFbmVteSxcclxuICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICBHcmFwcGxlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuR3JhcHBsZU9iamVjdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvKiAqL1xyXG4gICAgICAgICAgICAgICAgdmFyIG5lYXJNYXBCbG9jayA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2Nrcy5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGgubWF4KGJ1bGxldC54LCBibG9jay54KSAtIE1hdGgubWluKGJ1bGxldC54LCBibG9jay54KSA8IDEwMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChidWxsZXQueSwgYmxvY2sueSkgLSBNYXRoLm1pbihidWxsZXQueSwgYmxvY2sueSkgPCAxMDAgJiYgYmxvY2suZGV0YWlscy5jb2xsaXNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5oaXREZXRlY3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDE6IGJ1bGxldCxcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3RzQXJyOiBuZWFyTWFwQmxvY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgR3JhcHBsZU9iamVjdDogY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3RcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnVsbGV0LnNwcml0ZU9iamVjdHNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdyb3VuZEdhbWVCdWxsZXRzOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYnVsbGV0ID0gX2JbX2ldO1xyXG4gICAgICAgICAgICBfbG9vcF8xKGJ1bGxldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVuZW15RW5naW5lRnVuY3Rpb24oX2EpIHtcclxuICAgIHZhciBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdDtcclxuICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lRW5lbWllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVFbmVtaWVzOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW5lbXkgPSBfYltfaV07XHJcbiAgICAgICAgICAgIGVuZW15LmRpc3BsYXlPYmplY3RBdFNjZW5lKGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSAmJiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBlbmVteS5tb3ZlRW5lbXllcygpO1xyXG4gICAgICAgICAgICAgICAgZW5lbXkuZW5lbXlTaGlwTG9naWNWZXJ0aWNhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LnlcclxuICAgICAgICAgICAgICAgIH0sIGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgZW5lbXkuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbih0cnVlKTtcclxuICAgICAgICAgICAgICAgIGVuZW15LnNob3QoY29uc3RydWN0b3JzLkJ1bGxldENvbnN0cnVjdCwgZ2FtZU9iamVjdCwgY29uc3RydWN0b3JzLlNvdW5kQ3JlYXRvciwgXCJlbmVteVwiLCBcImFsbEdhbWVCdWxsZXRzXCIpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5kZWxldGVPYmplY3RzKHsgb2JqZWN0OiBlbmVteSwgdGFyZ2V0OiAnJyB9KTtcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuaGl0RGV0ZWN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QxOiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogW2VuZW15XSxcclxuICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICBHcmFwcGxlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuR3JhcHBsZU9iamVjdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmhpdERldGVjdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0MTogZW5lbXksXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgIEdyYXBwbGVPYmplY3Q6IGNvbnN0cnVjdG9ycy5HcmFwcGxlT2JqZWN0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzaWRlT2JqZWN0QmVoYXZpb3VyKF9hKSB7XHJcbiAgICB2YXIgb2JqZWN0ID0gX2Eub2JqZWN0LCBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdDtcclxuICAgIGlmIChvYmplY3Qub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiIHx8IG9iamVjdC5vYmplY3RPd25lciA9PSBcImNvbGxpZGVcIiB8fFxyXG4gICAgICAgIG9iamVjdC5vYmplY3RPd25lciA9PSBcImdyYXBwbGVPYmplY3RcIiB8fCBvYmplY3Qub2JqZWN0T3duZXIgPT0gXCJoYW5nYXJcIiB8fCBvYmplY3Qub2JqZWN0T3duZXIgPT0gXCJlbmVteVwiKSB7XHJcbiAgICAgICAgZ2FtZU9iamVjdC5oaXREZXRlY3Rpb24oe1xyXG4gICAgICAgICAgICBvYmplY3QxOiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsXHJcbiAgICAgICAgICAgIG9iamVjdHNBcnI6IFtvYmplY3RdLFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgR3JhcHBsZU9iamVjdDogY29uc3RydWN0b3JzLkdyYXBwbGVPYmplY3RcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAob2JqZWN0Lm9iamVjdE93bmVyICE9IFwiZW5lbXlcIikge1xyXG4gICAgICAgICAgICBvYmplY3Quc2lkZU9iamVjdFNob3QoY29uc3RydWN0b3JzLkJ1bGxldENvbnN0cnVjdCwgZ2FtZU9iamVjdCwgY29uc3RydWN0b3JzLlNvdW5kQ3JlYXRvciwgXCJoYW5nYXJidWxsZXRcIiwgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZUVuZW1pZXMuY29uY2F0KGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cy5tYXAoZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdC5vYmplY3RPd25lciA9PT0gXCJlbmVteVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9iamVjdC5vYmplY3RPd25lciA9PT0gXCJlbmVteVwiKSB7XHJcbiAgICAgICAgICAgIG9iamVjdC5zaWRlT2JqZWN0U2hvdChjb25zdHJ1Y3RvcnMuQnVsbGV0Q29uc3RydWN0LCBnYW1lT2JqZWN0LCBjb25zdHJ1Y3RvcnMuU291bmRDcmVhdG9yLCBcImVuZW15XCIsIFtnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3RdLmNvbmNhdChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lU2lkZU9iamVjdHMubWFwKGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmplY3Qub2JqZWN0T3duZXIgPT09IFwiaGFuZ2FyXCIgfHwgb2JqZWN0Lm9iamVjdE93bmVyID09PSBcImNvbGxpZGVcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzaWRlT2JqZWN0c0VuZ2luZUZ1bmN0aW9uKF9hKSB7XHJcbiAgICB2YXIgZ2FtZU9iamVjdCA9IF9hLmdhbWVPYmplY3Q7XHJcbiAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gX2JbX2ldO1xyXG4gICAgICAgICAgICBvYmplY3QuZGlzcGxheU9iamVjdEF0U2NlbmUoZ2FtZU9iamVjdCk7XHJcbiAgICAgICAgICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlICYmIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmplY3Qub2JqZWN0T3duZXIgPT0gXCJleHBsb3Npb25cIiB8fCBvYmplY3Qub2JqZWN0T3duZXIgPT0gXCJzbW9rZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmZpcmVBbmltYXRpb25FbmRlZChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5hbGxHYW1lU2lkZU9iamVjdHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2lkZU9iamVjdEJlaGF2aW91cih7IG9iamVjdDogb2JqZWN0LCBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5zcHJpdGVPYmplY3RzQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWFwT2JqZWN0TW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5kZWxhdGVTaWRlT2JqZWN0KG9iamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2FtZUJhY2tncm91bmRFbmdpbmVGdW5jdGlvbihfYSkge1xyXG4gICAgdmFyIGdhbWVPYmplY3QgPSBfYS5nYW1lT2JqZWN0O1xyXG4gICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5iYWNrU2NyZWVuUGF1c2UgfHwgIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSB8fCAhZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykge1xyXG4gICAgICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHgpIHtcclxuICAgICAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jbGVhckZpZWxkKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eCwgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuc2NyZWVuLndpZHRoLCBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5zY3JlZW4uaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLm1hcEJhY2tncm91bmRPYmplY3RzOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYmFja2dyb3VuZE1hcCA9IF9iW19pXTtcclxuICAgICAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UgfHwgIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuc2hvcEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRNYXAudXBkYXRlTWFwKHsgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kTWFwLnNwcml0ZU9iamVjdHNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kTWFwLnBsYWNlQmFja2dyb3VuZCgpO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kTWFwLmNoYW5nZVBhcnRPZlRleHR1cmUoZ2FtZU9iamVjdCwgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEubWFwQmFja2dyb3VuZE9iamVjdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXZlbENoYW5nZXNFbmdpbmVGdW5jdGlvbih7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbGV2ZWxDaGFuZ2VzRW5naW5lRnVuY3Rpb24oX2EpIHtcclxuICAgIHZhciBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdDtcclxuICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSkge1xyXG4gICAgICAgIGdhbWVPYmplY3Qud2FycEVmZmVjdChjb25zdHJ1Y3RvcnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmxldmVsV2luZG93RGVzY3JpcHRpb24pIHtcclxuICAgICAgICBnYW1lT2JqZWN0LmxldmVsQ2hhbmdlV2luZG93KCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc3BhY2VTaGlwRW5naW5lRnVuY3Rpb24oX2EpIHtcclxuICAgIHZhciBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdDtcclxuICAgIHZhciBkYXRhID0gZ2FtZU9iamVjdC5nZXRMZXZlbFVzZXJEYXRhKCk7XHJcbiAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSB8fCBkYXRhLmN1cnJlbnRMZXZlbCA9PT0gMClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVPdmVyKSB7XHJcbiAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UgJiYgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykge1xyXG4gICAgICAgICAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdC5wbGFjZVNoaXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3Quc3ByaXRlT2JqZWN0c0FuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICBwbGF5ZXJTaGlwTW9kdWxlXzEuc2hpcEluU3BhY2Uoe1xyXG4gICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJTaGlwOiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsXHJcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9yc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpXHJcbiAgICAgICAgICAgIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdC5kaXNwbGF5T2JqZWN0QXRTY2VuZShnYW1lT2JqZWN0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnYW1lQ2hhbmdlRW5naW5lRnVuY3Rpb24oX2EpIHtcclxuICAgIHZhciBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdDtcclxuICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlICYmIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEubGV2ZWxPYmplY3RzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUgJiYgIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Lm1hcFJhbmRvbU9iamVjdFNwYXduKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsT2JqZWN0cywgY29uc3RydWN0b3JzLlNpZGVPYmplY3QsIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVTaWRlT2JqZWN0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5sZXZlbENoYW5nZSlcclxuICAgICAgICAgICAgICAgIGdhbWVPYmplY3Quc3Bhd25FbmVteUxvZ2ljKGNvbnN0cnVjdG9ycy5FbmVteU9iamVjdCk7XHJcbiAgICAgICAgICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEubGV2ZWxDaGFuZ2UpXHJcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmluaXRHcmFwcGxlT2JqZWN0KGNvbnN0cnVjdG9ycy5HcmFwcGxlT2JqZWN0LCBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QpO1xyXG4gICAgICAgICAgICBnYW1lT2JqZWN0LmdhbWVTZWNvbmRzSW5jcmVhc2UoKTtcclxuICAgICAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5zaG9wQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZHluYW1pY0xldmVsc0FjdGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmxldmVsVGltZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnYW1lRHluYW1pY0xldmVsQm94UmVuZGVyKF9hKSB7XHJcbiAgICB2YXIgZ2FtZU9iamVjdCA9IF9hLmdhbWVPYmplY3Q7XHJcbiAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGFsbEJsb2NrcyA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgIGlmICghYWxsQmxvY2tzKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHZhciBhbGxFbGV2YXRvcnMgPSBhbGxCbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChibG9jaykgeyByZXR1cm4gYmxvY2suZGV0YWlscy50eXBlID09PSAnZWxldmF0b3InOyB9KTtcclxuICAgIHZhciBhbGxCYWNrZ3JvdW5kcyA9IGFsbEJsb2Nrcy5maWx0ZXIoZnVuY3Rpb24gKGJsb2NrKSB7IHJldHVybiAhYmxvY2suZGV0YWlscy5jb2xsaXNpb24gfHwgYmxvY2suYmFja2dyb3VuZFRleHR1cmU7IH0pO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBhbGxCYWNrZ3JvdW5kc18xID0gYWxsQmFja2dyb3VuZHM7IF9pIDwgYWxsQmFja2dyb3VuZHNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IGFsbEJhY2tncm91bmRzXzFbX2ldO1xyXG4gICAgICAgIGlmICghYmFja2dyb3VuZCB8fCBiYWNrZ3JvdW5kLnggPiB3aW5kb3cuaW5uZXJXaWR0aCArIGJhY2tncm91bmQud2lkdGggfHwgYmFja2dyb3VuZC54ICsgNTAgPCBiYWNrZ3JvdW5kLndpZHRoICogLTEgfHxcclxuICAgICAgICAgICAgYmFja2dyb3VuZC55ID4gd2luZG93LmlubmVySGVpZ2h0ICsgYmFja2dyb3VuZC5oZWlnaHQgfHwgYmFja2dyb3VuZC55ICsgNTAgPCAoYmFja2dyb3VuZC5oZWlnaHQgKiAtMSkpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGR5bmFtaWNMZXZlbEVuZW15TW9kdWxlc18xLnJlc3Bhd25FbmVteUJ5VGltZXIoeyBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCwgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnMsIGN1cnJlbnRCbG9jazogYmFja2dyb3VuZCB9KTtcclxuICAgICAgICBpZiAoYmFja2dyb3VuZC5iYWNrZ3JvdW5kVGV4dHVyZSkge1xyXG4gICAgICAgICAgICBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzIuZGlzcGxheU9iamVjdEF0U2NlbmUuY2FsbCh7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrZ3JvdW5kLngsXHJcbiAgICAgICAgICAgICAgICB5OiBiYWNrZ3JvdW5kLnksXHJcbiAgICAgICAgICAgICAgICBzeDogYmFja2dyb3VuZC5iYWNrZ3JvdW5kU3gsXHJcbiAgICAgICAgICAgICAgICBzeTogYmFja2dyb3VuZC5iYWNrZ3JvdW5kU3ksXHJcbiAgICAgICAgICAgICAgICBzV2lkdGg6IGJhY2tncm91bmQuYmFja2dyb3VuZFRleHR1cmUuc1dpZHRoLFxyXG4gICAgICAgICAgICAgICAgc0hlaWdodDogYmFja2dyb3VuZC5iYWNrZ3JvdW5kVGV4dHVyZS5zV2lkdGgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogYmFja2dyb3VuZC5iYWNrZ3JvdW5kVGV4dHVyZS53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogYmFja2dyb3VuZC5iYWNrZ3JvdW5kVGV4dHVyZS5oZWlnaHQgKyAxLFxyXG4gICAgICAgICAgICAgICAgZGVncmVlOiAwLFxyXG4gICAgICAgICAgICAgICAgaW1nOiBiYWNrZ3JvdW5kLmJhY2tncm91bmRUZXh0dXJlSW1nXHJcbiAgICAgICAgICAgIH0sIGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLmJhY2tncm91bmRUZXh0dXJlLmRlZ3JlZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlICYmIGJhY2tncm91bmQuZGV0YWlscy50eXBlICE9ICdkb29yJylcclxuICAgICAgICAgICAgYmFja2dyb3VuZC5zcHJpdGVPYmplY3RzQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgaWYgKGJhY2tncm91bmQuZGV0YWlscy50eXBlID09PSAnZW5lbXlfc3Bhd25lcicgfHwgYmFja2dyb3VuZC5kZXRhaWxzLnR5cGUgPT09ICdoaWRkZW5fZW5lbXlfc3Bhd25lcicgfHwgYmFja2dyb3VuZC5kZXRhaWxzLnR5cGUgPT09ICd0aW1lcl9lbmVteV9zcGF3bmVyJyB8fFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLmRldGFpbHMudHlwZSA9PT0gJ25wY19zcGF3bmVyJyB8fCBiYWNrZ3JvdW5kLmRldGFpbHMudHlwZSA9PT0gJ2VsZXZhdG9yJyB8fFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLmRldGFpbHMudHlwZSA9PT0gXCJoZWFsdGhcIiB8fCBiYWNrZ3JvdW5kLmRldGFpbHMuaXNEZXN0cm95IHx8ICFiYWNrZ3JvdW5kLmRldGFpbHMuZGlzcGxheSAmJiBiYWNrZ3JvdW5kLmRldGFpbHMudHlwZSA9PT0gXCJzY2VuYXJpb19vYmplY3RcIiB8fFxyXG4gICAgICAgICAgICAhYmFja2dyb3VuZC5kZXRhaWxzLmRpc3BsYXkgJiYgYmFja2dyb3VuZC5kZXRhaWxzLnR5cGUgPT09IFwiYmx1ZV9jYXJkXCIgfHxcclxuICAgICAgICAgICAgIWJhY2tncm91bmQuZGV0YWlscy5kaXNwbGF5ICYmIGJhY2tncm91bmQuZGV0YWlscy50eXBlID09PSBcImdyZWVuX2NhcmRcIiB8fFxyXG4gICAgICAgICAgICAhYmFja2dyb3VuZC5kZXRhaWxzLmRpc3BsYXkgJiYgYmFja2dyb3VuZC5kZXRhaWxzLnR5cGUgPT09IFwieWVsbG93X2NhcmRcIiB8fFxyXG4gICAgICAgICAgICAhYmFja2dyb3VuZC5kZXRhaWxzLmRpc3BsYXkgJiYgYmFja2dyb3VuZC5kZXRhaWxzLnR5cGUgPT09IFwicmVkX2NhcmRcIiB8fFxyXG4gICAgICAgICAgICAhYmFja2dyb3VuZC5kZXRhaWxzLmRpc3BsYXkgJiYgYmFja2dyb3VuZC5kZXRhaWxzLnR5cGUgPT09IFwibGFwdG9wX3dpdGhfZGF0YVwiIHx8IGJhY2tncm91bmQuZGV0YWlscy50eXBlID09PSBcImdyb3VuZC1kZXN0cnVjdFwiKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBkeW5hbWljTGV2ZWxJbnRlcmFjdGl2ZUVsZW1lbnRzXzEub3BlbkNsb3NlZERvb3JBbmltYXRpb24oe1xyXG4gICAgICAgICAgICBjdXJyZW50V2FsbEJsb2NrOiBiYWNrZ3JvdW5kLFxyXG4gICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnNcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYWNrZ3JvdW5kLmRpc3BsYXlPYmplY3RBdFNjZW5lKGdhbWVPYmplY3QpO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2IgPSAwLCBhbGxFbGV2YXRvcnNfMSA9IGFsbEVsZXZhdG9yczsgX2IgPCBhbGxFbGV2YXRvcnNfMS5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICB2YXIgZWxldmF0b3IgPSBhbGxFbGV2YXRvcnNfMVtfYl07XHJcbiAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UpXHJcbiAgICAgICAgICAgIGVsZXZhdG9yLmVsZXZhdG9yTW92ZSh7IG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgIGVsZXZhdG9yLmRpc3BsYXlPYmplY3RBdFNjZW5lKGdhbWVPYmplY3QpO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2MgPSAwLCBhbGxCbG9ja3NfMSA9IGFsbEJsb2NrczsgX2MgPCBhbGxCbG9ja3NfMS5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICB2YXIgYmxvY2sgPSBhbGxCbG9ja3NfMVtfY107XHJcbiAgICAgICAgaWYgKCFibG9jayB8fCBibG9jay54ID4gd2luZG93LmlubmVyV2lkdGggKyBibG9jay53aWR0aCB8fCBibG9jay54IDwgYmxvY2sud2lkdGggKiAtMSB8fFxyXG4gICAgICAgICAgICBibG9jay55ID4gd2luZG93LmlubmVySGVpZ2h0ICsgYmxvY2suaGVpZ2h0ICsgMjIwIHx8IGJsb2NrLnkgPCAwIC0gYmxvY2suaGVpZ2h0KVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBpZiAoIWJsb2NrKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBpZiAoYmxvY2suZGV0YWlscy50eXBlID09PSAnZW5lbXlfc3Bhd25lcicgfHwgYmxvY2suZGV0YWlscy50eXBlID09PSAnaGlkZGVuX2VuZW15X3NwYXduZXInIHx8IGJsb2NrLmRldGFpbHMudHlwZSA9PT0gJ3RpbWVyX2VuZW15X3NwYXduZXInIHx8XHJcbiAgICAgICAgICAgIGJsb2NrLmRldGFpbHMudHlwZSA9PT0gJ25wY19zcGF3bmVyJyB8fCBibG9jay5kZXRhaWxzLnR5cGUgPT09ICdlbGV2YXRvcicgfHxcclxuICAgICAgICAgICAgIWJsb2NrLmRldGFpbHMuZGlzcGxheSAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09IFwiaGVhbHRoXCIgfHwgIWJsb2NrLmRldGFpbHMuZGlzcGxheSAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09IFwic2NlbmFyaW9fb2JqZWN0XCIgfHxcclxuICAgICAgICAgICAgIWJsb2NrLmRldGFpbHMuZGlzcGxheSAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09IFwiYmx1ZV9jYXJkXCIgfHxcclxuICAgICAgICAgICAgIWJsb2NrLmRldGFpbHMuZGlzcGxheSAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09IFwiZ3JlZW5fY2FyZFwiIHx8XHJcbiAgICAgICAgICAgICFibG9jay5kZXRhaWxzLmRpc3BsYXkgJiYgYmxvY2suZGV0YWlscy50eXBlID09PSBcInllbGxvd19jYXJkXCIgfHxcclxuICAgICAgICAgICAgIWJsb2NrLmRldGFpbHMuZGlzcGxheSAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09IFwicmVkX2NhcmRcIiB8fFxyXG4gICAgICAgICAgICAhYmxvY2suZGV0YWlscy5kaXNwbGF5ICYmIGJsb2NrLmRldGFpbHMudHlwZSA9PT0gXCJsYXB0b3Bfd2l0aF9kYXRhXCIgfHwgYmxvY2suZGV0YWlscy50eXBlID09PSBcImdyb3VuZC1kZXN0cnVjdFwiICYmXHJcbiAgICAgICAgICAgIGJsb2NrLmRldGFpbHMuaXNEZXN0cm95ICYmIGJsb2NrLmRldGFpbHMuaGVhbHRoUG9pbnQgPD0gMCB8fCAhYmxvY2suZGV0YWlscy50eXBlICYmXHJcbiAgICAgICAgICAgIGJsb2NrLmRldGFpbHMuaXNEZXN0cm95ICYmIGJsb2NrLmRldGFpbHMuaGVhbHRoUG9pbnQgPD0gMCB8fCAhYmxvY2suZGV0YWlscy5jb2xsaXNpb24gJiYgYmxvY2suZGV0YWlscy50eXBlID09PSBcImJhY2tncm91bmQtd2FsbFwiIHx8XHJcbiAgICAgICAgICAgICFibG9jay5kZXRhaWxzLmNvbGxpc2lvbiAmJiBibG9jay5kZXRhaWxzLnR5cGUgPT09ICdkb29yJylcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgZHluYW1pY0xldmVsSW50ZXJhY3RpdmVFbGVtZW50c18xLm9wZW5DbG9zZWREb29yQW5pbWF0aW9uKHtcclxuICAgICAgICAgICAgY3VycmVudFdhbGxCbG9jazogYmxvY2ssXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9yc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlICYmIGJsb2NrLmRldGFpbHMudHlwZSAhPSAnZG9vcicpXHJcbiAgICAgICAgICAgIGJsb2NrLnNwcml0ZU9iamVjdHNBbmltYXRpb24oKTtcclxuICAgICAgICBibG9jay5kaXNwbGF5T2JqZWN0QXRTY2VuZShnYW1lT2JqZWN0KTtcclxuICAgICAgICBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzIuZGlzcGxheU9iamVjdExpZmVTaWduKHsgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsIHRhcmdldE9iamVjdDogYmxvY2sgfSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2FtZUR5bmFtaWNFbmVteVJlbmRlcihfYSkge1xyXG4gICAgdmFyIGdhbWVPYmplY3QgPSBfYS5nYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBsZXZlbEluZm9ybWF0aW9uLCBhbGxFbmVteSwgZ3JvdW5kUGxheWVyLCBhbGxCbG9ja3MsIF9pLCBhbGxFbmVteV8xLCBlbmVteTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbiA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmxldmVsRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBhbGxFbmVteSA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15O1xyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllciA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdyb3VuZFBsYXllckNoYXJhY3RlcjtcclxuICAgICAgICAgICAgICAgICAgICBhbGxCbG9ja3MgPSBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxNYXBCbG9ja3MuZmlsdGVyKGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2suZGV0YWlscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFibG9jayB8fCBibG9jay54ID4gd2luZG93LmlubmVyV2lkdGggKyBibG9jay53aWR0aCB8fCBibG9jay54IDwgYmxvY2sud2lkdGggKiAtMSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKyBibG9jay5oZWlnaHQgKyAyMjAgfHwgYmxvY2sueSA8IDAgLSBibG9jay5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9jay5kZXRhaWxzLmNvbGxpc2lvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLmlzUnVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxFbmVteSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcclxuICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIGFsbEVuZW15XzEgPSBhbGxFbmVteTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBhbGxFbmVteV8xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZW15ID0gYWxsRW5lbXlfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmVteSB8fCBlbmVteS54ID4gd2luZG93LmlubmVyV2lkdGggfHwgZW5lbXkueCA8IChlbmVteS53aWR0aCAqIC0xKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVteS55ID4gd2luZG93LmlubmVySGVpZ2h0IHx8IGVuZW15LnkgPCAoZW5lbXkuaGVpZ2h0ICogLTEpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteS5kaXNwbGF5T2JqZWN0QXRTY2VuZShnYW1lT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteS5jaGFuZ2VWZXJ0aWNhbEFuaW1hdGlvblBpY3R1cmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZW15Lm9iamVjdFByZXNlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZW15LmRldGFpbHMuY29sbGlzaW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXkuZGV0YWlscy5jb2xsaXNpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UgJiYgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZW15LnNwcml0ZU9iamVjdHNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteS5ncm91bmRFbmVteU1vdmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJbmZvcm1hdGlvbjogbGV2ZWxJbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNMZXZlbE1vZHVsZV8xLmJsb2NrQ29sbGlzaW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0c1RvQ29sbGlkZTogYWxsQmxvY2tzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRPYmplY3Q6IGVuZW15LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RJbnRlcnNlY3Rpb25EZXRlY3Q6IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5vYmplY3RJbnRlcnNlY3Rpb25EZXRlY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBsb3Npb25GaXJlOiBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5leHBsb3Npb25GaXJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcnM6IGNvbnN0cnVjdG9yc1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZW15LmVuZW15RGV0ZWN0TnBjKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5wY0RhdGE6IGFsbEVuZW15LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxCbG9ja3M6IGFsbEJsb2NrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0OiBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEub2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZW5lbXkuZGV0YWlscy50eXBlICE9IFwibnBjX3NwYXduZXJcIikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGVuZW15LmRldGVjdFBsYXllcih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllcjogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQmxvY2tzOiBhbGxCbG9ja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RJbnRlcnNlY3Rpb25EZXRlY3Q6IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5vYmplY3RJbnRlcnNlY3Rpb25EZXRlY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5lbXkuZ3JvdW5kRW5lbXlEZWNpZGVkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEJsb2NrczogYWxsQmxvY2tzXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5lbXkuZ3JvdW5kRW5lbXlQYXRoRmluZGVyKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEJsb2NrczogYWxsQmxvY2tzXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5lbXkuanVtcERvd24oeyBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteS5ncm91bmRQbGF5ZXJKdW1wKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEJsb2NrczogYWxsQmxvY2tzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbEluZm9ybWF0aW9uOiBsZXZlbEluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5lbXkuanVtcERvd24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQmxvY2tzOiBhbGxCbG9ja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsSW5mb3JtYXRpb246IGxldmVsSW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteS5ncm91bmRFbmVteVNob3QoeyBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQmxvY2tzOiBhbGxCbG9ja3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzIuc2hvdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnNcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljTGV2ZWxNb2R1bGVfMS5ucGNDb2xsaXNpb25EZXRlY3QoeyBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCwgZW5lbXk6IGVuZW15IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzIuZGlzcGxheU9iamVjdExpZmVTaWduKHsgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsIHRhcmdldE9iamVjdDogZW5lbXkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5lbXkub25MZWFkZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnYW1lRHluYW1pY1BsYXllcihfYSkge1xyXG4gICAgdmFyIGdhbWVPYmplY3QgPSBfYS5nYW1lT2JqZWN0O1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhbGxCdWxsZXRzLCBhbGxHcm91bmRHYW1lQnVsbGV0cywgYWxsR2FtZVNpZGVPYmplY3RzLCBleHRyYVNlY29uZHMsIGdyb3VuZFBsYXllciwgYWxsQmxvY2tzLCBhbGxFbmVteSwgYWxsTWFwT2JqZWN0cywgYW5nbGVyYW5kaW1pemU7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lT3ZlciAmJiBnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lU3RhdHVzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsQnVsbGV0cyA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmFsbEdhbWVCdWxsZXRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbEdyb3VuZEdhbWVCdWxsZXRzID0gZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR3JvdW5kR2FtZUJ1bGxldHM7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsR2FtZVNpZGVPYmplY3RzID0gZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhU2Vjb25kcyA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVFeHRyYVNlY29uZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyID0gZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ3JvdW5kUGxheWVyQ2hhcmFjdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbEJsb2NrcyA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbE1hcEJsb2NrcztcclxuICAgICAgICAgICAgICAgICAgICBhbGxFbmVteSA9IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbEVuZW15O1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbE1hcE9iamVjdHMgPSBbXS5jb25jYXQoYWxsR3JvdW5kR2FtZUJ1bGxldHMsIGFsbEdhbWVTaWRlT2JqZWN0cywgYWxsQnVsbGV0cywgYWxsQmxvY2tzLCBhbGxFbmVteSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLmRpc3BsYXlPYmplY3RBdFNjZW5lKGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKCFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lUGF1c2UgJiYgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91bmRQbGF5ZXIub25MZWFkZXIgJiYgZ3JvdW5kUGxheWVyLmxlYWRlckNsaW1iKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllci5zcHJpdGVPYmplY3RzQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFncm91bmRQbGF5ZXIub25MZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLnNwcml0ZU9iamVjdHNBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLmNoYW5nZVZlcnRpY2FsQW5pbWF0aW9uUGljdHVyZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPT09ICdmYWxzZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdW5kUGxheWVyLmRldGVjdE9iamVjdHNBc01hcCh7IG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdW5kUGxheWVyLnNob3RTdGF0ZSAmJiBleHRyYVNlY29uZHMgJSAxMCA9PT0gMCAmJiAoZ3JvdW5kUGxheWVyLnNob3RBbmdsZSB8fCBncm91bmRQbGF5ZXIuc2hvdEFuZ2xlID09PSAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmdsZXJhbmRpbWl6ZSA9IChncm91bmRQbGF5ZXIucGxheWVyRGlyZWN0aW9uVmVydGljYWwgPT09IFwiZG93blwiKSA/IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICghZ3JvdW5kUGxheWVyLmdyb3VuZFRvdWNoKSA/IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlcmFuZGltaXplICo9ICgoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApKSA+IDUpID8gLTEgOiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXIuc2hvdEFuZ2xlICs9IGFuZ2xlcmFuZGltaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdW5kUGxheWVyLnNob3RBbmdsZSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91bmRQbGF5ZXIuc2hvdEFuZ2xlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18yLnNob3QuY2FsbChncm91bmRQbGF5ZXIsIGNvbnN0cnVjdG9ycy5CdWxsZXRDb25zdHJ1Y3QsIGdhbWVPYmplY3QsIGNvbnN0cnVjdG9ycy5Tb3VuZENyZWF0b3IsIFwicGxheWVyXCIsIFwiYWxsR3JvdW5kR2FtZUJ1bGxldHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGR5bmFtaWNMZXZlbE1vZHVsZV8xLmJsb2NrQ29sbGlzaW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHNUb0NvbGxpZGU6IGFsbEJsb2NrcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE9iamVjdDogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0OiBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEub2JqZWN0SW50ZXJzZWN0aW9uRGV0ZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsb3Npb25GaXJlOiBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5leHBsb3Npb25GaXJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3JzOiBjb25zdHJ1Y3RvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBkeW5hbWljTGV2ZWxNb2R1bGVfMS5jb21wdXRlcnNEaWFsb2coeyBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCwgYWxsQmxvY2tzOiBhbGxCbG9ja3MgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBkeW5hbWljTGV2ZWxNb2R1bGVfMS5tYXBHcmF2aXR5SW5pdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogZ2FtZU9iamVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcE9iamVjdHM6IGFsbE1hcE9iamVjdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRPYmplY3Q6IGdyb3VuZFBsYXllcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yczogY29uc3RydWN0b3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZU9iamVjdC5oaXREZXRlY3Rpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0MTogZ3JvdW5kUGxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0c0FycjogZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuYWxsR2FtZVNpZGVPYmplY3RzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmFwcGxlT2JqZWN0OiBjb25zdHJ1Y3RvcnMuR3JhcHBsZU9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VuZFBsYXllci54UG9zID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2FtZVVpR2FtZVN0YXRzKF9hKSB7XHJcbiAgICB2YXIgZ2FtZU9iamVjdCA9IF9hLmdhbWVPYmplY3Q7XHJcbiAgICBpZiAoIWdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICBnYW1lT2JqZWN0LnNob3dTdGFydFdpbmRvdygpO1xyXG4gICAgfVxyXG4gICAgaWYgKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICBnYW1lT2JqZWN0LnNob3dHYW1lU3RhdHMoeyBwbGF5ZXJPYmplY3Q6IGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdCwgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlICYmIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICBnYW1lT2JqZWN0LnNob3dQYXVzZVdpbmRvdygpO1xyXG4gICAgfVxyXG4gICAgaWYgKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVVaVBhdXNlICYmIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpIHtcclxuICAgICAgICBnYW1lT2JqZWN0LnNob3dNZW51V2luZG93KCk7XHJcbiAgICAgICAgZ2FtZU9iamVjdC5zaG93UGF1c2VXaW5kb3coKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnYW1lVWlFbmdpbmVGdW5jdGlvbihfYSkge1xyXG4gICAgdmFyIGdhbWVPYmplY3QgPSBfYS5nYW1lT2JqZWN0O1xyXG4gICAgZ2FtZVVpR2FtZVN0YXRzKHsgZ2FtZU9iamVjdDogZ2FtZU9iamVjdCB9KTtcclxuICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lT3Zlcikge1xyXG4gICAgICAgIGdhbWVPYmplY3QuZ2FtZU92ZXJXaW5kb3coKTtcclxuICAgIH1cclxuICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lV2luICYmICFnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5nYW1lVWlQYXVzZSAmJiAhZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlKSB7XHJcbiAgICAgICAgZ2FtZU9iamVjdC5nYW1lV2luV2luZG93KCk7XHJcbiAgICB9XHJcbn1cclxuKGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdEdhbWVPYmplY3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYWluTWVudSwgZ2FtZVN0YXRlLCBuYXZpZ2F0aW9uXzEsIGdhbWVPYmplY3QsIHBsYXllclNoaXBEYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbk1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21haW4tbWVudVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdhbWVEYXRhTW9kdWxlcy5nYW1lRGF0YUluaXQoY29uc3RydWN0b3JzLlBsYXllclNoaXAsIG51bGwsIGNvbnN0cnVjdG9ycyldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lU3RhdGUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdhbWVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25fMSA9IGFwcE1lbnVfMS5hcHBNZW51KGdhbWVPYmplY3QsIGFwcE1lbnVfMS5kaWFsb2dXaW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25fMS5tZW51LmluaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGVyZSBpcyBubyBkYXRhIGluOiBnYW1lU3RhdGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBuZXcgY29uc3RydWN0b3JzLkdhbWUoZ2FtZVN0YXRlLmRhdGEpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclNoaXBEYXRhID0gZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbk1lbnU6IG1haW5NZW51LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTaGlwRGF0YTogcGxheWVyU2hpcERhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGFwcE1lbnVBbmRTb3VuZEluaXQoX2EpIHtcclxuICAgICAgICAgICAgdmFyIGdhbWVPYmplY3QgPSBfYS5nYW1lT2JqZWN0O1xyXG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmF2aWdhdGlvbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uID0gYXBwTWVudV8xLmFwcE1lbnUoZ2FtZU9iamVjdCwgYXBwTWVudV8xLmRpYWxvZ1dpbmRvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbi5tZW51LmluaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmF2aWdhdGlvbl07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGFwcFNvdW5kSW5pdChfYSkge1xyXG4gICAgICAgICAgICB2YXIgZ2FtZU9iamVjdCA9IF9hLmdhbWVPYmplY3Q7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZU9iamVjdC5nYW1lU2V0dGluZ3NNZW51SW5pdCgpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5jcmVhdGVTb3VuZChjb25zdHJ1Y3RvcnMuU291bmRDcmVhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdhbWVPYmplY3RTdGFydCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHRzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3QudWlDb250cm9sbGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5zZXRHYW1lRmllbGRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5nZXRTY3JlZW5TaXplKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5zaG9wQXJlYSA9IGdhbWVTaG9wTW9kdWxlXzEubG9hZFNob3BBcmVhKGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRzID0gZ2FtZU9iamVjdC5yZXR1cm5Db250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogIGNyZWF0ZSBjb250ZXh0ICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVEYXRhLnBsYXllck9iamVjdC5jdHggPSBjb250ZXh0cy5nYW1lQWN0aW9uRmllbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZURhdGEucGxheWVyT2JqZWN0LmluaXRQbGF5ZXJTaGlwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogIHNoaXAgbW92ZSAgKi9cclxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJTaGlwRGF0YS5zaGlwQ29udHJvbChnYW1lT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmdldFNjcmVlblNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdC5zZXRHYW1lRmllbGRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3QuaW5pdEZpZWxkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiAgIGdhbWUgZW5naW4gcnVuaW5nICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBnYW1lSW50ZXJ2YWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlKSByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5jdHhVSUZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jbGVhckZpZWxkKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eFVJRmllbGQsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eEFjdGlvbkZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jbGVhckZpZWxkKGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eEFjdGlvbkZpZWxkLCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TW9kdWxlc18xLmNsZWFyRmllbGQoZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuY3R4R2FtZURpYWxvZ0ZpZWxkLCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5iYWNrU2NyZWVuUGF1c2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0LmxldmVsSW5pdChjb25zdHJ1Y3RvcnMuR2FtZUJhY2tncm91bmQsIGdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmN0eCwgZ2FtZU9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5HUk9VTkRfQUNUSVZFX0JMT0NLX0lOX1JBTkdFID0gJ2ZhbHNlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15RW5naW5lRnVuY3Rpb24oeyBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVsbGV0RW5naW5lRnVuY3Rpb24oeyBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2FtZUR5bmFtaWNMZXZlbEJveFJlbmRlcih7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91bmRCdWxsZXRFbmdpbmVGdW5jdGlvbih7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lRHluYW1pY1BsYXllcih7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lRHluYW1pY0VuZW15UmVuZGVyKHsgZ2FtZU9iamVjdDogZ2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclNoaXBNb2R1bGVfMS5zeW5jS2V5Q29udHJvbCh7IG1haW5HYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VTaGlwRW5naW5lRnVuY3Rpb24oeyBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZU9iamVjdHNFbmdpbmVGdW5jdGlvbih7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lQ2hhbmdlRW5naW5lRnVuY3Rpb24oeyBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZUJhY2tncm91bmRFbmdpbmVGdW5jdGlvbih7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gICBnYW1lIFVJIGxvYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVVaUVuZ2luZUZ1bmN0aW9uKHsgZ2FtZU9iamVjdDogZ2FtZU9iamVjdCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcE1lbnVfMS5oaWRlU2hvd01lbnUobWFpbk1lbnUsIG5hdmlnYXRpb24ubWVudSwgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVdpbiwgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cywgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuZ2FtZVVpUGF1c2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1haW5HYW1lT2JqZWN0LCBtYWluTWVudSwgZ2FtZU9iamVjdCwgcGxheWVyU2hpcERhdGEsIG5hdmlnYXRpb24sIGVuZ2luZTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXJpYWJsZXNfMS5pbml0QXBwR2xvYmFsVmFyaWFibGUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBpbml0R2FtZU9iamVjdCgpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBtYWluR2FtZU9iamVjdC5tYWluTWVudV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbk1lbnUgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbWFpbkdhbWVPYmplY3QuZ2FtZU9iamVjdF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBtYWluR2FtZU9iamVjdC5wbGF5ZXJTaGlwRGF0YV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyU2hpcERhdGEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYXBwTWVudUFuZFNvdW5kSW5pdCh7IGdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYXBwU291bmRJbml0KHsgZ2FtZU9iamVjdDogZ2FtZU9iamVjdCB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNldEludGVydmFsKGdhbWVJbnRlcnZhbCwgZ2FtZU9iamVjdC5nYW1lSW5pdERhdGEuaW50ZXJ2YWxDb3VudCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgIGVuZ2luZSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnYW1lT2JqZWN0U3RhcnQoKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNhdmVMb2FkTWVudV8xLnNhdmVHYW1lRXZlbnRzKHsgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5naW5lTW9kdWxlc18xLmNyZWF0ZVNjcmVlbnNob3RzKHsgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgam91cm5hbE1vZHVsZXNfMS5maWxsSm91cm5hbERlZmF1bHREYXRhKHsgbWFpbkdhbWVPYmplY3Q6IGdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSkoKTtcclxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS11cmwtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMiEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0zIS4vbWFpbi5zYXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYnRuLW1haW57cGFkZGluZzoxMHB4O2JvcmRlcjowcHg7Ym9yZGVyLXJhZGl1czo1cHg7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tbWFpbjpob3ZlcntiYWNrZ3JvdW5kOiNiNGI0YjR9LnNlbGVjdGVkLWl0ZW1ze2JhY2tncm91bmQ6IzE2MTMyNX0uYnRuLXN0aWNreXtwb3NpdGlvbjpmaXhlZDt0b3A6OTAlO3otaW5kZXg6MTAwO2xlZnQ6MDt3aWR0aDoyMjBweDtiYWNrZ3JvdW5kOiNFQTZDMDA7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tc3RpY2t5OmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX0uYnRuLW9yYW5nZXtiYWNrZ3JvdW5kOiNFQTZDMDA7cGFkZGluZzoxMHB4O21hcmdpbjowIGF1dG87ZGlzcGxheTpibG9jazttaW4td2lkdGg6MjUwcHg7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tb3JhbmdlOmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX0uYnRuLW9yYW5nZS1yZWplY3R7YmFja2dyb3VuZDojRUE2QzAwO3BhZGRpbmc6MTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1vcmFuZ2UtcmVqZWN0OmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX1idXR0b257aGVpZ2h0OjQwcHg7bWluLXdpZHRoOjEwMHB4fS50by1oYW5nYXItYnRuLC50by1zaG9wLWJ0bntmbG9hdDpyaWdodDtiYWNrZ3JvdW5kOiNkMjIwMjA7ei1pbmRleDoxMDtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tdG9wOi01NHB4O21hcmdpbi1yaWdodDo5OXB4O2NvbG9yOiNmZmQ5Yjk7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS50by1zaG9wLWJ0bnttYXJnaW4tdG9wOjQ2cHh9YnV0dG9uOmZvY3VzLGxpOmZvY3VzLHVsOmZvY3VzLGltZzpmb2N1cyxkaXY6Zm9jdXMscDpmb2N1c3tvdXRsaW5lOjB9LnRhYmxldC1idG57aGVpZ2h0OjE2MHB4O3BhZGRpbmc6MTVweDttaW4td2lkdGg6MTBweDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7Ym9yZGVyOjBweDtib3JkZXItcmFkaXVzOjIwcHg7Y29sb3I6I2ZmZjtmb250LXNpemU6MjBweDtib3gtc2hhZG93OjJweCA0cHggOXB4ICMwMDA7dHJhbnNpdGlvbjouM3MgbGluZWFyO2JvcmRlcjo1cHggc29saWQgIzU0MjgwMX0uYXZhdGFyLWNsb3Nle2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MHB4O2NvbG9yOiNmZmZmZmY7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtc2l6ZToxOHB4fS5hdmF0YXItYnV0dG9ue3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiM0ZjM1NjM7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47ZGlzcGxheTpibG9jazttYXJnaW46MCBhdXRvO2JvcmRlci1yYWRpdXM6NTAlO2JvcmRlcjowcHg7cGFkZGluZzowcHg7b3ZlcmZsb3c6aGlkZGVufS5zY3JlZW5zaG90LWJ1dHRvbntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxNXB4O2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MHB4fS5zY3JlZW5zaG90LWJ1dHRvbiBpbWd7d2lkdGg6NTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXI7ZGlzcGxheTpibG9jaztmbG9hdDpyaWdodH0uc2NyZWVuc2hvdC1idXR0b24gaW1nOmhvdmVye3RyYW5zZm9ybTpzY2FsZSgxLjIpfS5tZXNzYWdlLXNjcmVlbnNob3R7YmFja2dyb3VuZC1jb2xvcjojNGJhZTYwO2NvbG9yOiNmZmY7cGFkZGluZzoyMHB4O3JpZ2h0Oi0yMDAlO3RvcDowO3Bvc2l0aW9uOmFic29sdXRlfS5hY3RpdmUtbWVzc2FnZS1ib3h7YW5pbWF0aW9uOmFwZWFyLW1lc3NhZ2UgNXMgbGluZWFyIGZvcndhcmRzfS5zY3JlZW5zaG90LWJ1dHRvbjphY3RpdmV7b3BhY290eTouM31Aa2V5ZnJhbWVzIGFwZWFyLW1lc3NhZ2V7MCV7cmlnaHQ6LTIwMCV9MTAle3JpZ2h0OjAlfTkwJXtyaWdodDowJX0xMDAle3JpZ2h0Oi0yMDAlfX0uYnRuLW1haW57cGFkZGluZzoxMHB4O2JvcmRlcjowcHg7Ym9yZGVyLXJhZGl1czo1cHg7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tbWFpbjpob3ZlcntiYWNrZ3JvdW5kOiNiNGI0YjR9LnNlbGVjdGVkLWl0ZW1ze2JhY2tncm91bmQ6IzE2MTMyNX0uYnRuLXN0aWNreXtwb3NpdGlvbjpmaXhlZDt0b3A6OTAlO3otaW5kZXg6MTAwO2xlZnQ6MDt3aWR0aDoyMjBweDtiYWNrZ3JvdW5kOiNFQTZDMDA7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tc3RpY2t5OmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX0uYnRuLW9yYW5nZXtiYWNrZ3JvdW5kOiNFQTZDMDA7cGFkZGluZzoxMHB4O21hcmdpbjowIGF1dG87ZGlzcGxheTpibG9jazttaW4td2lkdGg6MjUwcHg7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tb3JhbmdlOmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX0uYnRuLW9yYW5nZS1yZWplY3R7YmFja2dyb3VuZDojRUE2QzAwO3BhZGRpbmc6MTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1vcmFuZ2UtcmVqZWN0OmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX1idXR0b257aGVpZ2h0OjQwcHg7bWluLXdpZHRoOjEwMHB4fS50by1oYW5nYXItYnRuLC50by1zaG9wLWJ0bntmbG9hdDpyaWdodDtiYWNrZ3JvdW5kOiNkMjIwMjA7ei1pbmRleDoxMDtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tdG9wOi01NHB4O21hcmdpbi1yaWdodDo5OXB4O2NvbG9yOiNmZmQ5Yjk7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS50by1zaG9wLWJ0bnttYXJnaW4tdG9wOjQ2cHh9YnV0dG9uOmZvY3VzLGxpOmZvY3VzLHVsOmZvY3VzLGltZzpmb2N1cyxkaXY6Zm9jdXMscDpmb2N1c3tvdXRsaW5lOjB9LnRhYmxldC1idG57aGVpZ2h0OjE2MHB4O3BhZGRpbmc6MTVweDttaW4td2lkdGg6MTBweDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7Ym9yZGVyOjBweDtib3JkZXItcmFkaXVzOjIwcHg7Y29sb3I6I2ZmZjtmb250LXNpemU6MjBweDtib3gtc2hhZG93OjJweCA0cHggOXB4ICMwMDA7dHJhbnNpdGlvbjouM3MgbGluZWFyO2JvcmRlcjo1cHggc29saWQgIzU0MjgwMX0uYXZhdGFyLWNsb3Nle2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MHB4O2NvbG9yOiNmZmZmZmY7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtc2l6ZToxOHB4fS5hdmF0YXItYnV0dG9ue3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiM0ZjM1NjM7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47ZGlzcGxheTpibG9jazttYXJnaW46MCBhdXRvO2JvcmRlci1yYWRpdXM6NTAlO2JvcmRlcjowcHg7cGFkZGluZzowcHg7b3ZlcmZsb3c6aGlkZGVufS5zY3JlZW5zaG90LWJ1dHRvbntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxNXB4O2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MHB4fS5zY3JlZW5zaG90LWJ1dHRvbiBpbWd7d2lkdGg6NTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXI7ZGlzcGxheTpibG9jaztmbG9hdDpyaWdodH0uc2NyZWVuc2hvdC1idXR0b24gaW1nOmhvdmVye3RyYW5zZm9ybTpzY2FsZSgxLjIpfS5tZXNzYWdlLXNjcmVlbnNob3R7YmFja2dyb3VuZC1jb2xvcjojNGJhZTYwO2NvbG9yOiNmZmY7cGFkZGluZzoyMHB4O3JpZ2h0Oi0yMDAlO3RvcDowO3Bvc2l0aW9uOmFic29sdXRlfS5hY3RpdmUtbWVzc2FnZS1ib3h7YW5pbWF0aW9uOmFwZWFyLW1lc3NhZ2UgNXMgbGluZWFyIGZvcndhcmRzfS5zY3JlZW5zaG90LWJ1dHRvbjphY3RpdmV7b3BhY290eTouM31Aa2V5ZnJhbWVzIGFwZWFyLW1lc3NhZ2V7MCV7cmlnaHQ6LTIwMCV9MTAle3JpZ2h0OjAlfTkwJXtyaWdodDowJX0xMDAle3JpZ2h0Oi0yMDAlfX0uc2F2ZS1kaWFsb2ctd2luZG93IC5zdWNjZXNzLXRleHR7Ym9yZGVyOjFweCBzb2xpZCBncmVlbjtjb2xvcjpncmVlbjtwYWRkaW5nOjEwcHh9QGtleWZyYW1lcyBtZXNzYWdlLWFwZWFyezAle3RvcDotMTAwcHh9MTAle3RvcDowcHh9OTAle3RvcDowcHh9MTAwJXt0b3A6LTEwMHB4fX1ib2R5e2ZvbnQtZmFtaWx5OidSb2JvdG8nO2NvbG9yOiNmZmY7YmFja2dyb3VuZDojMzMzO21hcmdpbjowO3BhZGRpbmc6MDtvdmVyZmxvdzpoaWRkZW47LWtodG1sLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX1ib2R5ICNwcmVsb2FkZXJ7dmlzaWJpbGl0eTpoaWRkZW47d2lkdGg6MHB4O2hlaWdodDowcHh9Ym9keSBmb3JtIC5yZWplY3QtdGV4dHtib3JkZXI6MXB4IHNvbGlkIHJlZDtjb2xvcjpyZWQ7cGFkZGluZzoxMHB4fWJvZHkgZm9ybSAud2FybmluZy10ZXh0e2JvcmRlcjoxcHggc29saWQgeWVsbG93O2NvbG9yOnllbGxvdztwYWRkaW5nOjEwcHh9Ym9keSBmb3JtIC5zdWNjZXNzLXRleHR7Ym9yZGVyOjFweCBzb2xpZCBncmVlbjtjb2xvcjpncmVlbjtwYWRkaW5nOjEwcHh9Ym9keSBmb3JtIC5tZXNzYWdlLXNsaWRlLXRleHR7cmlnaHQ6MDt3aWR0aDowcHg7cGFkZGluZzowcHh9Ym9keSBmb3JtIC5zaG93LW1lc3NhZ2V7cG9zaXRpb246Zml4ZWQ7cmlnaHQ6MTBweDt0b3A6MDtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZDpncmVlbjtjb2xvcjojZmZmO2RpYWxvZzpibG9jazt3aWR0aDozMCU7dGV4dC1hbGlnbjpjZW50ZXI7YW5pbWF0aW9uOm1lc3NhZ2UtYXBlYXIgNXMgbGluZWFyIGZvcndhcmRzfSosKjo6YWZ0ZXIsKjo6YmVmb3Jley13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItZHJhZzpub25lOy13ZWJraXQtYXBwLXJlZ2lvbjpuby1kcmFnfS5oZWFkZXItZnVsbC1iYW5uZXJ7cG9zaXRpb246Zml4ZWQ7ZGlzcGxheTpmbGV4O3RvcDowO3otaW5kZXg6Mn0uaGVhZGVyLWZ1bGwtYmFubmVyIC5oZWFkZXItZGVzY3JpcHRpb257cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7ZmxleC1mbG93OmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2ZvbnQtc2l6ZTozMnB4fS5oZWFkZXItZnVsbC1iYW5uZXIgLmhlYWRlci1kZXNjcmlwdGlvbiBoMSwuaGVhZGVyLWZ1bGwtYmFubmVyIC5oZWFkZXItZGVzY3JpcHRpb24gaDJ7bWFyZ2luLXRvcDoxMHB4O21hcmdpbi1ib3R0b206MjBweH0uaGVhZGVyLWZ1bGwtYmFubmVyIGltZ3t3aWR0aDoxMDElO21hcmdpbi1sZWZ0Oi0yMHB4fW1haW57ei1pbmRleDoxMDtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgyMzJkZWcsICMxZTFhMzIgMCUsICMxNjEzMjUgNTclLCAjMjAxMzI2IDEwMCUpO2JhY2tncm91bmQtYXR0YWNobWVudDpmaXhlZDtwYWRkaW5nOjIwcHg7bWFyZ2luLXRvcDozNTBweDttYXJnaW4tbGVmdDotMjBweDt3aWR0aDoxMDAlO2NvbG9yOiNhZmEzYWF9bWFpbiBoMSxtYWluIGgyLG1haW4gaDN7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtd2VpZ2h0OjkwMDtjb2xvcjojRUE2QzAwfXNlY3Rpb24gaDE6Zmlyc3QtbGV0dGVyLHNlY3Rpb24gaDI6Zmlyc3QtbGV0dGVyLHNlY3Rpb24gaDM6Zmlyc3QtbGV0dGVye3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uc3RhdGljLXdyYXBwZXJ7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3dpZHRoOjEwMHZ3fS5zdGF0aWMtd3JhcHBlciBhc3NpZGUubWVudS1iYWNrZ3JvdWR7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMjMyZGVnLCAjMmYyMjMxIDAlLCAjMjcwZjJlIDM1JSwgIzEzMTMyNSAxMDAlKX0uc3RhdGljLXdyYXBwZXIgYXNzaWRle3otaW5kZXg6MTA4OH0uc3RhdGljLXdyYXBwZXIgYXNzaWRlIC5tYWluLW1lbnV7ei1pbmRleDoxMjEwO3RvcDoxMHB4fS5zdGF0aWMtd3JhcHBlciBhc3NpZGUgLm1haW4tbWVudSB1bHtkaXNwbGF5OmdyaWQ7dG9wOjEwNXB4O3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtc2hhZG93OjBweCAwcHggNnB4IHJnYmEoOTIsMiwxMDgsMC41KTtwYWRkaW5nOjA7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5zdGF0aWMtd3JhcHBlciBhc3NpZGUgLm1haW4tbWVudSB1bCBsaXttaW4td2lkdGg6MTYwcHg7cGFkZGluZzoxMHB4O2xpc3Qtc3R5bGU6bm9uZTtwYWRkaW5nLWxlZnQ6NTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LnN0YXRpYy13cmFwcGVyIGFzc2lkZSAubWFpbi1tZW51IHVsIGxpOmhvdmVye2JhY2tncm91bmQ6IzFkMTExZn0uc3RhdGljLXdyYXBwZXIgYXNzaWRlIC5tYWluLW1lbnUgdWwgbGk6aG92ZXIgYXtjb2xvcjojZmZiYTNhfS5zdGF0aWMtd3JhcHBlciBhc3NpZGUgLm1haW4tbWVudSB1bCBhe2NvbG9yOiNmZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1zaXplOjE3cHg7d2lkdGg6MTAwJTtwYWRkaW5nOjVweDtkaXNwbGF5OmJsb2NrO291dGxpbmU6bm9uZX0uc3RhdGljLXdyYXBwZXIgYXNzaWRlIC5tYWluLW1lbnUgdWwgYTphY3RpdmV7Y29sb3I6cmVkfS5jb250ZW50LXdyYXBwZXJ7d2lkdGg6MTAwJTttYXgtaGVpZ2h0OjEwMHZoO292ZXJmbG93LXk6c2Nyb2xsO3otaW5kZXg6MTEwMH0uY29udGVudC13cmFwcGVyIC5tZW51LXBhZ2VzLXdyYXBwZXJ7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMjMyZGVnLCAjMWUxYTMyIDAlLCAjMTYxMzI1IDU3JSwgIzIwMTMyNiAxMDAlKTttYXJnaW4tdG9wOi0yMHB4O21pbi1oZWlnaHQ6MTAwdmg7cGFkZGluZzoyMHB4O2JhY2tncm91bmQtYXR0YWNobWVudDpmaXhlZH0uY29udGVudC13cmFwcGVyOjotd2Via2l0LXNjcm9sbGJhcnt3aWR0aDoxMnB4fS5jb250ZW50LXdyYXBwZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgNnB4IHJnYmEoMCwwLDAsMCk7Ym9yZGVyLXJhZGl1czoxMHB4fS5jb250ZW50LXdyYXBwZXI6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1ie2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kOnJnYmEoNzEsNiw4MywwLjgpOy13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgNnB4ICMwMDB9LmNvbnRlbnQtd3JhcHBlcjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6d2luZG93LWluYWN0aXZle2JhY2tncm91bmQ6cmdiYSgyNTUsMCwwLDAuMSl9LmRpYWxvZy1ib3h7cG9zaXRpb246YWJzb2x1dGU7bWFyZ2luOjAgYXV0bztwYWRkaW5nOjEwcHg7bWluLXdpZHRoOjEwMCU7bWluLWhlaWdodDoxMDB2aDtwb3NpdGlvbjpmaXhlZDtsZWZ0OjB9LmRpYWxvZy1ib3ggLmRpYWxvZy13cmFwcGVye2Rpc3BsYXk6ZmxleDtoZWlnaHQ6MTAwdmg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmRpYWxvZy1ib3ggLmRpYWxvZy13cmFwcGVyIC5kaWFsb2ctd2luZG93e2JhY2tncm91bmQ6IzI5MmMzNTtwYWRkaW5nOjIwcHg7bWluLXdpZHRoOjQwMHB4O21pbi1oZWlnaHQ6MTAwcHg7Ym9yZGVyLXJhZGl1czo1cHg7Ym94LXNoYWRvdzotM3B4IDNweCAxMHB4IHJnYmEoMCwwLDAsMC43KX0uZGlhbG9nLWJveCAuZGlhbG9nLXdyYXBwZXIgLmRpYWxvZy13aW5kb3cgZm9ybSBpbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0sLmRpYWxvZy1ib3ggLmRpYWxvZy13cmFwcGVyIC5kaWFsb2ctd2luZG93IGZvcm0gaW5wdXRbdHlwZT1cXFwiZW1haWxcXFwiXSwuZGlhbG9nLWJveCAuZGlhbG9nLXdyYXBwZXIgLmRpYWxvZy13aW5kb3cgZm9ybSBpbnB1dFt0eXBlPVxcXCJwYXNzd29yZFxcXCJde3dpZHRoOjkzJTtwYWRkaW5nOjEwcHg7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LDAuMSk7Ym9yZGVyOjBweDtjb2xvcjp3aGl0ZX0uZGlhbG9nLWJveCAuZGlhbG9nLXdyYXBwZXIgLmRpYWxvZy13aW5kb3cgZm9ybSBsYWJlbHtmb250LXNpemU6MTJweDtjb2xvcjojZWVlfS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyBmb3JtIC5hbGVydC1tZXNzYWdle2ZvbnQtc2l6ZToxMnB4fS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyBmb3JtIC5hbGVydC1tZXNzYWdlIHB7cGFkZGluZzoxMHB4fS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyBmb3JtIC5hbGVydC1tZXNzYWdlIC5yZWplY3QtdGV4dHtib3JkZXI6MXB4IHNvbGlkIHJlZDtjb2xvcjpyZWQ7cGFkZGluZzoxMHB4fS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyBmb3JtIC5hbGVydC1tZXNzYWdlIC53YXJuaW5nLXRleHR7Ym9yZGVyOjFweCBzb2xpZCB5ZWxsb3c7Y29sb3I6eWVsbG93O3BhZGRpbmc6MTBweH0uZGlhbG9nLWJveCAuZGlhbG9nLXdyYXBwZXIgLmRpYWxvZy13aW5kb3cgZm9ybSAuYWxlcnQtbWVzc2FnZSAuc3VjY2Vzcy10ZXh0e2JvcmRlcjoxcHggc29saWQgZ3JlZW47Y29sb3I6Z3JlZW47cGFkZGluZzoxMHB4fS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyBkaXZ7cGFkZGluZzoxMHB4fS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyBkaXYgcHt0ZXh0LWFsaWduOmNlbnRlcn0uZGlhbG9nLWJveCAuZGlhbG9nLXdyYXBwZXIgLmRpYWxvZy13aW5kb3cgLmRpYWxvZy1ib3R0b20tYXJlYXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seX0uZGlhbG9nLWJveCAuZGlhbG9nLXdyYXBwZXIgLmRpYWxvZy13aW5kb3cgLmRpYWxvZy1ib3R0b20tYXJlYSBidXR0b24uYWNjZXB0LWJ0bntiYWNrZ3JvdW5kOiM0YmFlNjA7d2lkdGg6Y2FsYygxMDAlIC8gMyk7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5kaWFsb2ctYm94IC5kaWFsb2ctd3JhcHBlciAuZGlhbG9nLXdpbmRvdyAuZGlhbG9nLWJvdHRvbS1hcmVhIGJ1dHRvbi5hY2NlcHQtYnRuOmhvdmVye2JhY2tncm91bmQ6Izc0ZjA4ZX0uZGlhbG9nLWJ0bi1hcmVhe2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtZXZlbmx5fS5kaWFsb2ctYnRuLWFyZWEgYnV0dG9uLmFjY2VwdC1idG57YmFja2dyb3VuZDojNGJhZTYwO3dpZHRoOmNhbGMoMTAwJSAvIDMpO3RyYW5zaXRpb246LjVzIGxpbmVhcn0uZGlhbG9nLWJ0bi1hcmVhIGJ1dHRvbi5hY2NlcHQtYnRuOmhvdmVye2JhY2tncm91bmQ6Izc0ZjA4ZX0ubG9hZC1zY3JlZW4tYnV0dG9uLXdyYXBwZXJ7bWFyZ2luLXRvcDozOHZofS5sb2FkLXNjcmVlbi1idXR0b24td3JhcHBlciBidXR0b257bWFyZ2luLXRvcDoxMHB4fS53YWl0LXNjcmVlbnt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwdmg7YmFja2dyb3VuZDojMjEwMDNhODA7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxNTAwfS53YWl0LXNjcmVlbiBoMXt0ZXh0LWFsaWduOmNlbnRlcn0ud2FpdC1zY3JlZW4gLndhaXQtc2NyZWVuLWlubmVye2Rpc3BsYXk6ZmxleDtoZWlnaHQ6MTAwJTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0jd3JhcHBlciBzZWN0aW9ue3otaW5kZXg6NTA7dG9wOjB9LmdhbWVCYWNrZ3JvdW5ke2JhY2tncm91bmQ6IzAwMH0uZ2FtZS1maWVsZHN7cG9zaXRpb246YWJzb2x1dGV9LmdhbWUtZmllbGQtd3JhcHBlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtoZWlnaHQ6MTAwdmg7d2lkdGg6MTAwJTthbGlnbi1pdGVtczpjZW50ZXJ9LmhpZGUtbWVudXtkaXNwbGF5Om5vbmV9LmRpYWxvZy10ZXh0e3RleHQtYWxpZ246Y2VudGVyfS5kaWFsb2ctdGV4dCBidXR0b257d2lkdGg6NTAlO2JvcmRlci1yYWRpdXM6MHB4O2JhY2tncm91bmQ6bm9uZTtjb2xvcjojZmZmfS5kaWFsb2ctdGV4dCAuc2VsZWN0ZWQtZm9ybXtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLWJvdHRvbTozcHggc29saWQgI2M5MDAwMH0ubWFpbi1sb2FkLXNjcmVlbntiYWNrZ3JvdW5kLXNpemU6Y292ZXI7b3ZlcmZsb3c6aGlkZGVuO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MjAwMDt3aWR0aDoxMDB2dztoZWlnaHQ6MTAwdmh9Lm1haW4tbG9hZC1zY3JlZW4gaDF7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1zaXplOjEwMHB4O21hcmdpbi10b3A6MTBweDtmb250LXdlaWdodDo5MDB9Lm1haW4tbG9hZC1zY3JlZW4gcHtwYWRkaW5nOjIwcHh9Lm1haW4tbG9hZC1zY3JlZW4gc3Bhbntmb250LXdlaWdodDoxMDB9LmlubmVyLXBhZ2UtY29udGFpbmVyIC5zaW5nbGUtbmV3cy1pdGVte3BhZGRpbmctdG9wOjMwcHg7cGFkZGluZy1ib3R0b206NTBweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjNGQwMDk0fS5zaW5nbGUtaXRlbXMtY29udGVudC1hcmVhe2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcH0uc2luZ2xlLWl0ZW1zLWNvbnRlbnQtYXJlYSBwe3dpZHRoOjEwMCV9LnNpbmdsZS1pdGVtcy1jb250ZW50LWFyZWEgLmFydGljbGUtcGFydC1pdGVte3dpZHRoOjQ3JTtwYWRkaW5nOjEwcHg7ZGlzcGxheTpncmlkO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zaW5nbGUtaXRlbXMtY29udGVudC1hcmVhIC5hcnRpY2xlLXBhcnQtaXRlbSBwLC5zaW5nbGUtaXRlbXMtY29udGVudC1hcmVhIC5hcnRpY2xlLXBhcnQtaXRlbSBsaXtjb2xvcjojYjRiNGI0fS5zaW5nbGUtaXRlbXMtY29udGVudC1hcmVhIC5hcnRpY2xlLXBhcnQtaXRlbSBpbWd7d2lkdGg6MTAwJTtwYWRkaW5nOjNweH0uc2luZ2xlLWl0ZW1zLWNvbnRlbnQtYXJlYSAuYXJ0aWNsZS1wYXJ0LWl0ZW0gaDJ7dGV4dC1hbGlnbjpyaWdodH1wLnRleHQtYnJhbmRpbmd7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cGFkZGluZzoyMHB4O2ZvbnQtc2l6ZToxMnB4O3JpZ2h0OjA7Y29sb3I6I2RlYTc1NH0uaGlkZS1hbmltYXRpb257YW5pbWF0aW9uOmhpZGUtYW5pbWF0aW9uIDFzIGZvcndhcmRzIGxpbmVhcn0uYXJ0aWNsZS1wYXJ0LWl0ZW0gYntjb2xvcjojRUE2QzAwfUBrZXlmcmFtZXMgaGlkZS1hbmltYXRpb257MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX0uYnRuLW1haW57cGFkZGluZzoxMHB4O2JvcmRlcjowcHg7Ym9yZGVyLXJhZGl1czo1cHg7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tbWFpbjpob3ZlcntiYWNrZ3JvdW5kOiNiNGI0YjR9LnNlbGVjdGVkLWl0ZW1ze2JhY2tncm91bmQ6IzE2MTMyNX0uYnRuLXN0aWNreXtwb3NpdGlvbjpmaXhlZDt0b3A6OTAlO3otaW5kZXg6MTAwO2xlZnQ6MDt3aWR0aDoyMjBweDtiYWNrZ3JvdW5kOiNFQTZDMDA7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tc3RpY2t5OmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX0uYnRuLW9yYW5nZXtiYWNrZ3JvdW5kOiNFQTZDMDA7cGFkZGluZzoxMHB4O21hcmdpbjowIGF1dG87ZGlzcGxheTpibG9jazttaW4td2lkdGg6MjUwcHg7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5idG4tb3JhbmdlOmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX0uYnRuLW9yYW5nZS1yZWplY3R7YmFja2dyb3VuZDojRUE2QzAwO3BhZGRpbmc6MTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1vcmFuZ2UtcmVqZWN0OmhvdmVye2JhY2tncm91bmQ6I2ZmYWY2YX1idXR0b257aGVpZ2h0OjQwcHg7bWluLXdpZHRoOjEwMHB4fS50by1oYW5nYXItYnRuLC50by1zaG9wLWJ0bntmbG9hdDpyaWdodDtiYWNrZ3JvdW5kOiNkMjIwMjA7ei1pbmRleDoxMDtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tdG9wOi01NHB4O21hcmdpbi1yaWdodDo5OXB4O2NvbG9yOiNmZmQ5Yjk7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS50by1zaG9wLWJ0bnttYXJnaW4tdG9wOjQ2cHh9YnV0dG9uOmZvY3VzLGxpOmZvY3VzLHVsOmZvY3VzLGltZzpmb2N1cyxkaXY6Zm9jdXMscDpmb2N1c3tvdXRsaW5lOjB9LnRhYmxldC1idG57aGVpZ2h0OjE2MHB4O3BhZGRpbmc6MTVweDttaW4td2lkdGg6MTBweDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7Ym9yZGVyOjBweDtib3JkZXItcmFkaXVzOjIwcHg7Y29sb3I6I2ZmZjtmb250LXNpemU6MjBweDtib3gtc2hhZG93OjJweCA0cHggOXB4ICMwMDA7dHJhbnNpdGlvbjouM3MgbGluZWFyO2JvcmRlcjo1cHggc29saWQgIzU0MjgwMX0uYXZhdGFyLWNsb3Nle2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MHB4O2NvbG9yOiNmZmZmZmY7dGV4dC1hbGlnbjpsZWZ0O2ZvbnQtc2l6ZToxOHB4fS5hdmF0YXItYnV0dG9ue3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiM0ZjM1NjM7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47ZGlzcGxheTpibG9jazttYXJnaW46MCBhdXRvO2JvcmRlci1yYWRpdXM6NTAlO2JvcmRlcjowcHg7cGFkZGluZzowcHg7b3ZlcmZsb3c6aGlkZGVufS5zY3JlZW5zaG90LWJ1dHRvbntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxNXB4O2JhY2tncm91bmQ6bm9uZTtib3JkZXI6MHB4fS5zY3JlZW5zaG90LWJ1dHRvbiBpbWd7d2lkdGg6NTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXI7ZGlzcGxheTpibG9jaztmbG9hdDpyaWdodH0uc2NyZWVuc2hvdC1idXR0b24gaW1nOmhvdmVye3RyYW5zZm9ybTpzY2FsZSgxLjIpfS5tZXNzYWdlLXNjcmVlbnNob3R7YmFja2dyb3VuZC1jb2xvcjojNGJhZTYwO2NvbG9yOiNmZmY7cGFkZGluZzoyMHB4O3JpZ2h0Oi0yMDAlO3RvcDowO3Bvc2l0aW9uOmFic29sdXRlfS5hY3RpdmUtbWVzc2FnZS1ib3h7YW5pbWF0aW9uOmFwZWFyLW1lc3NhZ2UgNXMgbGluZWFyIGZvcndhcmRzfS5zY3JlZW5zaG90LWJ1dHRvbjphY3RpdmV7b3BhY290eTouM31Aa2V5ZnJhbWVzIGFwZWFyLW1lc3NhZ2V7MCV7cmlnaHQ6LTIwMCV9MTAle3JpZ2h0OjAlfTkwJXtyaWdodDowJX0xMDAle3JpZ2h0Oi0yMDAlfX0uc2hvcC13cmFwcGVye3otaW5kZXg6MTAwMDt3aWR0aDo5MCU7Ym9yZGVyLXJhZGl1czoxMHB4O3BhZGRpbmc6MjBweDttYXgtaGVpZ2h0Ojcydmg7YmFja2dyb3VuZC1zaXplOmNvdmVyO2hlaWdodDo1NTBweH0uc2hvcC13cmFwcGVyIC5zaG9wLWZyYW1le3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjYyJTtoZWlnaHQ6NTcwcHh9LnNob3Atd3JhcHBlciBoMXt0ZXh0LWFsaWduOmNlbnRlcn0uc2hvcC13cmFwcGVyIC5oYW5nYXItYm9keS13cmFwcGVye3otaW5kZXg6MTAwMDtwb3NpdGlvbjpyZWxhdGl2ZX0uc2hvcC13cmFwcGVyIC5oYW5nYXItYm9keS13cmFwcGVyIHB7dGV4dC1hbGlnbjpjZW50ZXJ9LnNob3Atd3JhcHBlciAuc2hvcC1oZWFkZXJ7bWFyZ2luLXRvcDotNDhweDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo2MiU7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O3otaW5kZXg6MjAwfS5zaG9wLXdyYXBwZXIgLmV4dGVybmFsLWJ0bntwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjIwMDA7bWluLXdpZHRoOjE2MHB4O2hlaWdodDozOHB4O21hcmdpbi10b3A6NTM0cHg7bWFyZ2luLWxlZnQ6MTQ3cHg7d2lkdGg6MTAwcHg7Y29sb3I6I2ZmZmZmZjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnNob3Atd3JhcHBlciAuc2hvcC1tZW51LXdyYXBwZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmQ7bWFyZ2luLXRvcDotMTJweDtwYWRkaW5nOjIwcHh9LnNob3Atd3JhcHBlciAuaXRlbS1kZXNjcmlwdGlvbnt3aWR0aDoxMDBweDtoZWlnaHQ6Zml0LWNvbnRlbnQ7Zm9udC1zaXplOjEwcHg7YmFja2dyb3VuZDpyZ2JhKDQ3LDI0LDUxLDAuODEpO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6NXB4O2JvcmRlci1yYWRpdXM6NXB4O3otaW5kZXg6MjUwMH0uc2hvcC13cmFwcGVyIC5pdGVtLWRyYWdhYmxlLXBpY3R1cmV7d2lkdGg6MTIwcHg7aGVpZ2h0Ojk0cHg7Zm9udC1zaXplOjEwcHg7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyNTAwfS5zaG9wLXdyYXBwZXIgLnNob3Atc2FsZS1wYXJ0e3dpZHRoOjEwMCU7aGVpZ2h0OjY3cHg7YmFja2dyb3VuZC1zaXplOmNvdmVyfS5zaG9wLXdyYXBwZXIgLnNob3Atc2FsZS1wYXJ0IC5zYWxlLWlubmVyLWl0ZW0gaW1ne3dpZHRoOjEwMCV9LnNob3Atd3JhcHBlciAuaW5uZXItc2hvcC13cmFwcGVye2Rpc3BsYXk6ZmxleH0uc2hvcC13cmFwcGVyIC5kaXNwbGF5LWFyZWEtd3JhcHBlcntiYWNrZ3JvdW5kLXJlcGVhdC14Om5vLXJlcGVhdDt3aWR0aDo3MCU7aGVpZ2h0OjUyN3B4fS5zaG9wLXdyYXBwZXIgLmRpc3BsYXktYXJlYS13cmFwcGVyIGNhbnZhc3tiYWNrZ3JvdW5kLXNpemU6Y292ZXJ9LnNob3Atd3JhcHBlciAucmlnaHQtc2lkZS1pbnZlbnRvcnl7d2lkdGg6MjQ1cHg7aGVpZ2h0OmZpdC1jb250ZW50O2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO3JpZ2h0OjUwcHg7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47bWFyZ2luOjAgYXV0b30uc2hvcC13cmFwcGVyIC5yaWdodC1zaWRlLWludmVudG9yeSAuaW52ZW50b3J5LXNlbGVjdGVkLWl0ZW1ze2JhY2tncm91bmQ6b3JhbmdlfS5zaG9wLXdyYXBwZXIgLnJpZ2h0LXNpZGUtaW52ZW50b3J5IC5pbnZlbnRvcnktaXRlbXtoZWlnaHQ6OTNweDt3aWR0aDo0NCU7cGFkZGluZzo1cHh9LnNob3Atd3JhcHBlciAucmlnaHQtc2lkZS1pbnZlbnRvcnkgLmludmVudG9yeS1pdGVtIC5pbnZlbnRvcnktaW5uZXItaXRlbXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6cmdiYSg0MywzMSw0MCwwLjgpO2JvcmRlci1yYWRpdXM6N3B4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zaG9wLXdyYXBwZXIgLnJpZ2h0LXNpZGUtaW52ZW50b3J5IC5pbnZlbnRvcnktaXRlbSAuaW52ZW50b3J5LWlubmVyLWl0ZW0gc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjJweH0uc2hvcC13cmFwcGVyIC5yaWdodC1zaWRlLWludmVudG9yeSAuaW52ZW50b3J5LWl0ZW0gLmludmVudG9yeS1pbm5lci1pdGVtIGltZ3tqdXN0aWZ5LXNlbGY6Y2VudGVyO3dpZHRoOjgwJTtoZWlnaHQ6ODQlO2FsaWduLXNlbGY6Y2VudGVyfS5zaG9wLXdyYXBwZXIgLmRpc3BsYXktc2hvcC1pdGVtc3tkaXNwbGF5OmZsZXg7ZmxleC1mbG93OndyYXA7dHJhbnNmb3JtOnNjYWxlKDAuOSk7bWFyZ2luOjAgYXV0bzttYXJnaW4tdG9wOjg4cHg7bWluLWhlaWdodDo0ODVweH0uc2hvcC13cmFwcGVyIC5kaXNwbGF5LXNob3AtaXRlbXMgLmN1cnJlbnQtc2hpcHtib3JkZXI6MnB4IHNvbGlkIHJlYmVjY2FwdXJwbGU7Ym94LXNpemluZzpib3JkZXItYm94fS5zaG9wLXdyYXBwZXIgLmRpc3BsYXktc2hvcC1pdGVtcyAuY2FyZC1yZWd1bGFyLWRlc2NyaXB0aW9uLXdyYXBwZXJ7Zm9udC1zaXplOjEycHh9LnNob3Atd3JhcHBlciAuZGlzcGxheS1zaG9wLWl0ZW1zIC5zaGlweWFyZC1pdGVte3dpZHRoOjEwMCU7bWFyZ2luOjElO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjttYXgtaGVpZ2h0OjQwNXB4O292ZXJmbG93LXk6c2Nyb2xsO2JvcmRlci1yYWRpdXM6NXB4fS5zaG9wLXdyYXBwZXIgLmRpc3BsYXktc2hvcC1pdGVtcyAuc2hpcHlhcmQtaXRlbSBpbWd7d2lkdGg6NTV9LnNob3Atd3JhcHBlciAuZGlzcGxheS1zaG9wLWl0ZW1zIGgye2Rpc3BsYXk6ZmxleH0uc2hvcC13cmFwcGVyIC5kaXNwbGF5LXNob3AtaXRlbXMgLmN1cnJlbnQtc2hpcC1sYWJlbHt3aWR0aDoxMjBweDtwYWRkaW5nLWxlZnQ6MTAlfS5zaG9wLXdyYXBwZXIgLmRpc3BsYXktc2hvcC1pdGVtcyAuY2FyZC1ib2R5e2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6d3JhcDtmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtZXZlbmx5O2JhY2tncm91bmQ6IzMzMDA0NDtmb250LXNpemU6MTJweH0uc2hvcC13cmFwcGVyIC5kaXNwbGF5LXNob3AtaXRlbXMgLnNob3AtY2FyZHt3aWR0aDpjYWxjKDEwMCUvNC40KTttYXJnaW46MSU7YmFja2dyb3VuZC1zaXplOmNvdmVyO2hlaWdodDo0MDZweH0uc2hvcC13cmFwcGVyIC5kaXNwbGF5LXNob3AtaXRlbXMgLmlubmVyLWNhcmR7cGFkZGluZzoxMHB4fS5zaG9wLXdyYXBwZXIgLmRpc3BsYXktc2hvcC1pdGVtcyBpbWd7d2lkdGg6NTUlO21hcmdpbjowIGF1dG87ZGlzcGxheTpibG9ja30uc2hvcC13cmFwcGVyIC5kaXNwbGF5LXNob3AtaXRlbXMgLnNoaXB5YXJkLWl0ZW0gLmNhcmQtbWFpbi1kYXRhe3dpZHRoOjUwJX0uYm90b29tLXNob3AtbmF2aWdhdGlvbi1hcmVhe3otaW5kZXg6MTAwMDtwb3NpdGlvbjpyZWxhdGl2ZX0uc2VsZWN0ZWQtc2hvcC1idG57YmFja2dyb3VuZDojRUE2QzAwfS5zZWxlY3RlZC1zaG9wLWJ0bjpob3ZlcntiYWNrZ3JvdW5kOiNmZmFmNmF9LnNob3AtYnV0dG9ue21hcmdpbi10b3A6MjElO3Bvc2l0aW9uOnJlbGF0aXZlfWJ1dHRvbiAuc2hvcC1idXR0b257d2lkdGg6MTBweDttaW4td2lkdGg6MTBweH0uYnRuLXRvLXJpZ2h0e2Zsb2F0OnJpZ2h0fS5idG4tdG8tbGVmdHtmbG9hdDpsZWZ0fS5zaGlweWFyZC1pdGVtOjotd2Via2l0LXNjcm9sbGJhcnt3aWR0aDoxMnB4fS5zaGlweWFyZC1pdGVtOjotd2Via2l0LXNjcm9sbGJhci10cmFja3std2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAwIDZweCByZ2JhKDAsMCwwLDApO2JvcmRlci1yYWRpdXM6MTBweH0uc2hpcHlhcmQtaXRlbTo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWJ7Ym9yZGVyLXJhZGl1czoxMHB4O2JhY2tncm91bmQ6cmdiYSg3MSw2LDgzLDAuOCk7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCA2cHggIzAwMH0uc2hpcHlhcmQtaXRlbTo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6d2luZG93LWluYWN0aXZle2JhY2tncm91bmQ6cmdiYSgyNTUsMCwwLDAuMSl9LnNob3AtZGlhbG9ne3otaW5kZXg6MTAxMDtiYWNrZ3JvdW5kOiMyOTJjMzU7cG9zaXRpb246YWJzb2x1dGU7YWxpZ24tc2VsZjpjZW50ZXI7cGFkZGluZzoyMHB4O3dpZHRoOjQwMHB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6NXB4O2JveC1zaGFkb3c6LTNweCAzcHggMTBweCByZ2JhKDAsMCwwLDAuNyl9LnJlc3VsdC1tZXNzYWdlLXdyYXBwZXJ7ZGlzcGxheTpmbGV4O2NvbG9yOm9yYW5nZTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2hlaWdodDo4MHZoO2FsaWduLWl0ZW1zOmNlbnRlcn0ucmVzdWx0LW1lc3NhZ2Utd3JhcHBlciBwe3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToyMHB4fS5yZXN1bHQtbWVzc2FnZS13cmFwcGVyIHA6Zmlyc3QtbGV0dGVye3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX11bC5zaG93LXJlc3VsdC1hcmVhe2xpc3Qtc3R5bGU6bm9uZX11bC5zaG93LXJlc3VsdC1hcmVhIGxpe3BhZGRpbmc6MTBweH11bC5zaG93LXJlc3VsdC1hcmVhIGxpIC5yYXRlLW51bWJlcntjb2xvcjpyZWQ7ZmxleC1iYXNpczo1JX11bC5zaG93LXJlc3VsdC1hcmVhIGxpIC5pdGVtLW5hbWV7Y29sb3I6b3JhbmdlO2ZsZXgtYmFzaXM6NjAlfXVsLnNob3ctcmVzdWx0LWFyZWEgbGkgLml0ZW0tY29pbntjb2xvcjpncmVlbjtmbGV4LWJhc2lzOjE1JX11bC5zaG93LXJlc3VsdC1hcmVhIGxpIC5pdGVtLXBvaW50c3tjb2xvcjpvcmFuZ2U7ZmxleC1iYXNpczoxNSV9dWwuc2hvdy1yZXN1bHQtYXJlYSBsaSAuaXRlbS1kYXRle2ZvbnQtc2l6ZToxMHB4O2NvbG9yOmdyZXk7ZmxleC1iYXNpczo1JX11bC5zaG93LXJlc3VsdC1hcmVhIGxpIHB7ZGlzcGxheTpmbGV4O2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiNiZGJkYmR9dWwuc2hvdy1yZXN1bHQtYXJlYSBsaTpudGgtY2hpbGQob2RkKXtiYWNrZ3JvdW5kOiMwYTA3MTN9dWwuc2hvdy1yZXN1bHQtYXJlYSBsaTpudGgtY2hpbGQob2RkKSAuc2F2ZS1sb2FkLWJ1dHRvbnMtbGlzdHtvdmVyZmxvdzpoaWRkZW47aGVpZ2h0OmF1dG87YmFja2dyb3VuZDojMGEwNzEzO2hlaWdodDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6bGlzdC1pdGVtO2FuaW1hdGlvbjpsb2FkLXByZXZpZXctcGljcyAuOHMgbGluZWFyIGZvcndhcmRzfXVsLnNob3ctcmVzdWx0LWFyZWEgbGk6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQ6IzBmMGMxYn11bC5zaG93LXJlc3VsdC1hcmVhIGxpOm50aC1jaGlsZChldmVuKSAuc2F2ZS1sb2FkLWJ1dHRvbnMtbGlzdHtoZWlnaHQ6YXV0bztvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZDojMGYwYzFiO2hlaWdodDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6bGlzdC1pdGVtO2FuaW1hdGlvbjpsb2FkLXByZXZpZXctcGljcyAuOHMgbGluZWFyIGZvcndhcmRzfUBrZXlmcmFtZXMgbG9hZC1wcmV2aWV3LXBpY3N7MCV7bWluLWhlaWdodDowcHg7YmFja2dyb3VuZDojMTYxMzI1fTk5JXttaW4taGVpZ2h0OjQwMHB4O2JhY2tncm91bmQ6IzBhMDcxM30xMDAle2hlaWdodDphdXRvfX0ubG9hZC1zY3JlZW4td3JhcHBlcnt6LWluZGV4OjIwMDA7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZoO3RvcDowO3Bvc2l0aW9uOnJlbGF0aXZlfS5sb2FkLXNjcmVlbi13cmFwcGVyIC5sb2FkLWNpcmNlLXdyYXBwZXJ7d2lkdGg6MTAwcHg7aGVpZ2h0OjEwMHB4O2JhY2tncm91bmQtc2l6ZTpjb3ZlcjthbmltYXRpb246bG9hZC1jaXJjbGUtcm90YXRlIDFzIGluZmluaXRlIHN0ZXBzKDExLCBlbmQpfS5sb2FkLXNjcmVlbi13cmFwcGVyIHB7dGV4dC1hbGlnbjpsZWZ0fUBrZXlmcmFtZXMgbG9hZC1jaXJjbGUtcm90YXRlezAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fS5zYXZlLWRpYWxvZy13aW5kb3cgLnN1Y2Nlc3MtdGV4dHtib3JkZXI6MXB4IHNvbGlkIGdyZWVuO2NvbG9yOmdyZWVuO3BhZGRpbmc6MTBweH1Aa2V5ZnJhbWVzIG1lc3NhZ2UtYXBlYXJ7MCV7dG9wOi0xMDBweH0xMCV7dG9wOjBweH05MCV7dG9wOjBweH0xMDAle3RvcDotMTAwcHh9fS5idG4tbWFpbntwYWRkaW5nOjEwcHg7Ym9yZGVyOjBweDtib3JkZXItcmFkaXVzOjVweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1tYWluOmhvdmVye2JhY2tncm91bmQ6I2I0YjRiNH0uc2VsZWN0ZWQtaXRlbXN7YmFja2dyb3VuZDojMTYxMzI1fS5idG4tc3RpY2t5e3Bvc2l0aW9uOmZpeGVkO3RvcDo5MCU7ei1pbmRleDoxMDA7bGVmdDowO3dpZHRoOjIyMHB4O2JhY2tncm91bmQ6I0VBNkMwMDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1zdGlja3k6aG92ZXJ7YmFja2dyb3VuZDojZmZhZjZhfS5idG4tb3Jhbmdle2JhY2tncm91bmQ6I0VBNkMwMDtwYWRkaW5nOjEwcHg7bWFyZ2luOjAgYXV0bztkaXNwbGF5OmJsb2NrO21pbi13aWR0aDoyNTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1vcmFuZ2U6aG92ZXJ7YmFja2dyb3VuZDojZmZhZjZhfS5idG4tb3JhbmdlLXJlamVjdHtiYWNrZ3JvdW5kOiNFQTZDMDA7cGFkZGluZzoxMHB4O3RyYW5zaXRpb246LjVzIGxpbmVhcn0uYnRuLW9yYW5nZS1yZWplY3Q6aG92ZXJ7YmFja2dyb3VuZDojZmZhZjZhfWJ1dHRvbntoZWlnaHQ6NDBweDttaW4td2lkdGg6MTAwcHh9LnRvLWhhbmdhci1idG4sLnRvLXNob3AtYnRue2Zsb2F0OnJpZ2h0O2JhY2tncm91bmQ6I2QyMjAyMDt6LWluZGV4OjEwO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi10b3A6LTU0cHg7bWFyZ2luLXJpZ2h0Ojk5cHg7Y29sb3I6I2ZmZDliOTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnRvLXNob3AtYnRue21hcmdpbi10b3A6NDZweH1idXR0b246Zm9jdXMsbGk6Zm9jdXMsdWw6Zm9jdXMsaW1nOmZvY3VzLGRpdjpmb2N1cyxwOmZvY3Vze291dGxpbmU6MH0udGFibGV0LWJ0bntoZWlnaHQ6MTYwcHg7cGFkZGluZzoxNXB4O21pbi13aWR0aDoxMHB4O2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjtib3JkZXI6MHB4O2JvcmRlci1yYWRpdXM6MjBweDtjb2xvcjojZmZmO2ZvbnQtc2l6ZToyMHB4O2JveC1zaGFkb3c6MnB4IDRweCA5cHggIzAwMDt0cmFuc2l0aW9uOi4zcyBsaW5lYXI7Ym9yZGVyOjVweCBzb2xpZCAjNTQyODAxfS5hdmF0YXItY2xvc2V7YmFja2dyb3VuZDpub25lO2JvcmRlcjowcHg7Y29sb3I6I2ZmZmZmZjt0ZXh0LWFsaWduOmxlZnQ7Zm9udC1zaXplOjE4cHh9LmF2YXRhci1idXR0b257d2lkdGg6MTAwcHg7aGVpZ2h0OjEwMHB4O2JhY2tncm91bmQtY29sb3I6IzRmMzU2MztiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtkaXNwbGF5OmJsb2NrO21hcmdpbjowIGF1dG87Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyOjBweDtwYWRkaW5nOjBweDtvdmVyZmxvdzpoaWRkZW59LnNjcmVlbnNob3QtYnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjE1cHg7YmFja2dyb3VuZDpub25lO2JvcmRlcjowcHh9LnNjcmVlbnNob3QtYnV0dG9uIGltZ3t3aWR0aDo1MHB4O3RyYW5zaXRpb246LjVzIGxpbmVhcjtkaXNwbGF5OmJsb2NrO2Zsb2F0OnJpZ2h0fS5zY3JlZW5zaG90LWJ1dHRvbiBpbWc6aG92ZXJ7dHJhbnNmb3JtOnNjYWxlKDEuMil9Lm1lc3NhZ2Utc2NyZWVuc2hvdHtiYWNrZ3JvdW5kLWNvbG9yOiM0YmFlNjA7Y29sb3I6I2ZmZjtwYWRkaW5nOjIwcHg7cmlnaHQ6LTIwMCU7dG9wOjA7cG9zaXRpb246YWJzb2x1dGV9LmFjdGl2ZS1tZXNzYWdlLWJveHthbmltYXRpb246YXBlYXItbWVzc2FnZSA1cyBsaW5lYXIgZm9yd2FyZHN9LnNjcmVlbnNob3QtYnV0dG9uOmFjdGl2ZXtvcGFjb3R5Oi4zfUBrZXlmcmFtZXMgYXBlYXItbWVzc2FnZXswJXtyaWdodDotMjAwJX0xMCV7cmlnaHQ6MCV9OTAle3JpZ2h0OjAlfTEwMCV7cmlnaHQ6LTIwMCV9fS5zYXZlLWRpYWxvZy13aW5kb3cgLnN1Y2Nlc3MtdGV4dHtib3JkZXI6MXB4IHNvbGlkIGdyZWVuO2NvbG9yOmdyZWVuO3BhZGRpbmc6MTBweH1Aa2V5ZnJhbWVzIG1lc3NhZ2UtYXBlYXJ7MCV7dG9wOi0xMDBweH0xMCV7dG9wOjBweH05MCV7dG9wOjBweH0xMDAle3RvcDotMTAwcHh9fS5tZW51LXNjcmVlbiAuc2V0dGluZ3Mtc2xpZGVye21hcmdpbjowIGF1dG87d2lkdGg6MTAwJTstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTtoZWlnaHQ6MTVweDtiYWNrZ3JvdW5kOiM1MDA4OTI7b3V0bGluZTpub25lO29wYWNpdHk6MC43Oy13ZWJraXQtdHJhbnNpdGlvbjouMnM7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycztib3JkZXItcmFkaXVzOjEwcHh9Lm1lbnUtc2NyZWVuIC5zZXR0aW5ncy1zbGlkZXIgYXtvdXRsaW5lOm5vbmV9Lm1lbnUtc2NyZWVuIC5zZXR0aW5ncy1zbGlkZXI6aG92ZXJ7b3BhY2l0eToxfS5tZW51LXNjcmVlbiAuc2V0dGluZ3Mtc2xpZGVyOjotd2Via2l0LXNsaWRlci10aHVtYnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7d2lkdGg6MjVweDtoZWlnaHQ6MjVweDtiYWNrZ3JvdW5kOiM2YTBlZmQ7Ym9yZGVyLXJhZGl1czo1MCV9Lm1lbnUtc2NyZWVuIC5zZXR0aW5ncy1zbGlkZXI6Oi1tb3otcmFuZ2UtdGh1bWJ7d2lkdGg6MjVweDtoZWlnaHQ6MjVweDtiYWNrZ3JvdW5kOiM2YTBlZmQ7Ym9yZGVyLXJhZGl1czo1MCV9LnN3aXRjaHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDo2MHB4O2hlaWdodDozNHB4fS5zd2l0Y2ggaW5wdXR7b3BhY2l0eTowO3dpZHRoOjA7aGVpZ2h0OjB9LnNsaWRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtiYWNrZ3JvdW5kLWNvbG9yOiM5MjA4NDg7LXdlYmtpdC10cmFuc2l0aW9uOi40czt0cmFuc2l0aW9uOi40c30uc2xpZGVyOmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTtjb250ZW50OlxcXCJcXFwiO2hlaWdodDoyNnB4O3dpZHRoOjI2cHg7bGVmdDo0cHg7Ym90dG9tOjRweDtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlOy13ZWJraXQtdHJhbnNpdGlvbjouNHM7dHJhbnNpdGlvbjouNHN9aW5wdXQ6Y2hlY2tlZCsuc2xpZGVye2JhY2tncm91bmQtY29sb3I6IzQ4MTBhM31pbnB1dDpmb2N1cysuc2xpZGVye2JveC1zaGFkb3c6MCAwIDFweCAjNGEwMGJmfWlucHV0OmNoZWNrZWQrLnNsaWRlcjpiZWZvcmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyNnB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjZweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjZweCl9LnNsaWRlci5yb3VuZHtib3JkZXItcmFkaXVzOjM0cHh9LnNsaWRlci5yb3VuZDpiZWZvcmV7Ym9yZGVyLXJhZGl1czo1MCV9LmF2YXRhci1ib3h7ZGlzcGxheTpub25lfS5vcGVuZWQtYXZhdGFyLWJveHtiYWNrZ3JvdW5kOiMyNzIyMmI7d2lkdGg6MzgwcHg7aGVpZ2h0OjEwMCU7cG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpibG9ja30uYXZhdGFyLWlubmVyLWJveHtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9LmF2YXRhci1pdGVte3dpZHRoOjI3JTtwYWRkaW5nOjEwcHh9LmF2YXRhci1pbm5lci1waWN0dXJle3dpZHRoOjEwMCV9LnNtYWxsLWF2YXRhcnt3aWR0aDozMHB4O2hlaWdodDozMHB4O2JvcmRlci1yYWRpdXM6NTAlO21hcmdpbi1yaWdodDoxMHB4fS5uYXYtaGVhZGVyLW1lbnUtd3JhcHBlcntkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9Lm5hdi1oZWFkZXItbWVudS13cmFwcGVyIC5hY3RpdmV7Y29sb3I6I0VBNkMwMCAhaW1wb3J0YW50fS5uYXYtaGVhZGVyLW1lbnUtd3JhcHBlciAubWVudS1uYXYtYnV0dG9ue2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoxNXB4O3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiNmZmY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtYWxpZ246Y2VudGVyO2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXItcmlnaHQ6MXB4IHNvbGlkICM3Nzc7dHJhbnNpdGlvbjouNXMgbGluZWFyfS5uYXYtaGVhZGVyLW1lbnUtd3JhcHBlciAubWVudS1uYXYtYnV0dG9uOmxhc3QtY2hpbGR7Ym9yZGVyLXJpZ2h0OjBweH0ubmF2LWhlYWRlci1tZW51LXdyYXBwZXIgLm1lbnUtbmF2LWJ1dHRvbjpob3Zlcntjb2xvcjojRUE2QzAwfS5kaWFsb2ctYnV0dG9uLWNvbHVtbnN7ZGlzcGxheTpibG9ja30uZGlhbG9nLWJ1dHRvbi1jb2x1bW5zIC5idG4tY29sdW1ue3dpZHRoOjMwJSAhaW1wb3J0YW50O21hcmdpbi10b3A6MjBweH0uc2V0dGluZ3Mtd3JhcHBlciAud2lkZS10ZXh0LWNvbHVtbntkaXNwbGF5OmJsb2NrfS5zZXR0aW5ncy13cmFwcGVyIC5zZXR0aW5ncy10aXAtYXJlYSBwe2ZvbnQtc2l6ZToxMnB4fS5zZXR0aW5ncy13cmFwcGVyIC5zZXR0aW5ncy10aXAtYXJlYSBwIHNwYW57YmFja2dyb3VuZDojOWU5ODhmO2NvbG9yOiMwMDA7cGFkZGluZzozcHg7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOjFweCBzb2xpZCAjOWM1NzAwfS5idG4tbWFpbntwYWRkaW5nOjEwcHg7Ym9yZGVyOjBweDtib3JkZXItcmFkaXVzOjVweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1tYWluOmhvdmVye2JhY2tncm91bmQ6I2I0YjRiNH0uc2VsZWN0ZWQtaXRlbXN7YmFja2dyb3VuZDojMTYxMzI1fS5idG4tc3RpY2t5e3Bvc2l0aW9uOmZpeGVkO3RvcDo5MCU7ei1pbmRleDoxMDA7bGVmdDowO3dpZHRoOjIyMHB4O2JhY2tncm91bmQ6I0VBNkMwMDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1zdGlja3k6aG92ZXJ7YmFja2dyb3VuZDojZmZhZjZhfS5idG4tb3Jhbmdle2JhY2tncm91bmQ6I0VBNkMwMDtwYWRkaW5nOjEwcHg7bWFyZ2luOjAgYXV0bztkaXNwbGF5OmJsb2NrO21pbi13aWR0aDoyNTBweDt0cmFuc2l0aW9uOi41cyBsaW5lYXJ9LmJ0bi1vcmFuZ2U6aG92ZXJ7YmFja2dyb3VuZDojZmZhZjZhfS5idG4tb3JhbmdlLXJlamVjdHtiYWNrZ3JvdW5kOiNFQTZDMDA7cGFkZGluZzoxMHB4O3RyYW5zaXRpb246LjVzIGxpbmVhcn0uYnRuLW9yYW5nZS1yZWplY3Q6aG92ZXJ7YmFja2dyb3VuZDojZmZhZjZhfWJ1dHRvbntoZWlnaHQ6NDBweDttaW4td2lkdGg6MTAwcHh9LnRvLWhhbmdhci1idG4sLnRvLXNob3AtYnRue2Zsb2F0OnJpZ2h0O2JhY2tncm91bmQ6I2QyMjAyMDt6LWluZGV4OjEwO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbi10b3A6LTU0cHg7bWFyZ2luLXJpZ2h0Ojk5cHg7Y29sb3I6I2ZmZDliOTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LnRvLXNob3AtYnRue21hcmdpbi10b3A6NDZweH1idXR0b246Zm9jdXMsbGk6Zm9jdXMsdWw6Zm9jdXMsaW1nOmZvY3VzLGRpdjpmb2N1cyxwOmZvY3Vze291dGxpbmU6MH0udGFibGV0LWJ0bntoZWlnaHQ6MTYwcHg7cGFkZGluZzoxNXB4O21pbi13aWR0aDoxMHB4O2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjtib3JkZXI6MHB4O2JvcmRlci1yYWRpdXM6MjBweDtjb2xvcjojZmZmO2ZvbnQtc2l6ZToyMHB4O2JveC1zaGFkb3c6MnB4IDRweCA5cHggIzAwMDt0cmFuc2l0aW9uOi4zcyBsaW5lYXI7Ym9yZGVyOjVweCBzb2xpZCAjNTQyODAxfS5hdmF0YXItY2xvc2V7YmFja2dyb3VuZDpub25lO2JvcmRlcjowcHg7Y29sb3I6I2ZmZmZmZjt0ZXh0LWFsaWduOmxlZnQ7Zm9udC1zaXplOjE4cHh9LmF2YXRhci1idXR0b257d2lkdGg6MTAwcHg7aGVpZ2h0OjEwMHB4O2JhY2tncm91bmQtY29sb3I6IzRmMzU2MztiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtkaXNwbGF5OmJsb2NrO21hcmdpbjowIGF1dG87Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyOjBweDtwYWRkaW5nOjBweDtvdmVyZmxvdzpoaWRkZW59LnNjcmVlbnNob3QtYnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjE1cHg7YmFja2dyb3VuZDpub25lO2JvcmRlcjowcHh9LnNjcmVlbnNob3QtYnV0dG9uIGltZ3t3aWR0aDo1MHB4O3RyYW5zaXRpb246LjVzIGxpbmVhcjtkaXNwbGF5OmJsb2NrO2Zsb2F0OnJpZ2h0fS5zY3JlZW5zaG90LWJ1dHRvbiBpbWc6aG92ZXJ7dHJhbnNmb3JtOnNjYWxlKDEuMil9Lm1lc3NhZ2Utc2NyZWVuc2hvdHtiYWNrZ3JvdW5kLWNvbG9yOiM0YmFlNjA7Y29sb3I6I2ZmZjtwYWRkaW5nOjIwcHg7cmlnaHQ6LTIwMCU7dG9wOjA7cG9zaXRpb246YWJzb2x1dGV9LmFjdGl2ZS1tZXNzYWdlLWJveHthbmltYXRpb246YXBlYXItbWVzc2FnZSA1cyBsaW5lYXIgZm9yd2FyZHN9LnNjcmVlbnNob3QtYnV0dG9uOmFjdGl2ZXtvcGFjb3R5Oi4zfUBrZXlmcmFtZXMgYXBlYXItbWVzc2FnZXswJXtyaWdodDotMjAwJX0xMCV7cmlnaHQ6MCV9OTAle3JpZ2h0OjAlfTEwMCV7cmlnaHQ6LTIwMCV9fS5zYXZlLWRpYWxvZy13aW5kb3cgLnN1Y2Nlc3MtdGV4dHtib3JkZXI6MXB4IHNvbGlkIGdyZWVuO2NvbG9yOmdyZWVuO3BhZGRpbmc6MTBweH1Aa2V5ZnJhbWVzIG1lc3NhZ2UtYXBlYXJ7MCV7dG9wOi0xMDBweH0xMCV7dG9wOjBweH05MCV7dG9wOjBweH0xMDAle3RvcDotMTAwcHh9fS5zYXZlLWxvYWQtd3JhcHBlcntsaXN0LXN0eWxlOm5vbmV9LnNhdmUtbG9hZC13cmFwcGVyIC5zYXZlLWNhcmQtYm9keXtkaXNwbGF5OmZsZXh9LnNhdmUtbG9hZC1saXN0IC5zYXZlLWNhcmQtYm9keSBwe3dpZHRoOjEwMCU7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LnNhdmUtbG9hZC1idXR0b24tYXJlYXtwYWRkaW5nLXRvcDoyMHB4fS5zYXZlSW1hZ2Utd3JhcHBlci1zbWFsbCBpbWd7d2lkdGg6MTIwcHg7cGFkZGluZzoxMHB4fS5zYXZlLXByZXZpZXctaW1hZ2UtbGFyZ2V7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwfS5zYXZlLXByZXZpZXctaW1hZ2UtbGFyZ2UgaW1ne3dpZHRoOjcwJX0uc2F2ZS1wcmV2aWV3LWltYWdlLWxhcmdlIC5zYXZlLWRldGFpbHN7cGFkZGluZzoxMHB4O21hcmdpbjowIGF1dG99LnNhdmUtbG9hZC1kaWFsb2d7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZoO3RvcDowO2xlZnQ6MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC4zKTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWl0ZW1zOmNlbnRlcjt6LWluZGV4OjEwMDB9LnNhdmUtbG9hZC1kaWFsb2cgLnNhdmUtZGlhbG9nLXdyYXBwZXJ7bWluLWhlaWdodDoxMDBweDttaW4td2lkdGg6NTAwcHg7YWxpZ24tc2VsZjpjZW50ZXI7cGFkZGluZzoyMHB4O2JhY2tncm91bmQ6IzI5MmMzNTt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXItcmFkaXVzOjVweDtib3gtc2hhZG93Oi0zcHggM3B4IDEwcHggcmdiYSgwLDAsMCwwLjcpfS5zYXZlLWxvYWQtZGlhbG9nIC5zYXZlLWRpYWxvZy13cmFwcGVyIGRpdiBwe3RleHQtYWxpZ246Y2VudGVyO2Rpc3BsYXk6YmxvY2t9LnNhdmUtZmllbGQtZ3JvdXB7ZGlzcGxheTpmbGV4O3BhZGRpbmc6MjBweDthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6I2I0YjRiNH0uc2F2ZS1maWVsZC1ncm91cCBidXR0b257bWFyZ2luLXRvcDowcHggIWltcG9ydGFudDt3aWR0aDphdXRvO21pbi13aWR0aDoxMDBweCAhaW1wb3J0YW50fS5zYXZlLWZpZWxkLWdyb3VwIGRpdntwYWRkaW5nOjVweH0uc2F2ZS1maWVsZC1ncm91cCBkaXYgaW5wdXR7d2lkdGg6OTAlICFpbXBvcnRhbnQ7aGVpZ2h0OjIxcHh9LnNhdmUtZmllbGQtZ3JvdXAgZGl2LnNhdmUtZmllbGQtaW5wdXQtd3JhcHBlcnt3aWR0aDo1MCV9LnNhdmUtZm9ybSBpbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0sLnNhdmUtZm9ybSBpbnB1dFt0eXBlPVxcXCJlbWFpbFxcXCJdLC5zYXZlLWZvcm0gaW5wdXRbdHlwZT1cXFwicGFzc3dvcmRcXFwiXXt3aWR0aDo2MCU7cGFkZGluZzoxMHB4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwwLjEpO2JvcmRlcjowcHg7Y29sb3I6d2hpdGU7bWFyZ2luOjAgYXV0bztkaXNwbGF5OmluaGVyaXR9LnNhdmUtZm9ybSBidXR0b257bWluLXdpZHRoOjE1JTttYXJnaW46MCBhdXRvO2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxOHB4fS5iYWNrcGFjay13cmFwcGVye3Bvc2l0aW9uOmZpeGVkO2hlaWdodDoxMDB2aDt6LWluZGV4OjEwMDtyaWdodDowfS5iYWNrcGFjay13cmFwcGVyIC5iYWNrcGFjay1ib2R5e2JhY2tncm91bmQ6IzI2MDAyZjtib3JkZXItcmFkaXVzOjVweDttYXgtd2lkdGg6MTAwJTttYXgtaGVpZ2h0OjMwMHB4O21pbi13aWR0aDoxMDAlO21pbi1oZWlnaHQ6MzAwcHg7b3ZlcmZsb3cteTpzY3JvbGw7cmlnaHQ6MDtwb3NpdGlvbjpmaXhlZDtwYWRkaW5nOjVweDtjb2xvcjojZmZmZmZmO2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtib3R0b206MDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5iYWNrcGFjay13cmFwcGVyIC5iYWNrcGFjay1ib2R5IC5iYWNrcGFjay1pdGVtLXdyYXBwZXJ7d2lkdGg6MTAwcHg7cGFkZGluZzo1cHg7cG9zaXRpb246cmVsYXRpdmU7Zm9udC1zaXplOjEwcHh9LmJhY2twYWNrLXdyYXBwZXIgLmJhY2twYWNrLWJvZHkgLmJhY2stcGFjay1pdGVtLXBpY3R1cmV7d2lkdGg6MTAwJTtoZWlnaHQ6YXV0bztiYWNrZ3JvdW5kOiM2ZTUxNzc7Ym9yZGVyLXJhZGl1czo1cHh9LmJhY2twYWNrLXdyYXBwZXIgLmJhY2twYWNrLWJvZHkgcHt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyO2FsaWduLXNlbGY6Y2VudGVyfS5iYWNrcGFjay13cmFwcGVyIC5iYWNrcGFjay1ib2R5IGNhbnZhc3tiYWNrZ3JvdW5kOiMxZjA3MWE7cG9zaXRpb246YWJzb2x1dGU7YWxpZ24tc2VsZjpjZW50ZXJ9LmJhY2twYWNrLXdyYXBwZXIgLmJhY2twYWNrLWJvZHkgaDMuc2lkZS1wYW5lbC1uYW1le3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTAwO21hcmdpbi10b3A6MHB4O2xlZnQ6MzBweH0uYmFja3BhY2std3JhcHBlciAuYmFja3BhY2stYm9keSBoMy5zaWRlLXBhbmVsLW5hbWUgcHtmb250LXNpemU6MTJweH0uYmFja3BhY2std3JhcHBlciAuYmFja3BhY2stYm9keSAuZGlhbG9nLXRleHQtd3JhcHBlcnt0ZXh0LWFsaWduOmNlbnRlcn0uYmFja3BhY2std3JhcHBlciAuYmFja3BhY2stYm9keSAuZGlhbG9nLXRleHQtd3JhcHBlciBzcGFue2NvbG9yOiNFQTZDMDB9LmJhY2twYWNrLXdyYXBwZXIgLmJhY2twYWNrLWJvZHkgLmFuc3dlci1kaWFsb2ctYnV0dG9ue3dpZHRoOjEwMCU7YmFja2dyb3VuZDpub25lO2JvcmRlcjoxcHggc29saWQgI2I5YjliOTtjb2xvcjojYzFjMWMxO2NvbG9yLXRyYW5zaXRpb246LjVzIGxpbmVhcn0uYmFja3BhY2std3JhcHBlciAuYmFja3BhY2stYm9keSAuYW5zd2VyLWRpYWxvZy1idXR0b246aG92ZXJ7Ym9yZGVyOjFweCBzb2xpZCAjRUE2QzAwO2NvbG9yOiNFQTZDMDB9LmJhY2twYWNrLXdyYXBwZXIgLmJhY2twYWNrLWJvZHkgLmFuc3dlci1kaWFsb2ctYnV0dG9uOmFjdGl2ZXtjb2xvcjojZmZmZmZmO2JhY2tncm91bmQ6I0VBNkMwMH0uYmFja3BhY2std3JhcHBlciAuYmFja3BhY2stYm9keSAuZGlhbG9nLWhlYWRlcnt3aWR0aDo3NSU7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczphdXRvIGF1dG99LmJhY2twYWNrLXdyYXBwZXIgLmJhY2twYWNrLWJvZHkgLmRpYWxvZy1oZWFkZXIgLmRpYWxvZy1waWN0dXJle3dpZHRoOjEwMHB4O2Zsb2F0OnJpZ2h0fS5iYWNrcGFjay13cmFwcGVyIC5iYWNrcGFjay1ib2R5IC5kaWFsb2ctYm9keXt3aWR0aDo3NSV9LmdhbWUtcmFua2VkLWRhdGF7cG9zaXRpb246Zml4ZWQ7cmlnaHQ6MjBweDtwYWRkaW5nOjI0cHg7Zm9udC1zaXplOjEycHg7Y29sb3I6I2JiYn0uam91cm5hbC1sZXZlbC1pbm5lci1kYXRhIGxpIHB7ZGlzcGxheTpjb250ZW50c30uYmFja3BhY2stYm9keTo6LXdlYmtpdC1zY3JvbGxiYXJ7d2lkdGg6MTJweH0uYmFja3BhY2stYm9keTo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2t7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCA2cHggcmdiYSgwLDAsMCwwKTtib3JkZXItcmFkaXVzOjEwcHh9LmJhY2twYWNrLWJvZHk6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1ie2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kOnJnYmEoNzEsNiw4MywwLjgpOy13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgNnB4ICMwMDB9LmJhY2twYWNrLWJvZHk6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOndpbmRvdy1pbmFjdGl2ZXtiYWNrZ3JvdW5kOnJnYmEoMjU1LDAsMCwwLjEpfS5qb3VybmFsLWxpc3QtY29udGFpbmVye3RleHQtYWxpZ246bGVmdDtib3JkZXItbGVmdDoxcHggc29saWQgIzRjNGM0YztwYWRkaW5nOjE4cHg7bWluLXdpZHRoOjUwJTttYXgtd2lkdGg6NTAlO2JvcmRlci10b3A6MXB4IHNvbGlkICM0YzRjNGM7bGlzdC1zdHlsZTppbnNpZGU7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoOTBkZWcsICMwYzBjMGMsIHRyYW5zcGFyZW50KX0uY29tcGxldGUtdGFza3tjb2xvcjojRUE2QzAwfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vc2F0YXJ0R2FtZVwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2NoYW5nZUxldmVsc1wiKSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xyXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxudmFyIHN0b3JhZ2UgPSByZXF1aXJlKCdlbGVjdHJvbi1qc29uLXN0b3JhZ2UnKTtcclxudmFyIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXJSZXF1ZXN0TW9kdWxlc1wiKTtcclxuZnVuY3Rpb24gc2VhcmNoRGF0YUluRmlsZShfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnMsIG1ldGhvZCA9IF9hLm1ldGhvZCwgZGF0YSA9IF9hLmRhdGE7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdERhdGEsIF9iO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIF9iID0gdXJsO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpL2xldmVsLWRhdGEnOiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpL2xldmVsLW9iamVjdHMnOiByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpL2dyYXBwbGUtb2JqZWN0cyc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcGkvZ2FtZS1zZXR0aW5ncyc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcGkvdXNlci1zaGlwJzogcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwaS9lbmVteS1zaGlwJzogcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcGkvZ2V0LWdyb3VuZC1jaGFyYWN0ZXJzJzogcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcGkvZ2V0LWNvbnN0cnVjdG9yLWdyb3VuZC1lbmVteSc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDE0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpL3Nob3AvZ3Vucyc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDE2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXBpL3Nob3Avc2hpcHlhcmQnOiByZXR1cm4gWzMgLypicmVhayovLCAyMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwaS9zaG9wL3N0b3JlLWl0ZW1zJzogcmV0dXJuIFszIC8qYnJlYWsqLywgMjZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcGkvZ2FtZS1yZXN1bHQnOiByZXR1cm4gWzMgLypicmVhayovLCAzMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDM4XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgbGV2ZWxEYXRhV29ya2VyKHsgdXJsOiB1cmwsIGhlYWRlcnM6IGhlYWRlcnMgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCBsZXZlbE9iamVjdHNXb3JrZXIoeyB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzOF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdyYXBwbGVPYmplY3RzV29ya2VyKHsgdXJsOiB1cmwsIGhlYWRlcnM6IGhlYWRlcnMgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzMgLypicmVhayovLCAzOF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbNCAvKnlpZWxkKi8sIHVzZXJTaGlwV29ya2VyKHsgdXJsOiB1cmwsIGhlYWRlcnM6IGhlYWRlcnMgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZW5lbXlTaGlwV29ya2VyKHsgdXJsOiB1cmwsIGhlYWRlcnM6IGhlYWRlcnMgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHREYXRhID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDM4XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTI6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdyb3VuZENoYXJhY3RlcnNXb3JrZXIoeyB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxNDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ3JvdW5kRW5lbXlDb25zdHJ1Y3Rvcldvcmtlcih7IHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzOF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG1ldGhvZCA9PT0gXCJHRVRcIikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDE4XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzaG9wR3Vuc1dvcmtlcih7IHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE4O1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxODpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXRob2QgPT09IFwiUFVUXCIpKSByZXR1cm4gWzMgLypicmVhayovLCAyMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2hvcEd1bnNXb3JrZXJQdXQoeyB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE5OlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyMDtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjA6IHJldHVybiBbMyAvKmJyZWFrKi8sIDM4XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjE6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobWV0aG9kID09PSBcIkdFVFwiKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMjNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNoaXBZYXJkV29ya2VyKHsgdXJsOiB1cmwsIGhlYWRlcnM6IGhlYWRlcnMgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyMjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHREYXRhID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjM7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDIzOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKG1ldGhvZCA9PT0gXCJQVVRcIikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDI1XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzaGlwWWFyZFdvcmtlclB1dCh7IHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDI1O1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNTogcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyNjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXRob2QgPT09IFwiR0VUXCIpKSByZXR1cm4gWzMgLypicmVhayovLCAyOF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmVJdGVtc1dvcmtlckdldCh7IHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDI4O1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyODpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXRob2QgPT09IFwiUFVUXCIpKSByZXR1cm4gWzMgLypicmVhayovLCAzMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmVJdGVtc1dvcmtlclB1dCh7IHVybDogdXJsLCBoZWFkZXJzOiBoZWFkZXJzIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjk6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDMwO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzMDogcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzMTpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXRob2QgPT09IFwiR0VUXCIpKSByZXR1cm4gWzMgLypicmVhayovLCAzM107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0UmVzdWx0bERhdGEoeyB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycyB9KV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAzMztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzM6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobWV0aG9kID09PSBcIlBPU1RcIikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDM1XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBwb3N0UmVzdWx0bERhdGEoeyB1cmw6IHVybCwgaGVhZGVyczogaGVhZGVycywgc2F2ZURhdGE6IGRhdGEgfSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHREYXRhID0gX2Muc2VudCgpOyAvLyBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAzNTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzU6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobWV0aG9kID09PSBcIlBVVFwiKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMzddO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHVwZGF0ZVJlc3VsdGxEYXRhKHsgdXJsOiB1cmwsIGhlYWRlcnM6IGhlYWRlcnMsIHNhdmVEYXRhOiBkYXRhIH0pXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzY6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDM3O1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzNzogcmV0dXJuIFszIC8qYnJlYWsqLywgMzhdO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzODpcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdERhdGFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5zZWFyY2hEYXRhSW5GaWxlID0gc2VhcmNoRGF0YUluRmlsZTtcclxuZnVuY3Rpb24gbGV2ZWxEYXRhV29ya2VyKF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3B1YmxpYy9kYi9nYW1lTGV2ZWxEYXRhLmpzb24nKSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXJzWydtYXBsZXZlbCddICYmIGhlYWRlcnNbJ21hcGxldmVsJ10gIT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwibm8tbGV2ZWwtaWRlbnRpZmljYXRvclwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlSXRlbSA9IHJlYWRPYmplY3QuZmluZChmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YS5sZXZlbCA9PSBoZWFkZXJzWydtYXBsZXZlbCddOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2VJdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHsgbWVzc2FnZTogXCJuby1sZXZlbC1mb3VuZFwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJdGVtLmFsbExldmVscyA9IHJlYWRPYmplY3QubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGxldmVsT2JqZWN0c1dvcmtlcihfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnM7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9wdWJsaWMvZGIvZ2FtZUxldmVsT2JqZWN0Lmpzb24nKSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdFR5cGUgPSBoZWFkZXJzLm1hcE9iamVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0VHlwZSAmJiBvYmplY3RUeXBlICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYob2JqZWN0VHlwZS5sZW5ndGggPCAxKSByZXNvbHZlKFtdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA9IGhlYWRlcnMubWFwT2JqZWN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2VJdGVtID0gcmVhZE9iamVjdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVhZGVycy5tYXBPYmplY3Quc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPT0gaXRlbS5pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdyYXBwbGVPYmplY3RzV29ya2VyKF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3B1YmxpYy9kYi9nYW1lR3JhcHBsZU9iamVjdERhdGEuanNvbicpLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZE9iamVjdCA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0VHlwZSA9IGhlYWRlcnMuZ3JhcHBsZU9iamVjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0VHlwZSAmJiBvYmplY3RUeXBlICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqZWN0VHlwZS5sZW5ndGggPCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgPSAob2JqZWN0VHlwZSBpbnN0YW5jZW9mIE9iamVjdCkgPyBvYmplY3RUeXBlLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gaXRlbTsgfSkgOiBvYmplY3RUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlSXRlbSA9IHJlYWRPYmplY3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChvYmplY3RUeXBlIGluc3RhbmNlb2YgT2JqZWN0KSA/IG9iamVjdFR5cGUuc29tZShmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogPT0gaXRlbS5pZDsgfSkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RUeXBlID09IGl0ZW0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHVzZXJTaGlwV29ya2VyKF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3B1YmxpYy9kYi9wbGF5ZXJTaGlwc0RhdGEuanNvbicpLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoeyBtZXNzYWdlOiAndGhlcmUgaXMgbm8gdXNlciBzaGlwJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coJ3RoZXJlIGlzIG5vIHVzZXIgc2hpcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIldlIGRvbnQgZmluZCBzdWNoIGZpbGUgXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEpOyAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlSXRlbSA9IHJlYWRPYmplY3QuZmluZChmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YS5pZCA9PSBoZWFkZXJzLnVzZXJzaGlwOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZUl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGVuZW15U2hpcFdvcmtlcihfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnM7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9wdWJsaWMvZGIvZW5lbXlUeXBlRGF0YS5qc29uJyksIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJXZSBkb250IGZpbmQgc3VjaCBmaWxlIFwiICsgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFkT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmVteVR5cGUgPSBoZWFkZXJzWydzaGlwLXR5cGUtbnVtYmVyJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZW15VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcInRoZXJlIGlzIG5vIGVuZW15IHNoaXAgdHlwZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15VHlwZSA9IGVuZW15VHlwZS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIGl0ZW07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlSXRlbSA9IHJlYWRPYmplY3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuZW15VHlwZS5zb21lKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA9PSBpdGVtLmlkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlSXRlbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAgR3JvdW5kIGxldmVsXHJcbmZ1bmN0aW9uIGdyb3VuZENoYXJhY3RlcnNXb3JrZXIoX2EpIHtcclxuICAgIHZhciB1cmwgPSBfYS51cmwsIGhlYWRlcnMgPSBfYS5oZWFkZXJzO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHsgbWVzc2FnZTogJ0ludmFsaWQgcmVxdWVzdCcsIHN0YXR1czogNDAzIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9wdWJsaWMvZGIvZ3JvdW5kQ2hhcmFjdGVyc0RhdGEuanNvbicpLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiV2UgZG9udCBmaW5kIHN1Y2ggZmlsZSBcIiArIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZE9iamVjdCA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VhcmNoUmVzdWx0ID0gcmVhZE9iamVjdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gaGVhZGVyc1snaXRlbS1pZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNlYXJjaFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ3JvdW5kRW5lbXlDb25zdHJ1Y3RvcldvcmtlcihfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnM7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCFoZWFkZXJzKSByZWplY3Qoe21lc3NhZ2U6ICdJbnZhbGlkIHJlcXVlc3QnLCBzdGF0dXM6IDQwM30pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3B1YmxpYy9kYi9ncm91bmRFbmVteURhdGEuanNvbicpLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZE9iamVjdCA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlYWRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gIFNob3BcclxuZnVuY3Rpb24gc2hvcEd1bnNXb3JrZXIoX2EpIHtcclxuICAgIHZhciB1cmwgPSBfYS51cmwsIGhlYWRlcnMgPSBfYS5oZWFkZXJzO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vcHVibGljL2RiL3Nob3BEYXRhL2dhbWVTaG9wR3VuLmpzb24nKSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIldlIGRvbnQgZmluZCBzdWNoIGZpbGUgXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHsgbWVzc2FnZTogJ3RoZXJlIGlzIG5vIGRhdGEgeWV0JyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZE9iamVjdCA9IEpTT04ucGFyc2UoZGF0YSkubWFwKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkSW1hZ2U6IG9iai5sb2FkSW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG9iai5iYWNrZ3JvdW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogb2JqLnByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogb2JqLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2JqLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogb2JqLnNwZWVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IG9iai5kYW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogb2JqLnN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVhZE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2hvcEd1bnNXb3JrZXJQdXQoX2EpIHtcclxuICAgIHZhciB1cmwgPSBfYS51cmwsIGhlYWRlcnMgPSBfYS5oZWFkZXJzO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vcHVibGljL2RiL3Nob3BEYXRhL2dhbWVTaG9wR3VuLmpzb24nKSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIldlIGRvbnQgZmluZCBzdWNoIGZpbGUgXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sZXQgaGVhZGVycyA9IHJlcS5oZWFkZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6ICd0aGVyZSBpcyBubyBkYXRhIHlldCcgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJDb2lucyA9IGhlYWRlcnNbJ3VzZXJjb2lucyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1OYW1lID0gaGVhZGVyc1snaXRlbU5hbWUnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbU5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyBtZXNzYWdlOiBcIndyb25nIGRhdGE6IFlvdSBoYXZlIG5vIG1vbmV5XCIsIHN0YXR1czogXCJmYWxzZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEpLmZpbmQoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqLnRpdGxlID09PSBpdGVtTmFtZTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlYWRPYmplY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyBtZXNzYWdlOiBcIml0ZW0gbm90IGZvbmRcIiwgc3RhdHVzOiBcImZhbHNlXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZE9iamVjdCAmJiBwYXJzZUludCh1c2VyQ29pbnMpIDwgcmVhZE9iamVjdC5wcmljZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwieW91IGhhdmUgbm8gbW9uZXkgaXQgY29zdDogXCIgKyByZWFkT2JqZWN0LnByaWNlLCBzdGF0dXM6IFwiZmFsc2VcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBkYXRhOiByZWFkT2JqZWN0LCBzdGF0dXM6ICdzdWNjZXNzJywgbW9uZXk6IHVzZXJDb2lucyAtIHJlYWRPYmplY3QucHJpY2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsgfSldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2hpcFlhcmRXb3JrZXIoX2EpIHtcclxuICAgIHZhciB1cmwgPSBfYS51cmwsIGhlYWRlcnMgPSBfYS5oZWFkZXJzO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vcHVibGljL2RiL3BsYXllclNoaXBzRGF0YS5qc29uJyksIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFwiV2UgZG9udCBmaW5kIHN1Y2ggZmlsZSBcIiArIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogJ3RoZXJlIGlzIG5vIGRhdGEgeWV0JyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZE9iamVjdCA9IEpTT04ucGFyc2UoZGF0YSkubWFwKGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkSW1hZ2U6IG9iai5oYW5nYXJJbWFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogb2JqLmJhY2tncm91bmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlOiBvYmoucHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvYmoudGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBvYmouZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogb2JqLnN0YXR1cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJtb3I6IG9iai5hcm1vcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluU3BlZWQ6IG9iai5taW5TcGVlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZW50b3J5Q2FwYWNpdHk6IG9iai5pbnZlbnRvcnlDYXBhY2l0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhbHRoUG9pbnQ6IG9iai5oZWFsdGhQb2ludCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZXNwb3RzOiBvYmouZmlyZXNwb3QubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZWFkT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyB9KV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBzaGlwWWFyZFdvcmtlclB1dChfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnM7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5yZWFkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9wdWJsaWMvZGIvcGxheWVyU2hpcHNEYXRhLmpzb24nKSwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXCJXZSBkb250IGZpbmQgc3VjaCBmaWxlIFwiICsgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiAndGhlcmUgaXMgbm8gZGF0YSB5ZXQnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyQ29pbnMgPSBoZWFkZXJzWyd1c2VyY29pbnMnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtTmFtZSA9IGhlYWRlcnNbJ2l0ZW1uYW1lJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNoaXBOYW1lID0gaGVhZGVyc1snY3VycmVudHNoaXBuYW1lJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxheWVyT2JqZWN0RGF0YUludmVudG9yeSA9IGhlYWRlcnNbJ3NoaXBpbnZlbnRvcnlpdGVtcyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXllck9iamVjdERhdGFHdW5zID0gaGVhZGVyc1snc2hpcGd1bnNpdGVtcyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTaGlwTmFtZSA9PSBpdGVtTmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwiWW91IGFscmVhZHkgaGF2ZSB0aGF0IHNoaXBcIiwgc3RhdHVzOiBcImZhbHNlXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXJDb2lucyB8fCAhaXRlbU5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyBtZXNzYWdlOiBcIndyb25nIGRhdGE6IHRoZXJlIGlzIG5vIGNvaW4gb3IgaXRlbW5hbWVcIiwgc3RhdHVzOiBcImZhbHNlXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVhZE9iamVjdCA9IEpTT04ucGFyc2UoZGF0YSkuZmluZChmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmoudGl0bGUgPT09IGl0ZW1OYW1lOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVhZE9iamVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBcInNoaXAgdW5hdmFpbGFibGVcIiwgc3RhdHVzOiBcImZhbHNlXCIgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY2Nlc2libGVTaGlwID0gY29tcGFyZUl0ZW1zKHBsYXllck9iamVjdERhdGFJbnZlbnRvcnksIHBsYXllck9iamVjdERhdGFHdW5zLCByZWFkT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWNjZXNpYmxlU2hpcClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwiVGhpcyBzaGlwIGhhcyBsZXNzIHNwYWNlIGZvciB5b3VycyBndXNuIGFuZCBvdGhlciBzdGFmZlwiLCBzdGF0dXM6IFwiZmFsc2VcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVhZE9iamVjdC5wcmljZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwibm8gcHJpY2VcIiwgc3RhdHVzOiBcImZhbHNlXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZE9iamVjdCAmJiBwYXJzZUludCh1c2VyQ29pbnMpIDwgcmVhZE9iamVjdC5wcmljZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwieW91IGhhdmUgbm8gY29pbiBpdCBjb3N0OiBcIiArIHJlYWRPYmplY3QucHJpY2UsIHN0YXR1czogXCJmYWxzZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IGRhdGE6IHJlYWRPYmplY3QsIHN0YXR1czogJ3N1Y2Nlc3MnLCBtb25leTogdXNlckNvaW5zIC0gcmVhZE9iamVjdC5wcmljZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyB9KV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjb21wYXJlSXRlbXMocGxheWVyT2JqZWN0RGF0YUludmVudG9yeSwgcGxheWVyT2JqZWN0RGF0YUd1bnMsIHJlYWRPYmplY3QpIHtcclxuICAgIHZhciBhY2Nlc2liaWxpdHkgPSB0cnVlO1xyXG4gICAgaWYgKHBsYXllck9iamVjdERhdGFJbnZlbnRvcnkgPiByZWFkT2JqZWN0LmludmVudG9yeUNhcGFjaXR5IC0gMSB8fFxyXG4gICAgICAgIHJlYWRPYmplY3QuZ3Vucy5sZW5ndGggLSAxIDwgcGxheWVyT2JqZWN0RGF0YUd1bnMpXHJcbiAgICAgICAgYWNjZXNpYmlsaXR5ID0gZmFsc2U7XHJcbiAgICByZXR1cm4gYWNjZXNpYmlsaXR5O1xyXG59XHJcbmZ1bmN0aW9uIHN0b3JlSXRlbXNXb3JrZXJHZXQoX2EpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICBmcy5yZWFkRmlsZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9wdWJsaWMvZGIvc2hvcERhdGEvZ2FtZVNob3BNYXJrZXQuanNvbicpLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcIldlIGRvbnQgZmluZCBzdWNoIGZpbGUgXCIgKyBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6ICd0aGVyZSBpcyBubyBkYXRhIHlldCcgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHJlYWRPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEpLm1hcChmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEltYWdlOiBvYmoubG9hZEltYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBvYmouYmFja2dyb3VuZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2U6IG9iai5wcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG9iai50aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG9iai5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBvYmouc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZWFkT2JqZWN0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9KTtcclxufVxyXG5mdW5jdGlvbiBzdG9yZUl0ZW1zV29ya2VyUHV0KF9hKSB7XHJcbiAgICB2YXIgdXJsID0gX2EudXJsLCBoZWFkZXJzID0gX2EuaGVhZGVycztcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKHBhdGguam9pbihfX2Rpcm5hbWUsICcuL3B1YmxpYy9kYi9zaG9wRGF0YS9nYW1lU2hvcE1hcmtldC5qc29uJyksIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFwiV2UgZG9udCBmaW5kIHN1Y2ggZmlsZSBcIiArIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogJ3RoZXJlIGlzIG5vIGRhdGEgeWV0JyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlckNvaW5zID0gaGVhZGVyc1sndXNlcmNvaW5zJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbU5hbWUgPSBoZWFkZXJzWydpdGVtTmFtZSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyQ29pbnMgfHwgIWl0ZW1OYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHsgbWVzc2FnZTogXCJ3cm9uZyBkYXRhOiB0aGVyZSBpcyBubyBjb2luIG9yIGl0ZW1uYW1lXCIsIHN0YXR1czogXCJmYWxzZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEpLmZpbmQoZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqLnRpdGxlID09PSBpdGVtTmFtZTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlYWRPYmplY3QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoeyBtZXNzYWdlOiBcIml0ZW0gbm90IGZvbmRcIiwgc3RhdHVzOiBcImZhbHNlXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVhZE9iamVjdCAmJiBwYXJzZUludCh1c2VyQ29pbnMpIDwgcmVhZE9iamVjdC5wcmljZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh7IG1lc3NhZ2U6IFwieW91IGhhdmUgbm8gY29pbiBpdCBjb3N0OiBcIiArIHJlYWRPYmplY3QucHJpY2UsIHN0YXR1czogXCJmYWxzZVwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IGRhdGE6IHJlYWRPYmplY3QsIHN0YXR1czogJ3N1Y2Nlc3MnLCBtb25leTogdXNlckNvaW5zIC0gcmVhZE9iamVjdC5wcmljZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyB9KV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyAgPT09PT09PT09PT09PT09PT09PT09PT0gIHNhdmUvc2hvdyByZXN1bHRcclxuZnVuY3Rpb24gZ2V0UmVzdWx0bERhdGEoX2EpIHtcclxuICAgIHZhciB1cmwgPSBfYS51cmwsIGhlYWRlcnMgPSBfYS5oZWFkZXJzO1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLmdldCgnZ2FtZVJlc3VsdHMnLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXIsIHJlYWRPYmplY3QsIHB1YmxpY0RhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgPyBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vJykgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlkgOiBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFmcy5leGlzdHNTeW5jKHBhdGguam9pbihkaXIsICcvJywgJ2dhbWVSZXN1bHRzLmpzb24nKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXREYXRhUGF0aChkaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS53cml0ZUVsZWN0cm9uTG9jYWxEYXRhKHsgZmlsZU5hbWU6ICdnYW1lUmVzdWx0cycsIGRhdGE6IFwiW11cIiB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiAndGhlcmUgaXMgbm8gZGF0YSB5ZXQnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFkT2JqZWN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiAndGhlcmUgaXMgbm8gZGF0YSB5ZXQnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVhZE9iamVjdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzb2x2ZSh7IG1lc3NhZ2U6IFwicHJvYmxlbSBvY2N1cnJlZCBpbiByZXN1bHQgZGF0YVwiIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpY0RhdGEgPSByZWFkT2JqZWN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuZ2FtZVBvaW50cyAtIGIuZ2FtZVBvaW50czsgfSkucmV2ZXJzZSgpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lOiBpdGVtLnVzZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lUG9pbnRzOiBpdGVtLmdhbWVQb2ludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVDb2luczogaXRlbS5nYW1lQ29pbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJBdmF0YXI6IGl0ZW0udXNlckF2YXRhcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdHJveVNoaXA6IChpdGVtLmRlc3Ryb3lTaGlwKSA/IGl0ZW0uZGVzdHJveVNoaXAgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0cm95RW5lbXk6IChpdGVtLmRlc3Ryb3lFbmVteSkgPyBpdGVtLmRlc3Ryb3lFbmVteSA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHB1YmxpY0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHBvc3RSZXN1bHRsRGF0YShfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnMsIHNhdmVEYXRhID0gX2Euc2F2ZURhdGE7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UuZ2V0KCdnYW1lUmVzdWx0cycsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpciwgcmVhZE9iamVjdCwgZGF0YUFyciwgZmluZFVzZXIsIG1lc3NhZ2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpID8gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uLycpICsgcHJvY2Vzcy5lbnYuQVBQX1NBVkVfRElSRUNUT1JZIDogX19kaXJuYW1lICsgcHJvY2Vzcy5lbnYuQVBQX1NBVkVfRElSRUNUT1JZO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhZnMuZXhpc3RzU3luYyhwYXRoLmpvaW4oZGlyLCAnLycsICdnYW1lUmVzdWx0cy5qc29uJykpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0RGF0YVBhdGgoZGlyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHNlcnZlclJlcXVlc3RNb2R1bGVzXzEud3JpdGVFbGVjdHJvbkxvY2FsRGF0YSh7IGZpbGVOYW1lOiAnZ2FtZVJlc3VsdHMnLCBkYXRhOiBcIltdXCIgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVEYXRhLmlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT2JqZWN0ID0gbnVsbCwgZGF0YUFyciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYXZlRGF0YS51c2VyTmFtZSB8fCB0eXBlb2Ygc2F2ZURhdGEudXNlck5hbWUgIT0gJ3N0cmluZycgfHwgc2F2ZURhdGEudXNlck5hbWUubGVuZ3RoID4gMzAgfHwgc2F2ZURhdGEudXNlck5hbWUubGVuZ3RoIDwgMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBcIk5hbWUgZmllbGQgaXMgaW5jb3JyZWN0LCBtdXN0IGJlIG1heCAzMCBjaGFyYWN0ZXIgbWluIDNcIiwgc3RhdHVzOiBcIndhcm5pbmdcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNhdmVEYXRhLnVzZXJFbWFpbCB8fCB0eXBlb2Ygc2F2ZURhdGEudXNlckVtYWlsICE9ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IFwiRW1haWwgZmllbGQgaXMgaW5jb3JyZWN0LCBtdXN0IGJlIG1heCAzMCBjaGFyYWN0ZXIgbWluIDNcIiwgc3RhdHVzOiBcIndhcm5pbmdcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNhdmVEYXRhLnVzZXJQYXNzd29yZCB8fCB0eXBlb2Ygc2F2ZURhdGEudXNlclBhc3N3b3JkICE9ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IFwiUGFzc3dvcmQgZmllbGQgaXMgaW5jb3JyZWN0LCBtdXN0IGJlIG1heCAzMCBjaGFyYWN0ZXIgbWluIDNcIiwgc3RhdHVzOiBcIndhcm5pbmdcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNhdmVEYXRhLmdhbWVQb2ludHMgfHwgdHlwZW9mIHNhdmVEYXRhLmdhbWVQb2ludHMgIT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogXCJuYW1lIHRvbyBsb25nIG9yIHRvbyBzaG9ydFwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIHNhdmVEYXRhLmdhbWVQb2ludHMgJiYgc2F2ZURhdGEudXNlclBhc3N3b3JkICYmIHNhdmVEYXRhLnVzZXJFbWFpbCAmJiBzYXZlRGF0YS51c2VyTmFtZSAmJiBzYXZlRGF0YS5nYW1lQ29pbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kVXNlciA9IGRhdGFGaW5kZXIocmVhZE9iamVjdCwgc2F2ZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaW5kVXNlclsnc3RhdHVzJ10gPT09IFwibm90LWZvdW5kXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUFyciA9IGRhdGFBcnIuY29uY2F0KHJlYWRPYmplY3QsIHNhdmVEYXRhKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmdhbWVQb2ludHMgLSBiLmdhbWVQb2ludHM7IH0pLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS53cml0ZUVsZWN0cm9uTG9jYWxEYXRhKHsgZmlsZU5hbWU6ICdnYW1lUmVzdWx0cycsIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGFBcnIpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogXCJTdWNjZXNzZnVsbHkgc2F2ZSBSZXN1bHQhISEgXCIgKyBzYXZlRGF0YS51c2VyTmFtZSArIFwiIGFkZGVkXCIsIHN0YXR1czogXCJzdWNjZXNzXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmluZFVzZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLndyaXRlRWxlY3Ryb25Mb2NhbERhdGEoeyBmaWxlTmFtZTogJ2dhbWVSZXN1bHRzJywgZGF0YTogSlNPTi5zdHJpbmdpZnkoZmluZFVzZXIuZGF0YSkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaW5kVXNlci5zdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmb3VuZC1lbWFpbFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gXCJFbWFpbCBhbHJlYWR5IGV4aXN0IFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvdW5kLW5hbWVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9IFwiTmFtZSBhbHJlYWR5IGV4aXN0IFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl8gLSBfIC0gX1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBtZXNzYWdlVGV4dCwgc3RhdHVzOiBcIndhcm5pbmdcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFBcnIgPSBkYXRhQXJyLmNvbmNhdChkYXRhQXJyLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGFBcnIgfHwgZGF0YUFyci5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc29sdmUoeyBtZXNzYWdlOiBcInRoZXJlIGlzIG5vIGRhdGEgdG8gd3JpdGVcIiB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS53cml0ZUVsZWN0cm9uTG9jYWxEYXRhKHsgZmlsZU5hbWU6ICdnYW1lUmVzdWx0cycsIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGFBcnIpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBcIlN1Y2Nlc3NmdWxseSBzYXZlIFJlc3VsdCEhISBcIiArIHNhdmVEYXRhLnVzZXJOYW1lICsgXCIgYWRkZWRcIiwgc3RhdHVzOiBcInN1Y2Nlc3NcIiB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBkYXRhRmluZGVyKGRhdGEsIGZpbmRlckRhdGEpIHtcclxuICAgIGlmICghZGF0YSB8fCAhZmluZGVyRGF0YSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcmVzdWxldEVtYWlsID0gZGF0YS5maW5kKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LnVzZXJFbWFpbCA9PT0gZmluZGVyRGF0YS51c2VyRW1haWw7IH0pO1xyXG4gICAgdmFyIHJlc3VsZXROYW1lID0gZGF0YS5maW5kKGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50LnVzZXJOYW1lID09PSBmaW5kZXJEYXRhLnVzZXJOYW1lOyB9KTtcclxuICAgIGlmIChyZXN1bGV0RW1haWwpXHJcbiAgICAgICAgcmV0dXJuIHsgZGF0YTogZGF0YSwgc3RhdHVzOiBcImZvdW5kLWVtYWlsXCIgfTtcclxuICAgIGVsc2UgaWYgKHJlc3VsZXROYW1lKVxyXG4gICAgICAgIHJldHVybiB7IGRhdGE6IGRhdGEsIHN0YXR1czogXCJmb3VuZC1uYW1lXCIgfTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBzdGF0dXM6IFwibm90LWZvdW5kXCIgfTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVSZXN1bHRsRGF0YShfYSkge1xyXG4gICAgdmFyIHVybCA9IF9hLnVybCwgaGVhZGVycyA9IF9hLmhlYWRlcnMsIHNhdmVEYXRhID0gX2Euc2F2ZURhdGE7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZGF0YVVwZGF0ZXIoZGF0YSwgZmluZGVyRGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoIWRhdGEubGVuZ3RoIHx8ICFkYXRhIHx8ICFmaW5kZXJEYXRhKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWxldCA9IGRhdGEuZmluZChmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudC51c2VyRW1haWwgPT09IGZpbmRlckRhdGEudXNlckVtYWlsOyB9KTtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gKHJlc3VsZXQpID8gZGF0YS5pbmRleE9mKHJlc3VsZXQpIDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKHJlc3VsZXQgJiYgcmVzdWxldC5nYW1lUG9pbnRzIDwgZmluZGVyRGF0YS5nYW1lUG9pbnRzICYmXHJcbiAgICAgICAgICAgICAgICByZXN1bGV0LnVzZXJQYXNzd29yZCA9PT0gZmluZGVyRGF0YS51c2VyUGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsZXQuZ2FtZVBvaW50cyA9IGZpbmRlckRhdGEuZ2FtZVBvaW50cztcclxuICAgICAgICAgICAgICAgIHJlc3VsZXQuZ2FtZUNvaW5zID0gZmluZGVyRGF0YS5nYW1lQ29pbnM7XHJcbiAgICAgICAgICAgICAgICByZXN1bGV0LnVzZXJBdmF0YXIgPSAoZmluZGVyRGF0YS51c2VyQXZhdGFyKSA/IGZpbmRlckRhdGEudXNlckF2YXRhciA6IChyZXN1bGV0LnVzZXJBdmF0YXIpID8gcmVzdWxldC51c2VyQXZhdGFyIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdID0gcmVzdWxldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IGRhdGEsIHN0YXR1czogXCJyZXBsYWNlXCIsIG5hbWU6IHJlc3VsZXQudXNlck5hbWUgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyZXN1bGV0ICYmIHJlc3VsZXQuZ2FtZVBvaW50cyA+IGZpbmRlckRhdGEuZ2FtZVBvaW50cyAmJlxyXG4gICAgICAgICAgICAgICAgcmVzdWxldC51c2VyUGFzc3dvcmQgPT09IGZpbmRlckRhdGEudXNlclBhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBkYXRhLCBzdGF0dXM6IFwibG8tcmVzdWx0XCIsIG5hbWU6IG51bGwgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyZXN1bGV0ICYmIHJlc3VsZXQuZ2FtZVBvaW50cyA9PT0gZmluZGVyRGF0YS5nYW1lUG9pbnRzICYmXHJcbiAgICAgICAgICAgICAgICByZXN1bGV0LnVzZXJQYXNzd29yZCA9PT0gZmluZGVyRGF0YS51c2VyUGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IGRhdGEsIHN0YXR1czogXCJlcXVhbC1yZXN1bHRcIiwgbmFtZTogbnVsbCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsZXQgJiYgcmVzdWxldC51c2VyUGFzc3dvcmQgIT0gZmluZGVyRGF0YS51c2VyUGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IGRhdGEsIHN0YXR1czogXCJ3cm9uZy1wYXNzd29yZFwiLCBuYW1lOiBudWxsIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogZGF0YSwgc3RhdHVzOiBcIm5vdC1leGlzdFwiLCBuYW1lOiBudWxsIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLmdldCgnZ2FtZVJlc3VsdHMnLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXIsIHJlYWRPYmplY3QsIGRhdGFBcnIsIGZpbmRVc2VyLCBtZXNzYWdlVGV4dCwgc3RhdHVzXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykgPyBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vJykgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlkgOiBfX2Rpcm5hbWUgKyBwcm9jZXNzLmVudi5BUFBfU0FWRV9ESVJFQ1RPUlk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFmcy5leGlzdHNTeW5jKHBhdGguam9pbihkaXIsICcvJywgJ2dhbWVSZXN1bHRzLmpzb24nKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXREYXRhUGF0aChkaXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc2VydmVyUmVxdWVzdE1vZHVsZXNfMS53cml0ZUVsZWN0cm9uTG9jYWxEYXRhKHsgZmlsZU5hbWU6ICdnYW1lUmVzdWx0cycsIGRhdGE6IFwiW11cIiB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYXZlRGF0YS51c2VyRW1haWwgfHwgdHlwZW9mIHNhdmVEYXRhLnVzZXJFbWFpbCAhPSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBcIkVtYWlsIGZpZWxkIGlzIGluY29ycmVjdCwgbXVzdCBiZSBtYXggMzAgY2hhcmFjdGVyIG1pbiAzXCIsIHN0YXR1czogXCJ3YXJuaW5nXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYXZlRGF0YS51c2VyUGFzc3dvcmQgfHwgdHlwZW9mIHNhdmVEYXRhLnVzZXJQYXNzd29yZCAhPSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBcIlBhc3N3b3JkIGZpZWxkIGlzIGluY29ycmVjdCwgbXVzdCBiZSBtYXggMzAgY2hhcmFjdGVyIG1pbiAzXCIsIHN0YXR1czogXCJ3YXJuaW5nXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9iamVjdCA9IG51bGwsIGRhdGFBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIHNhdmVEYXRhLmdhbWVQb2ludHMgJiYgc2F2ZURhdGEudXNlclBhc3N3b3JkICYmIHNhdmVEYXRhLnVzZXJFbWFpbCAmJiBzYXZlRGF0YS5nYW1lQ29pbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5kVXNlciA9IGRhdGFVcGRhdGVyKHJlYWRPYmplY3QsIHNhdmVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaW5kVXNlclsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlcGxhY2VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gXCJDb25ncmF0dWxhdGlvbiBcIiArIGZpbmRVc2VyWyduYW1lJ10gKyBcIiB5b3VyIHNjb3JlIGlzIHNhdmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfMSA9IFwic3VjY2Vzc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsby1yZXN1bHRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gXCJZb3VyIHNjb3JlIGlzIGxlc3MgdGhhbiBleGlzdGluZyBvbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c18xID0gXCJ3YXJuaW5nXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVxdWFsLXJlc3VsdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRleHQgPSBcIllvdXIgc2NvcmUgdGhlIHNhbWUgYXMgZXhpc3Rpbmcgb25lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfMSA9IFwid2FybmluZ1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3cm9uZy1wYXNzd29yZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVRleHQgPSBcIldyb25nIHBhc3N3b3JkIHRyeSBhZ2FpblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzXzEgPSBcInJlamVjdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3QtZXhpc3RcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gXCJUaGVyZSBpcyBubyBzdWNoIGVtYWlsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNfMSA9IFwicmVqZWN0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUZXh0ID0gXCJUaGVyZSBpcyBubyBzdWNoIHVzZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c18xID0gXCJyZWplY3RcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IG1lc3NhZ2VUZXh0LCBzdGF0dXM6IHN0YXR1c18xIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXNfMSAhPSBcInJlamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLndyaXRlRWxlY3Ryb25Mb2NhbERhdGEoeyBmaWxlTmFtZTogJ2dhbWVSZXN1bHRzJywgZGF0YTogSlNPTi5zdHJpbmdpZnkoZmluZFVzZXJbJ2RhdGEnXSkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgKGZhY3RvcnkoKGdsb2JhbC5hc3luYyA9IGdsb2JhbC5hc3luYyB8fCB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gc2xpY2UoYXJyYXlMaWtlLCBzdGFydCkge1xuICAgIHN0YXJ0ID0gc3RhcnR8MDtcbiAgICB2YXIgbmV3TGVuID0gTWF0aC5tYXgoYXJyYXlMaWtlLmxlbmd0aCAtIHN0YXJ0LCAwKTtcbiAgICB2YXIgbmV3QXJyID0gQXJyYXkobmV3TGVuKTtcbiAgICBmb3IodmFyIGlkeCA9IDA7IGlkeCA8IG5ld0xlbjsgaWR4KyspICB7XG4gICAgICAgIG5ld0FycltpZHhdID0gYXJyYXlMaWtlW3N0YXJ0ICsgaWR4XTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0Fycjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY29udGludWF0aW9uIGZ1bmN0aW9uIHdpdGggc29tZSBhcmd1bWVudHMgYWxyZWFkeSBhcHBsaWVkLlxuICpcbiAqIFVzZWZ1bCBhcyBhIHNob3J0aGFuZCB3aGVuIGNvbWJpbmVkIHdpdGggb3RoZXIgY29udHJvbCBmbG93IGZ1bmN0aW9ucy4gQW55XG4gKiBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBhcmUgYWRkZWQgdG8gdGhlIGFyZ3VtZW50c1xuICogb3JpZ2luYWxseSBwYXNzZWQgdG8gYXBwbHkuXG4gKlxuICogQG5hbWUgYXBwbHlcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6VXRpbHNcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB5b3Ugd2FudCB0byBldmVudHVhbGx5IGFwcGx5IGFsbFxuICogYXJndW1lbnRzIHRvLiBJbnZva2VzIHdpdGggKGFyZ3VtZW50cy4uLikuXG4gKiBAcGFyYW0gey4uLip9IGFyZ3VtZW50cy4uLiAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGF1dG9tYXRpY2FsbHkgYXBwbHlcbiAqIHdoZW4gdGhlIGNvbnRpbnVhdGlvbiBpcyBjYWxsZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IHRoZSBwYXJ0aWFsbHktYXBwbGllZCBmdW5jdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyB1c2luZyBhcHBseVxuICogYXN5bmMucGFyYWxsZWwoW1xuICogICAgIGFzeW5jLmFwcGx5KGZzLndyaXRlRmlsZSwgJ3Rlc3RmaWxlMScsICd0ZXN0MScpLFxuICogICAgIGFzeW5jLmFwcGx5KGZzLndyaXRlRmlsZSwgJ3Rlc3RmaWxlMicsICd0ZXN0MicpXG4gKiBdKTtcbiAqXG4gKlxuICogLy8gdGhlIHNhbWUgcHJvY2VzcyB3aXRob3V0IHVzaW5nIGFwcGx5XG4gKiBhc3luYy5wYXJhbGxlbChbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgZnMud3JpdGVGaWxlKCd0ZXN0ZmlsZTEnLCAndGVzdDEnLCBjYWxsYmFjayk7XG4gKiAgICAgfSxcbiAqICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBmcy53cml0ZUZpbGUoJ3Rlc3RmaWxlMicsICd0ZXN0MicsIGNhbGxiYWNrKTtcbiAqICAgICB9XG4gKiBdKTtcbiAqXG4gKiAvLyBJdCdzIHBvc3NpYmxlIHRvIHBhc3MgYW55IG51bWJlciBvZiBhZGRpdGlvbmFsIGFyZ3VtZW50cyB3aGVuIGNhbGxpbmcgdGhlXG4gKiAvLyBjb250aW51YXRpb246XG4gKlxuICogbm9kZT4gdmFyIGZuID0gYXN5bmMuYXBwbHkoc3lzLnB1dHMsICdvbmUnKTtcbiAqIG5vZGU+IGZuKCd0d28nLCAndGhyZWUnKTtcbiAqIG9uZVxuICogdHdvXG4gKiB0aHJlZVxuICovXG52YXIgYXBwbHkgPSBmdW5jdGlvbihmbi8qLCAuLi5hcmdzKi8pIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKC8qY2FsbEFyZ3MqLykge1xuICAgICAgICB2YXIgY2FsbEFyZ3MgPSBzbGljZShhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJncy5jb25jYXQoY2FsbEFyZ3MpKTtcbiAgICB9O1xufTtcblxudmFyIGluaXRpYWxQYXJhbXMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC8qLi4uYXJncywgY2FsbGJhY2sqLykge1xuICAgICAgICB2YXIgYXJncyA9IHNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gICAgICAgIGZuLmNhbGwodGhpcywgYXJncywgY2FsbGJhY2spO1xuICAgIH07XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxudmFyIGhhc1NldEltbWVkaWF0ZSA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicgJiYgc2V0SW1tZWRpYXRlO1xudmFyIGhhc05leHRUaWNrID0gdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwcm9jZXNzLm5leHRUaWNrID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBmYWxsYmFjayhmbikge1xuICAgIHNldFRpbWVvdXQoZm4sIDApO1xufVxuXG5mdW5jdGlvbiB3cmFwKGRlZmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbi8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDEpO1xuICAgICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxudmFyIF9kZWZlcjtcblxuaWYgKGhhc1NldEltbWVkaWF0ZSkge1xuICAgIF9kZWZlciA9IHNldEltbWVkaWF0ZTtcbn0gZWxzZSBpZiAoaGFzTmV4dFRpY2spIHtcbiAgICBfZGVmZXIgPSBwcm9jZXNzLm5leHRUaWNrO1xufSBlbHNlIHtcbiAgICBfZGVmZXIgPSBmYWxsYmFjaztcbn1cblxudmFyIHNldEltbWVkaWF0ZSQxID0gd3JhcChfZGVmZXIpO1xuXG4vKipcbiAqIFRha2UgYSBzeW5jIGZ1bmN0aW9uIGFuZCBtYWtlIGl0IGFzeW5jLCBwYXNzaW5nIGl0cyByZXR1cm4gdmFsdWUgdG8gYVxuICogY2FsbGJhY2suIFRoaXMgaXMgdXNlZnVsIGZvciBwbHVnZ2luZyBzeW5jIGZ1bmN0aW9ucyBpbnRvIGEgd2F0ZXJmYWxsLFxuICogc2VyaWVzLCBvciBvdGhlciBhc3luYyBmdW5jdGlvbnMuIEFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIChleGNlcHQgZm9yIHRoZSBmaW5hbFxuICogY2FsbGJhY2sgYXJndW1lbnQpLiBFcnJvcnMgdGhyb3duIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBJZiB0aGUgZnVuY3Rpb24gcGFzc2VkIHRvIGBhc3luY2lmeWAgcmV0dXJucyBhIFByb21pc2UsIHRoYXQgcHJvbWlzZXMnc1xuICogcmVzb2x2ZWQvcmVqZWN0ZWQgc3RhdGUgd2lsbCBiZSB1c2VkIHRvIGNhbGwgdGhlIGNhbGxiYWNrLCByYXRoZXIgdGhhbiBzaW1wbHlcbiAqIHRoZSBzeW5jaHJvbm91cyByZXR1cm4gdmFsdWUuXG4gKlxuICogVGhpcyBhbHNvIG1lYW5zIHlvdSBjYW4gYXN5bmNpZnkgRVMyMDE3IGBhc3luY2AgZnVuY3Rpb25zLlxuICpcbiAqIEBuYW1lIGFzeW5jaWZ5XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgd3JhcFN5bmNcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gVGhlIHN5bmNocm9ub3VzIGZ1bmN0aW9uLCBvciBQcm9taXNlLXJldHVybmluZ1xuICogZnVuY3Rpb24gdG8gY29udmVydCB0byBhbiB7QGxpbmsgQXN5bmNGdW5jdGlvbn0uXG4gKiBAcmV0dXJucyB7QXN5bmNGdW5jdGlvbn0gQW4gYXN5bmNocm9ub3VzIHdyYXBwZXIgb2YgdGhlIGBmdW5jYC4gVG8gYmVcbiAqIGludm9rZWQgd2l0aCBgKGFyZ3MuLi4sIGNhbGxiYWNrKWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIHBhc3NpbmcgYSByZWd1bGFyIHN5bmNocm9ub3VzIGZ1bmN0aW9uXG4gKiBhc3luYy53YXRlcmZhbGwoW1xuICogICAgIGFzeW5jLmFwcGx5KGZzLnJlYWRGaWxlLCBmaWxlbmFtZSwgXCJ1dGY4XCIpLFxuICogICAgIGFzeW5jLmFzeW5jaWZ5KEpTT04ucGFyc2UpLFxuICogICAgIGZ1bmN0aW9uIChkYXRhLCBuZXh0KSB7XG4gKiAgICAgICAgIC8vIGRhdGEgaXMgdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSB0ZXh0LlxuICogICAgICAgICAvLyBJZiB0aGVyZSB3YXMgYSBwYXJzaW5nIGVycm9yLCBpdCB3b3VsZCBoYXZlIGJlZW4gY2F1Z2h0LlxuICogICAgIH1cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiAvLyBwYXNzaW5nIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGEgcHJvbWlzZVxuICogYXN5bmMud2F0ZXJmYWxsKFtcbiAqICAgICBhc3luYy5hcHBseShmcy5yZWFkRmlsZSwgZmlsZW5hbWUsIFwidXRmOFwiKSxcbiAqICAgICBhc3luYy5hc3luY2lmeShmdW5jdGlvbiAoY29udGVudHMpIHtcbiAqICAgICAgICAgcmV0dXJuIGRiLm1vZGVsLmNyZWF0ZShjb250ZW50cyk7XG4gKiAgICAgfSksXG4gKiAgICAgZnVuY3Rpb24gKG1vZGVsLCBuZXh0KSB7XG4gKiAgICAgICAgIC8vIGBtb2RlbGAgaXMgdGhlIGluc3RhbnRpYXRlZCBtb2RlbCBvYmplY3QuXG4gKiAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBhbiBlcnJvciwgdGhpcyBmdW5jdGlvbiB3b3VsZCBiZSBza2lwcGVkLlxuICogICAgIH1cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiAvLyBlczIwMTcgZXhhbXBsZSwgdGhvdWdoIGBhc3luY2lmeWAgaXMgbm90IG5lZWRlZCBpZiB5b3VyIEpTIGVudmlyb25tZW50XG4gKiAvLyBzdXBwb3J0cyBhc3luYyBmdW5jdGlvbnMgb3V0IG9mIHRoZSBib3hcbiAqIHZhciBxID0gYXN5bmMucXVldWUoYXN5bmMuYXN5bmNpZnkoYXN5bmMgZnVuY3Rpb24oZmlsZSkge1xuICogICAgIHZhciBpbnRlcm1lZGlhdGVTdGVwID0gYXdhaXQgcHJvY2Vzc0ZpbGUoZmlsZSk7XG4gKiAgICAgcmV0dXJuIGF3YWl0IHNvbWVQcm9taXNlKGludGVybWVkaWF0ZVN0ZXApXG4gKiB9KSk7XG4gKlxuICogcS5wdXNoKGZpbGVzKTtcbiAqL1xuZnVuY3Rpb24gYXN5bmNpZnkoZnVuYykge1xuICAgIHJldHVybiBpbml0aWFsUGFyYW1zKGZ1bmN0aW9uIChhcmdzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHJlc3VsdCBpcyBQcm9taXNlIG9iamVjdFxuICAgICAgICBpZiAoaXNPYmplY3QocmVzdWx0KSAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soY2FsbGJhY2ssIG51bGwsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnIubWVzc2FnZSA/IGVyciA6IG5ldyBFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBpbnZva2VDYWxsYmFjayhjYWxsYmFjaywgZXJyb3IsIHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNldEltbWVkaWF0ZSQxKHJldGhyb3csIGUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmV0aHJvdyhlcnJvcikge1xuICAgIHRocm93IGVycm9yO1xufVxuXG52YXIgc3VwcG9ydHNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBpc0FzeW5jKGZuKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRzU3ltYm9sICYmIGZuW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdBc3luY0Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gd3JhcEFzeW5jKGFzeW5jRm4pIHtcbiAgICByZXR1cm4gaXNBc3luYyhhc3luY0ZuKSA/IGFzeW5jaWZ5KGFzeW5jRm4pIDogYXN5bmNGbjtcbn1cblxuZnVuY3Rpb24gYXBwbHlFYWNoJDEoZWFjaGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZucy8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDEpO1xuICAgICAgICB2YXIgZ28gPSBpbml0aWFsUGFyYW1zKGZ1bmN0aW9uKGFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gZWFjaGZuKGZucywgZnVuY3Rpb24gKGZuLCBjYikge1xuICAgICAgICAgICAgICAgIHdyYXBBc3luYyhmbikuYXBwbHkodGhhdCwgYXJncy5jb25jYXQoY2IpKTtcbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGdvLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdvO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wkMSA9IHJvb3QuU3ltYm9sO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWckMSA9IFN5bWJvbCQxID8gU3ltYm9sJDEudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnJDEpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWckMV07XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZyQxXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8kMSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyQxID0gb2JqZWN0UHJvdG8kMS50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZyQxLmNhbGwodmFsdWUpO1xufVxuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJztcbnZhciB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wkMSA/IFN5bWJvbCQxLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJztcbnZhciBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8vIEEgdGVtcG9yYXJ5IHZhbHVlIHVzZWQgdG8gaWRlbnRpZnkgaWYgdGhlIGxvb3Agc2hvdWxkIGJlIGJyb2tlbi5cbi8vIFNlZSAjMTA2NCwgIzEyOTNcbnZhciBicmVha0xvb3AgPSB7fTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxuZnVuY3Rpb24gb25jZShmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmbiA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICB2YXIgY2FsbEZuID0gZm47XG4gICAgICAgIGZuID0gbnVsbDtcbiAgICAgICAgY2FsbEZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxudmFyIGl0ZXJhdG9yU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5cbnZhciBnZXRJdGVyYXRvciA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yU3ltYm9sICYmIGNvbGxbaXRlcmF0b3JTeW1ib2xdICYmIGNvbGxbaXRlcmF0b3JTeW1ib2xdKCk7XG59O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDMgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSQyID0gb2JqZWN0UHJvdG8kMy5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90byQzLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eSQyLmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIkMSA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIkMSA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnJDEgPSAnW29iamVjdCBBcmd1bWVudHNdJztcbnZhciBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XSc7XG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJztcbnZhciBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nO1xudmFyIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJztcbnZhciBmdW5jVGFnJDEgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xudmFyIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nO1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xudmFyIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xudmFyIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xudmFyIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xudmFyIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJztcbnZhciBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc7XG52YXIgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nO1xudmFyIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nO1xudmFyIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nO1xudmFyIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nO1xudmFyIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSc7XG52YXIgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJztcbnZhciB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZyQxXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnJDFdID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMkMSA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUkMSA9IGZyZWVFeHBvcnRzJDEgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyQxID0gZnJlZU1vZHVsZSQxICYmIGZyZWVNb2R1bGUkMS5leHBvcnRzID09PSBmcmVlRXhwb3J0cyQxO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMkMSAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUkMSAmJiBmcmVlTW9kdWxlJDEucmVxdWlyZSAmJiBmcmVlTW9kdWxlJDEucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvJDIgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSQxID0gb2JqZWN0UHJvdG8kMi5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eSQxLmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ1ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90byQ1O1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byQ0ID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkkMyA9IG9iamVjdFByb3RvJDQuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSQzLmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyYXlJdGVyYXRvcihjb2xsKSB7XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgbGVuID0gY29sbC5sZW5ndGg7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIHJldHVybiArK2kgPCBsZW4gPyB7dmFsdWU6IGNvbGxbaV0sIGtleTogaX0gOiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRVMyMDE1SXRlcmF0b3IoaXRlcmF0b3IpIHtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKGl0ZW0uZG9uZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpKys7XG4gICAgICAgIHJldHVybiB7dmFsdWU6IGl0ZW0udmFsdWUsIGtleTogaX07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RJdGVyYXRvcihvYmopIHtcbiAgICB2YXIgb2tleXMgPSBrZXlzKG9iaik7XG4gICAgdmFyIGkgPSAtMTtcbiAgICB2YXIgbGVuID0gb2tleXMubGVuZ3RoO1xuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICB2YXIga2V5ID0gb2tleXNbKytpXTtcbiAgICAgICAgcmV0dXJuIGkgPCBsZW4gPyB7dmFsdWU6IG9ialtrZXldLCBrZXk6IGtleX0gOiBudWxsO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGl0ZXJhdG9yKGNvbGwpIHtcbiAgICBpZiAoaXNBcnJheUxpa2UoY29sbCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFycmF5SXRlcmF0b3IoY29sbCk7XG4gICAgfVxuXG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoY29sbCk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yID8gY3JlYXRlRVMyMDE1SXRlcmF0b3IoaXRlcmF0b3IpIDogY3JlYXRlT2JqZWN0SXRlcmF0b3IoY29sbCk7XG59XG5cbmZ1bmN0aW9uIG9ubHlPbmNlKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZm4gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIkNhbGxiYWNrIHdhcyBhbHJlYWR5IGNhbGxlZC5cIik7XG4gICAgICAgIHZhciBjYWxsRm4gPSBmbjtcbiAgICAgICAgZm4gPSBudWxsO1xuICAgICAgICBjYWxsRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBfZWFjaE9mTGltaXQobGltaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcbiAgICAgICAgaWYgKGxpbWl0IDw9IDAgfHwgIW9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXh0RWxlbSA9IGl0ZXJhdG9yKG9iaik7XG4gICAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICAgIHZhciBydW5uaW5nID0gMDtcbiAgICAgICAgdmFyIGxvb3BpbmcgPSBmYWxzZTtcblxuICAgICAgICBmdW5jdGlvbiBpdGVyYXRlZUNhbGxiYWNrKGVyciwgdmFsdWUpIHtcbiAgICAgICAgICAgIHJ1bm5pbmcgLT0gMTtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IGJyZWFrTG9vcCB8fCAoZG9uZSAmJiBydW5uaW5nIDw9IDApKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWxvb3BpbmcpIHtcbiAgICAgICAgICAgICAgICByZXBsZW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxlbmlzaCAoKSB7XG4gICAgICAgICAgICBsb29waW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHdoaWxlIChydW5uaW5nIDwgbGltaXQgJiYgIWRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IG5leHRFbGVtKCk7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnVubmluZyArPSAxO1xuICAgICAgICAgICAgICAgIGl0ZXJhdGVlKGVsZW0udmFsdWUsIGVsZW0ua2V5LCBvbmx5T25jZShpdGVyYXRlZUNhbGxiYWNrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb29waW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXBsZW5pc2goKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgZWFjaE9mYF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2hPZn0gYnV0IHJ1bnMgYSBtYXhpbXVtIG9mIGBsaW1pdGAgYXN5bmMgb3BlcmF0aW9ucyBhdCBhXG4gKiB0aW1lLlxuICpcbiAqIEBuYW1lIGVhY2hPZkxpbWl0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5lYWNoT2Zde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNoT2Z9XG4gKiBAYWxpYXMgZm9yRWFjaE9mTGltaXRcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXN5bmMgb3BlcmF0aW9ucyBhdCBhIHRpbWUuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaFxuICogaXRlbSBpbiBgY29sbGAuIFRoZSBga2V5YCBpcyB0aGUgaXRlbSdzIGtleSwgb3IgaW5kZXggaW4gdGhlIGNhc2Ugb2YgYW5cbiAqIGFycmF5LlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBrZXksIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbFxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBJbnZva2VkIHdpdGggKGVycikuXG4gKi9cbmZ1bmN0aW9uIGVhY2hPZkxpbWl0KGNvbGwsIGxpbWl0LCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBfZWFjaE9mTGltaXQobGltaXQpKGNvbGwsIHdyYXBBc3luYyhpdGVyYXRlZSksIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gZG9MaW1pdChmbiwgbGltaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZXJhYmxlLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZuKGl0ZXJhYmxlLCBsaW1pdCwgaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbiAgICB9O1xufVxuXG4vLyBlYWNoT2YgaW1wbGVtZW50YXRpb24gb3B0aW1pemVkIGZvciBhcnJheS1saWtlc1xuZnVuY3Rpb24gZWFjaE9mQXJyYXlMaWtlKGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcbiAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICBjb21wbGV0ZWQgPSAwLFxuICAgICAgICBsZW5ndGggPSBjb2xsLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGl0ZXJhdG9yQ2FsbGJhY2soZXJyLCB2YWx1ZSkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9IGVsc2UgaWYgKCgrK2NvbXBsZXRlZCA9PT0gbGVuZ3RoKSB8fCB2YWx1ZSA9PT0gYnJlYWtMb29wKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBpdGVyYXRlZShjb2xsW2luZGV4XSwgaW5kZXgsIG9ubHlPbmNlKGl0ZXJhdG9yQ2FsbGJhY2spKTtcbiAgICB9XG59XG5cbi8vIGEgZ2VuZXJpYyB2ZXJzaW9uIG9mIGVhY2hPZiB3aGljaCBjYW4gaGFuZGxlIGFycmF5LCBvYmplY3QsIGFuZCBpdGVyYXRvciBjYXNlcy5cbnZhciBlYWNoT2ZHZW5lcmljID0gZG9MaW1pdChlYWNoT2ZMaW1pdCwgSW5maW5pdHkpO1xuXG4vKipcbiAqIExpa2UgW2BlYWNoYF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2h9LCBleGNlcHQgdGhhdCBpdCBwYXNzZXMgdGhlIGtleSAob3IgaW5kZXgpIGFzIHRoZSBzZWNvbmQgYXJndW1lbnRcbiAqIHRvIHRoZSBpdGVyYXRlZS5cbiAqXG4gKiBAbmFtZSBlYWNoT2ZcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBhbGlhcyBmb3JFYWNoT2ZcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAc2VlIFthc3luYy5lYWNoXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaH1cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2hcbiAqIGl0ZW0gaW4gYGNvbGxgLlxuICogVGhlIGBrZXlgIGlzIHRoZSBpdGVtJ3Mga2V5LCBvciBpbmRleCBpbiB0aGUgY2FzZSBvZiBhbiBhcnJheS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGxcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqID0ge2RldjogXCIvZGV2Lmpzb25cIiwgdGVzdDogXCIvdGVzdC5qc29uXCIsIHByb2Q6IFwiL3Byb2QuanNvblwifTtcbiAqIHZhciBjb25maWdzID0ge307XG4gKlxuICogYXN5bmMuZm9yRWFjaE9mKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXksIGNhbGxiYWNrKSB7XG4gKiAgICAgZnMucmVhZEZpbGUoX19kaXJuYW1lICsgdmFsdWUsIFwidXRmOFwiLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gKiAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICogICAgICAgICB0cnkge1xuICogICAgICAgICAgICAgY29uZmlnc1trZXldID0gSlNPTi5wYXJzZShkYXRhKTtcbiAqICAgICAgICAgfSBjYXRjaCAoZSkge1xuICogICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICogICAgICAgICB9XG4gKiAgICAgICAgIGNhbGxiYWNrKCk7XG4gKiAgICAgfSk7XG4gKiB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gKiAgICAgaWYgKGVycikgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7XG4gKiAgICAgLy8gY29uZmlncyBpcyBub3cgYSBtYXAgb2YgSlNPTiBkYXRhXG4gKiAgICAgZG9Tb21ldGhpbmdXaXRoKGNvbmZpZ3MpO1xuICogfSk7XG4gKi9cbnZhciBlYWNoT2YgPSBmdW5jdGlvbihjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZWFjaE9mSW1wbGVtZW50YXRpb24gPSBpc0FycmF5TGlrZShjb2xsKSA/IGVhY2hPZkFycmF5TGlrZSA6IGVhY2hPZkdlbmVyaWM7XG4gICAgZWFjaE9mSW1wbGVtZW50YXRpb24oY29sbCwgd3JhcEFzeW5jKGl0ZXJhdGVlKSwgY2FsbGJhY2spO1xufTtcblxuZnVuY3Rpb24gZG9QYXJhbGxlbChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAob2JqLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZuKGVhY2hPZiwgb2JqLCB3cmFwQXN5bmMoaXRlcmF0ZWUpLCBjYWxsYmFjayk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gX2FzeW5jTWFwKGVhY2hmbiwgYXJyLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG4gICAgYXJyID0gYXJyIHx8IFtdO1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgIHZhciBfaXRlcmF0ZWUgPSB3cmFwQXN5bmMoaXRlcmF0ZWUpO1xuXG4gICAgZWFjaGZuKGFyciwgZnVuY3Rpb24gKHZhbHVlLCBfLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIF9pdGVyYXRlZSh2YWx1ZSwgZnVuY3Rpb24gKGVyciwgdikge1xuICAgICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSB2O1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdHMpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFByb2R1Y2VzIGEgbmV3IGNvbGxlY3Rpb24gb2YgdmFsdWVzIGJ5IG1hcHBpbmcgZWFjaCB2YWx1ZSBpbiBgY29sbGAgdGhyb3VnaFxuICogdGhlIGBpdGVyYXRlZWAgZnVuY3Rpb24uIFRoZSBgaXRlcmF0ZWVgIGlzIGNhbGxlZCB3aXRoIGFuIGl0ZW0gZnJvbSBgY29sbGBcbiAqIGFuZCBhIGNhbGxiYWNrIGZvciB3aGVuIGl0IGhhcyBmaW5pc2hlZCBwcm9jZXNzaW5nLiBFYWNoIG9mIHRoZXNlIGNhbGxiYWNrXG4gKiB0YWtlcyAyIGFyZ3VtZW50czogYW4gYGVycm9yYCwgYW5kIHRoZSB0cmFuc2Zvcm1lZCBpdGVtIGZyb20gYGNvbGxgLiBJZlxuICogYGl0ZXJhdGVlYCBwYXNzZXMgYW4gZXJyb3IgdG8gaXRzIGNhbGxiYWNrLCB0aGUgbWFpbiBgY2FsbGJhY2tgIChmb3IgdGhlXG4gKiBgbWFwYCBmdW5jdGlvbikgaXMgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGVycm9yLlxuICpcbiAqIE5vdGUsIHRoYXQgc2luY2UgdGhpcyBmdW5jdGlvbiBhcHBsaWVzIHRoZSBgaXRlcmF0ZWVgIHRvIGVhY2ggaXRlbSBpblxuICogcGFyYWxsZWwsIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyB3aWxsIGNvbXBsZXRlXG4gKiBpbiBvcmRlci4gSG93ZXZlciwgdGhlIHJlc3VsdHMgYXJyYXkgd2lsbCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbiAqIG9yaWdpbmFsIGBjb2xsYC5cbiAqXG4gKiBJZiBgbWFwYCBpcyBwYXNzZWQgYW4gT2JqZWN0LCB0aGUgcmVzdWx0cyB3aWxsIGJlIGFuIEFycmF5LiAgVGhlIHJlc3VsdHNcbiAqIHdpbGwgcm91Z2hseSBiZSBpbiB0aGUgb3JkZXIgb2YgdGhlIG9yaWdpbmFsIE9iamVjdHMnIGtleXMgKGJ1dCB0aGlzIGNhblxuICogdmFyeSBhY3Jvc3MgSmF2YVNjcmlwdCBlbmdpbmVzKS5cbiAqXG4gKiBAbmFtZSBtYXBcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluXG4gKiBgY29sbGAuXG4gKiBUaGUgaXRlcmF0ZWUgc2hvdWxkIGNvbXBsZXRlIHdpdGggdGhlIHRyYW5zZm9ybWVkIGl0ZW0uXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbCBgaXRlcmF0ZWVgXG4gKiBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHRzIGlzIGFuIEFycmF5IG9mIHRoZVxuICogdHJhbnNmb3JtZWQgaXRlbXMgZnJvbSB0aGUgYGNvbGxgLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0cykuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLm1hcChbJ2ZpbGUxJywnZmlsZTInLCdmaWxlMyddLCBmcy5zdGF0LCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICAvLyByZXN1bHRzIGlzIG5vdyBhbiBhcnJheSBvZiBzdGF0cyBmb3IgZWFjaCBmaWxlXG4gKiB9KTtcbiAqL1xudmFyIG1hcCA9IGRvUGFyYWxsZWwoX2FzeW5jTWFwKTtcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBwcm92aWRlZCBhcmd1bWVudHMgdG8gZWFjaCBmdW5jdGlvbiBpbiB0aGUgYXJyYXksIGNhbGxpbmdcbiAqIGBjYWxsYmFja2AgYWZ0ZXIgYWxsIGZ1bmN0aW9ucyBoYXZlIGNvbXBsZXRlZC4gSWYgeW91IG9ubHkgcHJvdmlkZSB0aGUgZmlyc3RcbiAqIGFyZ3VtZW50LCBgZm5zYCwgdGhlbiBpdCB3aWxsIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIGxldHMgeW91IHBhc3MgaW4gdGhlXG4gKiBhcmd1bWVudHMgYXMgaWYgaXQgd2VyZSBhIHNpbmdsZSBmdW5jdGlvbiBjYWxsLiBJZiBtb3JlIGFyZ3VtZW50cyBhcmVcbiAqIHByb3ZpZGVkLCBgY2FsbGJhY2tgIGlzIHJlcXVpcmVkIHdoaWxlIGBhcmdzYCBpcyBzdGlsbCBvcHRpb25hbC5cbiAqXG4gKiBAbmFtZSBhcHBseUVhY2hcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBmbnMgLSBBIGNvbGxlY3Rpb24gb2Yge0BsaW5rIEFzeW5jRnVuY3Rpb259c1xuICogdG8gYWxsIGNhbGwgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHNcbiAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIC0gYW55IG51bWJlciBvZiBzZXBhcmF0ZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGVcbiAqIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIHRoZSBmaW5hbCBhcmd1bWVudCBzaG91bGQgYmUgdGhlIGNhbGxiYWNrLFxuICogY2FsbGVkIHdoZW4gYWxsIGZ1bmN0aW9ucyBoYXZlIGNvbXBsZXRlZCBwcm9jZXNzaW5nLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIElmIG9ubHkgdGhlIGZpcnN0IGFyZ3VtZW50LCBgZm5zYCwgaXMgcHJvdmlkZWQsIGl0IHdpbGxcbiAqIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIGxldHMgeW91IHBhc3MgaW4gdGhlIGFyZ3VtZW50cyBhcyBpZiBpdCB3ZXJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbiBjYWxsLiBUaGUgc2lnbmF0dXJlIGlzIGAoLi5hcmdzLCBjYWxsYmFjaylgLiBJZiBpbnZva2VkIHdpdGggYW55XG4gKiBhcmd1bWVudHMsIGBjYWxsYmFja2AgaXMgcmVxdWlyZWQuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLmFwcGx5RWFjaChbZW5hYmxlU2VhcmNoLCB1cGRhdGVTY2hlbWFdLCAnYnVja2V0JywgY2FsbGJhY2spO1xuICpcbiAqIC8vIHBhcnRpYWwgYXBwbGljYXRpb24gZXhhbXBsZTpcbiAqIGFzeW5jLmVhY2goXG4gKiAgICAgYnVja2V0cyxcbiAqICAgICBhc3luYy5hcHBseUVhY2goW2VuYWJsZVNlYXJjaCwgdXBkYXRlU2NoZW1hXSksXG4gKiAgICAgY2FsbGJhY2tcbiAqICk7XG4gKi9cbnZhciBhcHBseUVhY2ggPSBhcHBseUVhY2gkMShtYXApO1xuXG5mdW5jdGlvbiBkb1BhcmFsbGVsTGltaXQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZm4oX2VhY2hPZkxpbWl0KGxpbWl0KSwgb2JqLCB3cmFwQXN5bmMoaXRlcmF0ZWUpLCBjYWxsYmFjayk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYG1hcGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIG1hcExpbWl0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5tYXBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpblxuICogYGNvbGxgLlxuICogVGhlIGl0ZXJhdGVlIHNob3VsZCBjb21wbGV0ZSB3aXRoIHRoZSB0cmFuc2Zvcm1lZCBpdGVtLlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGwgYGl0ZXJhdGVlYFxuICogZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gUmVzdWx0cyBpcyBhbiBhcnJheSBvZiB0aGVcbiAqIHRyYW5zZm9ybWVkIGl0ZW1zIGZyb20gdGhlIGBjb2xsYC4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICovXG52YXIgbWFwTGltaXQgPSBkb1BhcmFsbGVsTGltaXQoX2FzeW5jTWFwKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYG1hcGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9IGJ1dCBydW5zIG9ubHkgYSBzaW5nbGUgYXN5bmMgb3BlcmF0aW9uIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBtYXBTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLm1hcF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLm1hcH1cbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluXG4gKiBgY29sbGAuXG4gKiBUaGUgaXRlcmF0ZWUgc2hvdWxkIGNvbXBsZXRlIHdpdGggdGhlIHRyYW5zZm9ybWVkIGl0ZW0uXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbCBgaXRlcmF0ZWVgXG4gKiBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHRzIGlzIGFuIGFycmF5IG9mIHRoZVxuICogdHJhbnNmb3JtZWQgaXRlbXMgZnJvbSB0aGUgYGNvbGxgLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0cykuXG4gKi9cbnZhciBtYXBTZXJpZXMgPSBkb0xpbWl0KG1hcExpbWl0LCAxKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGFwcGx5RWFjaGBde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy5hcHBseUVhY2h9IGJ1dCBydW5zIG9ubHkgYSBzaW5nbGUgYXN5bmMgb3BlcmF0aW9uIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBhcHBseUVhY2hTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmFwcGx5RWFjaF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LmFwcGx5RWFjaH1cbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBmbnMgLSBBIGNvbGxlY3Rpb24gb2Yge0BsaW5rIEFzeW5jRnVuY3Rpb259cyB0byBhbGxcbiAqIGNhbGwgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHNcbiAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIC0gYW55IG51bWJlciBvZiBzZXBhcmF0ZSBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGVcbiAqIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIHRoZSBmaW5hbCBhcmd1bWVudCBzaG91bGQgYmUgdGhlIGNhbGxiYWNrLFxuICogY2FsbGVkIHdoZW4gYWxsIGZ1bmN0aW9ucyBoYXZlIGNvbXBsZXRlZCBwcm9jZXNzaW5nLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIElmIG9ubHkgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBpdCB3aWxsIHJldHVyblxuICogYSBmdW5jdGlvbiB3aGljaCBsZXRzIHlvdSBwYXNzIGluIHRoZSBhcmd1bWVudHMgYXMgaWYgaXQgd2VyZSBhIHNpbmdsZVxuICogZnVuY3Rpb24gY2FsbC5cbiAqL1xudmFyIGFwcGx5RWFjaFNlcmllcyA9IGFwcGx5RWFjaCQxKG1hcFNlcmllcyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgsIGZyb21SaWdodCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGJlc3Qgb3JkZXIgZm9yIHJ1bm5pbmcgdGhlIHtAbGluayBBc3luY0Z1bmN0aW9ufXMgaW4gYHRhc2tzYCwgYmFzZWQgb25cbiAqIHRoZWlyIHJlcXVpcmVtZW50cy4gRWFjaCBmdW5jdGlvbiBjYW4gb3B0aW9uYWxseSBkZXBlbmQgb24gb3RoZXIgZnVuY3Rpb25zXG4gKiBiZWluZyBjb21wbGV0ZWQgZmlyc3QsIGFuZCBlYWNoIGZ1bmN0aW9uIGlzIHJ1biBhcyBzb29uIGFzIGl0cyByZXF1aXJlbWVudHNcbiAqIGFyZSBzYXRpc2ZpZWQuXG4gKlxuICogSWYgYW55IG9mIHRoZSB7QGxpbmsgQXN5bmNGdW5jdGlvbn1zIHBhc3MgYW4gZXJyb3IgdG8gdGhlaXIgY2FsbGJhY2ssIHRoZSBgYXV0b2Agc2VxdWVuY2VcbiAqIHdpbGwgc3RvcC4gRnVydGhlciB0YXNrcyB3aWxsIG5vdCBleGVjdXRlIChzbyBhbnkgb3RoZXIgZnVuY3Rpb25zIGRlcGVuZGluZ1xuICogb24gaXQgd2lsbCBub3QgcnVuKSwgYW5kIHRoZSBtYWluIGBjYWxsYmFja2AgaXMgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlXG4gKiBlcnJvci5cbiAqXG4gKiB7QGxpbmsgQXN5bmNGdW5jdGlvbn1zIGFsc28gcmVjZWl2ZSBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzdWx0cyBvZiBmdW5jdGlvbnMgd2hpY2hcbiAqIGhhdmUgY29tcGxldGVkIHNvIGZhciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsIGlmIHRoZXkgaGF2ZSBkZXBlbmRlbmNpZXMuIElmIGFcbiAqIHRhc2sgZnVuY3Rpb24gaGFzIG5vIGRlcGVuZGVuY2llcywgaXQgd2lsbCBvbmx5IGJlIHBhc3NlZCBhIGNhbGxiYWNrLlxuICpcbiAqIEBuYW1lIGF1dG9cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXNrcyAtIEFuIG9iamVjdC4gRWFjaCBvZiBpdHMgcHJvcGVydGllcyBpcyBlaXRoZXIgYVxuICogZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2YgcmVxdWlyZW1lbnRzLCB3aXRoIHRoZSB7QGxpbmsgQXN5bmNGdW5jdGlvbn0gaXRzZWxmIHRoZSBsYXN0IGl0ZW1cbiAqIGluIHRoZSBhcnJheS4gVGhlIG9iamVjdCdzIGtleSBvZiBhIHByb3BlcnR5IHNlcnZlcyBhcyB0aGUgbmFtZSBvZiB0aGUgdGFza1xuICogZGVmaW5lZCBieSB0aGF0IHByb3BlcnR5LCBpLmUuIGNhbiBiZSB1c2VkIHdoZW4gc3BlY2lmeWluZyByZXF1aXJlbWVudHMgZm9yXG4gKiBvdGhlciB0YXNrcy4gVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIG9uZSBvciB0d28gYXJndW1lbnRzOlxuICogKiBhIGByZXN1bHRzYCBvYmplY3QsIGNvbnRhaW5pbmcgdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzbHkgZXhlY3V0ZWRcbiAqICAgZnVuY3Rpb25zLCBvbmx5IHBhc3NlZCBpZiB0aGUgdGFzayBoYXMgYW55IGRlcGVuZGVuY2llcyxcbiAqICogYSBgY2FsbGJhY2soZXJyLCByZXN1bHQpYCBmdW5jdGlvbiwgd2hpY2ggbXVzdCBiZSBjYWxsZWQgd2hlbiBmaW5pc2hlZCxcbiAqICAgcGFzc2luZyBhbiBgZXJyb3JgICh3aGljaCBjYW4gYmUgYG51bGxgKSBhbmQgdGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24nc1xuICogICBleGVjdXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbmN5PUluZmluaXR5XSAtIEFuIG9wdGlvbmFsIGBpbnRlZ2VyYCBmb3JcbiAqIGRldGVybWluaW5nIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0YXNrcyB0aGF0IGNhbiBiZSBydW4gaW4gcGFyYWxsZWwuIEJ5XG4gKiBkZWZhdWx0LCBhcyBtYW55IGFzIHBvc3NpYmxlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbFxuICogdGhlIHRhc2tzIGhhdmUgYmVlbiBjb21wbGV0ZWQuIEl0IHJlY2VpdmVzIHRoZSBgZXJyYCBhcmd1bWVudCBpZiBhbnkgYHRhc2tzYFxuICogcGFzcyBhbiBlcnJvciB0byB0aGVpciBjYWxsYmFjay4gUmVzdWx0cyBhcmUgYWx3YXlzIHJldHVybmVkOyBob3dldmVyLCBpZiBhblxuICogZXJyb3Igb2NjdXJzLCBubyBmdXJ0aGVyIGB0YXNrc2Agd2lsbCBiZSBwZXJmb3JtZWQsIGFuZCB0aGUgcmVzdWx0cyBvYmplY3RcbiAqIHdpbGwgb25seSBjb250YWluIHBhcnRpYWwgcmVzdWx0cy4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICogQHJldHVybnMgdW5kZWZpbmVkXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLmF1dG8oe1xuICogICAgIC8vIHRoaXMgZnVuY3Rpb24gd2lsbCBqdXN0IGJlIHBhc3NlZCBhIGNhbGxiYWNrXG4gKiAgICAgcmVhZERhdGE6IGFzeW5jLmFwcGx5KGZzLnJlYWRGaWxlLCAnZGF0YS50eHQnLCAndXRmLTgnKSxcbiAqICAgICBzaG93RGF0YTogWydyZWFkRGF0YScsIGZ1bmN0aW9uKHJlc3VsdHMsIGNiKSB7XG4gKiAgICAgICAgIC8vIHJlc3VsdHMucmVhZERhdGEgaXMgdGhlIGZpbGUncyBjb250ZW50c1xuICogICAgICAgICAvLyAuLi5cbiAqICAgICB9XVxuICogfSwgY2FsbGJhY2spO1xuICpcbiAqIGFzeW5jLmF1dG8oe1xuICogICAgIGdldF9kYXRhOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBjb25zb2xlLmxvZygnaW4gZ2V0X2RhdGEnKTtcbiAqICAgICAgICAgLy8gYXN5bmMgY29kZSB0byBnZXQgc29tZSBkYXRhXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICdkYXRhJywgJ2NvbnZlcnRlZCB0byBhcnJheScpO1xuICogICAgIH0sXG4gKiAgICAgbWFrZV9mb2xkZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKCdpbiBtYWtlX2ZvbGRlcicpO1xuICogICAgICAgICAvLyBhc3luYyBjb2RlIHRvIGNyZWF0ZSBhIGRpcmVjdG9yeSB0byBzdG9yZSBhIGZpbGUgaW5cbiAqICAgICAgICAgLy8gdGhpcyBpcyBydW4gYXQgdGhlIHNhbWUgdGltZSBhcyBnZXR0aW5nIHRoZSBkYXRhXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICdmb2xkZXInKTtcbiAqICAgICB9LFxuICogICAgIHdyaXRlX2ZpbGU6IFsnZ2V0X2RhdGEnLCAnbWFrZV9mb2xkZXInLCBmdW5jdGlvbihyZXN1bHRzLCBjYWxsYmFjaykge1xuICogICAgICAgICBjb25zb2xlLmxvZygnaW4gd3JpdGVfZmlsZScsIEpTT04uc3RyaW5naWZ5KHJlc3VsdHMpKTtcbiAqICAgICAgICAgLy8gb25jZSB0aGVyZSBpcyBzb21lIGRhdGEgYW5kIHRoZSBkaXJlY3RvcnkgZXhpc3RzLFxuICogICAgICAgICAvLyB3cml0ZSB0aGUgZGF0YSB0byBhIGZpbGUgaW4gdGhlIGRpcmVjdG9yeVxuICogICAgICAgICBjYWxsYmFjayhudWxsLCAnZmlsZW5hbWUnKTtcbiAqICAgICB9XSxcbiAqICAgICBlbWFpbF9saW5rOiBbJ3dyaXRlX2ZpbGUnLCBmdW5jdGlvbihyZXN1bHRzLCBjYWxsYmFjaykge1xuICogICAgICAgICBjb25zb2xlLmxvZygnaW4gZW1haWxfbGluaycsIEpTT04uc3RyaW5naWZ5KHJlc3VsdHMpKTtcbiAqICAgICAgICAgLy8gb25jZSB0aGUgZmlsZSBpcyB3cml0dGVuIGxldCdzIGVtYWlsIGEgbGluayB0byBpdC4uLlxuICogICAgICAgICAvLyByZXN1bHRzLndyaXRlX2ZpbGUgY29udGFpbnMgdGhlIGZpbGVuYW1lIHJldHVybmVkIGJ5IHdyaXRlX2ZpbGUuXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsIHsnZmlsZSc6cmVzdWx0cy53cml0ZV9maWxlLCAnZW1haWwnOid1c2VyQGV4YW1wbGUuY29tJ30pO1xuICogICAgIH1dXG4gKiB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICBjb25zb2xlLmxvZygnZXJyID0gJywgZXJyKTtcbiAqICAgICBjb25zb2xlLmxvZygncmVzdWx0cyA9ICcsIHJlc3VsdHMpO1xuICogfSk7XG4gKi9cbnZhciBhdXRvID0gZnVuY3Rpb24gKHRhc2tzLCBjb25jdXJyZW5jeSwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNvbmN1cnJlbmN5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGNvbmN1cnJlbmN5IGlzIG9wdGlvbmFsLCBzaGlmdCB0aGUgYXJncy5cbiAgICAgICAgY2FsbGJhY2sgPSBjb25jdXJyZW5jeTtcbiAgICAgICAgY29uY3VycmVuY3kgPSBudWxsO1xuICAgIH1cbiAgICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gICAgdmFyIGtleXMkJDEgPSBrZXlzKHRhc2tzKTtcbiAgICB2YXIgbnVtVGFza3MgPSBrZXlzJCQxLmxlbmd0aDtcbiAgICBpZiAoIW51bVRhc2tzKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICB9XG4gICAgaWYgKCFjb25jdXJyZW5jeSkge1xuICAgICAgICBjb25jdXJyZW5jeSA9IG51bVRhc2tzO1xuICAgIH1cblxuICAgIHZhciByZXN1bHRzID0ge307XG4gICAgdmFyIHJ1bm5pbmdUYXNrcyA9IDA7XG4gICAgdmFyIGhhc0Vycm9yID0gZmFsc2U7XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHZhciByZWFkeVRhc2tzID0gW107XG5cbiAgICAvLyBmb3IgY3ljbGUgZGV0ZWN0aW9uOlxuICAgIHZhciByZWFkeVRvQ2hlY2sgPSBbXTsgLy8gdGFza3MgdGhhdCBoYXZlIGJlZW4gaWRlbnRpZmllZCBhcyByZWFjaGFibGVcbiAgICAvLyB3aXRob3V0IHRoZSBwb3NzaWJpbGl0eSBvZiByZXR1cm5pbmcgdG8gYW4gYW5jZXN0b3IgdGFza1xuICAgIHZhciB1bmNoZWNrZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuICAgIGJhc2VGb3JPd24odGFza3MsIGZ1bmN0aW9uICh0YXNrLCBrZXkpIHtcbiAgICAgICAgaWYgKCFpc0FycmF5KHRhc2spKSB7XG4gICAgICAgICAgICAvLyBubyBkZXBlbmRlbmNpZXNcbiAgICAgICAgICAgIGVucXVldWVUYXNrKGtleSwgW3Rhc2tdKTtcbiAgICAgICAgICAgIHJlYWR5VG9DaGVjay5wdXNoKGtleSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVwZW5kZW5jaWVzID0gdGFzay5zbGljZSgwLCB0YXNrLmxlbmd0aCAtIDEpO1xuICAgICAgICB2YXIgcmVtYWluaW5nRGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcbiAgICAgICAgaWYgKHJlbWFpbmluZ0RlcGVuZGVuY2llcyA9PT0gMCkge1xuICAgICAgICAgICAgZW5xdWV1ZVRhc2soa2V5LCB0YXNrKTtcbiAgICAgICAgICAgIHJlYWR5VG9DaGVjay5wdXNoKGtleSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdW5jaGVja2VkRGVwZW5kZW5jaWVzW2tleV0gPSByZW1haW5pbmdEZXBlbmRlbmNpZXM7XG5cbiAgICAgICAgYXJyYXlFYWNoKGRlcGVuZGVuY2llcywgZnVuY3Rpb24gKGRlcGVuZGVuY3lOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXRhc2tzW2RlcGVuZGVuY3lOYW1lXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXN5bmMuYXV0byB0YXNrIGAnICsga2V5ICtcbiAgICAgICAgICAgICAgICAgICAgJ2AgaGFzIGEgbm9uLWV4aXN0ZW50IGRlcGVuZGVuY3kgYCcgK1xuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5TmFtZSArICdgIGluICcgK1xuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMuam9pbignLCAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihkZXBlbmRlbmN5TmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlbWFpbmluZ0RlcGVuZGVuY2llcy0tO1xuICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmdEZXBlbmRlbmNpZXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZW5xdWV1ZVRhc2soa2V5LCB0YXNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjaGVja0ZvckRlYWRsb2NrcygpO1xuICAgIHByb2Nlc3NRdWV1ZSgpO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZVRhc2soa2V5LCB0YXNrKSB7XG4gICAgICAgIHJlYWR5VGFza3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBydW5UYXNrKGtleSwgdGFzayk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHtcbiAgICAgICAgaWYgKHJlYWR5VGFza3MubGVuZ3RoID09PSAwICYmIHJ1bm5pbmdUYXNrcyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHJlYWR5VGFza3MubGVuZ3RoICYmIHJ1bm5pbmdUYXNrcyA8IGNvbmN1cnJlbmN5KSB7XG4gICAgICAgICAgICB2YXIgcnVuID0gcmVhZHlUYXNrcy5zaGlmdCgpO1xuICAgICAgICAgICAgcnVuKCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKHRhc2tOYW1lLCBmbikge1xuICAgICAgICB2YXIgdGFza0xpc3RlbmVycyA9IGxpc3RlbmVyc1t0YXNrTmFtZV07XG4gICAgICAgIGlmICghdGFza0xpc3RlbmVycykge1xuICAgICAgICAgICAgdGFza0xpc3RlbmVycyA9IGxpc3RlbmVyc1t0YXNrTmFtZV0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhc2tMaXN0ZW5lcnMucHVzaChmbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGFza0NvbXBsZXRlKHRhc2tOYW1lKSB7XG4gICAgICAgIHZhciB0YXNrTGlzdGVuZXJzID0gbGlzdGVuZXJzW3Rhc2tOYW1lXSB8fCBbXTtcbiAgICAgICAgYXJyYXlFYWNoKHRhc2tMaXN0ZW5lcnMsIGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gcnVuVGFzayhrZXksIHRhc2spIHtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSByZXR1cm47XG5cbiAgICAgICAgdmFyIHRhc2tDYWxsYmFjayA9IG9ubHlPbmNlKGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBydW5uaW5nVGFza3MtLTtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNhZmVSZXN1bHRzID0ge307XG4gICAgICAgICAgICAgICAgYmFzZUZvck93bihyZXN1bHRzLCBmdW5jdGlvbih2YWwsIHJrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2FmZVJlc3VsdHNbcmtleV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2FmZVJlc3VsdHNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgc2FmZVJlc3VsdHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzW2tleV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgdGFza0NvbXBsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJ1bm5pbmdUYXNrcysrO1xuICAgICAgICB2YXIgdGFza0ZuID0gd3JhcEFzeW5jKHRhc2tbdGFzay5sZW5ndGggLSAxXSk7XG4gICAgICAgIGlmICh0YXNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRhc2tGbihyZXN1bHRzLCB0YXNrQ2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFza0ZuKHRhc2tDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0ZvckRlYWRsb2NrcygpIHtcbiAgICAgICAgLy8gS2FobidzIGFsZ29yaXRobVxuICAgICAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ub3BvbG9naWNhbF9zb3J0aW5nI0thaG4uMjdzX2FsZ29yaXRobVxuICAgICAgICAvLyBodHRwOi8vY29ubmFsbGUuYmxvZ3Nwb3QuY29tLzIwMTMvMTAvdG9wb2xvZ2ljYWwtc29ydGluZ2thaG4tYWxnb3JpdGhtLmh0bWxcbiAgICAgICAgdmFyIGN1cnJlbnRUYXNrO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHdoaWxlIChyZWFkeVRvQ2hlY2subGVuZ3RoKSB7XG4gICAgICAgICAgICBjdXJyZW50VGFzayA9IHJlYWR5VG9DaGVjay5wb3AoKTtcbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICAgIGFycmF5RWFjaChnZXREZXBlbmRlbnRzKGN1cnJlbnRUYXNrKSwgZnVuY3Rpb24gKGRlcGVuZGVudCkge1xuICAgICAgICAgICAgICAgIGlmICgtLXVuY2hlY2tlZERlcGVuZGVuY2llc1tkZXBlbmRlbnRdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWR5VG9DaGVjay5wdXNoKGRlcGVuZGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY291bnRlciAhPT0gbnVtVGFza3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnYXN5bmMuYXV0byBjYW5ub3QgZXhlY3V0ZSB0YXNrcyBkdWUgdG8gYSByZWN1cnNpdmUgZGVwZW5kZW5jeSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREZXBlbmRlbnRzKHRhc2tOYW1lKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgYmFzZUZvck93bih0YXNrcywgZnVuY3Rpb24gKHRhc2ssIGtleSkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodGFzaykgJiYgYmFzZUluZGV4T2YodGFzaywgdGFza05hbWUsIDApID49IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sJDEgPyBTeW1ib2wkMS5wcm90b3R5cGUgOiB1bmRlZmluZWQ7XG52YXIgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gKi9cbmZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG59XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gKi9cbmZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcbiAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAqL1xuZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJztcbnZhciByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJztcbnZhciByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZic7XG52YXIgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJztcbnZhciByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2U7XG52YXIgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG52YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UkMSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJztcbnZhciByc0NvbWJvTWFya3NSYW5nZSQxID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnO1xudmFyIHJlQ29tYm9IYWxmTWFya3NSYW5nZSQxID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnO1xudmFyIHJzQ29tYm9TeW1ib2xzUmFuZ2UkMSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJztcbnZhciByc0NvbWJvUmFuZ2UkMSA9IHJzQ29tYm9NYXJrc1JhbmdlJDEgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UkMSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UkMTtcbnZhciByc1ZhclJhbmdlJDEgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSQxICsgJ10nO1xudmFyIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UkMSArICddJztcbnZhciByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJztcbnZhciByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknO1xudmFyIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UkMSArICddJztcbnZhciByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nO1xudmFyIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJztcbnZhciByc1pXSiQxID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JztcbnZhciByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UkMSArICddPyc7XG52YXIgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiQxICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonO1xudmFyIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbjtcbnZhciByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggW3N0cmluZyBzeW1ib2xzXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC11bmljb2RlKS4gKi9cbnZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG59XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKlxuICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50cmltKCcgIGFiYyAgJyk7XG4gKiAvLyA9PiAnYWJjJ1xuICpcbiAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gKiAvLyA9PiAnYWJjJ1xuICpcbiAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICovXG5mdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB9XG4gIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG59XG5cbnZhciBGTl9BUkdTID0gL14oPzphc3luY1xccyspPyhmdW5jdGlvbik/XFxzKlteXFwoXSpcXChcXHMqKFteXFwpXSopXFwpL207XG52YXIgRk5fQVJHX1NQTElUID0gLywvO1xudmFyIEZOX0FSRyA9IC8oPS4rKT8oXFxzKikkLztcbnZhciBTVFJJUF9DT01NRU5UUyA9IC8oKFxcL1xcLy4qJCl8KFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pKS9tZztcblxuZnVuY3Rpb24gcGFyc2VQYXJhbXMoZnVuYykge1xuICAgIGZ1bmMgPSBmdW5jLnRvU3RyaW5nKCkucmVwbGFjZShTVFJJUF9DT01NRU5UUywgJycpO1xuICAgIGZ1bmMgPSBmdW5jLm1hdGNoKEZOX0FSR1MpWzJdLnJlcGxhY2UoJyAnLCAnJyk7XG4gICAgZnVuYyA9IGZ1bmMgPyBmdW5jLnNwbGl0KEZOX0FSR19TUExJVCkgOiBbXTtcbiAgICBmdW5jID0gZnVuYy5tYXAoZnVuY3Rpb24gKGFyZyl7XG4gICAgICAgIHJldHVybiB0cmltKGFyZy5yZXBsYWNlKEZOX0FSRywgJycpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuYztcbn1cblxuLyoqXG4gKiBBIGRlcGVuZGVuY3ktaW5qZWN0ZWQgdmVyc2lvbiBvZiB0aGUgW2FzeW5jLmF1dG9de0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy5hdXRvfSBmdW5jdGlvbi4gRGVwZW5kZW50XG4gKiB0YXNrcyBhcmUgc3BlY2lmaWVkIGFzIHBhcmFtZXRlcnMgdG8gdGhlIGZ1bmN0aW9uLCBhZnRlciB0aGUgdXN1YWwgY2FsbGJhY2tcbiAqIHBhcmFtZXRlciwgd2l0aCB0aGUgcGFyYW1ldGVyIG5hbWVzIG1hdGNoaW5nIHRoZSBuYW1lcyBvZiB0aGUgdGFza3MgaXRcbiAqIGRlcGVuZHMgb24uIFRoaXMgY2FuIHByb3ZpZGUgZXZlbiBtb3JlIHJlYWRhYmxlIHRhc2sgZ3JhcGhzIHdoaWNoIGNhbiBiZVxuICogZWFzaWVyIHRvIG1haW50YWluLlxuICpcbiAqIElmIGEgZmluYWwgY2FsbGJhY2sgaXMgc3BlY2lmaWVkLCB0aGUgdGFzayByZXN1bHRzIGFyZSBzaW1pbGFybHkgaW5qZWN0ZWQsXG4gKiBzcGVjaWZpZWQgYXMgbmFtZWQgcGFyYW1ldGVycyBhZnRlciB0aGUgaW5pdGlhbCBlcnJvciBwYXJhbWV0ZXIuXG4gKlxuICogVGhlIGF1dG9JbmplY3QgZnVuY3Rpb24gaXMgcHVyZWx5IHN5bnRhY3RpYyBzdWdhciBhbmQgaXRzIHNlbWFudGljcyBhcmVcbiAqIG90aGVyd2lzZSBlcXVpdmFsZW50IHRvIFthc3luYy5hdXRvXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cuYXV0b30uXG4gKlxuICogQG5hbWUgYXV0b0luamVjdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb250cm9sRmxvd1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuYXV0b117QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LmF1dG99XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge09iamVjdH0gdGFza3MgLSBBbiBvYmplY3QsIGVhY2ggb2Ygd2hvc2UgcHJvcGVydGllcyBpcyBhbiB7QGxpbmsgQXN5bmNGdW5jdGlvbn0gb2ZcbiAqIHRoZSBmb3JtICdmdW5jKFtkZXBlbmRlbmNpZXMuLi5dLCBjYWxsYmFjaykuIFRoZSBvYmplY3QncyBrZXkgb2YgYSBwcm9wZXJ0eVxuICogc2VydmVzIGFzIHRoZSBuYW1lIG9mIHRoZSB0YXNrIGRlZmluZWQgYnkgdGhhdCBwcm9wZXJ0eSwgaS5lLiBjYW4gYmUgdXNlZFxuICogd2hlbiBzcGVjaWZ5aW5nIHJlcXVpcmVtZW50cyBmb3Igb3RoZXIgdGFza3MuXG4gKiAqIFRoZSBgY2FsbGJhY2tgIHBhcmFtZXRlciBpcyBhIGBjYWxsYmFjayhlcnIsIHJlc3VsdClgIHdoaWNoIG11c3QgYmUgY2FsbGVkXG4gKiAgIHdoZW4gZmluaXNoZWQsIHBhc3NpbmcgYW4gYGVycm9yYCAod2hpY2ggY2FuIGJlIGBudWxsYCkgYW5kIHRoZSByZXN1bHQgb2ZcbiAqICAgdGhlIGZ1bmN0aW9uJ3MgZXhlY3V0aW9uLiBUaGUgcmVtYWluaW5nIHBhcmFtZXRlcnMgbmFtZSBvdGhlciB0YXNrcyBvblxuICogICB3aGljaCB0aGUgdGFzayBpcyBkZXBlbmRlbnQsIGFuZCB0aGUgcmVzdWx0cyBmcm9tIHRob3NlIHRhc2tzIGFyZSB0aGVcbiAqICAgYXJndW1lbnRzIG9mIHRob3NlIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQW4gb3B0aW9uYWwgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYWxsXG4gKiB0aGUgdGFza3MgaGF2ZSBiZWVuIGNvbXBsZXRlZC4gSXQgcmVjZWl2ZXMgdGhlIGBlcnJgIGFyZ3VtZW50IGlmIGFueSBgdGFza3NgXG4gKiBwYXNzIGFuIGVycm9yIHRvIHRoZWlyIGNhbGxiYWNrLCBhbmQgYSBgcmVzdWx0c2Agb2JqZWN0IHdpdGggYW55IGNvbXBsZXRlZFxuICogdGFzayByZXN1bHRzLCBzaW1pbGFyIHRvIGBhdXRvYC5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gIFRoZSBleGFtcGxlIGZyb20gYGF1dG9gIGNhbiBiZSByZXdyaXR0ZW4gYXMgZm9sbG93czpcbiAqIGFzeW5jLmF1dG9JbmplY3Qoe1xuICogICAgIGdldF9kYXRhOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICAvLyBhc3luYyBjb2RlIHRvIGdldCBzb21lIGRhdGFcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ2RhdGEnLCAnY29udmVydGVkIHRvIGFycmF5Jyk7XG4gKiAgICAgfSxcbiAqICAgICBtYWtlX2ZvbGRlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gYXN5bmMgY29kZSB0byBjcmVhdGUgYSBkaXJlY3RvcnkgdG8gc3RvcmUgYSBmaWxlIGluXG4gKiAgICAgICAgIC8vIHRoaXMgaXMgcnVuIGF0IHRoZSBzYW1lIHRpbWUgYXMgZ2V0dGluZyB0aGUgZGF0YVxuICogICAgICAgICBjYWxsYmFjayhudWxsLCAnZm9sZGVyJyk7XG4gKiAgICAgfSxcbiAqICAgICB3cml0ZV9maWxlOiBmdW5jdGlvbihnZXRfZGF0YSwgbWFrZV9mb2xkZXIsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIG9uY2UgdGhlcmUgaXMgc29tZSBkYXRhIGFuZCB0aGUgZGlyZWN0b3J5IGV4aXN0cyxcbiAqICAgICAgICAgLy8gd3JpdGUgdGhlIGRhdGEgdG8gYSBmaWxlIGluIHRoZSBkaXJlY3RvcnlcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ2ZpbGVuYW1lJyk7XG4gKiAgICAgfSxcbiAqICAgICBlbWFpbF9saW5rOiBmdW5jdGlvbih3cml0ZV9maWxlLCBjYWxsYmFjaykge1xuICogICAgICAgICAvLyBvbmNlIHRoZSBmaWxlIGlzIHdyaXR0ZW4gbGV0J3MgZW1haWwgYSBsaW5rIHRvIGl0Li4uXG4gKiAgICAgICAgIC8vIHdyaXRlX2ZpbGUgY29udGFpbnMgdGhlIGZpbGVuYW1lIHJldHVybmVkIGJ5IHdyaXRlX2ZpbGUuXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsIHsnZmlsZSc6d3JpdGVfZmlsZSwgJ2VtYWlsJzondXNlckBleGFtcGxlLmNvbSd9KTtcbiAqICAgICB9XG4gKiB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICBjb25zb2xlLmxvZygnZXJyID0gJywgZXJyKTtcbiAqICAgICBjb25zb2xlLmxvZygnZW1haWxfbGluayA9ICcsIHJlc3VsdHMuZW1haWxfbGluayk7XG4gKiB9KTtcbiAqXG4gKiAvLyBJZiB5b3UgYXJlIHVzaW5nIGEgSlMgbWluaWZpZXIgdGhhdCBtYW5nbGVzIHBhcmFtZXRlciBuYW1lcywgYGF1dG9JbmplY3RgXG4gKiAvLyB3aWxsIG5vdCB3b3JrIHdpdGggcGxhaW4gZnVuY3Rpb25zLCBzaW5jZSB0aGUgcGFyYW1ldGVyIG5hbWVzIHdpbGwgYmVcbiAqIC8vIGNvbGxhcHNlZCB0byBhIHNpbmdsZSBsZXR0ZXIgaWRlbnRpZmllci4gIFRvIHdvcmsgYXJvdW5kIHRoaXMsIHlvdSBjYW5cbiAqIC8vIGV4cGxpY2l0bHkgc3BlY2lmeSB0aGUgbmFtZXMgb2YgdGhlIHBhcmFtZXRlcnMgeW91ciB0YXNrIGZ1bmN0aW9uIG5lZWRzXG4gKiAvLyBpbiBhbiBhcnJheSwgc2ltaWxhciB0byBBbmd1bGFyLmpzIGRlcGVuZGVuY3kgaW5qZWN0aW9uLlxuICpcbiAqIC8vIFRoaXMgc3RpbGwgaGFzIGFuIGFkdmFudGFnZSBvdmVyIHBsYWluIGBhdXRvYCwgc2luY2UgdGhlIHJlc3VsdHMgYSB0YXNrXG4gKiAvLyBkZXBlbmRzIG9uIGFyZSBzdGlsbCBzcHJlYWQgaW50byBhcmd1bWVudHMuXG4gKiBhc3luYy5hdXRvSW5qZWN0KHtcbiAqICAgICAvLy4uLlxuICogICAgIHdyaXRlX2ZpbGU6IFsnZ2V0X2RhdGEnLCAnbWFrZV9mb2xkZXInLCBmdW5jdGlvbihnZXRfZGF0YSwgbWFrZV9mb2xkZXIsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICdmaWxlbmFtZScpO1xuICogICAgIH1dLFxuICogICAgIGVtYWlsX2xpbms6IFsnd3JpdGVfZmlsZScsIGZ1bmN0aW9uKHdyaXRlX2ZpbGUsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsIHsnZmlsZSc6d3JpdGVfZmlsZSwgJ2VtYWlsJzondXNlckBleGFtcGxlLmNvbSd9KTtcbiAqICAgICB9XVxuICogICAgIC8vLi4uXG4gKiB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICBjb25zb2xlLmxvZygnZXJyID0gJywgZXJyKTtcbiAqICAgICBjb25zb2xlLmxvZygnZW1haWxfbGluayA9ICcsIHJlc3VsdHMuZW1haWxfbGluayk7XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gYXV0b0luamVjdCh0YXNrcywgY2FsbGJhY2spIHtcbiAgICB2YXIgbmV3VGFza3MgPSB7fTtcblxuICAgIGJhc2VGb3JPd24odGFza3MsIGZ1bmN0aW9uICh0YXNrRm4sIGtleSkge1xuICAgICAgICB2YXIgcGFyYW1zO1xuICAgICAgICB2YXIgZm5Jc0FzeW5jID0gaXNBc3luYyh0YXNrRm4pO1xuICAgICAgICB2YXIgaGFzTm9EZXBzID1cbiAgICAgICAgICAgICghZm5Jc0FzeW5jICYmIHRhc2tGbi5sZW5ndGggPT09IDEpIHx8XG4gICAgICAgICAgICAoZm5Jc0FzeW5jICYmIHRhc2tGbi5sZW5ndGggPT09IDApO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHRhc2tGbikpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHRhc2tGbi5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICB0YXNrRm4gPSB0YXNrRm5bdGFza0ZuLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICBuZXdUYXNrc1trZXldID0gcGFyYW1zLmNvbmNhdChwYXJhbXMubGVuZ3RoID4gMCA/IG5ld1Rhc2sgOiB0YXNrRm4pO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc05vRGVwcykge1xuICAgICAgICAgICAgLy8gbm8gZGVwZW5kZW5jaWVzLCB1c2UgdGhlIGZ1bmN0aW9uIGFzLWlzXG4gICAgICAgICAgICBuZXdUYXNrc1trZXldID0gdGFza0ZuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyYW1zID0gcGFyc2VQYXJhbXModGFza0ZuKTtcbiAgICAgICAgICAgIGlmICh0YXNrRm4ubGVuZ3RoID09PSAwICYmICFmbklzQXN5bmMgJiYgcGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dG9JbmplY3QgdGFzayBmdW5jdGlvbnMgcmVxdWlyZSBleHBsaWNpdCBwYXJhbWV0ZXJzLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGNhbGxiYWNrIHBhcmFtXG4gICAgICAgICAgICBpZiAoIWZuSXNBc3luYykgcGFyYW1zLnBvcCgpO1xuXG4gICAgICAgICAgICBuZXdUYXNrc1trZXldID0gcGFyYW1zLmNvbmNhdChuZXdUYXNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5ld1Rhc2socmVzdWx0cywgdGFza0NiKSB7XG4gICAgICAgICAgICB2YXIgbmV3QXJncyA9IGFycmF5TWFwKHBhcmFtcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0c1tuYW1lXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3QXJncy5wdXNoKHRhc2tDYik7XG4gICAgICAgICAgICB3cmFwQXN5bmModGFza0ZuKS5hcHBseShudWxsLCBuZXdBcmdzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXV0byhuZXdUYXNrcywgY2FsbGJhY2spO1xufVxuXG4vLyBTaW1wbGUgZG91Ymx5IGxpbmtlZCBsaXN0IChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Eb3VibHlfbGlua2VkX2xpc3QpIGltcGxlbWVudGF0aW9uXG4vLyB1c2VkIGZvciBxdWV1ZXMuIFRoaXMgaW1wbGVtZW50YXRpb24gYXNzdW1lcyB0aGF0IHRoZSBub2RlIHByb3ZpZGVkIGJ5IHRoZSB1c2VyIGNhbiBiZSBtb2RpZmllZFxuLy8gdG8gYWRqdXN0IHRoZSBuZXh0IGFuZCBsYXN0IHByb3BlcnRpZXMuIFdlIGltcGxlbWVudCBvbmx5IHRoZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHlcbi8vIGZvciBxdWV1ZSBzdXBwb3J0LlxuZnVuY3Rpb24gRExMKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBzZXRJbml0aWFsKGRsbCwgbm9kZSkge1xuICAgIGRsbC5sZW5ndGggPSAxO1xuICAgIGRsbC5oZWFkID0gZGxsLnRhaWwgPSBub2RlO1xufVxuXG5ETEwucHJvdG90eXBlLnJlbW92ZUxpbmsgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUucHJldikgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgZWxzZSB0aGlzLmhlYWQgPSBub2RlLm5leHQ7XG4gICAgaWYgKG5vZGUubmV4dCkgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgZWxzZSB0aGlzLnRhaWwgPSBub2RlLnByZXY7XG5cbiAgICBub2RlLnByZXYgPSBub2RlLm5leHQgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoIC09IDE7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5ETEwucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlKHRoaXMuaGVhZCkgdGhpcy5zaGlmdCgpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuRExMLnByb3RvdHlwZS5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uKG5vZGUsIG5ld05vZGUpIHtcbiAgICBuZXdOb2RlLnByZXYgPSBub2RlO1xuICAgIG5ld05vZGUubmV4dCA9IG5vZGUubmV4dDtcbiAgICBpZiAobm9kZS5uZXh0KSBub2RlLm5leHQucHJldiA9IG5ld05vZGU7XG4gICAgZWxzZSB0aGlzLnRhaWwgPSBuZXdOb2RlO1xuICAgIG5vZGUubmV4dCA9IG5ld05vZGU7XG4gICAgdGhpcy5sZW5ndGggKz0gMTtcbn07XG5cbkRMTC5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24obm9kZSwgbmV3Tm9kZSkge1xuICAgIG5ld05vZGUucHJldiA9IG5vZGUucHJldjtcbiAgICBuZXdOb2RlLm5leHQgPSBub2RlO1xuICAgIGlmIChub2RlLnByZXYpIG5vZGUucHJldi5uZXh0ID0gbmV3Tm9kZTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IG5ld05vZGU7XG4gICAgbm9kZS5wcmV2ID0gbmV3Tm9kZTtcbiAgICB0aGlzLmxlbmd0aCArPSAxO1xufTtcblxuRExMLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICh0aGlzLmhlYWQpIHRoaXMuaW5zZXJ0QmVmb3JlKHRoaXMuaGVhZCwgbm9kZSk7XG4gICAgZWxzZSBzZXRJbml0aWFsKHRoaXMsIG5vZGUpO1xufTtcblxuRExMLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICh0aGlzLnRhaWwpIHRoaXMuaW5zZXJ0QWZ0ZXIodGhpcy50YWlsLCBub2RlKTtcbiAgICBlbHNlIHNldEluaXRpYWwodGhpcywgbm9kZSk7XG59O1xuXG5ETEwucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZCAmJiB0aGlzLnJlbW92ZUxpbmsodGhpcy5oZWFkKTtcbn07XG5cbkRMTC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGFpbCAmJiB0aGlzLnJlbW92ZUxpbmsodGhpcy50YWlsKTtcbn07XG5cbkRMTC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyID0gQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIHZhciBjdXJyID0gdGhpcy5oZWFkO1xuICAgIGZvcih2YXIgaWR4ID0gMDsgaWR4IDwgdGhpcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGFycltpZHhdID0gY3Vyci5kYXRhO1xuICAgICAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufTtcblxuRExMLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVzdEZuKSB7XG4gICAgdmFyIGN1cnIgPSB0aGlzLmhlYWQ7XG4gICAgd2hpbGUoISFjdXJyKSB7XG4gICAgICAgIHZhciBuZXh0ID0gY3Vyci5uZXh0O1xuICAgICAgICBpZiAodGVzdEZuKGN1cnIpKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpbmsoY3Vycik7XG4gICAgICAgIH1cbiAgICAgICAgY3VyciA9IG5leHQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcXVldWUod29ya2VyLCBjb25jdXJyZW5jeSwgcGF5bG9hZCkge1xuICAgIGlmIChjb25jdXJyZW5jeSA9PSBudWxsKSB7XG4gICAgICAgIGNvbmN1cnJlbmN5ID0gMTtcbiAgICB9XG4gICAgZWxzZSBpZihjb25jdXJyZW5jeSA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmN1cnJlbmN5IG11c3Qgbm90IGJlIHplcm8nKTtcbiAgICB9XG5cbiAgICB2YXIgX3dvcmtlciA9IHdyYXBBc3luYyh3b3JrZXIpO1xuICAgIHZhciBudW1SdW5uaW5nID0gMDtcbiAgICB2YXIgd29ya2Vyc0xpc3QgPSBbXTtcblxuICAgIHZhciBwcm9jZXNzaW5nU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gX2luc2VydChkYXRhLCBpbnNlcnRBdEZyb250LCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndGFzayBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBxLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBbZGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwICYmIHEuaWRsZSgpKSB7XG4gICAgICAgICAgICAvLyBjYWxsIGRyYWluIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGFyZSBubyB0YXNrc1xuICAgICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZSQxKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHEuZHJhaW4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YVtpXSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2sgfHwgbm9vcFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGluc2VydEF0RnJvbnQpIHtcbiAgICAgICAgICAgICAgICBxLl90YXNrcy51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBxLl90YXNrcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcm9jZXNzaW5nU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICBwcm9jZXNzaW5nU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZSQxKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NpbmdTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBxLnByb2Nlc3MoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX25leHQodGFza3MpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICBudW1SdW5uaW5nIC09IDE7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGFza3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc1tpXTtcblxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGJhc2VJbmRleE9mKHdvcmtlcnNMaXN0LCB0YXNrLCAwKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgd29ya2Vyc0xpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3b3JrZXJzTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhc2suY2FsbGJhY2suYXBwbHkodGFzaywgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBxLmVycm9yKGVyciwgdGFzay5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChudW1SdW5uaW5nIDw9IChxLmNvbmN1cnJlbmN5IC0gcS5idWZmZXIpICkge1xuICAgICAgICAgICAgICAgIHEudW5zYXR1cmF0ZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHEuaWRsZSgpKSB7XG4gICAgICAgICAgICAgICAgcS5kcmFpbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcS5wcm9jZXNzKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHZhciBxID0ge1xuICAgICAgICBfdGFza3M6IG5ldyBETEwoKSxcbiAgICAgICAgY29uY3VycmVuY3k6IGNvbmN1cnJlbmN5LFxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICBzYXR1cmF0ZWQ6IG5vb3AsXG4gICAgICAgIHVuc2F0dXJhdGVkOm5vb3AsXG4gICAgICAgIGJ1ZmZlcjogY29uY3VycmVuY3kgLyA0LFxuICAgICAgICBlbXB0eTogbm9vcCxcbiAgICAgICAgZHJhaW46IG5vb3AsXG4gICAgICAgIGVycm9yOiBub29wLFxuICAgICAgICBzdGFydGVkOiBmYWxzZSxcbiAgICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgICAgcHVzaDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfaW5zZXJ0KGRhdGEsIGZhbHNlLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIGtpbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHEuZHJhaW4gPSBub29wO1xuICAgICAgICAgICAgcS5fdGFza3MuZW1wdHkoKTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zaGlmdDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfaW5zZXJ0KGRhdGEsIHRydWUsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAodGVzdEZuKSB7XG4gICAgICAgICAgICBxLl90YXNrcy5yZW1vdmUodGVzdEZuKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQXZvaWQgdHJ5aW5nIHRvIHN0YXJ0IHRvbyBtYW55IHByb2Nlc3Npbmcgb3BlcmF0aW9ucy4gVGhpcyBjYW4gb2NjdXJcbiAgICAgICAgICAgIC8vIHdoZW4gY2FsbGJhY2tzIHJlc29sdmUgc3luY2hyb25vdXNseSAoIzEyNjcpLlxuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2luZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSghcS5wYXVzZWQgJiYgbnVtUnVubmluZyA8IHEuY29uY3VycmVuY3kgJiYgcS5fdGFza3MubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICB2YXIgdGFza3MgPSBbXSwgZGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBsID0gcS5fdGFza3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChxLnBheWxvYWQpIGwgPSBNYXRoLm1pbihsLCBxLnBheWxvYWQpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gcS5fdGFza3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGFza3MucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2Vyc0xpc3QucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKG5vZGUuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbnVtUnVubmluZyArPSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKHEuX3Rhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBxLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG51bVJ1bm5pbmcgPT09IHEuY29uY3VycmVuY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgcS5zYXR1cmF0ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgY2IgPSBvbmx5T25jZShfbmV4dCh0YXNrcykpO1xuICAgICAgICAgICAgICAgIF93b3JrZXIoZGF0YSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHEuX3Rhc2tzLmxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgcnVubmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bVJ1bm5pbmc7XG4gICAgICAgIH0sXG4gICAgICAgIHdvcmtlcnNMaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2Vyc0xpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGlkbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHEuX3Rhc2tzLmxlbmd0aCArIG51bVJ1bm5pbmcgPT09IDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBhdXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBxLnBhdXNlZCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHEucGF1c2VkID09PSBmYWxzZSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUkMShxLnByb2Nlc3MpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcTtcbn1cblxuLyoqXG4gKiBBIGNhcmdvIG9mIHRhc2tzIGZvciB0aGUgd29ya2VyIGZ1bmN0aW9uIHRvIGNvbXBsZXRlLiBDYXJnbyBpbmhlcml0cyBhbGwgb2ZcbiAqIHRoZSBzYW1lIG1ldGhvZHMgYW5kIGV2ZW50IGNhbGxiYWNrcyBhcyBbYHF1ZXVlYF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnF1ZXVlfS5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IENhcmdvT2JqZWN0XG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBsZW5ndGggLSBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgbnVtYmVyIG9mIGl0ZW1zXG4gKiB3YWl0aW5nIHRvIGJlIHByb2Nlc3NlZC4gSW52b2tlIGxpa2UgYGNhcmdvLmxlbmd0aCgpYC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwYXlsb2FkIC0gQW4gYGludGVnZXJgIGZvciBkZXRlcm1pbmluZyBob3cgbWFueSB0YXNrc1xuICogc2hvdWxkIGJlIHByb2Nlc3MgcGVyIHJvdW5kLiBUaGlzIHByb3BlcnR5IGNhbiBiZSBjaGFuZ2VkIGFmdGVyIGEgYGNhcmdvYCBpc1xuICogY3JlYXRlZCB0byBhbHRlciB0aGUgcGF5bG9hZCBvbi10aGUtZmx5LlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gcHVzaCAtIEFkZHMgYHRhc2tgIHRvIHRoZSBgcXVldWVgLiBUaGUgY2FsbGJhY2sgaXNcbiAqIGNhbGxlZCBvbmNlIHRoZSBgd29ya2VyYCBoYXMgZmluaXNoZWQgcHJvY2Vzc2luZyB0aGUgdGFzay4gSW5zdGVhZCBvZiBhXG4gKiBzaW5nbGUgdGFzaywgYW4gYXJyYXkgb2YgYHRhc2tzYCBjYW4gYmUgc3VibWl0dGVkLiBUaGUgcmVzcGVjdGl2ZSBjYWxsYmFjayBpc1xuICogdXNlZCBmb3IgZXZlcnkgdGFzayBpbiB0aGUgbGlzdC4gSW52b2tlIGxpa2UgYGNhcmdvLnB1c2godGFzaywgW2NhbGxiYWNrXSlgLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc2F0dXJhdGVkIC0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZVxuICogYHF1ZXVlLmxlbmd0aCgpYCBoaXRzIHRoZSBjb25jdXJyZW5jeSBhbmQgZnVydGhlciB0YXNrcyB3aWxsIGJlIHF1ZXVlZC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGVtcHR5IC0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBsYXN0IGl0ZW1cbiAqIGZyb20gdGhlIGBxdWV1ZWAgaXMgZ2l2ZW4gdG8gYSBgd29ya2VyYC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRyYWluIC0gQSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBsYXN0IGl0ZW1cbiAqIGZyb20gdGhlIGBxdWV1ZWAgaGFzIHJldHVybmVkIGZyb20gdGhlIGB3b3JrZXJgLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gaWRsZSAtIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGZhbHNlIGlmIHRoZXJlIGFyZSBpdGVtc1xuICogd2FpdGluZyBvciBiZWluZyBwcm9jZXNzZWQsIG9yIHRydWUgaWYgbm90LiBJbnZva2UgbGlrZSBgY2FyZ28uaWRsZSgpYC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHBhdXNlIC0gYSBmdW5jdGlvbiB0aGF0IHBhdXNlcyB0aGUgcHJvY2Vzc2luZyBvZiB0YXNrc1xuICogdW50aWwgYHJlc3VtZSgpYCBpcyBjYWxsZWQuIEludm9rZSBsaWtlIGBjYXJnby5wYXVzZSgpYC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHJlc3VtZSAtIGEgZnVuY3Rpb24gdGhhdCByZXN1bWVzIHRoZSBwcm9jZXNzaW5nIG9mXG4gKiBxdWV1ZWQgdGFza3Mgd2hlbiB0aGUgcXVldWUgaXMgcGF1c2VkLiBJbnZva2UgbGlrZSBgY2FyZ28ucmVzdW1lKClgLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0ga2lsbCAtIGEgZnVuY3Rpb24gdGhhdCByZW1vdmVzIHRoZSBgZHJhaW5gIGNhbGxiYWNrIGFuZFxuICogZW1wdGllcyByZW1haW5pbmcgdGFza3MgZnJvbSB0aGUgcXVldWUgZm9yY2luZyBpdCB0byBnbyBpZGxlLiBJbnZva2UgbGlrZSBgY2FyZ28ua2lsbCgpYC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgY2FyZ29gIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgcGF5bG9hZC4gVGFza3MgYWRkZWQgdG8gdGhlXG4gKiBjYXJnbyB3aWxsIGJlIHByb2Nlc3NlZCBhbHRvZ2V0aGVyICh1cCB0byB0aGUgYHBheWxvYWRgIGxpbWl0KS4gSWYgdGhlXG4gKiBgd29ya2VyYCBpcyBpbiBwcm9ncmVzcywgdGhlIHRhc2sgaXMgcXVldWVkIHVudGlsIGl0IGJlY29tZXMgYXZhaWxhYmxlLiBPbmNlXG4gKiB0aGUgYHdvcmtlcmAgaGFzIGNvbXBsZXRlZCBzb21lIHRhc2tzLCBlYWNoIGNhbGxiYWNrIG9mIHRob3NlIHRhc2tzIGlzXG4gKiBjYWxsZWQuIENoZWNrIG91dCBbdGhlc2VdKGh0dHBzOi8vY2Ftby5naXRodWJ1c2VyY29udGVudC5jb20vNmJiZDM2ZjRjZjViMzVhMGYxMWE5NmRjZDJlOTc3MTFmZmMyZmIzNy82ODc0NzQ3MDczM2EyZjJmNjYyZTYzNmM2Zjc1NjQyZTY3Njk3NDY4NzU2MjJlNjM2ZjZkMmY2MTczNzM2NTc0NzMyZjMxMzYzNzM2MzgzNzMxMmYzNjM4MzEzMDM4MmY2MjYyNjMzMDYzNjY2MjMwMmQzNTY2MzIzOTJkMzEzMTY1MzIyZDM5MzczNDY2MmQzMzMzMzkzNzYzMzYzNDY0NjMzODM1MzgyZTY3Njk2NikgW2FuaW1hdGlvbnNdKGh0dHBzOi8vY2Ftby5naXRodWJ1c2VyY29udGVudC5jb20vZjQ4MTBlMDBlMWM1ZjVmOGFkZGJlM2U5ZjQ5MDY0ZmQ1ZDEwMjY5OS82ODc0NzQ3MDczM2EyZjJmNjYyZTYzNmM2Zjc1NjQyZTY3Njk3NDY4NzU2MjJlNjM2ZjZkMmY2MTczNzM2NTc0NzMyZjMxMzYzNzM2MzgzNzMxMmYzNjM4MzEzMDMxMmYzODM0NjMzOTMyMzAzNjM2MmQzNTY2MzIzOTJkMzEzMTY1MzIyZDM4MzEzNDY2MmQzOTY0MzM2NDMwMzIzNDMxMzM2MjY2NjQyZTY3Njk2NilcbiAqIGZvciBob3cgYGNhcmdvYCBhbmQgYHF1ZXVlYCB3b3JrLlxuICpcbiAqIFdoaWxlIFtgcXVldWVgXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cucXVldWV9IHBhc3NlcyBvbmx5IG9uZSB0YXNrIHRvIG9uZSBvZiBhIGdyb3VwIG9mIHdvcmtlcnNcbiAqIGF0IGEgdGltZSwgY2FyZ28gcGFzc2VzIGFuIGFycmF5IG9mIHRhc2tzIHRvIGEgc2luZ2xlIHdvcmtlciwgcmVwZWF0aW5nXG4gKiB3aGVuIHRoZSB3b3JrZXIgaXMgZmluaXNoZWQuXG4gKlxuICogQG5hbWUgY2FyZ29cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLnF1ZXVlXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cucXVldWV9XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IHdvcmtlciAtIEFuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiBmb3IgcHJvY2Vzc2luZyBhbiBhcnJheVxuICogb2YgcXVldWVkIHRhc2tzLiBJbnZva2VkIHdpdGggYCh0YXNrcywgY2FsbGJhY2spYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbcGF5bG9hZD1JbmZpbml0eV0gLSBBbiBvcHRpb25hbCBgaW50ZWdlcmAgZm9yIGRldGVybWluaW5nXG4gKiBob3cgbWFueSB0YXNrcyBzaG91bGQgYmUgcHJvY2Vzc2VkIHBlciByb3VuZDsgaWYgb21pdHRlZCwgdGhlIGRlZmF1bHQgaXNcbiAqIHVubGltaXRlZC5cbiAqIEByZXR1cm5zIHttb2R1bGU6Q29udHJvbEZsb3cuQ2FyZ29PYmplY3R9IEEgY2FyZ28gb2JqZWN0IHRvIG1hbmFnZSB0aGUgdGFza3MuIENhbGxiYWNrcyBjYW5cbiAqIGF0dGFjaGVkIGFzIGNlcnRhaW4gcHJvcGVydGllcyB0byBsaXN0ZW4gZm9yIHNwZWNpZmljIGV2ZW50cyBkdXJpbmcgdGhlXG4gKiBsaWZlY3ljbGUgb2YgdGhlIGNhcmdvIGFuZCBpbm5lciBxdWV1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gY3JlYXRlIGEgY2FyZ28gb2JqZWN0IHdpdGggcGF5bG9hZCAyXG4gKiB2YXIgY2FyZ28gPSBhc3luYy5jYXJnbyhmdW5jdGlvbih0YXNrcywgY2FsbGJhY2spIHtcbiAqICAgICBmb3IgKHZhciBpPTA7IGk8dGFza3MubGVuZ3RoOyBpKyspIHtcbiAqICAgICAgICAgY29uc29sZS5sb2coJ2hlbGxvICcgKyB0YXNrc1tpXS5uYW1lKTtcbiAqICAgICB9XG4gKiAgICAgY2FsbGJhY2soKTtcbiAqIH0sIDIpO1xuICpcbiAqIC8vIGFkZCBzb21lIGl0ZW1zXG4gKiBjYXJnby5wdXNoKHtuYW1lOiAnZm9vJ30sIGZ1bmN0aW9uKGVycikge1xuICogICAgIGNvbnNvbGUubG9nKCdmaW5pc2hlZCBwcm9jZXNzaW5nIGZvbycpO1xuICogfSk7XG4gKiBjYXJnby5wdXNoKHtuYW1lOiAnYmFyJ30sIGZ1bmN0aW9uKGVycikge1xuICogICAgIGNvbnNvbGUubG9nKCdmaW5pc2hlZCBwcm9jZXNzaW5nIGJhcicpO1xuICogfSk7XG4gKiBjYXJnby5wdXNoKHtuYW1lOiAnYmF6J30sIGZ1bmN0aW9uKGVycikge1xuICogICAgIGNvbnNvbGUubG9nKCdmaW5pc2hlZCBwcm9jZXNzaW5nIGJheicpO1xuICogfSk7XG4gKi9cbmZ1bmN0aW9uIGNhcmdvKHdvcmtlciwgcGF5bG9hZCkge1xuICAgIHJldHVybiBxdWV1ZSh3b3JrZXIsIDEsIHBheWxvYWQpO1xufVxuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgZWFjaE9mYF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2hPZn0gYnV0IHJ1bnMgb25seSBhIHNpbmdsZSBhc3luYyBvcGVyYXRpb24gYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIGVhY2hPZlNlcmllc1xuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZWFjaE9mXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZWFjaE9mfVxuICogQGFsaWFzIGZvckVhY2hPZlNlcmllc1xuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGwgYGl0ZXJhdGVlYFxuICogZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICovXG52YXIgZWFjaE9mU2VyaWVzID0gZG9MaW1pdChlYWNoT2ZMaW1pdCwgMSk7XG5cbi8qKlxuICogUmVkdWNlcyBgY29sbGAgaW50byBhIHNpbmdsZSB2YWx1ZSB1c2luZyBhbiBhc3luYyBgaXRlcmF0ZWVgIHRvIHJldHVybiBlYWNoXG4gKiBzdWNjZXNzaXZlIHN0ZXAuIGBtZW1vYCBpcyB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgcmVkdWN0aW9uLiBUaGlzIGZ1bmN0aW9uXG4gKiBvbmx5IG9wZXJhdGVzIGluIHNlcmllcy5cbiAqXG4gKiBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgaXQgbWF5IG1ha2Ugc2Vuc2UgdG8gc3BsaXQgYSBjYWxsIHRvIHRoaXMgZnVuY3Rpb25cbiAqIGludG8gYSBwYXJhbGxlbCBtYXAsIGFuZCB0aGVuIHVzZSB0aGUgbm9ybWFsIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBvbiB0aGVcbiAqIHJlc3VsdHMuIFRoaXMgZnVuY3Rpb24gaXMgZm9yIHNpdHVhdGlvbnMgd2hlcmUgZWFjaCBzdGVwIGluIHRoZSByZWR1Y3Rpb25cbiAqIG5lZWRzIHRvIGJlIGFzeW5jOyBpZiB5b3UgY2FuIGdldCB0aGUgZGF0YSBiZWZvcmUgcmVkdWNpbmcgaXQsIHRoZW4gaXQnc1xuICogcHJvYmFibHkgYSBnb29kIGlkZWEgdG8gZG8gc28uXG4gKlxuICogQG5hbWUgcmVkdWNlXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgaW5qZWN0XG4gKiBAYWxpYXMgZm9sZGxcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0geyp9IG1lbW8gLSBUaGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgcmVkdWN0aW9uLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgZnVuY3Rpb24gYXBwbGllZCB0byBlYWNoIGl0ZW0gaW4gdGhlXG4gKiBhcnJheSB0byBwcm9kdWNlIHRoZSBuZXh0IHN0ZXAgaW4gdGhlIHJlZHVjdGlvbi5cbiAqIFRoZSBgaXRlcmF0ZWVgIHNob3VsZCBjb21wbGV0ZSB3aXRoIHRoZSBuZXh0IHN0YXRlIG9mIHRoZSByZWR1Y3Rpb24uXG4gKiBJZiB0aGUgaXRlcmF0ZWUgY29tcGxldGUgd2l0aCBhbiBlcnJvciwgdGhlIHJlZHVjdGlvbiBpcyBzdG9wcGVkIGFuZCB0aGVcbiAqIG1haW4gYGNhbGxiYWNrYCBpcyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGUgZXJyb3IuXG4gKiBJbnZva2VkIHdpdGggKG1lbW8sIGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLiBSZXN1bHQgaXMgdGhlIHJlZHVjZWQgdmFsdWUuIEludm9rZWQgd2l0aFxuICogKGVyciwgcmVzdWx0KS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMucmVkdWNlKFsxLDIsM10sIDAsIGZ1bmN0aW9uKG1lbW8sIGl0ZW0sIGNhbGxiYWNrKSB7XG4gKiAgICAgLy8gcG9pbnRsZXNzIGFzeW5jOlxuICogICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1lbW8gKyBpdGVtKVxuICogICAgIH0pO1xuICogfSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgaXMgbm93IGVxdWFsIHRvIHRoZSBsYXN0IHZhbHVlIG9mIG1lbW8sIHdoaWNoIGlzIDZcbiAqIH0pO1xuICovXG5mdW5jdGlvbiByZWR1Y2UoY29sbCwgbWVtbywgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuICAgIHZhciBfaXRlcmF0ZWUgPSB3cmFwQXN5bmMoaXRlcmF0ZWUpO1xuICAgIGVhY2hPZlNlcmllcyhjb2xsLCBmdW5jdGlvbih4LCBpLCBjYWxsYmFjaykge1xuICAgICAgICBfaXRlcmF0ZWUobWVtbywgeCwgZnVuY3Rpb24oZXJyLCB2KSB7XG4gICAgICAgICAgICBtZW1vID0gdjtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIG1lbW8pO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFZlcnNpb24gb2YgdGhlIGNvbXBvc2UgZnVuY3Rpb24gdGhhdCBpcyBtb3JlIG5hdHVyYWwgdG8gcmVhZC4gRWFjaCBmdW5jdGlvblxuICogY29uc3VtZXMgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgZnVuY3Rpb24uIEl0IGlzIHRoZSBlcXVpdmFsZW50IG9mXG4gKiBbY29tcG9zZV17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LmNvbXBvc2V9IHdpdGggdGhlIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAqXG4gKiBFYWNoIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjb21wb3NlZCBmdW5jdGlvbi5cbiAqXG4gKiBAbmFtZSBzZXFcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmNvbXBvc2Vde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy5jb21wb3NlfVxuICogQGNhdGVnb3J5IENvbnRyb2wgRmxvd1xuICogQHBhcmFtIHsuLi5Bc3luY0Z1bmN0aW9ufSBmdW5jdGlvbnMgLSB0aGUgYXN5bmNocm9ub3VzIGZ1bmN0aW9ucyB0byBjb21wb3NlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgZnVuY3Rpb24gdGhhdCBjb21wb3NlcyB0aGUgYGZ1bmN0aW9uc2AgaW4gb3JkZXJcbiAqIEBleGFtcGxlXG4gKlxuICogLy8gUmVxdWlyZXMgbG9kYXNoIChvciB1bmRlcnNjb3JlKSwgZXhwcmVzczMgYW5kIGRyZXNlbmRlJ3Mgb3JtMi5cbiAqIC8vIFBhcnQgb2YgYW4gYXBwLCB0aGF0IGZldGNoZXMgY2F0cyBvZiB0aGUgbG9nZ2VkIHVzZXIuXG4gKiAvLyBUaGlzIGV4YW1wbGUgdXNlcyBgc2VxYCBmdW5jdGlvbiB0byBhdm9pZCBvdmVybmVzdGluZyBhbmQgZXJyb3JcbiAqIC8vIGhhbmRsaW5nIGNsdXR0ZXIuXG4gKiBhcHAuZ2V0KCcvY2F0cycsIGZ1bmN0aW9uKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gKiAgICAgdmFyIFVzZXIgPSByZXF1ZXN0Lm1vZGVscy5Vc2VyO1xuICogICAgIGFzeW5jLnNlcShcbiAqICAgICAgICAgXy5iaW5kKFVzZXIuZ2V0LCBVc2VyKSwgIC8vICdVc2VyLmdldCcgaGFzIHNpZ25hdHVyZSAoaWQsIGNhbGxiYWNrKGVyciwgZGF0YSkpXG4gKiAgICAgICAgIGZ1bmN0aW9uKHVzZXIsIGZuKSB7XG4gKiAgICAgICAgICAgICB1c2VyLmdldENhdHMoZm4pOyAgICAgIC8vICdnZXRDYXRzJyBoYXMgc2lnbmF0dXJlIChjYWxsYmFjayhlcnIsIGRhdGEpKVxuICogICAgICAgICB9XG4gKiAgICAgKShyZXEuc2Vzc2lvbi51c2VyX2lkLCBmdW5jdGlvbiAoZXJyLCBjYXRzKSB7XG4gKiAgICAgICAgIGlmIChlcnIpIHtcbiAqICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAqICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oeyBzdGF0dXM6ICdlcnJvcicsIG1lc3NhZ2U6IGVyci5tZXNzYWdlIH0pO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgICAgcmVzcG9uc2UuanNvbih7IHN0YXR1czogJ29rJywgbWVzc2FnZTogJ0NhdHMgZm91bmQnLCBkYXRhOiBjYXRzIH0pO1xuICogICAgICAgICB9XG4gKiAgICAgfSk7XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gc2VxKC8qLi4uZnVuY3Rpb25zKi8pIHtcbiAgICB2YXIgX2Z1bmN0aW9ucyA9IGFycmF5TWFwKGFyZ3VtZW50cywgd3JhcEFzeW5jKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oLyouLi5hcmdzKi8pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMpO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGNiID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodHlwZW9mIGNiID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFyZ3MucG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYiA9IG5vb3A7XG4gICAgICAgIH1cblxuICAgICAgICByZWR1Y2UoX2Z1bmN0aW9ucywgYXJncywgZnVuY3Rpb24obmV3YXJncywgZm4sIGNiKSB7XG4gICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBuZXdhcmdzLmNvbmNhdChmdW5jdGlvbihlcnIvKiwgLi4ubmV4dGFyZ3MqLykge1xuICAgICAgICAgICAgICAgIHZhciBuZXh0YXJncyA9IHNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICAgICAgY2IoZXJyLCBuZXh0YXJncyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgICAgICAgICAgY2IuYXBwbHkodGhhdCwgW2Vycl0uY29uY2F0KHJlc3VsdHMpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gd2hpY2ggaXMgYSBjb21wb3NpdGlvbiBvZiB0aGUgcGFzc2VkIGFzeW5jaHJvbm91c1xuICogZnVuY3Rpb25zLiBFYWNoIGZ1bmN0aW9uIGNvbnN1bWVzIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXRcbiAqIGZvbGxvd3MuIENvbXBvc2luZyBmdW5jdGlvbnMgYGYoKWAsIGBnKClgLCBhbmQgYGgoKWAgd291bGQgcHJvZHVjZSB0aGUgcmVzdWx0XG4gKiBvZiBgZihnKGgoKSkpYCwgb25seSB0aGlzIHZlcnNpb24gdXNlcyBjYWxsYmFja3MgdG8gb2J0YWluIHRoZSByZXR1cm4gdmFsdWVzLlxuICpcbiAqIEVhY2ggZnVuY3Rpb24gaXMgZXhlY3V0ZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNvbXBvc2VkIGZ1bmN0aW9uLlxuICpcbiAqIEBuYW1lIGNvbXBvc2VcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7Li4uQXN5bmNGdW5jdGlvbn0gZnVuY3Rpb25zIC0gdGhlIGFzeW5jaHJvbm91cyBmdW5jdGlvbnMgdG8gY29tcG9zZVxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zZWRcbiAqIGFzeW5jaHJvbm91cyBgZnVuY3Rpb25zYFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBhZGQxKG4sIGNhbGxiYWNrKSB7XG4gKiAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsIG4gKyAxKTtcbiAqICAgICB9LCAxMCk7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gbXVsMyhuLCBjYWxsYmFjaykge1xuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICogICAgICAgICBjYWxsYmFjayhudWxsLCBuICogMyk7XG4gKiAgICAgfSwgMTApO1xuICogfVxuICpcbiAqIHZhciBhZGQxbXVsMyA9IGFzeW5jLmNvbXBvc2UobXVsMywgYWRkMSk7XG4gKiBhZGQxbXVsMyg0LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgbm93IGVxdWFscyAxNVxuICogfSk7XG4gKi9cbnZhciBjb21wb3NlID0gZnVuY3Rpb24oLyouLi5hcmdzKi8pIHtcbiAgICByZXR1cm4gc2VxLmFwcGx5KG51bGwsIHNsaWNlKGFyZ3VtZW50cykucmV2ZXJzZSgpKTtcbn07XG5cbnZhciBfY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGNvbmNhdGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5jb25jYXR9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIGNvbmNhdExpbWl0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5jb25jYXRde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5jb25jYXR9XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluIGBjb2xsYCxcbiAqIHdoaWNoIHNob3VsZCB1c2UgYW4gYXJyYXkgYXMgaXRzIHJlc3VsdC4gSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHRzIGlzIGFuIGFycmF5XG4gKiBjb250YWluaW5nIHRoZSBjb25jYXRlbmF0ZWQgcmVzdWx0cyBvZiB0aGUgYGl0ZXJhdGVlYCBmdW5jdGlvbi4gSW52b2tlZCB3aXRoXG4gKiAoZXJyLCByZXN1bHRzKS5cbiAqL1xudmFyIGNvbmNhdExpbWl0ID0gZnVuY3Rpb24oY29sbCwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgbm9vcDtcbiAgICB2YXIgX2l0ZXJhdGVlID0gd3JhcEFzeW5jKGl0ZXJhdGVlKTtcbiAgICBtYXBMaW1pdChjb2xsLCBsaW1pdCwgZnVuY3Rpb24odmFsLCBjYWxsYmFjaykge1xuICAgICAgICBfaXRlcmF0ZWUodmFsLCBmdW5jdGlvbihlcnIgLyosIC4uLmFyZ3MqLykge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgc2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uKGVyciwgbWFwUmVzdWx0cykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwUmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1hcFJlc3VsdHNbaV0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfY29uY2F0LmFwcGx5KHJlc3VsdCwgbWFwUmVzdWx0c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCByZXN1bHQpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBBcHBsaWVzIGBpdGVyYXRlZWAgdG8gZWFjaCBpdGVtIGluIGBjb2xsYCwgY29uY2F0ZW5hdGluZyB0aGUgcmVzdWx0cy4gUmV0dXJuc1xuICogdGhlIGNvbmNhdGVuYXRlZCBsaXN0LiBUaGUgYGl0ZXJhdGVlYHMgYXJlIGNhbGxlZCBpbiBwYXJhbGxlbCwgYW5kIHRoZVxuICogcmVzdWx0cyBhcmUgY29uY2F0ZW5hdGVkIGFzIHRoZXkgcmV0dXJuLiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGVcbiAqIHJlc3VsdHMgYXJyYXkgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgb3JpZ2luYWwgb3JkZXIgb2YgYGNvbGxgIHBhc3NlZCB0byB0aGVcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb24uXG4gKlxuICogQG5hbWUgY29uY2F0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluIGBjb2xsYCxcbiAqIHdoaWNoIHNob3VsZCB1c2UgYW4gYXJyYXkgYXMgaXRzIHJlc3VsdC4gSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2soZXJyKV0gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLCBvciBhbiBlcnJvciBvY2N1cnMuIFJlc3VsdHMgaXMgYW4gYXJyYXlcbiAqIGNvbnRhaW5pbmcgdGhlIGNvbmNhdGVuYXRlZCByZXN1bHRzIG9mIHRoZSBgaXRlcmF0ZWVgIGZ1bmN0aW9uLiBJbnZva2VkIHdpdGhcbiAqIChlcnIsIHJlc3VsdHMpLlxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy5jb25jYXQoWydkaXIxJywnZGlyMicsJ2RpcjMnXSwgZnMucmVhZGRpciwgZnVuY3Rpb24oZXJyLCBmaWxlcykge1xuICogICAgIC8vIGZpbGVzIGlzIG5vdyBhIGxpc3Qgb2YgZmlsZW5hbWVzIHRoYXQgZXhpc3QgaW4gdGhlIDMgZGlyZWN0b3JpZXNcbiAqIH0pO1xuICovXG52YXIgY29uY2F0ID0gZG9MaW1pdChjb25jYXRMaW1pdCwgSW5maW5pdHkpO1xuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgY29uY2F0YF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmNvbmNhdH0gYnV0IHJ1bnMgb25seSBhIHNpbmdsZSBhc3luYyBvcGVyYXRpb24gYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIGNvbmNhdFNlcmllc1xuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuY29uY2F0XXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuY29uY2F0fVxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpbiBgY29sbGAuXG4gKiBUaGUgaXRlcmF0ZWUgc2hvdWxkIGNvbXBsZXRlIHdpdGggYW4gYXJyYXkgYW4gYXJyYXkgb2YgcmVzdWx0cy5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrKGVycildIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHRzIGlzIGFuIGFycmF5XG4gKiBjb250YWluaW5nIHRoZSBjb25jYXRlbmF0ZWQgcmVzdWx0cyBvZiB0aGUgYGl0ZXJhdGVlYCBmdW5jdGlvbi4gSW52b2tlZCB3aXRoXG4gKiAoZXJyLCByZXN1bHRzKS5cbiAqL1xudmFyIGNvbmNhdFNlcmllcyA9IGRvTGltaXQoY29uY2F0TGltaXQsIDEpO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gY2FsbGVkLCBjYWxscy1iYWNrIHdpdGggdGhlIHZhbHVlcyBwcm92aWRlZC5cbiAqIFVzZWZ1bCBhcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gYSBbYHdhdGVyZmFsbGBde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy53YXRlcmZhbGx9LCBvciBmb3IgcGx1Z2dpbmcgdmFsdWVzIGluIHRvXG4gKiBbYGF1dG9gXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cuYXV0b30uXG4gKlxuICogQG5hbWUgY29uc3RhbnRcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6VXRpbHNcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0gey4uLip9IGFyZ3VtZW50cy4uLiAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGF1dG9tYXRpY2FsbHkgaW52b2tlXG4gKiBjYWxsYmFjayB3aXRoLlxuICogQHJldHVybnMge0FzeW5jRnVuY3Rpb259IFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdoZW4gaW52b2tlZCwgYXV0b21hdGljYWxseVxuICogaW52b2tlcyB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcHJldmlvdXMgZ2l2ZW4gYXJndW1lbnRzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy53YXRlcmZhbGwoW1xuICogICAgIGFzeW5jLmNvbnN0YW50KDQyKSxcbiAqICAgICBmdW5jdGlvbiAodmFsdWUsIG5leHQpIHtcbiAqICAgICAgICAgLy8gdmFsdWUgPT09IDQyXG4gKiAgICAgfSxcbiAqICAgICAvLy4uLlxuICogXSwgY2FsbGJhY2spO1xuICpcbiAqIGFzeW5jLndhdGVyZmFsbChbXG4gKiAgICAgYXN5bmMuY29uc3RhbnQoZmlsZW5hbWUsIFwidXRmOFwiKSxcbiAqICAgICBmcy5yZWFkRmlsZSxcbiAqICAgICBmdW5jdGlvbiAoZmlsZURhdGEsIG5leHQpIHtcbiAqICAgICAgICAgLy8uLi5cbiAqICAgICB9XG4gKiAgICAgLy8uLi5cbiAqIF0sIGNhbGxiYWNrKTtcbiAqXG4gKiBhc3luYy5hdXRvKHtcbiAqICAgICBob3N0bmFtZTogYXN5bmMuY29uc3RhbnQoXCJodHRwczovL3NlcnZlci5uZXQvXCIpLFxuICogICAgIHBvcnQ6IGZpbmRGcmVlUG9ydCxcbiAqICAgICBsYXVuY2hTZXJ2ZXI6IFtcImhvc3RuYW1lXCIsIFwicG9ydFwiLCBmdW5jdGlvbiAob3B0aW9ucywgY2IpIHtcbiAqICAgICAgICAgc3RhcnRTZXJ2ZXIob3B0aW9ucywgY2IpO1xuICogICAgIH1dLFxuICogICAgIC8vLi4uXG4gKiB9LCBjYWxsYmFjayk7XG4gKi9cbnZhciBjb25zdGFudCA9IGZ1bmN0aW9uKC8qLi4udmFsdWVzKi8pIHtcbiAgICB2YXIgdmFsdWVzID0gc2xpY2UoYXJndW1lbnRzKTtcbiAgICB2YXIgYXJncyA9IFtudWxsXS5jb25jYXQodmFsdWVzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKC8qLi4uaWdub3JlZEFyZ3MsIGNhbGxiYWNrKi8pIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlVGVzdGVyKGNoZWNrLCBnZXRSZXN1bHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZWFjaGZuLCBhcnIsIGl0ZXJhdGVlLCBjYikge1xuICAgICAgICBjYiA9IGNiIHx8IG5vb3A7XG4gICAgICAgIHZhciB0ZXN0UGFzc2VkID0gZmFsc2U7XG4gICAgICAgIHZhciB0ZXN0UmVzdWx0O1xuICAgICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbih2YWx1ZSwgXywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGl0ZXJhdGVlKHZhbHVlLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoZWNrKHJlc3VsdCkgJiYgIXRlc3RSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdFBhc3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRlc3RSZXN1bHQgPSBnZXRSZXN1bHQodHJ1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBicmVha0xvb3ApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIHRlc3RQYXNzZWQgPyB0ZXN0UmVzdWx0IDogZ2V0UmVzdWx0KGZhbHNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIF9maW5kR2V0UmVzdWx0KHYsIHgpIHtcbiAgICByZXR1cm4geDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCB2YWx1ZSBpbiBgY29sbGAgdGhhdCBwYXNzZXMgYW4gYXN5bmMgdHJ1dGggdGVzdC4gVGhlXG4gKiBgaXRlcmF0ZWVgIGlzIGFwcGxpZWQgaW4gcGFyYWxsZWwsIG1lYW5pbmcgdGhlIGZpcnN0IGl0ZXJhdGVlIHRvIHJldHVyblxuICogYHRydWVgIHdpbGwgZmlyZSB0aGUgZGV0ZWN0IGBjYWxsYmFja2Agd2l0aCB0aGF0IHJlc3VsdC4gVGhhdCBtZWFucyB0aGVcbiAqIHJlc3VsdCBtaWdodCBub3QgYmUgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIG9yaWdpbmFsIGBjb2xsYCAoaW4gdGVybXMgb2Ygb3JkZXIpXG4gKiB0aGF0IHBhc3NlcyB0aGUgdGVzdC5cblxuICogSWYgb3JkZXIgd2l0aGluIHRoZSBvcmlnaW5hbCBgY29sbGAgaXMgaW1wb3J0YW50LCB0aGVuIGxvb2sgYXRcbiAqIFtgZGV0ZWN0U2VyaWVzYF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmRldGVjdFNlcmllc30uXG4gKlxuICogQG5hbWUgZGV0ZWN0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgZmluZFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25zXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQSB0cnV0aCB0ZXN0IHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpbiBgY29sbGAuXG4gKiBUaGUgaXRlcmF0ZWUgbXVzdCBjb21wbGV0ZSB3aXRoIGEgYm9vbGVhbiB2YWx1ZSBhcyBpdHMgcmVzdWx0LlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYXMgc29vbiBhcyBhbnlcbiAqIGl0ZXJhdGVlIHJldHVybnMgYHRydWVgLCBvciBhZnRlciBhbGwgdGhlIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQuXG4gKiBSZXN1bHQgd2lsbCBiZSB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYXJyYXkgdGhhdCBwYXNzZXMgdGhlIHRydXRoIHRlc3RcbiAqIChpdGVyYXRlZSkgb3IgdGhlIHZhbHVlIGB1bmRlZmluZWRgIGlmIG5vbmUgcGFzc2VkLiBJbnZva2VkIHdpdGhcbiAqIChlcnIsIHJlc3VsdCkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLmRldGVjdChbJ2ZpbGUxJywnZmlsZTInLCdmaWxlMyddLCBmdW5jdGlvbihmaWxlUGF0aCwgY2FsbGJhY2spIHtcbiAqICAgICBmcy5hY2Nlc3MoZmlsZVBhdGgsIGZ1bmN0aW9uKGVycikge1xuICogICAgICAgICBjYWxsYmFjayhudWxsLCAhZXJyKVxuICogICAgIH0pO1xuICogfSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgbm93IGVxdWFscyB0aGUgZmlyc3QgZmlsZSBpbiB0aGUgbGlzdCB0aGF0IGV4aXN0c1xuICogfSk7XG4gKi9cbnZhciBkZXRlY3QgPSBkb1BhcmFsbGVsKF9jcmVhdGVUZXN0ZXIoaWRlbnRpdHksIF9maW5kR2V0UmVzdWx0KSk7XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2BkZXRlY3RgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZGV0ZWN0fSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGFcbiAqIHRpbWUuXG4gKlxuICogQG5hbWUgZGV0ZWN0TGltaXRcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmRldGVjdF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmRldGVjdH1cbiAqIEBhbGlhcyBmaW5kTGltaXRcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uc1xuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgdHJ1dGggdGVzdCB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW4gYGNvbGxgLlxuICogVGhlIGl0ZXJhdGVlIG11c3QgY29tcGxldGUgd2l0aCBhIGJvb2xlYW4gdmFsdWUgYXMgaXRzIHJlc3VsdC5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFzIHNvb24gYXMgYW55XG4gKiBpdGVyYXRlZSByZXR1cm5zIGB0cnVlYCwgb3IgYWZ0ZXIgYWxsIHRoZSBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLlxuICogUmVzdWx0IHdpbGwgYmUgdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGFycmF5IHRoYXQgcGFzc2VzIHRoZSB0cnV0aCB0ZXN0XG4gKiAoaXRlcmF0ZWUpIG9yIHRoZSB2YWx1ZSBgdW5kZWZpbmVkYCBpZiBub25lIHBhc3NlZC4gSW52b2tlZCB3aXRoXG4gKiAoZXJyLCByZXN1bHQpLlxuICovXG52YXIgZGV0ZWN0TGltaXQgPSBkb1BhcmFsbGVsTGltaXQoX2NyZWF0ZVRlc3RlcihpZGVudGl0eSwgX2ZpbmRHZXRSZXN1bHQpKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGRldGVjdGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5kZXRlY3R9IGJ1dCBydW5zIG9ubHkgYSBzaW5nbGUgYXN5bmMgb3BlcmF0aW9uIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBkZXRlY3RTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmRldGVjdF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmRldGVjdH1cbiAqIEBhbGlhcyBmaW5kU2VyaWVzXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluIGBjb2xsYC5cbiAqIFRoZSBpdGVyYXRlZSBtdXN0IGNvbXBsZXRlIHdpdGggYSBib29sZWFuIHZhbHVlIGFzIGl0cyByZXN1bHQuXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhcyBzb29uIGFzIGFueVxuICogaXRlcmF0ZWUgcmV0dXJucyBgdHJ1ZWAsIG9yIGFmdGVyIGFsbCB0aGUgYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC5cbiAqIFJlc3VsdCB3aWxsIGJlIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSB0aGF0IHBhc3NlcyB0aGUgdHJ1dGggdGVzdFxuICogKGl0ZXJhdGVlKSBvciB0aGUgdmFsdWUgYHVuZGVmaW5lZGAgaWYgbm9uZSBwYXNzZWQuIEludm9rZWQgd2l0aFxuICogKGVyciwgcmVzdWx0KS5cbiAqL1xudmFyIGRldGVjdFNlcmllcyA9IGRvTGltaXQoZGV0ZWN0TGltaXQsIDEpO1xuXG5mdW5jdGlvbiBjb25zb2xlRnVuYyhuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbi8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDEpO1xuICAgICAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyci8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlFYWNoKGFyZ3MsIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlW25hbWVdKHgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3cmFwQXN5bmMoZm4pLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH07XG59XG5cbi8qKlxuICogTG9ncyB0aGUgcmVzdWx0IG9mIGFuIFtgYXN5bmNgIGZ1bmN0aW9uXXtAbGluayBBc3luY0Z1bmN0aW9ufSB0byB0aGVcbiAqIGBjb25zb2xlYCB1c2luZyBgY29uc29sZS5kaXJgIHRvIGRpc3BsYXkgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHJlc3VsdGluZyBvYmplY3QuXG4gKiBPbmx5IHdvcmtzIGluIE5vZGUuanMgb3IgaW4gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IGBjb25zb2xlLmRpcmAgYW5kXG4gKiBgY29uc29sZS5lcnJvcmAgKHN1Y2ggYXMgRkYgYW5kIENocm9tZSkuXG4gKiBJZiBtdWx0aXBsZSBhcmd1bWVudHMgYXJlIHJldHVybmVkIGZyb20gdGhlIGFzeW5jIGZ1bmN0aW9uLFxuICogYGNvbnNvbGUuZGlyYCBpcyBjYWxsZWQgb24gZWFjaCBhcmd1bWVudCBpbiBvcmRlci5cbiAqXG4gKiBAbmFtZSBkaXJcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6VXRpbHNcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGZ1bmN0aW9uIC0gVGhlIGZ1bmN0aW9uIHlvdSB3YW50IHRvIGV2ZW50dWFsbHkgYXBwbHlcbiAqIGFsbCBhcmd1bWVudHMgdG8uXG4gKiBAcGFyYW0gey4uLip9IGFyZ3VtZW50cy4uLiAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFwcGx5IHRvIHRoZSBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gaW4gYSBtb2R1bGVcbiAqIHZhciBoZWxsbyA9IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7XG4gKiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwge2hlbGxvOiBuYW1lfSk7XG4gKiAgICAgfSwgMTAwMCk7XG4gKiB9O1xuICpcbiAqIC8vIGluIHRoZSBub2RlIHJlcGxcbiAqIG5vZGU+IGFzeW5jLmRpcihoZWxsbywgJ3dvcmxkJyk7XG4gKiB7aGVsbG86ICd3b3JsZCd9XG4gKi9cbnZhciBkaXIgPSBjb25zb2xlRnVuYygnZGlyJyk7XG5cbi8qKlxuICogVGhlIHBvc3QtY2hlY2sgdmVyc2lvbiBvZiBbYGR1cmluZ2Bde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy5kdXJpbmd9LiBUbyByZWZsZWN0IHRoZSBkaWZmZXJlbmNlIGluXG4gKiB0aGUgb3JkZXIgb2Ygb3BlcmF0aW9ucywgdGhlIGFyZ3VtZW50cyBgdGVzdGAgYW5kIGBmbmAgYXJlIHN3aXRjaGVkLlxuICpcbiAqIEFsc28gYSB2ZXJzaW9uIG9mIFtgZG9XaGlsc3RgXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cuZG9XaGlsc3R9IHdpdGggYXN5bmNocm9ub3VzIGB0ZXN0YCBmdW5jdGlvbi5cbiAqIEBuYW1lIGRvRHVyaW5nXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5kdXJpbmdde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy5kdXJpbmd9XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGZuIC0gQW4gYXN5bmMgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGVhY2ggdGltZVxuICogYHRlc3RgIHBhc3Nlcy4gSW52b2tlZCB3aXRoIChjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IHRlc3QgLSBhc3luY2hyb25vdXMgdHJ1dGggdGVzdCB0byBwZXJmb3JtIGJlZm9yZSBlYWNoXG4gKiBleGVjdXRpb24gb2YgYGZuYC4gSW52b2tlZCB3aXRoICguLi5hcmdzLCBjYWxsYmFjayksIHdoZXJlIGAuLi5hcmdzYCBhcmUgdGhlXG4gKiBub24tZXJyb3IgYXJncyBmcm9tIHRoZSBwcmV2aW91cyBjYWxsYmFjayBvZiBgZm5gLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIHRoZSB0ZXN0XG4gKiBmdW5jdGlvbiBoYXMgZmFpbGVkIGFuZCByZXBlYXRlZCBleGVjdXRpb24gb2YgYGZuYCBoYXMgc3RvcHBlZC4gYGNhbGxiYWNrYFxuICogd2lsbCBiZSBwYXNzZWQgYW4gZXJyb3IgaWYgb25lIG9jY3VycmVkLCBvdGhlcndpc2UgYG51bGxgLlxuICovXG5mdW5jdGlvbiBkb0R1cmluZyhmbiwgdGVzdCwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IG9ubHlPbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuICAgIHZhciBfZm4gPSB3cmFwQXN5bmMoZm4pO1xuICAgIHZhciBfdGVzdCA9IHdyYXBBc3luYyh0ZXN0KTtcblxuICAgIGZ1bmN0aW9uIG5leHQoZXJyLyosIC4uLmFyZ3MqLykge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDEpO1xuICAgICAgICBhcmdzLnB1c2goY2hlY2spO1xuICAgICAgICBfdGVzdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVjayhlcnIsIHRydXRoKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICBpZiAoIXRydXRoKSByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIF9mbihuZXh0KTtcbiAgICB9XG5cbiAgICBjaGVjayhudWxsLCB0cnVlKTtcblxufVxuXG4vKipcbiAqIFRoZSBwb3N0LWNoZWNrIHZlcnNpb24gb2YgW2B3aGlsc3RgXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cud2hpbHN0fS4gVG8gcmVmbGVjdCB0aGUgZGlmZmVyZW5jZSBpblxuICogdGhlIG9yZGVyIG9mIG9wZXJhdGlvbnMsIHRoZSBhcmd1bWVudHMgYHRlc3RgIGFuZCBgaXRlcmF0ZWVgIGFyZSBzd2l0Y2hlZC5cbiAqXG4gKiBgZG9XaGlsc3RgIGlzIHRvIGB3aGlsc3RgIGFzIGBkbyB3aGlsZWAgaXMgdG8gYHdoaWxlYCBpbiBwbGFpbiBKYXZhU2NyaXB0LlxuICpcbiAqIEBuYW1lIGRvV2hpbHN0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy53aGlsc3Rde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy53aGlsc3R9XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQSBmdW5jdGlvbiB3aGljaCBpcyBjYWxsZWQgZWFjaCB0aW1lIGB0ZXN0YFxuICogcGFzc2VzLiBJbnZva2VkIHdpdGggKGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRlc3QgLSBzeW5jaHJvbm91cyB0cnV0aCB0ZXN0IHRvIHBlcmZvcm0gYWZ0ZXIgZWFjaFxuICogZXhlY3V0aW9uIG9mIGBpdGVyYXRlZWAuIEludm9rZWQgd2l0aCBhbnkgbm9uLWVycm9yIGNhbGxiYWNrIHJlc3VsdHMgb2ZcbiAqIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgdGhlIHRlc3RcbiAqIGZ1bmN0aW9uIGhhcyBmYWlsZWQgYW5kIHJlcGVhdGVkIGV4ZWN1dGlvbiBvZiBgaXRlcmF0ZWVgIGhhcyBzdG9wcGVkLlxuICogYGNhbGxiYWNrYCB3aWxsIGJlIHBhc3NlZCBhbiBlcnJvciBhbmQgYW55IGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGZpbmFsXG4gKiBgaXRlcmF0ZWVgJ3MgY2FsbGJhY2suIEludm9rZWQgd2l0aCAoZXJyLCBbcmVzdWx0c10pO1xuICovXG5mdW5jdGlvbiBkb1doaWxzdChpdGVyYXRlZSwgdGVzdCwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IG9ubHlPbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuICAgIHZhciBfaXRlcmF0ZWUgPSB3cmFwQXN5bmMoaXRlcmF0ZWUpO1xuICAgIHZhciBuZXh0ID0gZnVuY3Rpb24oZXJyLyosIC4uLmFyZ3MqLykge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgdmFyIGFyZ3MgPSBzbGljZShhcmd1bWVudHMsIDEpO1xuICAgICAgICBpZiAodGVzdC5hcHBseSh0aGlzLCBhcmdzKSkgcmV0dXJuIF9pdGVyYXRlZShuZXh0KTtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbiAgICBfaXRlcmF0ZWUobmV4dCk7XG59XG5cbi8qKlxuICogTGlrZSBbJ2RvV2hpbHN0J117QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LmRvV2hpbHN0fSwgZXhjZXB0IHRoZSBgdGVzdGAgaXMgaW52ZXJ0ZWQuIE5vdGUgdGhlXG4gKiBhcmd1bWVudCBvcmRlcmluZyBkaWZmZXJzIGZyb20gYHVudGlsYC5cbiAqXG4gKiBAbmFtZSBkb1VudGlsXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5kb1doaWxzdF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LmRvV2hpbHN0fVxuICogQGNhdGVnb3J5IENvbnRyb2wgRmxvd1xuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBlYWNoIHRpbWVcbiAqIGB0ZXN0YCBmYWlscy4gSW52b2tlZCB3aXRoIChjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0ZXN0IC0gc3luY2hyb25vdXMgdHJ1dGggdGVzdCB0byBwZXJmb3JtIGFmdGVyIGVhY2hcbiAqIGV4ZWN1dGlvbiBvZiBgaXRlcmF0ZWVgLiBJbnZva2VkIHdpdGggYW55IG5vbi1lcnJvciBjYWxsYmFjayByZXN1bHRzIG9mXG4gKiBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIHRoZSB0ZXN0XG4gKiBmdW5jdGlvbiBoYXMgcGFzc2VkIGFuZCByZXBlYXRlZCBleGVjdXRpb24gb2YgYGl0ZXJhdGVlYCBoYXMgc3RvcHBlZC4gYGNhbGxiYWNrYFxuICogd2lsbCBiZSBwYXNzZWQgYW4gZXJyb3IgYW5kIGFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBmaW5hbCBgaXRlcmF0ZWVgJ3NcbiAqIGNhbGxiYWNrLiBJbnZva2VkIHdpdGggKGVyciwgW3Jlc3VsdHNdKTtcbiAqL1xuZnVuY3Rpb24gZG9VbnRpbChpdGVyYXRlZSwgdGVzdCwgY2FsbGJhY2spIHtcbiAgICBkb1doaWxzdChpdGVyYXRlZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhdGVzdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBMaWtlIFtgd2hpbHN0YF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LndoaWxzdH0sIGV4Y2VwdCB0aGUgYHRlc3RgIGlzIGFuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0aGF0XG4gKiBpcyBwYXNzZWQgYSBjYWxsYmFjayBpbiB0aGUgZm9ybSBvZiBgZnVuY3Rpb24gKGVyciwgdHJ1dGgpYC4gSWYgZXJyb3IgaXNcbiAqIHBhc3NlZCB0byBgdGVzdGAgb3IgYGZuYCwgdGhlIG1haW4gY2FsbGJhY2sgaXMgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlXG4gKiB2YWx1ZSBvZiB0aGUgZXJyb3IuXG4gKlxuICogQG5hbWUgZHVyaW5nXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy53aGlsc3Rde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy53aGlsc3R9XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IHRlc3QgLSBhc3luY2hyb25vdXMgdHJ1dGggdGVzdCB0byBwZXJmb3JtIGJlZm9yZSBlYWNoXG4gKiBleGVjdXRpb24gb2YgYGZuYC4gSW52b2tlZCB3aXRoIChjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGZuIC0gQW4gYXN5bmMgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGVhY2ggdGltZVxuICogYHRlc3RgIHBhc3Nlcy4gSW52b2tlZCB3aXRoIChjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgdGhlIHRlc3RcbiAqIGZ1bmN0aW9uIGhhcyBmYWlsZWQgYW5kIHJlcGVhdGVkIGV4ZWN1dGlvbiBvZiBgZm5gIGhhcyBzdG9wcGVkLiBgY2FsbGJhY2tgXG4gKiB3aWxsIGJlIHBhc3NlZCBhbiBlcnJvciwgaWYgb25lIG9jY3VycmVkLCBvdGhlcndpc2UgYG51bGxgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgY291bnQgPSAwO1xuICpcbiAqIGFzeW5jLmR1cmluZyhcbiAqICAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAqICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGNvdW50IDwgNSk7XG4gKiAgICAgfSxcbiAqICAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAqICAgICAgICAgY291bnQrKztcbiAqICAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCk7XG4gKiAgICAgfSxcbiAqICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gKiAgICAgICAgIC8vIDUgc2Vjb25kcyBoYXZlIHBhc3NlZFxuICogICAgIH1cbiAqICk7XG4gKi9cbmZ1bmN0aW9uIGR1cmluZyh0ZXN0LCBmbiwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IG9ubHlPbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuICAgIHZhciBfZm4gPSB3cmFwQXN5bmMoZm4pO1xuICAgIHZhciBfdGVzdCA9IHdyYXBBc3luYyh0ZXN0KTtcblxuICAgIGZ1bmN0aW9uIG5leHQoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICBfdGVzdChjaGVjayk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2soZXJyLCB0cnV0aCkge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgaWYgKCF0cnV0aCkgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICBfZm4obmV4dCk7XG4gICAgfVxuXG4gICAgX3Rlc3QoY2hlY2spO1xufVxuXG5mdW5jdGlvbiBfd2l0aG91dEluZGV4KGl0ZXJhdGVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSwgY2FsbGJhY2spO1xuICAgIH07XG59XG5cbi8qKlxuICogQXBwbGllcyB0aGUgZnVuY3Rpb24gYGl0ZXJhdGVlYCB0byBlYWNoIGl0ZW0gaW4gYGNvbGxgLCBpbiBwYXJhbGxlbC5cbiAqIFRoZSBgaXRlcmF0ZWVgIGlzIGNhbGxlZCB3aXRoIGFuIGl0ZW0gZnJvbSB0aGUgbGlzdCwgYW5kIGEgY2FsbGJhY2sgZm9yIHdoZW5cbiAqIGl0IGhhcyBmaW5pc2hlZC4gSWYgdGhlIGBpdGVyYXRlZWAgcGFzc2VzIGFuIGVycm9yIHRvIGl0cyBgY2FsbGJhY2tgLCB0aGVcbiAqIG1haW4gYGNhbGxiYWNrYCAoZm9yIHRoZSBgZWFjaGAgZnVuY3Rpb24pIGlzIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZVxuICogZXJyb3IuXG4gKlxuICogTm90ZSwgdGhhdCBzaW5jZSB0aGlzIGZ1bmN0aW9uIGFwcGxpZXMgYGl0ZXJhdGVlYCB0byBlYWNoIGl0ZW0gaW4gcGFyYWxsZWwsXG4gKiB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgaXRlcmF0ZWUgZnVuY3Rpb25zIHdpbGwgY29tcGxldGUgaW4gb3JkZXIuXG4gKlxuICogQG5hbWUgZWFjaFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGFsaWFzIGZvckVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gdG8gYXBwbHkgdG9cbiAqIGVhY2ggaXRlbSBpbiBgY29sbGAuIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogVGhlIGFycmF5IGluZGV4IGlzIG5vdCBwYXNzZWQgdG8gdGhlIGl0ZXJhdGVlLlxuICogSWYgeW91IG5lZWQgdGhlIGluZGV4LCB1c2UgYGVhY2hPZmAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGxcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBhc3N1bWluZyBvcGVuRmlsZXMgaXMgYW4gYXJyYXkgb2YgZmlsZSBuYW1lcyBhbmQgc2F2ZUZpbGUgaXMgYSBmdW5jdGlvblxuICogLy8gdG8gc2F2ZSB0aGUgbW9kaWZpZWQgY29udGVudHMgb2YgdGhhdCBmaWxlOlxuICpcbiAqIGFzeW5jLmVhY2gob3BlbkZpbGVzLCBzYXZlRmlsZSwgZnVuY3Rpb24oZXJyKXtcbiAqICAgLy8gaWYgYW55IG9mIHRoZSBzYXZlcyBwcm9kdWNlZCBhbiBlcnJvciwgZXJyIHdvdWxkIGVxdWFsIHRoYXQgZXJyb3JcbiAqIH0pO1xuICpcbiAqIC8vIGFzc3VtaW5nIG9wZW5GaWxlcyBpcyBhbiBhcnJheSBvZiBmaWxlIG5hbWVzXG4gKiBhc3luYy5lYWNoKG9wZW5GaWxlcywgZnVuY3Rpb24oZmlsZSwgY2FsbGJhY2spIHtcbiAqXG4gKiAgICAgLy8gUGVyZm9ybSBvcGVyYXRpb24gb24gZmlsZSBoZXJlLlxuICogICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIGZpbGUgJyArIGZpbGUpO1xuICpcbiAqICAgICBpZiggZmlsZS5sZW5ndGggPiAzMiApIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdUaGlzIGZpbGUgbmFtZSBpcyB0b28gbG9uZycpO1xuICogICAgICAgY2FsbGJhY2soJ0ZpbGUgbmFtZSB0b28gbG9uZycpO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICAvLyBEbyB3b3JrIHRvIHByb2Nlc3MgZmlsZSBoZXJlXG4gKiAgICAgICBjb25zb2xlLmxvZygnRmlsZSBwcm9jZXNzZWQnKTtcbiAqICAgICAgIGNhbGxiYWNrKCk7XG4gKiAgICAgfVxuICogfSwgZnVuY3Rpb24oZXJyKSB7XG4gKiAgICAgLy8gaWYgYW55IG9mIHRoZSBmaWxlIHByb2Nlc3NpbmcgcHJvZHVjZWQgYW4gZXJyb3IsIGVyciB3b3VsZCBlcXVhbCB0aGF0IGVycm9yXG4gKiAgICAgaWYoIGVyciApIHtcbiAqICAgICAgIC8vIE9uZSBvZiB0aGUgaXRlcmF0aW9ucyBwcm9kdWNlZCBhbiBlcnJvci5cbiAqICAgICAgIC8vIEFsbCBwcm9jZXNzaW5nIHdpbGwgbm93IHN0b3AuXG4gKiAgICAgICBjb25zb2xlLmxvZygnQSBmaWxlIGZhaWxlZCB0byBwcm9jZXNzJyk7XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdBbGwgZmlsZXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCBzdWNjZXNzZnVsbHknKTtcbiAqICAgICB9XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gZWFjaExpbWl0KGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIGVhY2hPZihjb2xsLCBfd2l0aG91dEluZGV4KHdyYXBBc3luYyhpdGVyYXRlZSkpLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2BlYWNoYF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2h9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIGVhY2hMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZWFjaF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2h9XG4gKiBAYWxpYXMgZm9yRWFjaExpbWl0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpblxuICogYGNvbGxgLlxuICogVGhlIGFycmF5IGluZGV4IGlzIG5vdCBwYXNzZWQgdG8gdGhlIGl0ZXJhdGVlLlxuICogSWYgeW91IG5lZWQgdGhlIGluZGV4LCB1c2UgYGVhY2hPZkxpbWl0YC5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYWxsXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLCBvciBhbiBlcnJvciBvY2N1cnMuIEludm9rZWQgd2l0aCAoZXJyKS5cbiAqL1xuZnVuY3Rpb24gZWFjaExpbWl0JDEoY29sbCwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIF9lYWNoT2ZMaW1pdChsaW1pdCkoY29sbCwgX3dpdGhvdXRJbmRleCh3cmFwQXN5bmMoaXRlcmF0ZWUpKSwgY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgZWFjaGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5lYWNofSBidXQgcnVucyBvbmx5IGEgc2luZ2xlIGFzeW5jIG9wZXJhdGlvbiBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgZWFjaFNlcmllc1xuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZWFjaF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmVhY2h9XG4gKiBAYWxpYXMgZm9yRWFjaFNlcmllc1xuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoXG4gKiBpdGVtIGluIGBjb2xsYC5cbiAqIFRoZSBhcnJheSBpbmRleCBpcyBub3QgcGFzc2VkIHRvIHRoZSBpdGVyYXRlZS5cbiAqIElmIHlvdSBuZWVkIHRoZSBpbmRleCwgdXNlIGBlYWNoT2ZTZXJpZXNgLlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGxcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gSW52b2tlZCB3aXRoIChlcnIpLlxuICovXG52YXIgZWFjaFNlcmllcyA9IGRvTGltaXQoZWFjaExpbWl0JDEsIDEpO1xuXG4vKipcbiAqIFdyYXAgYW4gYXN5bmMgZnVuY3Rpb24gYW5kIGVuc3VyZSBpdCBjYWxscyBpdHMgY2FsbGJhY2sgb24gYSBsYXRlciB0aWNrIG9mXG4gKiB0aGUgZXZlbnQgbG9vcC4gIElmIHRoZSBmdW5jdGlvbiBhbHJlYWR5IGNhbGxzIGl0cyBjYWxsYmFjayBvbiBhIG5leHQgdGljayxcbiAqIG5vIGV4dHJhIGRlZmVycmFsIGlzIGFkZGVkLiBUaGlzIGlzIHVzZWZ1bCBmb3IgcHJldmVudGluZyBzdGFjayBvdmVyZmxvd3NcbiAqIChgUmFuZ2VFcnJvcjogTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRgKSBhbmQgZ2VuZXJhbGx5IGtlZXBpbmdcbiAqIFtaYWxnb10oaHR0cDovL2Jsb2cuaXpzLm1lL3Bvc3QvNTkxNDI3NDIxNDMvZGVzaWduaW5nLWFwaXMtZm9yLWFzeW5jaHJvbnkpXG4gKiBjb250YWluZWQuIEVTMjAxNyBgYXN5bmNgIGZ1bmN0aW9ucyBhcmUgcmV0dXJuZWQgYXMtaXMgLS0gdGhleSBhcmUgaW1tdW5lXG4gKiB0byBaYWxnbydzIGNvcnJ1cHRpbmcgaW5mbHVlbmNlcywgYXMgdGhleSBhbHdheXMgcmVzb2x2ZSBvbiBhIGxhdGVyIHRpY2suXG4gKlxuICogQG5hbWUgZW5zdXJlQXN5bmNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6VXRpbHNcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGZuIC0gYW4gYXN5bmMgZnVuY3Rpb24sIG9uZSB0aGF0IGV4cGVjdHMgYSBub2RlLXN0eWxlXG4gKiBjYWxsYmFjayBhcyBpdHMgbGFzdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtBc3luY0Z1bmN0aW9ufSBSZXR1cm5zIGEgd3JhcHBlZCBmdW5jdGlvbiB3aXRoIHRoZSBleGFjdCBzYW1lIGNhbGxcbiAqIHNpZ25hdHVyZSBhcyB0aGUgZnVuY3Rpb24gcGFzc2VkIGluLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzb21ldGltZXNBc3luYyhhcmcsIGNhbGxiYWNrKSB7XG4gKiAgICAgaWYgKGNhY2hlW2FyZ10pIHtcbiAqICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGNhY2hlW2FyZ10pOyAvLyB0aGlzIHdvdWxkIGJlIHN5bmNocm9ub3VzISFcbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgICBkb1NvbWVJTyhhcmcsIGNhbGxiYWNrKTsgLy8gdGhpcyBJTyB3b3VsZCBiZSBhc3luY2hyb25vdXNcbiAqICAgICB9XG4gKiB9XG4gKlxuICogLy8gdGhpcyBoYXMgYSByaXNrIG9mIHN0YWNrIG92ZXJmbG93cyBpZiBtYW55IHJlc3VsdHMgYXJlIGNhY2hlZCBpbiBhIHJvd1xuICogYXN5bmMubWFwU2VyaWVzKGFyZ3MsIHNvbWV0aW1lc0FzeW5jLCBkb25lKTtcbiAqXG4gKiAvLyB0aGlzIHdpbGwgZGVmZXIgc29tZXRpbWVzQXN5bmMncyBjYWxsYmFjayBpZiBuZWNlc3NhcnksXG4gKiAvLyBwcmV2ZW50aW5nIHN0YWNrIG92ZXJmbG93c1xuICogYXN5bmMubWFwU2VyaWVzKGFyZ3MsIGFzeW5jLmVuc3VyZUFzeW5jKHNvbWV0aW1lc0FzeW5jKSwgZG9uZSk7XG4gKi9cbmZ1bmN0aW9uIGVuc3VyZUFzeW5jKGZuKSB7XG4gICAgaWYgKGlzQXN5bmMoZm4pKSByZXR1cm4gZm47XG4gICAgcmV0dXJuIGluaXRpYWxQYXJhbXMoZnVuY3Rpb24gKGFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICAgICAgYXJncy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbm5lckFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZSQxKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgaW5uZXJBcmdzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgaW5uZXJBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBzeW5jID0gZmFsc2U7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIG5vdElkKHYpIHtcbiAgICByZXR1cm4gIXY7XG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgZXZlcnkgZWxlbWVudCBpbiBgY29sbGAgc2F0aXNmaWVzIGFuIGFzeW5jIHRlc3QuIElmIGFueVxuICogaXRlcmF0ZWUgY2FsbCByZXR1cm5zIGBmYWxzZWAsIHRoZSBtYWluIGBjYWxsYmFja2AgaXMgaW1tZWRpYXRlbHkgY2FsbGVkLlxuICpcbiAqIEBuYW1lIGV2ZXJ5XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgYWxsXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtXG4gKiBpbiB0aGUgY29sbGVjdGlvbiBpbiBwYXJhbGxlbC5cbiAqIFRoZSBpdGVyYXRlZSBtdXN0IGNvbXBsZXRlIHdpdGggYSBib29sZWFuIHJlc3VsdCB2YWx1ZS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIGFsbCB0aGVcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQuIFJlc3VsdCB3aWxsIGJlIGVpdGhlciBgdHJ1ZWAgb3IgYGZhbHNlYFxuICogZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZXMgb2YgdGhlIGFzeW5jIHRlc3RzLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMuZXZlcnkoWydmaWxlMScsJ2ZpbGUyJywnZmlsZTMnXSwgZnVuY3Rpb24oZmlsZVBhdGgsIGNhbGxiYWNrKSB7XG4gKiAgICAgZnMuYWNjZXNzKGZpbGVQYXRoLCBmdW5jdGlvbihlcnIpIHtcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgIWVycilcbiAqICAgICB9KTtcbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gKiAgICAgLy8gaWYgcmVzdWx0IGlzIHRydWUgdGhlbiBldmVyeSBmaWxlIGV4aXN0c1xuICogfSk7XG4gKi9cbnZhciBldmVyeSA9IGRvUGFyYWxsZWwoX2NyZWF0ZVRlc3Rlcihub3RJZCwgbm90SWQpKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGV2ZXJ5YF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmV2ZXJ5fSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBldmVyeUxpbWl0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5ldmVyeV17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmV2ZXJ5fVxuICogQGFsaWFzIGFsbExpbWl0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtXG4gKiBpbiB0aGUgY29sbGVjdGlvbiBpbiBwYXJhbGxlbC5cbiAqIFRoZSBpdGVyYXRlZSBtdXN0IGNvbXBsZXRlIHdpdGggYSBib29sZWFuIHJlc3VsdCB2YWx1ZS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIGFsbCB0aGVcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQuIFJlc3VsdCB3aWxsIGJlIGVpdGhlciBgdHJ1ZWAgb3IgYGZhbHNlYFxuICogZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZXMgb2YgdGhlIGFzeW5jIHRlc3RzLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqL1xudmFyIGV2ZXJ5TGltaXQgPSBkb1BhcmFsbGVsTGltaXQoX2NyZWF0ZVRlc3Rlcihub3RJZCwgbm90SWQpKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGV2ZXJ5YF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLmV2ZXJ5fSBidXQgcnVucyBvbmx5IGEgc2luZ2xlIGFzeW5jIG9wZXJhdGlvbiBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgZXZlcnlTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmV2ZXJ5XXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZXZlcnl9XG4gKiBAYWxpYXMgYWxsU2VyaWVzXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtXG4gKiBpbiB0aGUgY29sbGVjdGlvbiBpbiBzZXJpZXMuXG4gKiBUaGUgaXRlcmF0ZWUgbXVzdCBjb21wbGV0ZSB3aXRoIGEgYm9vbGVhbiByZXN1bHQgdmFsdWUuXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLiBSZXN1bHQgd2lsbCBiZSBlaXRoZXIgYHRydWVgIG9yIGBmYWxzZWBcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsdWVzIG9mIHRoZSBhc3luYyB0ZXN0cy4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdCkuXG4gKi9cbnZhciBldmVyeVNlcmllcyA9IGRvTGltaXQoZXZlcnlMaW1pdCwgMSk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlckFycmF5KGVhY2hmbiwgYXJyLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdHJ1dGhWYWx1ZXMgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gICAgZWFjaGZuKGFyciwgZnVuY3Rpb24gKHgsIGluZGV4LCBjYWxsYmFjaykge1xuICAgICAgICBpdGVyYXRlZSh4LCBmdW5jdGlvbiAoZXJyLCB2KSB7XG4gICAgICAgICAgICB0cnV0aFZhbHVlc1tpbmRleF0gPSAhIXY7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRydXRoVmFsdWVzW2ldKSByZXN1bHRzLnB1c2goYXJyW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyR2VuZXJpYyhlYWNoZm4sIGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgZWFjaGZuKGNvbGwsIGZ1bmN0aW9uICh4LCBpbmRleCwgY2FsbGJhY2spIHtcbiAgICAgICAgaXRlcmF0ZWUoeCwgZnVuY3Rpb24gKGVyciwgdikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7aW5kZXg6IGluZGV4LCB2YWx1ZTogeH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBhcnJheU1hcChyZXN1bHRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICAgICAgICB9KSwgYmFzZVByb3BlcnR5KCd2YWx1ZScpKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2ZpbHRlcihlYWNoZm4sIGNvbGwsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWx0ZXIgPSBpc0FycmF5TGlrZShjb2xsKSA/IGZpbHRlckFycmF5IDogZmlsdGVyR2VuZXJpYztcbiAgICBmaWx0ZXIoZWFjaGZuLCBjb2xsLCB3cmFwQXN5bmMoaXRlcmF0ZWUpLCBjYWxsYmFjayB8fCBub29wKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFycmF5IG9mIGFsbCB0aGUgdmFsdWVzIGluIGBjb2xsYCB3aGljaCBwYXNzIGFuIGFzeW5jIHRydXRoXG4gKiB0ZXN0LiBUaGlzIG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQgaW4gcGFyYWxsZWwsIGJ1dCB0aGUgcmVzdWx0cyBhcnJheSB3aWxsIGJlXG4gKiBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgb3JpZ2luYWwuXG4gKlxuICogQG5hbWUgZmlsdGVyXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAYWxpYXMgc2VsZWN0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluIGBjb2xsYC5cbiAqIFRoZSBgaXRlcmF0ZWVgIGlzIHBhc3NlZCBhIGBjYWxsYmFjayhlcnIsIHRydXRoVmFsdWUpYCwgd2hpY2ggbXVzdCBiZSBjYWxsZWRcbiAqIHdpdGggYSBib29sZWFuIGFyZ3VtZW50IG9uY2UgaXQgaGFzIGNvbXBsZXRlZC4gSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy5maWx0ZXIoWydmaWxlMScsJ2ZpbGUyJywnZmlsZTMnXSwgZnVuY3Rpb24oZmlsZVBhdGgsIGNhbGxiYWNrKSB7XG4gKiAgICAgZnMuYWNjZXNzKGZpbGVQYXRoLCBmdW5jdGlvbihlcnIpIHtcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgIWVycilcbiAqICAgICB9KTtcbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIHJlc3VsdHMgbm93IGVxdWFscyBhbiBhcnJheSBvZiB0aGUgZXhpc3RpbmcgZmlsZXNcbiAqIH0pO1xuICovXG52YXIgZmlsdGVyID0gZG9QYXJhbGxlbChfZmlsdGVyKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGZpbHRlcmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5maWx0ZXJ9IGJ1dCBydW5zIGEgbWF4aW11bSBvZiBgbGltaXRgIGFzeW5jIG9wZXJhdGlvbnMgYXQgYVxuICogdGltZS5cbiAqXG4gKiBAbmFtZSBmaWx0ZXJMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZmlsdGVyXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZmlsdGVyfVxuICogQGFsaWFzIHNlbGVjdExpbWl0XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluIGBjb2xsYC5cbiAqIFRoZSBgaXRlcmF0ZWVgIGlzIHBhc3NlZCBhIGBjYWxsYmFjayhlcnIsIHRydXRoVmFsdWUpYCwgd2hpY2ggbXVzdCBiZSBjYWxsZWRcbiAqIHdpdGggYSBib29sZWFuIGFyZ3VtZW50IG9uY2UgaXQgaGFzIGNvbXBsZXRlZC4gSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICovXG52YXIgZmlsdGVyTGltaXQgPSBkb1BhcmFsbGVsTGltaXQoX2ZpbHRlcik7XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2BmaWx0ZXJgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZmlsdGVyfSBidXQgcnVucyBvbmx5IGEgc2luZ2xlIGFzeW5jIG9wZXJhdGlvbiBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgZmlsdGVyU2VyaWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5maWx0ZXJde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5maWx0ZXJ9XG4gKiBAYWxpYXMgc2VsZWN0U2VyaWVzXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIHRydXRoIHRlc3QgdG8gYXBwbHkgdG8gZWFjaCBpdGVtIGluIGBjb2xsYC5cbiAqIFRoZSBgaXRlcmF0ZWVgIGlzIHBhc3NlZCBhIGBjYWxsYmFjayhlcnIsIHRydXRoVmFsdWUpYCwgd2hpY2ggbXVzdCBiZSBjYWxsZWRcbiAqIHdpdGggYSBib29sZWFuIGFyZ3VtZW50IG9uY2UgaXQgaGFzIGNvbXBsZXRlZC4gSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpXG4gKi9cbnZhciBmaWx0ZXJTZXJpZXMgPSBkb0xpbWl0KGZpbHRlckxpbWl0LCAxKTtcblxuLyoqXG4gKiBDYWxscyB0aGUgYXN5bmNocm9ub3VzIGZ1bmN0aW9uIGBmbmAgd2l0aCBhIGNhbGxiYWNrIHBhcmFtZXRlciB0aGF0IGFsbG93cyBpdFxuICogdG8gY2FsbCBpdHNlbGYgYWdhaW4sIGluIHNlcmllcywgaW5kZWZpbml0ZWx5LlxuXG4gKiBJZiBhbiBlcnJvciBpcyBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIHRoZW4gYGVycmJhY2tgIGlzIGNhbGxlZCB3aXRoIHRoZVxuICogZXJyb3IsIGFuZCBleGVjdXRpb24gc3RvcHMsIG90aGVyd2lzZSBpdCB3aWxsIG5ldmVyIGJlIGNhbGxlZC5cbiAqXG4gKiBAbmFtZSBmb3JldmVyXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGZuIC0gYW4gYXN5bmMgZnVuY3Rpb24gdG8gY2FsbCByZXBlYXRlZGx5LlxuICogSW52b2tlZCB3aXRoIChuZXh0KS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlcnJiYWNrXSAtIHdoZW4gYGZuYCBwYXNzZXMgYW4gZXJyb3IgdG8gaXQncyBjYWxsYmFjayxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQsIGFuZCBleGVjdXRpb24gc3RvcHMuIEludm9rZWQgd2l0aCAoZXJyKS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMuZm9yZXZlcihcbiAqICAgICBmdW5jdGlvbihuZXh0KSB7XG4gKiAgICAgICAgIC8vIG5leHQgaXMgc3VpdGFibGUgZm9yIHBhc3NpbmcgdG8gdGhpbmdzIHRoYXQgbmVlZCBhIGNhbGxiYWNrKGVyciBbLCB3aGF0ZXZlcl0pO1xuICogICAgICAgICAvLyBpdCB3aWxsIHJlc3VsdCBpbiB0aGlzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBhZ2Fpbi5cbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGVycikge1xuICogICAgICAgICAvLyBpZiBuZXh0IGlzIGNhbGxlZCB3aXRoIGEgdmFsdWUgaW4gaXRzIGZpcnN0IHBhcmFtZXRlciwgaXQgd2lsbCBhcHBlYXJcbiAqICAgICAgICAgLy8gaW4gaGVyZSBhcyAnZXJyJywgYW5kIGV4ZWN1dGlvbiB3aWxsIHN0b3AuXG4gKiAgICAgfVxuICogKTtcbiAqL1xuZnVuY3Rpb24gZm9yZXZlcihmbiwgZXJyYmFjaykge1xuICAgIHZhciBkb25lID0gb25seU9uY2UoZXJyYmFjayB8fCBub29wKTtcbiAgICB2YXIgdGFzayA9IHdyYXBBc3luYyhlbnN1cmVBc3luYyhmbikpO1xuXG4gICAgZnVuY3Rpb24gbmV4dChlcnIpIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGRvbmUoZXJyKTtcbiAgICAgICAgdGFzayhuZXh0KTtcbiAgICB9XG4gICAgbmV4dCgpO1xufVxuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgZ3JvdXBCeWBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5ncm91cEJ5fSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBncm91cEJ5TGltaXRcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmdyb3VwQnlde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5ncm91cEJ5fVxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIFRoZSBpdGVyYXRlZSBzaG91bGQgY29tcGxldGUgd2l0aCBhIGBrZXlgIHRvIGdyb3VwIHRoZSB2YWx1ZSB1bmRlci5cbiAqIEludm9rZWQgd2l0aCAodmFsdWUsIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbCBgaXRlcmF0ZWVgXG4gKiBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHQgaXMgYW4gYE9iamVjdGAgd2hvc2VzXG4gKiBwcm9wZXJ0aWVzIGFyZSBhcnJheXMgb2YgdmFsdWVzIHdoaWNoIHJldHVybmVkIHRoZSBjb3JyZXNwb25kaW5nIGtleS5cbiAqL1xudmFyIGdyb3VwQnlMaW1pdCA9IGZ1bmN0aW9uKGNvbGwsIGxpbWl0LCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG4gICAgdmFyIF9pdGVyYXRlZSA9IHdyYXBBc3luYyhpdGVyYXRlZSk7XG4gICAgbWFwTGltaXQoY29sbCwgbGltaXQsIGZ1bmN0aW9uKHZhbCwgY2FsbGJhY2spIHtcbiAgICAgICAgX2l0ZXJhdGVlKHZhbCwgZnVuY3Rpb24oZXJyLCBrZXkpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHtrZXk6IGtleSwgdmFsOiB2YWx9KTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24oZXJyLCBtYXBSZXN1bHRzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgLy8gZnJvbSBNRE4sIGhhbmRsZSBvYmplY3QgaGF2aW5nIGFuIGBoYXNPd25Qcm9wZXJ0eWAgcHJvcFxuICAgICAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwUmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1hcFJlc3VsdHNbaV0pIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbWFwUmVzdWx0c1tpXS5rZXk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IG1hcFJlc3VsdHNbaV0udmFsO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IFt2YWxdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgb2JqZWN0LCB3aGVyZSBlYWNoIHZhbHVlIGNvcnJlc3BvbmRzIHRvIGFuIGFycmF5IG9mIGl0ZW1zLCBmcm9tXG4gKiBgY29sbGAsIHRoYXQgcmV0dXJuZWQgdGhlIGNvcnJlc3BvbmRpbmcga2V5LiBUaGF0IGlzLCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0XG4gKiBjb3JyZXNwb25kIHRvIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSBgaXRlcmF0ZWVgIGNhbGxiYWNrLlxuICpcbiAqIE5vdGU6IFNpbmNlIHRoaXMgZnVuY3Rpb24gYXBwbGllcyB0aGUgYGl0ZXJhdGVlYCB0byBlYWNoIGl0ZW0gaW4gcGFyYWxsZWwsXG4gKiB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgYGl0ZXJhdGVlYCBmdW5jdGlvbnMgd2lsbCBjb21wbGV0ZSBpbiBvcmRlci5cbiAqIEhvd2V2ZXIsIHRoZSB2YWx1ZXMgZm9yIGVhY2gga2V5IGluIHRoZSBgcmVzdWx0YCB3aWxsIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzXG4gKiB0aGUgb3JpZ2luYWwgYGNvbGxgLiBGb3IgT2JqZWN0cywgdGhlIHZhbHVlcyB3aWxsIHJvdWdobHkgYmUgaW4gdGhlIG9yZGVyIG9mXG4gKiB0aGUgb3JpZ2luYWwgT2JqZWN0cycga2V5cyAoYnV0IHRoaXMgY2FuIHZhcnkgYWNyb3NzIEphdmFTY3JpcHQgZW5naW5lcykuXG4gKlxuICogQG5hbWUgZ3JvdXBCeVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIFRoZSBpdGVyYXRlZSBzaG91bGQgY29tcGxldGUgd2l0aCBhIGBrZXlgIHRvIGdyb3VwIHRoZSB2YWx1ZSB1bmRlci5cbiAqIEludm9rZWQgd2l0aCAodmFsdWUsIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbCBgaXRlcmF0ZWVgXG4gKiBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHQgaXMgYW4gYE9iamVjdGAgd2hvc2VzXG4gKiBwcm9wZXJ0aWVzIGFyZSBhcnJheXMgb2YgdmFsdWVzIHdoaWNoIHJldHVybmVkIHRoZSBjb3JyZXNwb25kaW5nIGtleS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMuZ3JvdXBCeShbJ3VzZXJJZDEnLCAndXNlcklkMicsICd1c2VySWQzJ10sIGZ1bmN0aW9uKHVzZXJJZCwgY2FsbGJhY2spIHtcbiAqICAgICBkYi5maW5kQnlJZCh1c2VySWQsIGZ1bmN0aW9uKGVyciwgdXNlcikge1xuICogICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAqICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHVzZXIuYWdlKTtcbiAqICAgICB9KTtcbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gKiAgICAgLy8gcmVzdWx0IGlzIG9iamVjdCBjb250YWluaW5nIHRoZSB1c2VySWRzIGdyb3VwZWQgYnkgYWdlXG4gKiAgICAgLy8gZS5nLiB7IDMwOiBbJ3VzZXJJZDEnLCAndXNlcklkMyddLCA0MjogWyd1c2VySWQyJ119O1xuICogfSk7XG4gKi9cbnZhciBncm91cEJ5ID0gZG9MaW1pdChncm91cEJ5TGltaXQsIEluZmluaXR5KTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYGdyb3VwQnlgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZ3JvdXBCeX0gYnV0IHJ1bnMgb25seSBhIHNpbmdsZSBhc3luYyBvcGVyYXRpb24gYXQgYSB0aW1lLlxuICpcbiAqIEBuYW1lIGdyb3VwQnlTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLmdyb3VwQnlde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5ncm91cEJ5fVxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIFRoZSBpdGVyYXRlZSBzaG91bGQgY29tcGxldGUgd2l0aCBhIGBrZXlgIHRvIGdyb3VwIHRoZSB2YWx1ZSB1bmRlci5cbiAqIEludm9rZWQgd2l0aCAodmFsdWUsIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbCBgaXRlcmF0ZWVgXG4gKiBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBSZXN1bHQgaXMgYW4gYE9iamVjdGAgd2hvc2VzXG4gKiBwcm9wZXJ0aWVzIGFyZSBhcnJheXMgb2YgdmFsdWVzIHdoaWNoIHJldHVybmVkIHRoZSBjb3JyZXNwb25kaW5nIGtleS5cbiAqL1xudmFyIGdyb3VwQnlTZXJpZXMgPSBkb0xpbWl0KGdyb3VwQnlMaW1pdCwgMSk7XG5cbi8qKlxuICogTG9ncyB0aGUgcmVzdWx0IG9mIGFuIGBhc3luY2AgZnVuY3Rpb24gdG8gdGhlIGBjb25zb2xlYC4gT25seSB3b3JrcyBpblxuICogTm9kZS5qcyBvciBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgYGNvbnNvbGUubG9nYCBhbmQgYGNvbnNvbGUuZXJyb3JgIChzdWNoXG4gKiBhcyBGRiBhbmQgQ2hyb21lKS4gSWYgbXVsdGlwbGUgYXJndW1lbnRzIGFyZSByZXR1cm5lZCBmcm9tIHRoZSBhc3luY1xuICogZnVuY3Rpb24sIGBjb25zb2xlLmxvZ2AgaXMgY2FsbGVkIG9uIGVhY2ggYXJndW1lbnQgaW4gb3JkZXIuXG4gKlxuICogQG5hbWUgbG9nXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBmdW5jdGlvbiAtIFRoZSBmdW5jdGlvbiB5b3Ugd2FudCB0byBldmVudHVhbGx5IGFwcGx5XG4gKiBhbGwgYXJndW1lbnRzIHRvLlxuICogQHBhcmFtIHsuLi4qfSBhcmd1bWVudHMuLi4gLSBBbnkgbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBhcHBseSB0byB0aGUgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIGluIGEgbW9kdWxlXG4gKiB2YXIgaGVsbG8gPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaykge1xuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICdoZWxsbyAnICsgbmFtZSk7XG4gKiAgICAgfSwgMTAwMCk7XG4gKiB9O1xuICpcbiAqIC8vIGluIHRoZSBub2RlIHJlcGxcbiAqIG5vZGU+IGFzeW5jLmxvZyhoZWxsbywgJ3dvcmxkJyk7XG4gKiAnaGVsbG8gd29ybGQnXG4gKi9cbnZhciBsb2cgPSBjb25zb2xlRnVuYygnbG9nJyk7XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2BtYXBWYWx1ZXNgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMubWFwVmFsdWVzfSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGFcbiAqIHRpbWUuXG4gKlxuICogQG5hbWUgbWFwVmFsdWVzTGltaXRcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29sbGVjdGlvbnNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLm1hcFZhbHVlc117QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLm1hcFZhbHVlc31cbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggdmFsdWUgYW5kIGtleVxuICogaW4gYGNvbGxgLlxuICogVGhlIGl0ZXJhdGVlIHNob3VsZCBjb21wbGV0ZSB3aXRoIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZSBhcyBpdHMgcmVzdWx0LlxuICogSW52b2tlZCB3aXRoICh2YWx1ZSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgd2hlbiBhbGwgYGl0ZXJhdGVlYFxuICogZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gYHJlc3VsdGAgaXMgYSBuZXcgb2JqZWN0IGNvbnNpc3RpbmdcbiAqIG9mIGVhY2gga2V5IGZyb20gYG9iamAsIHdpdGggZWFjaCB0cmFuc2Zvcm1lZCB2YWx1ZSBvbiB0aGUgcmlnaHQtaGFuZCBzaWRlLlxuICogSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdCkuXG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlc0xpbWl0KG9iaiwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gb25jZShjYWxsYmFjayB8fCBub29wKTtcbiAgICB2YXIgbmV3T2JqID0ge307XG4gICAgdmFyIF9pdGVyYXRlZSA9IHdyYXBBc3luYyhpdGVyYXRlZSk7XG4gICAgZWFjaE9mTGltaXQob2JqLCBsaW1pdCwgZnVuY3Rpb24odmFsLCBrZXksIG5leHQpIHtcbiAgICAgICAgX2l0ZXJhdGVlKHZhbCwga2V5LCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIsIG5ld09iaik7XG4gICAgfSk7XG59XG5cbi8qKlxuICogQSByZWxhdGl2ZSBvZiBbYG1hcGBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9LCBkZXNpZ25lZCBmb3IgdXNlIHdpdGggb2JqZWN0cy5cbiAqXG4gKiBQcm9kdWNlcyBhIG5ldyBPYmplY3QgYnkgbWFwcGluZyBlYWNoIHZhbHVlIG9mIGBvYmpgIHRocm91Z2ggdGhlIGBpdGVyYXRlZWBcbiAqIGZ1bmN0aW9uLiBUaGUgYGl0ZXJhdGVlYCBpcyBjYWxsZWQgZWFjaCBgdmFsdWVgIGFuZCBga2V5YCBmcm9tIGBvYmpgIGFuZCBhXG4gKiBjYWxsYmFjayBmb3Igd2hlbiBpdCBoYXMgZmluaXNoZWQgcHJvY2Vzc2luZy4gRWFjaCBvZiB0aGVzZSBjYWxsYmFja3MgdGFrZXNcbiAqIHR3byBhcmd1bWVudHM6IGFuIGBlcnJvcmAsIGFuZCB0aGUgdHJhbnNmb3JtZWQgaXRlbSBmcm9tIGBvYmpgLiBJZiBgaXRlcmF0ZWVgXG4gKiBwYXNzZXMgYW4gZXJyb3IgdG8gaXRzIGNhbGxiYWNrLCB0aGUgbWFpbiBgY2FsbGJhY2tgIChmb3IgdGhlIGBtYXBWYWx1ZXNgXG4gKiBmdW5jdGlvbikgaXMgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGVycm9yLlxuICpcbiAqIE5vdGUsIHRoZSBvcmRlciBvZiB0aGUga2V5cyBpbiB0aGUgcmVzdWx0IGlzIG5vdCBndWFyYW50ZWVkLiAgVGhlIGtleXMgd2lsbFxuICogYmUgcm91Z2hseSBpbiB0aGUgb3JkZXIgdGhleSBjb21wbGV0ZSwgKGJ1dCB0aGlzIGlzIHZlcnkgZW5naW5lLXNwZWNpZmljKVxuICpcbiAqIEBuYW1lIG1hcFZhbHVlc1xuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCB2YWx1ZSBhbmQga2V5XG4gKiBpbiBgY29sbGAuXG4gKiBUaGUgaXRlcmF0ZWUgc2hvdWxkIGNvbXBsZXRlIHdpdGggdGhlIHRyYW5zZm9ybWVkIHZhbHVlIGFzIGl0cyByZXN1bHQuXG4gKiBJbnZva2VkIHdpdGggKHZhbHVlLCBrZXksIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIGFsbCBgaXRlcmF0ZWVgXG4gKiBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZCwgb3IgYW4gZXJyb3Igb2NjdXJzLiBgcmVzdWx0YCBpcyBhIG5ldyBvYmplY3QgY29uc2lzdGluZ1xuICogb2YgZWFjaCBrZXkgZnJvbSBgb2JqYCwgd2l0aCBlYWNoIHRyYW5zZm9ybWVkIHZhbHVlIG9uIHRoZSByaWdodC1oYW5kIHNpZGUuXG4gKiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMubWFwVmFsdWVzKHtcbiAqICAgICBmMTogJ2ZpbGUxJyxcbiAqICAgICBmMjogJ2ZpbGUyJyxcbiAqICAgICBmMzogJ2ZpbGUzJ1xuICogfSwgZnVuY3Rpb24gKGZpbGUsIGtleSwgY2FsbGJhY2spIHtcbiAqICAgZnMuc3RhdChmaWxlLCBjYWxsYmFjayk7XG4gKiB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICogICAgIC8vIHJlc3VsdCBpcyBub3cgYSBtYXAgb2Ygc3RhdHMgZm9yIGVhY2ggZmlsZSwgZS5nLlxuICogICAgIC8vIHtcbiAqICAgICAvLyAgICAgZjE6IFtzdGF0cyBmb3IgZmlsZTFdLFxuICogICAgIC8vICAgICBmMjogW3N0YXRzIGZvciBmaWxlMl0sXG4gKiAgICAgLy8gICAgIGYzOiBbc3RhdHMgZm9yIGZpbGUzXVxuICogICAgIC8vIH1cbiAqIH0pO1xuICovXG5cbnZhciBtYXBWYWx1ZXMgPSBkb0xpbWl0KG1hcFZhbHVlc0xpbWl0LCBJbmZpbml0eSk7XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2BtYXBWYWx1ZXNgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMubWFwVmFsdWVzfSBidXQgcnVucyBvbmx5IGEgc2luZ2xlIGFzeW5jIG9wZXJhdGlvbiBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgbWFwVmFsdWVzU2VyaWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5tYXBWYWx1ZXNde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXBWYWx1ZXN9XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIHZhbHVlIGFuZCBrZXlcbiAqIGluIGBjb2xsYC5cbiAqIFRoZSBpdGVyYXRlZSBzaG91bGQgY29tcGxldGUgd2l0aCB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgYXMgaXRzIHJlc3VsdC5cbiAqIEludm9rZWQgd2l0aCAodmFsdWUsIGtleSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYWxsIGBpdGVyYXRlZWBcbiAqIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLCBvciBhbiBlcnJvciBvY2N1cnMuIGByZXN1bHRgIGlzIGEgbmV3IG9iamVjdCBjb25zaXN0aW5nXG4gKiBvZiBlYWNoIGtleSBmcm9tIGBvYmpgLCB3aXRoIGVhY2ggdHJhbnNmb3JtZWQgdmFsdWUgb24gdGhlIHJpZ2h0LWhhbmQgc2lkZS5cbiAqIEludm9rZWQgd2l0aCAoZXJyLCByZXN1bHQpLlxuICovXG52YXIgbWFwVmFsdWVzU2VyaWVzID0gZG9MaW1pdChtYXBWYWx1ZXNMaW1pdCwgMSk7XG5cbmZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gb2JqO1xufVxuXG4vKipcbiAqIENhY2hlcyB0aGUgcmVzdWx0cyBvZiBhbiBhc3luYyBmdW5jdGlvbi4gV2hlbiBjcmVhdGluZyBhIGhhc2ggdG8gc3RvcmVcbiAqIGZ1bmN0aW9uIHJlc3VsdHMgYWdhaW5zdCwgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQgZnJvbSB0aGUgaGFzaCBhbmQgYW5cbiAqIG9wdGlvbmFsIGhhc2ggZnVuY3Rpb24gY2FuIGJlIHVzZWQuXG4gKlxuICogSWYgbm8gaGFzaCBmdW5jdGlvbiBpcyBzcGVjaWZpZWQsIHRoZSBmaXJzdCBhcmd1bWVudCBpcyB1c2VkIGFzIGEgaGFzaCBrZXksXG4gKiB3aGljaCBtYXkgd29yayByZWFzb25hYmx5IGlmIGl0IGlzIGEgc3RyaW5nIG9yIGEgZGF0YSB0eXBlIHRoYXQgY29udmVydHMgdG8gYVxuICogZGlzdGluY3Qgc3RyaW5nLiBOb3RlIHRoYXQgb2JqZWN0cyBhbmQgYXJyYXlzIHdpbGwgbm90IGJlaGF2ZSByZWFzb25hYmx5LlxuICogTmVpdGhlciB3aWxsIGNhc2VzIHdoZXJlIHRoZSBvdGhlciBhcmd1bWVudHMgYXJlIHNpZ25pZmljYW50LiBJbiBzdWNoIGNhc2VzLFxuICogc3BlY2lmeSB5b3VyIG93biBoYXNoIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBjYWNoZSBvZiByZXN1bHRzIGlzIGV4cG9zZWQgYXMgdGhlIGBtZW1vYCBwcm9wZXJ0eSBvZiB0aGUgZnVuY3Rpb25cbiAqIHJldHVybmVkIGJ5IGBtZW1vaXplYC5cbiAqXG4gKiBAbmFtZSBtZW1vaXplXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBmbiAtIFRoZSBhc3luYyBmdW5jdGlvbiB0byBwcm94eSBhbmQgY2FjaGUgcmVzdWx0cyBmcm9tLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzaGVyIC0gQW4gb3B0aW9uYWwgZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmcgYSBjdXN0b20gaGFzaFxuICogZm9yIHN0b3JpbmcgcmVzdWx0cy4gSXQgaGFzIGFsbCB0aGUgYXJndW1lbnRzIGFwcGxpZWQgdG8gaXQgYXBhcnQgZnJvbSB0aGVcbiAqIGNhbGxiYWNrLCBhbmQgbXVzdCBiZSBzeW5jaHJvbm91cy5cbiAqIEByZXR1cm5zIHtBc3luY0Z1bmN0aW9ufSBhIG1lbW9pemVkIHZlcnNpb24gb2YgYGZuYFxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgc2xvd19mbiA9IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrKSB7XG4gKiAgICAgLy8gZG8gc29tZXRoaW5nXG4gKiAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAqIH07XG4gKiB2YXIgZm4gPSBhc3luYy5tZW1vaXplKHNsb3dfZm4pO1xuICpcbiAqIC8vIGZuIGNhbiBub3cgYmUgdXNlZCBhcyBpZiBpdCB3ZXJlIHNsb3dfZm5cbiAqIGZuKCdzb21lIG5hbWUnLCBmdW5jdGlvbigpIHtcbiAqICAgICAvLyBjYWxsYmFja1xuICogfSk7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZm4sIGhhc2hlcikge1xuICAgIHZhciBtZW1vID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcXVldWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBoYXNoZXIgPSBoYXNoZXIgfHwgaWRlbnRpdHk7XG4gICAgdmFyIF9mbiA9IHdyYXBBc3luYyhmbik7XG4gICAgdmFyIG1lbW9pemVkID0gaW5pdGlhbFBhcmFtcyhmdW5jdGlvbiBtZW1vaXplZChhcmdzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICBpZiAoaGFzKG1lbW8sIGtleSkpIHtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZSQxKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIG1lbW9ba2V5XSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChoYXMocXVldWVzLCBrZXkpKSB7XG4gICAgICAgICAgICBxdWV1ZXNba2V5XS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXVlc1trZXldID0gW2NhbGxiYWNrXTtcbiAgICAgICAgICAgIF9mbi5hcHBseShudWxsLCBhcmdzLmNvbmNhdChmdW5jdGlvbigvKmFyZ3MqLykge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBtZW1vW2tleV0gPSBhcmdzO1xuICAgICAgICAgICAgICAgIHZhciBxID0gcXVldWVzW2tleV07XG4gICAgICAgICAgICAgICAgZGVsZXRlIHF1ZXVlc1trZXldO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcVtpXS5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBtZW1vaXplZC5tZW1vID0gbWVtbztcbiAgICBtZW1vaXplZC51bm1lbW9pemVkID0gZm47XG4gICAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vKipcbiAqIENhbGxzIGBjYWxsYmFja2Agb24gYSBsYXRlciBsb29wIGFyb3VuZCB0aGUgZXZlbnQgbG9vcC4gSW4gTm9kZS5qcyB0aGlzIGp1c3RcbiAqIGNhbGxzIGBwcm9jZXNzLm5leHRUaWNrYC4gIEluIHRoZSBicm93c2VyIGl0IHdpbGwgdXNlIGBzZXRJbW1lZGlhdGVgIGlmXG4gKiBhdmFpbGFibGUsIG90aGVyd2lzZSBgc2V0VGltZW91dChjYWxsYmFjaywgMClgLCB3aGljaCBtZWFucyBvdGhlciBoaWdoZXJcbiAqIHByaW9yaXR5IGV2ZW50cyBtYXkgcHJlY2VkZSB0aGUgZXhlY3V0aW9uIG9mIGBjYWxsYmFja2AuXG4gKlxuICogVGhpcyBpcyB1c2VkIGludGVybmFsbHkgZm9yIGJyb3dzZXItY29tcGF0aWJpbGl0eSBwdXJwb3Nlcy5cbiAqXG4gKiBAbmFtZSBuZXh0VGlja1xuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpVdGlsc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuc2V0SW1tZWRpYXRlXXtAbGluayBtb2R1bGU6VXRpbHMuc2V0SW1tZWRpYXRlfVxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgb24gYSBsYXRlciBsb29wIGFyb3VuZFxuICogdGhlIGV2ZW50IGxvb3AuIEludm9rZWQgd2l0aCAoYXJncy4uLikuXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MuLi4gLSBhbnkgbnVtYmVyIG9mIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlXG4gKiBjYWxsYmFjayBvbiB0aGUgbmV4dCB0aWNrLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgY2FsbF9vcmRlciA9IFtdO1xuICogYXN5bmMubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gKiAgICAgY2FsbF9vcmRlci5wdXNoKCd0d28nKTtcbiAqICAgICAvLyBjYWxsX29yZGVyIG5vdyBlcXVhbHMgWydvbmUnLCd0d28nXVxuICogfSk7XG4gKiBjYWxsX29yZGVyLnB1c2goJ29uZScpO1xuICpcbiAqIGFzeW5jLnNldEltbWVkaWF0ZShmdW5jdGlvbiAoYSwgYiwgYykge1xuICogICAgIC8vIGEsIGIsIGFuZCBjIGVxdWFsIDEsIDIsIGFuZCAzXG4gKiB9LCAxLCAyLCAzKTtcbiAqL1xudmFyIF9kZWZlciQxO1xuXG5pZiAoaGFzTmV4dFRpY2spIHtcbiAgICBfZGVmZXIkMSA9IHByb2Nlc3MubmV4dFRpY2s7XG59IGVsc2UgaWYgKGhhc1NldEltbWVkaWF0ZSkge1xuICAgIF9kZWZlciQxID0gc2V0SW1tZWRpYXRlO1xufSBlbHNlIHtcbiAgICBfZGVmZXIkMSA9IGZhbGxiYWNrO1xufVxuXG52YXIgbmV4dFRpY2sgPSB3cmFwKF9kZWZlciQxKTtcblxuZnVuY3Rpb24gX3BhcmFsbGVsKGVhY2hmbiwgdGFza3MsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBub29wO1xuICAgIHZhciByZXN1bHRzID0gaXNBcnJheUxpa2UodGFza3MpID8gW10gOiB7fTtcblxuICAgIGVhY2hmbih0YXNrcywgZnVuY3Rpb24gKHRhc2ssIGtleSwgY2FsbGJhY2spIHtcbiAgICAgICAgd3JhcEFzeW5jKHRhc2spKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdHNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHRzKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBSdW4gdGhlIGB0YXNrc2AgY29sbGVjdGlvbiBvZiBmdW5jdGlvbnMgaW4gcGFyYWxsZWwsIHdpdGhvdXQgd2FpdGluZyB1bnRpbFxuICogdGhlIHByZXZpb3VzIGZ1bmN0aW9uIGhhcyBjb21wbGV0ZWQuIElmIGFueSBvZiB0aGUgZnVuY3Rpb25zIHBhc3MgYW4gZXJyb3IgdG9cbiAqIGl0cyBjYWxsYmFjaywgdGhlIG1haW4gYGNhbGxiYWNrYCBpcyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGUgdmFsdWUgb2YgdGhlXG4gKiBlcnJvci4gT25jZSB0aGUgYHRhc2tzYCBoYXZlIGNvbXBsZXRlZCwgdGhlIHJlc3VsdHMgYXJlIHBhc3NlZCB0byB0aGUgZmluYWxcbiAqIGBjYWxsYmFja2AgYXMgYW4gYXJyYXkuXG4gKlxuICogKipOb3RlOioqIGBwYXJhbGxlbGAgaXMgYWJvdXQga2lja2luZy1vZmYgSS9PIHRhc2tzIGluIHBhcmFsbGVsLCBub3QgYWJvdXRcbiAqIHBhcmFsbGVsIGV4ZWN1dGlvbiBvZiBjb2RlLiAgSWYgeW91ciB0YXNrcyBkbyBub3QgdXNlIGFueSB0aW1lcnMgb3IgcGVyZm9ybVxuICogYW55IEkvTywgdGhleSB3aWxsIGFjdHVhbGx5IGJlIGV4ZWN1dGVkIGluIHNlcmllcy4gIEFueSBzeW5jaHJvbm91cyBzZXR1cFxuICogc2VjdGlvbnMgZm9yIGVhY2ggdGFzayB3aWxsIGhhcHBlbiBvbmUgYWZ0ZXIgdGhlIG90aGVyLiAgSmF2YVNjcmlwdCByZW1haW5zXG4gKiBzaW5nbGUtdGhyZWFkZWQuXG4gKlxuICogKipIaW50OioqIFVzZSBbYHJlZmxlY3RgXXtAbGluayBtb2R1bGU6VXRpbHMucmVmbGVjdH0gdG8gY29udGludWUgdGhlXG4gKiBleGVjdXRpb24gb2Ygb3RoZXIgdGFza3Mgd2hlbiBhIHRhc2sgZmFpbHMuXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byB1c2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXkuIEVhY2ggcHJvcGVydHkgd2lsbFxuICogYmUgcnVuIGFzIGEgZnVuY3Rpb24gYW5kIHRoZSByZXN1bHRzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBmaW5hbCBgY2FsbGJhY2tgXG4gKiBhcyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhbiBhcnJheS4gVGhpcyBjYW4gYmUgYSBtb3JlIHJlYWRhYmxlIHdheSBvZiBoYW5kbGluZ1xuICogcmVzdWx0cyBmcm9tIHtAbGluayBhc3luYy5wYXJhbGxlbH0uXG4gKlxuICogQG5hbWUgcGFyYWxsZWxcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSB0YXNrcyAtIEEgY29sbGVjdGlvbiBvZlxuICogW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn0gdG8gcnVuLlxuICogRWFjaCBhc3luYyBmdW5jdGlvbiBjYW4gY29tcGxldGUgd2l0aCBhbnkgbnVtYmVyIG9mIG9wdGlvbmFsIGByZXN1bHRgIHZhbHVlcy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBbiBvcHRpb25hbCBjYWxsYmFjayB0byBydW4gb25jZSBhbGwgdGhlXG4gKiBmdW5jdGlvbnMgaGF2ZSBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiBUaGlzIGZ1bmN0aW9uIGdldHMgYSByZXN1bHRzIGFycmF5XG4gKiAob3Igb2JqZWN0KSBjb250YWluaW5nIGFsbCB0aGUgcmVzdWx0IGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHRhc2sgY2FsbGJhY2tzLlxuICogSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBhc3luYy5wYXJhbGxlbChbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdvbmUnKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAndHdvJyk7XG4gKiAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgfVxuICogXSxcbiAqIC8vIG9wdGlvbmFsIGNhbGxiYWNrXG4gKiBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICAvLyB0aGUgcmVzdWx0cyBhcnJheSB3aWxsIGVxdWFsIFsnb25lJywndHdvJ10gZXZlbiB0aG91Z2hcbiAqICAgICAvLyB0aGUgc2Vjb25kIGZ1bmN0aW9uIGhhZCBhIHNob3J0ZXIgdGltZW91dC5cbiAqIH0pO1xuICpcbiAqIC8vIGFuIGV4YW1wbGUgdXNpbmcgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXlcbiAqIGFzeW5jLnBhcmFsbGVsKHtcbiAqICAgICBvbmU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAxKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIHR3bzogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIDIpO1xuICogICAgICAgICB9LCAxMDApO1xuICogICAgIH1cbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIHJlc3VsdHMgaXMgbm93IGVxdWFscyB0bzoge29uZTogMSwgdHdvOiAyfVxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIHBhcmFsbGVsTGltaXQodGFza3MsIGNhbGxiYWNrKSB7XG4gICAgX3BhcmFsbGVsKGVhY2hPZiwgdGFza3MsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYHBhcmFsbGVsYF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnBhcmFsbGVsfSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGFcbiAqIHRpbWUuXG4gKlxuICogQG5hbWUgcGFyYWxsZWxMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb250cm9sRmxvd1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMucGFyYWxsZWxde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy5wYXJhbGxlbH1cbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSB0YXNrcyAtIEEgY29sbGVjdGlvbiBvZlxuICogW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn0gdG8gcnVuLlxuICogRWFjaCBhc3luYyBmdW5jdGlvbiBjYW4gY29tcGxldGUgd2l0aCBhbnkgbnVtYmVyIG9mIG9wdGlvbmFsIGByZXN1bHRgIHZhbHVlcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBbiBvcHRpb25hbCBjYWxsYmFjayB0byBydW4gb25jZSBhbGwgdGhlXG4gKiBmdW5jdGlvbnMgaGF2ZSBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LiBUaGlzIGZ1bmN0aW9uIGdldHMgYSByZXN1bHRzIGFycmF5XG4gKiAob3Igb2JqZWN0KSBjb250YWluaW5nIGFsbCB0aGUgcmVzdWx0IGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIHRhc2sgY2FsbGJhY2tzLlxuICogSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICovXG5mdW5jdGlvbiBwYXJhbGxlbExpbWl0JDEodGFza3MsIGxpbWl0LCBjYWxsYmFjaykge1xuICAgIF9wYXJhbGxlbChfZWFjaE9mTGltaXQobGltaXQpLCB0YXNrcywgY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIEEgcXVldWUgb2YgdGFza3MgZm9yIHRoZSB3b3JrZXIgZnVuY3Rpb24gdG8gY29tcGxldGUuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBRdWV1ZU9iamVjdFxuICogQG1lbWJlck9mIG1vZHVsZTpDb250cm9sRmxvd1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gbGVuZ3RoIC0gYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG51bWJlciBvZiBpdGVtc1xuICogd2FpdGluZyB0byBiZSBwcm9jZXNzZWQuIEludm9rZSB3aXRoIGBxdWV1ZS5sZW5ndGgoKWAuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHN0YXJ0ZWQgLSBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCBhbnlcbiAqIGl0ZW1zIGhhdmUgYmVlbiBwdXNoZWQgYW5kIHByb2Nlc3NlZCBieSB0aGUgcXVldWUuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBydW5uaW5nIC0gYSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIG51bWJlciBvZiBpdGVtc1xuICogY3VycmVudGx5IGJlaW5nIHByb2Nlc3NlZC4gSW52b2tlIHdpdGggYHF1ZXVlLnJ1bm5pbmcoKWAuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSB3b3JrZXJzTGlzdCAtIGEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBhcnJheSBvZiBpdGVtc1xuICogY3VycmVudGx5IGJlaW5nIHByb2Nlc3NlZC4gSW52b2tlIHdpdGggYHF1ZXVlLndvcmtlcnNMaXN0KClgLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gaWRsZSAtIGEgZnVuY3Rpb24gcmV0dXJuaW5nIGZhbHNlIGlmIHRoZXJlIGFyZSBpdGVtc1xuICogd2FpdGluZyBvciBiZWluZyBwcm9jZXNzZWQsIG9yIHRydWUgaWYgbm90LiBJbnZva2Ugd2l0aCBgcXVldWUuaWRsZSgpYC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb25jdXJyZW5jeSAtIGFuIGludGVnZXIgZm9yIGRldGVybWluaW5nIGhvdyBtYW55IGB3b3JrZXJgXG4gKiBmdW5jdGlvbnMgc2hvdWxkIGJlIHJ1biBpbiBwYXJhbGxlbC4gVGhpcyBwcm9wZXJ0eSBjYW4gYmUgY2hhbmdlZCBhZnRlciBhXG4gKiBgcXVldWVgIGlzIGNyZWF0ZWQgdG8gYWx0ZXIgdGhlIGNvbmN1cnJlbmN5IG9uLXRoZS1mbHkuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBwdXNoIC0gYWRkIGEgbmV3IHRhc2sgdG8gdGhlIGBxdWV1ZWAuIENhbGxzIGBjYWxsYmFja2BcbiAqIG9uY2UgdGhlIGB3b3JrZXJgIGhhcyBmaW5pc2hlZCBwcm9jZXNzaW5nIHRoZSB0YXNrLiBJbnN0ZWFkIG9mIGEgc2luZ2xlIHRhc2ssXG4gKiBhIGB0YXNrc2AgYXJyYXkgY2FuIGJlIHN1Ym1pdHRlZC4gVGhlIHJlc3BlY3RpdmUgY2FsbGJhY2sgaXMgdXNlZCBmb3IgZXZlcnlcbiAqIHRhc2sgaW4gdGhlIGxpc3QuIEludm9rZSB3aXRoIGBxdWV1ZS5wdXNoKHRhc2ssIFtjYWxsYmFja10pYCxcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHVuc2hpZnQgLSBhZGQgYSBuZXcgdGFzayB0byB0aGUgZnJvbnQgb2YgdGhlIGBxdWV1ZWAuXG4gKiBJbnZva2Ugd2l0aCBgcXVldWUudW5zaGlmdCh0YXNrLCBbY2FsbGJhY2tdKWAuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSByZW1vdmUgLSByZW1vdmUgaXRlbXMgZnJvbSB0aGUgcXVldWUgdGhhdCBtYXRjaCBhIHRlc3RcbiAqIGZ1bmN0aW9uLiAgVGhlIHRlc3QgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgYW4gb2JqZWN0IHdpdGggYSBgZGF0YWAgcHJvcGVydHksXG4gKiBhbmQgYSBgcHJpb3JpdHlgIHByb3BlcnR5LCBpZiB0aGlzIGlzIGFcbiAqIFtwcmlvcml0eVF1ZXVlXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cucHJpb3JpdHlRdWV1ZX0gb2JqZWN0LlxuICogSW52b2tlZCB3aXRoIGBxdWV1ZS5yZW1vdmUodGVzdEZuKWAsIHdoZXJlIGB0ZXN0Rm5gIGlzIG9mIHRoZSBmb3JtXG4gKiBgZnVuY3Rpb24gKHtkYXRhLCBwcmlvcml0eX0pIHt9YCBhbmQgcmV0dXJucyBhIEJvb2xlYW4uXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzYXR1cmF0ZWQgLSBhIGNhbGxiYWNrIHRoYXQgaXMgY2FsbGVkIHdoZW4gdGhlIG51bWJlciBvZlxuICogcnVubmluZyB3b3JrZXJzIGhpdHMgdGhlIGBjb25jdXJyZW5jeWAgbGltaXQsIGFuZCBmdXJ0aGVyIHRhc2tzIHdpbGwgYmVcbiAqIHF1ZXVlZC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHVuc2F0dXJhdGVkIC0gYSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBudW1iZXJcbiAqIG9mIHJ1bm5pbmcgd29ya2VycyBpcyBsZXNzIHRoYW4gdGhlIGBjb25jdXJyZW5jeWAgJiBgYnVmZmVyYCBsaW1pdHMsIGFuZFxuICogZnVydGhlciB0YXNrcyB3aWxsIG5vdCBiZSBxdWV1ZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gYnVmZmVyIC0gQSBtaW5pbXVtIHRocmVzaG9sZCBidWZmZXIgaW4gb3JkZXIgdG8gc2F5IHRoYXRcbiAqIHRoZSBgcXVldWVgIGlzIGB1bnNhdHVyYXRlZGAuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBlbXB0eSAtIGEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgbGFzdCBpdGVtXG4gKiBmcm9tIHRoZSBgcXVldWVgIGlzIGdpdmVuIHRvIGEgYHdvcmtlcmAuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkcmFpbiAtIGEgY2FsbGJhY2sgdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgbGFzdCBpdGVtXG4gKiBmcm9tIHRoZSBgcXVldWVgIGhhcyByZXR1cm5lZCBmcm9tIHRoZSBgd29ya2VyYC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGVycm9yIC0gYSBjYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIGEgdGFzayBlcnJvcnMuXG4gKiBIYXMgdGhlIHNpZ25hdHVyZSBgZnVuY3Rpb24oZXJyb3IsIHRhc2spYC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcGF1c2VkIC0gYSBib29sZWFuIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIHRoZSBxdWV1ZSBpc1xuICogaW4gYSBwYXVzZWQgc3RhdGUuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBwYXVzZSAtIGEgZnVuY3Rpb24gdGhhdCBwYXVzZXMgdGhlIHByb2Nlc3Npbmcgb2YgdGFza3NcbiAqIHVudGlsIGByZXN1bWUoKWAgaXMgY2FsbGVkLiBJbnZva2Ugd2l0aCBgcXVldWUucGF1c2UoKWAuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSByZXN1bWUgLSBhIGZ1bmN0aW9uIHRoYXQgcmVzdW1lcyB0aGUgcHJvY2Vzc2luZyBvZlxuICogcXVldWVkIHRhc2tzIHdoZW4gdGhlIHF1ZXVlIGlzIHBhdXNlZC4gSW52b2tlIHdpdGggYHF1ZXVlLnJlc3VtZSgpYC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGtpbGwgLSBhIGZ1bmN0aW9uIHRoYXQgcmVtb3ZlcyB0aGUgYGRyYWluYCBjYWxsYmFjayBhbmRcbiAqIGVtcHRpZXMgcmVtYWluaW5nIHRhc2tzIGZyb20gdGhlIHF1ZXVlIGZvcmNpbmcgaXQgdG8gZ28gaWRsZS4gTm8gbW9yZSB0YXNrc1xuICogc2hvdWxkIGJlIHB1c2hlZCB0byB0aGUgcXVldWUgYWZ0ZXIgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLiBJbnZva2Ugd2l0aCBgcXVldWUua2lsbCgpYC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgcXVldWVgIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgYGNvbmN1cnJlbmN5YC4gVGFza3MgYWRkZWQgdG8gdGhlXG4gKiBgcXVldWVgIGFyZSBwcm9jZXNzZWQgaW4gcGFyYWxsZWwgKHVwIHRvIHRoZSBgY29uY3VycmVuY3lgIGxpbWl0KS4gSWYgYWxsXG4gKiBgd29ya2VyYHMgYXJlIGluIHByb2dyZXNzLCB0aGUgdGFzayBpcyBxdWV1ZWQgdW50aWwgb25lIGJlY29tZXMgYXZhaWxhYmxlLlxuICogT25jZSBhIGB3b3JrZXJgIGNvbXBsZXRlcyBhIGB0YXNrYCwgdGhhdCBgdGFza2AncyBjYWxsYmFjayBpcyBjYWxsZWQuXG4gKlxuICogQG5hbWUgcXVldWVcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gd29ya2VyIC0gQW4gYXN5bmMgZnVuY3Rpb24gZm9yIHByb2Nlc3NpbmcgYSBxdWV1ZWQgdGFzay5cbiAqIElmIHlvdSB3YW50IHRvIGhhbmRsZSBlcnJvcnMgZnJvbSBhbiBpbmRpdmlkdWFsIHRhc2ssIHBhc3MgYSBjYWxsYmFjayB0b1xuICogYHEucHVzaCgpYC4gSW52b2tlZCB3aXRoICh0YXNrLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbmN5PTFdIC0gQW4gYGludGVnZXJgIGZvciBkZXRlcm1pbmluZyBob3cgbWFueVxuICogYHdvcmtlcmAgZnVuY3Rpb25zIHNob3VsZCBiZSBydW4gaW4gcGFyYWxsZWwuICBJZiBvbWl0dGVkLCB0aGUgY29uY3VycmVuY3lcbiAqIGRlZmF1bHRzIHRvIGAxYC4gIElmIHRoZSBjb25jdXJyZW5jeSBpcyBgMGAsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqIEByZXR1cm5zIHttb2R1bGU6Q29udHJvbEZsb3cuUXVldWVPYmplY3R9IEEgcXVldWUgb2JqZWN0IHRvIG1hbmFnZSB0aGUgdGFza3MuIENhbGxiYWNrcyBjYW5cbiAqIGF0dGFjaGVkIGFzIGNlcnRhaW4gcHJvcGVydGllcyB0byBsaXN0ZW4gZm9yIHNwZWNpZmljIGV2ZW50cyBkdXJpbmcgdGhlXG4gKiBsaWZlY3ljbGUgb2YgdGhlIHF1ZXVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBjcmVhdGUgYSBxdWV1ZSBvYmplY3Qgd2l0aCBjb25jdXJyZW5jeSAyXG4gKiB2YXIgcSA9IGFzeW5jLnF1ZXVlKGZ1bmN0aW9uKHRhc2ssIGNhbGxiYWNrKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ2hlbGxvICcgKyB0YXNrLm5hbWUpO1xuICogICAgIGNhbGxiYWNrKCk7XG4gKiB9LCAyKTtcbiAqXG4gKiAvLyBhc3NpZ24gYSBjYWxsYmFja1xuICogcS5kcmFpbiA9IGZ1bmN0aW9uKCkge1xuICogICAgIGNvbnNvbGUubG9nKCdhbGwgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCcpO1xuICogfTtcbiAqXG4gKiAvLyBhZGQgc29tZSBpdGVtcyB0byB0aGUgcXVldWVcbiAqIHEucHVzaCh7bmFtZTogJ2Zvbyd9LCBmdW5jdGlvbihlcnIpIHtcbiAqICAgICBjb25zb2xlLmxvZygnZmluaXNoZWQgcHJvY2Vzc2luZyBmb28nKTtcbiAqIH0pO1xuICogcS5wdXNoKHtuYW1lOiAnYmFyJ30sIGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgICBjb25zb2xlLmxvZygnZmluaXNoZWQgcHJvY2Vzc2luZyBiYXInKTtcbiAqIH0pO1xuICpcbiAqIC8vIGFkZCBzb21lIGl0ZW1zIHRvIHRoZSBxdWV1ZSAoYmF0Y2gtd2lzZSlcbiAqIHEucHVzaChbe25hbWU6ICdiYXonfSx7bmFtZTogJ2JheSd9LHtuYW1lOiAnYmF4J31dLCBmdW5jdGlvbihlcnIpIHtcbiAqICAgICBjb25zb2xlLmxvZygnZmluaXNoZWQgcHJvY2Vzc2luZyBpdGVtJyk7XG4gKiB9KTtcbiAqXG4gKiAvLyBhZGQgc29tZSBpdGVtcyB0byB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlXG4gKiBxLnVuc2hpZnQoe25hbWU6ICdiYXInfSwgZnVuY3Rpb24gKGVycikge1xuICogICAgIGNvbnNvbGUubG9nKCdmaW5pc2hlZCBwcm9jZXNzaW5nIGJhcicpO1xuICogfSk7XG4gKi9cbnZhciBxdWV1ZSQxID0gZnVuY3Rpb24gKHdvcmtlciwgY29uY3VycmVuY3kpIHtcbiAgICB2YXIgX3dvcmtlciA9IHdyYXBBc3luYyh3b3JrZXIpO1xuICAgIHJldHVybiBxdWV1ZShmdW5jdGlvbiAoaXRlbXMsIGNiKSB7XG4gICAgICAgIF93b3JrZXIoaXRlbXNbMF0sIGNiKTtcbiAgICB9LCBjb25jdXJyZW5jeSwgMSk7XG59O1xuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFthc3luYy5xdWV1ZV17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnF1ZXVlfSBvbmx5IHRhc2tzIGFyZSBhc3NpZ25lZCBhIHByaW9yaXR5IGFuZFxuICogY29tcGxldGVkIGluIGFzY2VuZGluZyBwcmlvcml0eSBvcmRlci5cbiAqXG4gKiBAbmFtZSBwcmlvcml0eVF1ZXVlXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5xdWV1ZV17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnF1ZXVlfVxuICogQGNhdGVnb3J5IENvbnRyb2wgRmxvd1xuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSB3b3JrZXIgLSBBbiBhc3luYyBmdW5jdGlvbiBmb3IgcHJvY2Vzc2luZyBhIHF1ZXVlZCB0YXNrLlxuICogSWYgeW91IHdhbnQgdG8gaGFuZGxlIGVycm9ycyBmcm9tIGFuIGluZGl2aWR1YWwgdGFzaywgcGFzcyBhIGNhbGxiYWNrIHRvXG4gKiBgcS5wdXNoKClgLlxuICogSW52b2tlZCB3aXRoICh0YXNrLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge251bWJlcn0gY29uY3VycmVuY3kgLSBBbiBgaW50ZWdlcmAgZm9yIGRldGVybWluaW5nIGhvdyBtYW55IGB3b3JrZXJgXG4gKiBmdW5jdGlvbnMgc2hvdWxkIGJlIHJ1biBpbiBwYXJhbGxlbC4gIElmIG9taXR0ZWQsIHRoZSBjb25jdXJyZW5jeSBkZWZhdWx0cyB0b1xuICogYDFgLiAgSWYgdGhlIGNvbmN1cnJlbmN5IGlzIGAwYCwgYW4gZXJyb3IgaXMgdGhyb3duLlxuICogQHJldHVybnMge21vZHVsZTpDb250cm9sRmxvdy5RdWV1ZU9iamVjdH0gQSBwcmlvcml0eVF1ZXVlIG9iamVjdCB0byBtYW5hZ2UgdGhlIHRhc2tzLiBUaGVyZSBhcmUgdHdvXG4gKiBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBxdWV1ZWAgYW5kIGBwcmlvcml0eVF1ZXVlYCBvYmplY3RzOlxuICogKiBgcHVzaCh0YXNrLCBwcmlvcml0eSwgW2NhbGxiYWNrXSlgIC0gYHByaW9yaXR5YCBzaG91bGQgYmUgYSBudW1iZXIuIElmIGFuXG4gKiAgIGFycmF5IG9mIGB0YXNrc2AgaXMgZ2l2ZW4sIGFsbCB0YXNrcyB3aWxsIGJlIGFzc2lnbmVkIHRoZSBzYW1lIHByaW9yaXR5LlxuICogKiBUaGUgYHVuc2hpZnRgIG1ldGhvZCB3YXMgcmVtb3ZlZC5cbiAqL1xudmFyIHByaW9yaXR5UXVldWUgPSBmdW5jdGlvbih3b3JrZXIsIGNvbmN1cnJlbmN5KSB7XG4gICAgLy8gU3RhcnQgd2l0aCBhIG5vcm1hbCBxdWV1ZVxuICAgIHZhciBxID0gcXVldWUkMSh3b3JrZXIsIGNvbmN1cnJlbmN5KTtcblxuICAgIC8vIE92ZXJyaWRlIHB1c2ggdG8gYWNjZXB0IHNlY29uZCBwYXJhbWV0ZXIgcmVwcmVzZW50aW5nIHByaW9yaXR5XG4gICAgcS5wdXNoID0gZnVuY3Rpb24oZGF0YSwgcHJpb3JpdHksIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSBjYWxsYmFjayA9IG5vb3A7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndGFzayBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBxLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIWlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBbZGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBjYWxsIGRyYWluIGltbWVkaWF0ZWx5IGlmIHRoZXJlIGFyZSBubyB0YXNrc1xuICAgICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZSQxKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHEuZHJhaW4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuICAgICAgICB2YXIgbmV4dE5vZGUgPSBxLl90YXNrcy5oZWFkO1xuICAgICAgICB3aGlsZSAobmV4dE5vZGUgJiYgcHJpb3JpdHkgPj0gbmV4dE5vZGUucHJpb3JpdHkpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFbaV0sXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5LFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKG5leHROb2RlKSB7XG4gICAgICAgICAgICAgICAgcS5fdGFza3MuaW5zZXJ0QmVmb3JlKG5leHROb2RlLCBpdGVtKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcS5fdGFza3MucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZXRJbW1lZGlhdGUkMShxLnByb2Nlc3MpO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgdW5zaGlmdCBmdW5jdGlvblxuICAgIGRlbGV0ZSBxLnVuc2hpZnQ7XG5cbiAgICByZXR1cm4gcTtcbn07XG5cbi8qKlxuICogUnVucyB0aGUgYHRhc2tzYCBhcnJheSBvZiBmdW5jdGlvbnMgaW4gcGFyYWxsZWwsIHdpdGhvdXQgd2FpdGluZyB1bnRpbCB0aGVcbiAqIHByZXZpb3VzIGZ1bmN0aW9uIGhhcyBjb21wbGV0ZWQuIE9uY2UgYW55IG9mIHRoZSBgdGFza3NgIGNvbXBsZXRlIG9yIHBhc3MgYW5cbiAqIGVycm9yIHRvIGl0cyBjYWxsYmFjaywgdGhlIG1haW4gYGNhbGxiYWNrYCBpcyBpbW1lZGlhdGVseSBjYWxsZWQuIEl0J3NcbiAqIGVxdWl2YWxlbnQgdG8gYFByb21pc2UucmFjZSgpYC5cbiAqXG4gKiBAbmFtZSByYWNlXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FycmF5fSB0YXNrcyAtIEFuIGFycmF5IGNvbnRhaW5pbmcgW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn1cbiAqIHRvIHJ1bi4gRWFjaCBmdW5jdGlvbiBjYW4gY29tcGxldGUgd2l0aCBhbiBvcHRpb25hbCBgcmVzdWx0YCB2YWx1ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gQSBjYWxsYmFjayB0byBydW4gb25jZSBhbnkgb2YgdGhlIGZ1bmN0aW9ucyBoYXZlXG4gKiBjb21wbGV0ZWQuIFRoaXMgZnVuY3Rpb24gZ2V0cyBhbiBlcnJvciBvciByZXN1bHQgZnJvbSB0aGUgZmlyc3QgZnVuY3Rpb24gdGhhdFxuICogY29tcGxldGVkLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqIEByZXR1cm5zIHVuZGVmaW5lZFxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy5yYWNlKFtcbiAqICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScpO1xuICogICAgICAgICB9LCAyMDApO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICd0d28nKTtcbiAqICAgICAgICAgfSwgMTAwKTtcbiAqICAgICB9XG4gKiBdLFxuICogLy8gbWFpbiBjYWxsYmFja1xuICogZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyB0aGUgcmVzdWx0IHdpbGwgYmUgZXF1YWwgdG8gJ3R3bycgYXMgaXQgZmluaXNoZXMgZWFybGllclxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIHJhY2UodGFza3MsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuICAgIGlmICghaXNBcnJheSh0YXNrcykpIHJldHVybiBjYWxsYmFjayhuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCB0byByYWNlIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zJykpO1xuICAgIGlmICghdGFza3MubGVuZ3RoKSByZXR1cm4gY2FsbGJhY2soKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRhc2tzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB3cmFwQXN5bmModGFza3NbaV0pKGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbi8qKlxuICogU2FtZSBhcyBbYHJlZHVjZWBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5yZWR1Y2V9LCBvbmx5IG9wZXJhdGVzIG9uIGBhcnJheWAgaW4gcmV2ZXJzZSBvcmRlci5cbiAqXG4gKiBAbmFtZSByZWR1Y2VSaWdodFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMucmVkdWNlXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMucmVkdWNlfVxuICogQGFsaWFzIGZvbGRyXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHsqfSBtZW1vIC0gVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIHJlZHVjdGlvbi5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBIGZ1bmN0aW9uIGFwcGxpZWQgdG8gZWFjaCBpdGVtIGluIHRoZVxuICogYXJyYXkgdG8gcHJvZHVjZSB0aGUgbmV4dCBzdGVwIGluIHRoZSByZWR1Y3Rpb24uXG4gKiBUaGUgYGl0ZXJhdGVlYCBzaG91bGQgY29tcGxldGUgd2l0aCB0aGUgbmV4dCBzdGF0ZSBvZiB0aGUgcmVkdWN0aW9uLlxuICogSWYgdGhlIGl0ZXJhdGVlIGNvbXBsZXRlIHdpdGggYW4gZXJyb3IsIHRoZSByZWR1Y3Rpb24gaXMgc3RvcHBlZCBhbmQgdGhlXG4gKiBtYWluIGBjYWxsYmFja2AgaXMgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGVycm9yLlxuICogSW52b2tlZCB3aXRoIChtZW1vLCBpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC4gUmVzdWx0IGlzIHRoZSByZWR1Y2VkIHZhbHVlLiBJbnZva2VkIHdpdGhcbiAqIChlcnIsIHJlc3VsdCkuXG4gKi9cbmZ1bmN0aW9uIHJlZHVjZVJpZ2h0IChhcnJheSwgbWVtbywgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHJldmVyc2VkID0gc2xpY2UoYXJyYXkpLnJldmVyc2UoKTtcbiAgICByZWR1Y2UocmV2ZXJzZWQsIG1lbW8sIGl0ZXJhdGVlLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogV3JhcHMgdGhlIGFzeW5jIGZ1bmN0aW9uIGluIGFub3RoZXIgZnVuY3Rpb24gdGhhdCBhbHdheXMgY29tcGxldGVzIHdpdGggYVxuICogcmVzdWx0IG9iamVjdCwgZXZlbiB3aGVuIGl0IGVycm9ycy5cbiAqXG4gKiBUaGUgcmVzdWx0IG9iamVjdCBoYXMgZWl0aGVyIHRoZSBwcm9wZXJ0eSBgZXJyb3JgIG9yIGB2YWx1ZWAuXG4gKlxuICogQG5hbWUgcmVmbGVjdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpVdGlsc1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gZm4gLSBUaGUgYXN5bmMgZnVuY3Rpb24geW91IHdhbnQgdG8gd3JhcFxuICogQHJldHVybnMge0Z1bmN0aW9ufSAtIEEgZnVuY3Rpb24gdGhhdCBhbHdheXMgcGFzc2VzIG51bGwgdG8gaXQncyBjYWxsYmFjayBhc1xuICogdGhlIGVycm9yLiBUaGUgc2Vjb25kIGFyZ3VtZW50IHRvIHRoZSBjYWxsYmFjayB3aWxsIGJlIGFuIGBvYmplY3RgIHdpdGhcbiAqIGVpdGhlciBhbiBgZXJyb3JgIG9yIGEgYHZhbHVlYCBwcm9wZXJ0eS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMucGFyYWxsZWwoW1xuICogICAgIGFzeW5jLnJlZmxlY3QoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gZG8gc29tZSBzdHVmZiAuLi5cbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScpO1xuICogICAgIH0pLFxuICogICAgIGFzeW5jLnJlZmxlY3QoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gZG8gc29tZSBtb3JlIHN0dWZmIGJ1dCBlcnJvciAuLi5cbiAqICAgICAgICAgY2FsbGJhY2soJ2JhZCBzdHVmZiBoYXBwZW5lZCcpO1xuICogICAgIH0pLFxuICogICAgIGFzeW5jLnJlZmxlY3QoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gZG8gc29tZSBtb3JlIHN0dWZmIC4uLlxuICogICAgICAgICBjYWxsYmFjayhudWxsLCAndHdvJyk7XG4gKiAgICAgfSlcbiAqIF0sXG4gKiAvLyBvcHRpb25hbCBjYWxsYmFja1xuICogZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgLy8gdmFsdWVzXG4gKiAgICAgLy8gcmVzdWx0c1swXS52YWx1ZSA9ICdvbmUnXG4gKiAgICAgLy8gcmVzdWx0c1sxXS5lcnJvciA9ICdiYWQgc3R1ZmYgaGFwcGVuZWQnXG4gKiAgICAgLy8gcmVzdWx0c1syXS52YWx1ZSA9ICd0d28nXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gcmVmbGVjdChmbikge1xuICAgIHZhciBfZm4gPSB3cmFwQXN5bmMoZm4pO1xuICAgIHJldHVybiBpbml0aWFsUGFyYW1zKGZ1bmN0aW9uIHJlZmxlY3RPbihhcmdzLCByZWZsZWN0Q2FsbGJhY2spIHtcbiAgICAgICAgYXJncy5wdXNoKGZ1bmN0aW9uIGNhbGxiYWNrKGVycm9yLCBjYkFyZykge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVmbGVjdENhbGxiYWNrKG51bGwsIHsgZXJyb3I6IGVycm9yIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGNiQXJnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVmbGVjdENhbGxiYWNrKG51bGwsIHsgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gX2ZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYW4gYXJyYXkgb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB3aXRoIGByZWZsZWN0YC5cbiAqXG4gKiBAbmFtZSByZWZsZWN0QWxsXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5yZWZsZWN0XXtAbGluayBtb2R1bGU6VXRpbHMucmVmbGVjdH1cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdHxJdGVyYWJsZX0gdGFza3MgLSBUaGUgY29sbGVjdGlvbiBvZlxuICogW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn0gdG8gd3JhcCBpbiBgYXN5bmMucmVmbGVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgYXN5bmMgZnVuY3Rpb25zLCBlYWNoIHdyYXBwZWQgaW5cbiAqIGBhc3luYy5yZWZsZWN0YFxuICogQGV4YW1wbGVcbiAqXG4gKiBsZXQgdGFza3MgPSBbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICdvbmUnKTtcbiAqICAgICAgICAgfSwgMjAwKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIGRvIHNvbWUgbW9yZSBzdHVmZiBidXQgZXJyb3IgLi4uXG4gKiAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignYmFkIHN0dWZmIGhhcHBlbmVkJykpO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsICd0d28nKTtcbiAqICAgICAgICAgfSwgMTAwKTtcbiAqICAgICB9XG4gKiBdO1xuICpcbiAqIGFzeW5jLnBhcmFsbGVsKGFzeW5jLnJlZmxlY3RBbGwodGFza3MpLFxuICogLy8gb3B0aW9uYWwgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIHZhbHVlc1xuICogICAgIC8vIHJlc3VsdHNbMF0udmFsdWUgPSAnb25lJ1xuICogICAgIC8vIHJlc3VsdHNbMV0uZXJyb3IgPSBFcnJvcignYmFkIHN0dWZmIGhhcHBlbmVkJylcbiAqICAgICAvLyByZXN1bHRzWzJdLnZhbHVlID0gJ3R3bydcbiAqIH0pO1xuICpcbiAqIC8vIGFuIGV4YW1wbGUgdXNpbmcgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXlcbiAqIGxldCB0YXNrcyA9IHtcbiAqICAgICBvbmU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCAnb25lJyk7XG4gKiAgICAgICAgIH0sIDIwMCk7XG4gKiAgICAgfSxcbiAqICAgICB0d286IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKCd0d28nKTtcbiAqICAgICB9LFxuICogICAgIHRocmVlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ3RocmVlJyk7XG4gKiAgICAgICAgIH0sIDEwMCk7XG4gKiAgICAgfVxuICogfTtcbiAqXG4gKiBhc3luYy5wYXJhbGxlbChhc3luYy5yZWZsZWN0QWxsKHRhc2tzKSxcbiAqIC8vIG9wdGlvbmFsIGNhbGxiYWNrXG4gKiBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAqICAgICAvLyB2YWx1ZXNcbiAqICAgICAvLyByZXN1bHRzLm9uZS52YWx1ZSA9ICdvbmUnXG4gKiAgICAgLy8gcmVzdWx0cy50d28uZXJyb3IgPSAndHdvJ1xuICogICAgIC8vIHJlc3VsdHMudGhyZWUudmFsdWUgPSAndGhyZWUnXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gcmVmbGVjdEFsbCh0YXNrcykge1xuICAgIHZhciByZXN1bHRzO1xuICAgIGlmIChpc0FycmF5KHRhc2tzKSkge1xuICAgICAgICByZXN1bHRzID0gYXJyYXlNYXAodGFza3MsIHJlZmxlY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHMgPSB7fTtcbiAgICAgICAgYmFzZUZvck93bih0YXNrcywgZnVuY3Rpb24odGFzaywga2V5KSB7XG4gICAgICAgICAgICByZXN1bHRzW2tleV0gPSByZWZsZWN0LmNhbGwodGhpcywgdGFzayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gcmVqZWN0JDEoZWFjaGZuLCBhcnIsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIF9maWx0ZXIoZWFjaGZuLCBhcnIsIGZ1bmN0aW9uKHZhbHVlLCBjYikge1xuICAgICAgICBpdGVyYXRlZSh2YWx1ZSwgZnVuY3Rpb24oZXJyLCB2KSB7XG4gICAgICAgICAgICBjYihlcnIsICF2KTtcbiAgICAgICAgfSk7XG4gICAgfSwgY2FsbGJhY2spO1xufVxuXG4vKipcbiAqIFRoZSBvcHBvc2l0ZSBvZiBbYGZpbHRlcmBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5maWx0ZXJ9LiBSZW1vdmVzIHZhbHVlcyB0aGF0IHBhc3MgYW4gYGFzeW5jYCB0cnV0aCB0ZXN0LlxuICpcbiAqIEBuYW1lIHJlamVjdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMuZmlsdGVyXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuZmlsdGVyfVxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgdHJ1dGggdGVzdCB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIFRoZSBzaG91bGQgY29tcGxldGUgd2l0aCBhIGJvb2xlYW4gdmFsdWUgYXMgaXRzIGByZXN1bHRgLlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC4gSW52b2tlZCB3aXRoIChlcnIsIHJlc3VsdHMpLlxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy5yZWplY3QoWydmaWxlMScsJ2ZpbGUyJywnZmlsZTMnXSwgZnVuY3Rpb24oZmlsZVBhdGgsIGNhbGxiYWNrKSB7XG4gKiAgICAgZnMuYWNjZXNzKGZpbGVQYXRoLCBmdW5jdGlvbihlcnIpIHtcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgIWVycilcbiAqICAgICB9KTtcbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIHJlc3VsdHMgbm93IGVxdWFscyBhbiBhcnJheSBvZiBtaXNzaW5nIGZpbGVzXG4gKiAgICAgY3JlYXRlRmlsZXMocmVzdWx0cyk7XG4gKiB9KTtcbiAqL1xudmFyIHJlamVjdCA9IGRvUGFyYWxsZWwocmVqZWN0JDEpO1xuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFtgcmVqZWN0YF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLnJlamVjdH0gYnV0IHJ1bnMgYSBtYXhpbXVtIG9mIGBsaW1pdGAgYXN5bmMgb3BlcmF0aW9ucyBhdCBhXG4gKiB0aW1lLlxuICpcbiAqIEBuYW1lIHJlamVjdExpbWl0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5yZWplY3Rde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5yZWplY3R9XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGFzeW5jIG9wZXJhdGlvbnMgYXQgYSB0aW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyB0cnV0aCB0ZXN0IHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpblxuICogYGNvbGxgLlxuICogVGhlIHNob3VsZCBjb21wbGV0ZSB3aXRoIGEgYm9vbGVhbiB2YWx1ZSBhcyBpdHMgYHJlc3VsdGAuXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0cykuXG4gKi9cbnZhciByZWplY3RMaW1pdCA9IGRvUGFyYWxsZWxMaW1pdChyZWplY3QkMSk7XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2ByZWplY3RgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMucmVqZWN0fSBidXQgcnVucyBvbmx5IGEgc2luZ2xlIGFzeW5jIG9wZXJhdGlvbiBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgcmVqZWN0U2VyaWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5yZWplY3Rde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5yZWplY3R9XG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxJdGVyYWJsZXxPYmplY3R9IGNvbGwgLSBBIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyB0cnV0aCB0ZXN0IHRvIGFwcGx5IHRvIGVhY2ggaXRlbSBpblxuICogYGNvbGxgLlxuICogVGhlIHNob3VsZCBjb21wbGV0ZSB3aXRoIGEgYm9vbGVhbiB2YWx1ZSBhcyBpdHMgYHJlc3VsdGAuXG4gKiBJbnZva2VkIHdpdGggKGl0ZW0sIGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlXG4gKiBgaXRlcmF0ZWVgIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0cykuXG4gKi9cbnZhciByZWplY3RTZXJpZXMgPSBkb0xpbWl0KHJlamVjdExpbWl0LCAxKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50JDEodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBnZXQgYSBzdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gYHRhc2tgIG5vIG1vcmUgdGhhbiBgdGltZXNgIHRpbWVzXG4gKiBiZWZvcmUgcmV0dXJuaW5nIGFuIGVycm9yLiBJZiB0aGUgdGFzayBpcyBzdWNjZXNzZnVsLCB0aGUgYGNhbGxiYWNrYCB3aWxsIGJlXG4gKiBwYXNzZWQgdGhlIHJlc3VsdCBvZiB0aGUgc3VjY2Vzc2Z1bCB0YXNrLiBJZiBhbGwgYXR0ZW1wdHMgZmFpbCwgdGhlIGNhbGxiYWNrXG4gKiB3aWxsIGJlIHBhc3NlZCB0aGUgZXJyb3IgYW5kIHJlc3VsdCAoaWYgYW55KSBvZiB0aGUgZmluYWwgYXR0ZW1wdC5cbiAqXG4gKiBAbmFtZSByZXRyeVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb250cm9sRmxvd1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IENvbnRyb2wgRmxvd1xuICogQHNlZSBbYXN5bmMucmV0cnlhYmxlXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cucmV0cnlhYmxlfVxuICogQHBhcmFtIHtPYmplY3R8bnVtYmVyfSBbb3B0cyA9IHt0aW1lczogNSwgaW50ZXJ2YWw6IDB9fCA1XSAtIENhbiBiZSBlaXRoZXIgYW5cbiAqIG9iamVjdCB3aXRoIGB0aW1lc2AgYW5kIGBpbnRlcnZhbGAgb3IgYSBudW1iZXIuXG4gKiAqIGB0aW1lc2AgLSBUaGUgbnVtYmVyIG9mIGF0dGVtcHRzIHRvIG1ha2UgYmVmb3JlIGdpdmluZyB1cC4gIFRoZSBkZWZhdWx0XG4gKiAgIGlzIGA1YC5cbiAqICogYGludGVydmFsYCAtIFRoZSB0aW1lIHRvIHdhaXQgYmV0d2VlbiByZXRyaWVzLCBpbiBtaWxsaXNlY29uZHMuICBUaGVcbiAqICAgZGVmYXVsdCBpcyBgMGAuIFRoZSBpbnRlcnZhbCBtYXkgYWxzbyBiZSBzcGVjaWZpZWQgYXMgYSBmdW5jdGlvbiBvZiB0aGVcbiAqICAgcmV0cnkgY291bnQgKHNlZSBleGFtcGxlKS5cbiAqICogYGVycm9yRmlsdGVyYCAtIEFuIG9wdGlvbmFsIHN5bmNocm9ub3VzIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCBvblxuICogICBlcnJvbmVvdXMgcmVzdWx0LiBJZiBpdCByZXR1cm5zIGB0cnVlYCB0aGUgcmV0cnkgYXR0ZW1wdHMgd2lsbCBjb250aW51ZTtcbiAqICAgaWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgYGZhbHNlYCB0aGUgcmV0cnkgZmxvdyBpcyBhYm9ydGVkIHdpdGggdGhlIGN1cnJlbnRcbiAqICAgYXR0ZW1wdCdzIGVycm9yIGFuZCByZXN1bHQgYmVpbmcgcmV0dXJuZWQgdG8gdGhlIGZpbmFsIGNhbGxiYWNrLlxuICogICBJbnZva2VkIHdpdGggKGVycikuXG4gKiAqIElmIGBvcHRzYCBpcyBhIG51bWJlciwgdGhlIG51bWJlciBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiB0aW1lcyB0byByZXRyeSxcbiAqICAgd2l0aCB0aGUgZGVmYXVsdCBpbnRlcnZhbCBvZiBgMGAuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IHRhc2sgLSBBbiBhc3luYyBmdW5jdGlvbiB0byByZXRyeS5cbiAqIEludm9rZWQgd2l0aCAoY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIHRoZVxuICogdGFzayBoYXMgc3VjY2VlZGVkLCBvciBhZnRlciB0aGUgZmluYWwgZmFpbGVkIGF0dGVtcHQuIEl0IHJlY2VpdmVzIHRoZSBgZXJyYFxuICogYW5kIGByZXN1bHRgIGFyZ3VtZW50cyBvZiB0aGUgbGFzdCBhdHRlbXB0IGF0IGNvbXBsZXRpbmcgdGhlIGB0YXNrYC4gSW52b2tlZFxuICogd2l0aCAoZXJyLCByZXN1bHRzKS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIFRoZSBgcmV0cnlgIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIGFzIGEgc3RhbmQtYWxvbmUgY29udHJvbCBmbG93IGJ5IHBhc3NpbmdcbiAqIC8vIGEgY2FsbGJhY2ssIGFzIHNob3duIGJlbG93OlxuICpcbiAqIC8vIHRyeSBjYWxsaW5nIGFwaU1ldGhvZCAzIHRpbWVzXG4gKiBhc3luYy5yZXRyeSgzLCBhcGlNZXRob2QsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIHJlc3VsdFxuICogfSk7XG4gKlxuICogLy8gdHJ5IGNhbGxpbmcgYXBpTWV0aG9kIDMgdGltZXMsIHdhaXRpbmcgMjAwIG1zIGJldHdlZW4gZWFjaCByZXRyeVxuICogYXN5bmMucmV0cnkoe3RpbWVzOiAzLCBpbnRlcnZhbDogMjAwfSwgYXBpTWV0aG9kLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICogICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByZXN1bHRcbiAqIH0pO1xuICpcbiAqIC8vIHRyeSBjYWxsaW5nIGFwaU1ldGhvZCAxMCB0aW1lcyB3aXRoIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAqIC8vIChpLmUuIGludGVydmFscyBvZiAxMDAsIDIwMCwgNDAwLCA4MDAsIDE2MDAsIC4uLiBtaWxsaXNlY29uZHMpXG4gKiBhc3luYy5yZXRyeSh7XG4gKiAgIHRpbWVzOiAxMCxcbiAqICAgaW50ZXJ2YWw6IGZ1bmN0aW9uKHJldHJ5Q291bnQpIHtcbiAqICAgICByZXR1cm4gNTAgKiBNYXRoLnBvdygyLCByZXRyeUNvdW50KTtcbiAqICAgfVxuICogfSwgYXBpTWV0aG9kLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICogICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByZXN1bHRcbiAqIH0pO1xuICpcbiAqIC8vIHRyeSBjYWxsaW5nIGFwaU1ldGhvZCB0aGUgZGVmYXVsdCA1IHRpbWVzIG5vIGRlbGF5IGJldHdlZW4gZWFjaCByZXRyeVxuICogYXN5bmMucmV0cnkoYXBpTWV0aG9kLCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICogICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByZXN1bHRcbiAqIH0pO1xuICpcbiAqIC8vIHRyeSBjYWxsaW5nIGFwaU1ldGhvZCBvbmx5IHdoZW4gZXJyb3IgY29uZGl0aW9uIHNhdGlzZmllcywgYWxsIG90aGVyXG4gKiAvLyBlcnJvcnMgd2lsbCBhYm9ydCB0aGUgcmV0cnkgY29udHJvbCBmbG93IGFuZCByZXR1cm4gdG8gZmluYWwgY2FsbGJhY2tcbiAqIGFzeW5jLnJldHJ5KHtcbiAqICAgZXJyb3JGaWx0ZXI6IGZ1bmN0aW9uKGVycikge1xuICogICAgIHJldHVybiBlcnIubWVzc2FnZSA9PT0gJ1RlbXBvcmFyeSBlcnJvcic7IC8vIG9ubHkgcmV0cnkgb24gYSBzcGVjaWZpYyBlcnJvclxuICogICB9XG4gKiB9LCBhcGlNZXRob2QsIGZ1bmN0aW9uKGVyciwgcmVzdWx0KSB7XG4gKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggdGhlIHJlc3VsdFxuICogfSk7XG4gKlxuICogLy8gdG8gcmV0cnkgaW5kaXZpZHVhbCBtZXRob2RzIHRoYXQgYXJlIG5vdCBhcyByZWxpYWJsZSB3aXRoaW4gb3RoZXJcbiAqIC8vIGNvbnRyb2wgZmxvdyBmdW5jdGlvbnMsIHVzZSB0aGUgYHJldHJ5YWJsZWAgd3JhcHBlcjpcbiAqIGFzeW5jLmF1dG8oe1xuICogICAgIHVzZXJzOiBhcGkuZ2V0VXNlcnMuYmluZChhcGkpLFxuICogICAgIHBheW1lbnRzOiBhc3luYy5yZXRyeWFibGUoMywgYXBpLmdldFBheW1lbnRzLmJpbmQoYXBpKSlcbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByZXN1bHRzXG4gKiB9KTtcbiAqXG4gKi9cbmZ1bmN0aW9uIHJldHJ5KG9wdHMsIHRhc2ssIGNhbGxiYWNrKSB7XG4gICAgdmFyIERFRkFVTFRfVElNRVMgPSA1O1xuICAgIHZhciBERUZBVUxUX0lOVEVSVkFMID0gMDtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICB0aW1lczogREVGQVVMVF9USU1FUyxcbiAgICAgICAgaW50ZXJ2YWxGdW5jOiBjb25zdGFudCQxKERFRkFVTFRfSU5URVJWQUwpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlVGltZXMoYWNjLCB0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFjYy50aW1lcyA9ICt0LnRpbWVzIHx8IERFRkFVTFRfVElNRVM7XG5cbiAgICAgICAgICAgIGFjYy5pbnRlcnZhbEZ1bmMgPSB0eXBlb2YgdC5pbnRlcnZhbCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICAgICAgdC5pbnRlcnZhbCA6XG4gICAgICAgICAgICAgICAgY29uc3RhbnQkMSgrdC5pbnRlcnZhbCB8fCBERUZBVUxUX0lOVEVSVkFMKTtcblxuICAgICAgICAgICAgYWNjLmVycm9yRmlsdGVyID0gdC5lcnJvckZpbHRlcjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdCA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhY2MudGltZXMgPSArdCB8fCBERUZBVUxUX1RJTUVTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgZm9yIGFzeW5jLnJldHJ5XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzICYmIHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNhbGxiYWNrID0gdGFzayB8fCBub29wO1xuICAgICAgICB0YXNrID0gb3B0cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZVRpbWVzKG9wdGlvbnMsIG9wdHMpO1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IG5vb3A7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0YXNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIGZvciBhc3luYy5yZXRyeVwiKTtcbiAgICB9XG5cbiAgICB2YXIgX3Rhc2sgPSB3cmFwQXN5bmModGFzayk7XG5cbiAgICB2YXIgYXR0ZW1wdCA9IDE7XG4gICAgZnVuY3Rpb24gcmV0cnlBdHRlbXB0KCkge1xuICAgICAgICBfdGFzayhmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgJiYgYXR0ZW1wdCsrIDwgb3B0aW9ucy50aW1lcyAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2Ygb3B0aW9ucy5lcnJvckZpbHRlciAhPSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZXJyb3JGaWx0ZXIoZXJyKSkpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHJldHJ5QXR0ZW1wdCwgb3B0aW9ucy5pbnRlcnZhbEZ1bmMoYXR0ZW1wdCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXRyeUF0dGVtcHQoKTtcbn1cblxuLyoqXG4gKiBBIGNsb3NlIHJlbGF0aXZlIG9mIFtgcmV0cnlgXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cucmV0cnl9LiAgVGhpcyBtZXRob2RcbiAqIHdyYXBzIGEgdGFzayBhbmQgbWFrZXMgaXQgcmV0cnlhYmxlLCByYXRoZXIgdGhhbiBpbW1lZGlhdGVseSBjYWxsaW5nIGl0XG4gKiB3aXRoIHJldHJpZXMuXG4gKlxuICogQG5hbWUgcmV0cnlhYmxlXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5yZXRyeV17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnJldHJ5fVxuICogQGNhdGVnb3J5IENvbnRyb2wgRmxvd1xuICogQHBhcmFtIHtPYmplY3R8bnVtYmVyfSBbb3B0cyA9IHt0aW1lczogNSwgaW50ZXJ2YWw6IDB9fCA1XSAtIG9wdGlvbmFsXG4gKiBvcHRpb25zLCBleGFjdGx5IHRoZSBzYW1lIGFzIGZyb20gYHJldHJ5YFxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSB0YXNrIC0gdGhlIGFzeW5jaHJvbm91cyBmdW5jdGlvbiB0byB3cmFwLlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHBhc3NlZCBhbnkgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgcmV0dXJuZWQgd3JhcHBlci5cbiAqIEludm9rZWQgd2l0aCAoLi4uYXJncywgY2FsbGJhY2spLlxuICogQHJldHVybnMge0FzeW5jRnVuY3Rpb259IFRoZSB3cmFwcGVkIGZ1bmN0aW9uLCB3aGljaCB3aGVuIGludm9rZWQsIHdpbGxcbiAqIHJldHJ5IG9uIGFuIGVycm9yLCBiYXNlZCBvbiB0aGUgcGFyYW1ldGVycyBzcGVjaWZpZWQgaW4gYG9wdHNgLlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGFjY2VwdCB0aGUgc2FtZSBwYXJhbWV0ZXJzIGFzIGB0YXNrYC5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMuYXV0byh7XG4gKiAgICAgZGVwMTogYXN5bmMucmV0cnlhYmxlKDMsIGdldEZyb21GbGFreVNlcnZpY2UpLFxuICogICAgIHByb2Nlc3M6IFtcImRlcDFcIiwgYXN5bmMucmV0cnlhYmxlKDMsIGZ1bmN0aW9uIChyZXN1bHRzLCBjYikge1xuICogICAgICAgICBtYXliZVByb2Nlc3NEYXRhKHJlc3VsdHMuZGVwMSwgY2IpO1xuICogICAgIH0pXVxuICogfSwgY2FsbGJhY2spO1xuICovXG52YXIgcmV0cnlhYmxlID0gZnVuY3Rpb24gKG9wdHMsIHRhc2spIHtcbiAgICBpZiAoIXRhc2spIHtcbiAgICAgICAgdGFzayA9IG9wdHM7XG4gICAgICAgIG9wdHMgPSBudWxsO1xuICAgIH1cbiAgICB2YXIgX3Rhc2sgPSB3cmFwQXN5bmModGFzayk7XG4gICAgcmV0dXJuIGluaXRpYWxQYXJhbXMoZnVuY3Rpb24gKGFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgICAgIGZ1bmN0aW9uIHRhc2tGbihjYikge1xuICAgICAgICAgICAgX3Rhc2suYXBwbHkobnVsbCwgYXJncy5jb25jYXQoY2IpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzKSByZXRyeShvcHRzLCB0YXNrRm4sIGNhbGxiYWNrKTtcbiAgICAgICAgZWxzZSByZXRyeSh0YXNrRm4sIGNhbGxiYWNrKTtcblxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBSdW4gdGhlIGZ1bmN0aW9ucyBpbiB0aGUgYHRhc2tzYCBjb2xsZWN0aW9uIGluIHNlcmllcywgZWFjaCBvbmUgcnVubmluZyBvbmNlXG4gKiB0aGUgcHJldmlvdXMgZnVuY3Rpb24gaGFzIGNvbXBsZXRlZC4gSWYgYW55IGZ1bmN0aW9ucyBpbiB0aGUgc2VyaWVzIHBhc3MgYW5cbiAqIGVycm9yIHRvIGl0cyBjYWxsYmFjaywgbm8gbW9yZSBmdW5jdGlvbnMgYXJlIHJ1biwgYW5kIGBjYWxsYmFja2AgaXNcbiAqIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgZXJyb3IuIE90aGVyd2lzZSwgYGNhbGxiYWNrYFxuICogcmVjZWl2ZXMgYW4gYXJyYXkgb2YgcmVzdWx0cyB3aGVuIGB0YXNrc2AgaGF2ZSBjb21wbGV0ZWQuXG4gKlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byB1c2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXkuIEVhY2ggcHJvcGVydHkgd2lsbFxuICogYmUgcnVuIGFzIGEgZnVuY3Rpb24sIGFuZCB0aGUgcmVzdWx0cyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZmluYWwgYGNhbGxiYWNrYFxuICogYXMgYW4gb2JqZWN0IGluc3RlYWQgb2YgYW4gYXJyYXkuIFRoaXMgY2FuIGJlIGEgbW9yZSByZWFkYWJsZSB3YXkgb2YgaGFuZGxpbmdcbiAqICByZXN1bHRzIGZyb20ge0BsaW5rIGFzeW5jLnNlcmllc30uXG4gKlxuICogKipOb3RlKiogdGhhdCB3aGlsZSBtYW55IGltcGxlbWVudGF0aW9ucyBwcmVzZXJ2ZSB0aGUgb3JkZXIgb2Ygb2JqZWN0XG4gKiBwcm9wZXJ0aWVzLCB0aGUgW0VDTUFTY3JpcHQgTGFuZ3VhZ2UgU3BlY2lmaWNhdGlvbl0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguNilcbiAqIGV4cGxpY2l0bHkgc3RhdGVzIHRoYXRcbiAqXG4gKiA+IFRoZSBtZWNoYW5pY3MgYW5kIG9yZGVyIG9mIGVudW1lcmF0aW5nIHRoZSBwcm9wZXJ0aWVzIGlzIG5vdCBzcGVjaWZpZWQuXG4gKlxuICogU28gaWYgeW91IHJlbHkgb24gdGhlIG9yZGVyIGluIHdoaWNoIHlvdXIgc2VyaWVzIG9mIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQsXG4gKiBhbmQgd2FudCB0aGlzIHRvIHdvcmsgb24gYWxsIHBsYXRmb3JtcywgY29uc2lkZXIgdXNpbmcgYW4gYXJyYXkuXG4gKlxuICogQG5hbWUgc2VyaWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gdGFza3MgLSBBIGNvbGxlY3Rpb24gY29udGFpbmluZ1xuICogW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn0gdG8gcnVuIGluIHNlcmllcy5cbiAqIEVhY2ggZnVuY3Rpb24gY2FuIGNvbXBsZXRlIHdpdGggYW55IG51bWJlciBvZiBvcHRpb25hbCBgcmVzdWx0YCB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gcnVuIG9uY2UgYWxsIHRoZVxuICogZnVuY3Rpb25zIGhhdmUgY29tcGxldGVkLiBUaGlzIGZ1bmN0aW9uIGdldHMgYSByZXN1bHRzIGFycmF5IChvciBvYmplY3QpXG4gKiBjb250YWluaW5nIGFsbCB0aGUgcmVzdWx0IGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGB0YXNrYCBjYWxsYmFja3MuIEludm9rZWRcbiAqIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqIEBleGFtcGxlXG4gKiBhc3luYy5zZXJpZXMoW1xuICogICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIGRvIHNvbWUgc3R1ZmYgLi4uXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICdvbmUnKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIGRvIHNvbWUgbW9yZSBzdHVmZiAuLi5cbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ3R3bycpO1xuICogICAgIH1cbiAqIF0sXG4gKiAvLyBvcHRpb25hbCBjYWxsYmFja1xuICogZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgLy8gcmVzdWx0cyBpcyBub3cgZXF1YWwgdG8gWydvbmUnLCAndHdvJ11cbiAqIH0pO1xuICpcbiAqIGFzeW5jLnNlcmllcyh7XG4gKiAgICAgb25lOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICogICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgMSk7XG4gKiAgICAgICAgIH0sIDIwMCk7XG4gKiAgICAgfSxcbiAqICAgICB0d286IGZ1bmN0aW9uKGNhbGxiYWNrKXtcbiAqICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIDIpO1xuICogICAgICAgICB9LCAxMDApO1xuICogICAgIH1cbiAqIH0sIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIC8vIHJlc3VsdHMgaXMgbm93IGVxdWFsIHRvOiB7b25lOiAxLCB0d286IDJ9XG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gc2VyaWVzKHRhc2tzLCBjYWxsYmFjaykge1xuICAgIF9wYXJhbGxlbChlYWNoT2ZTZXJpZXMsIHRhc2tzLCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIGBjb2xsYCBzYXRpc2ZpZXMgYW4gYXN5bmMgdGVzdC5cbiAqIElmIGFueSBpdGVyYXRlZSBjYWxsIHJldHVybnMgYHRydWVgLCB0aGUgbWFpbiBgY2FsbGJhY2tgIGlzIGltbWVkaWF0ZWx5XG4gKiBjYWxsZWQuXG4gKlxuICogQG5hbWUgc29tZVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGFsaWFzIGFueVxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyB0cnV0aCB0ZXN0IHRvIGFwcGx5IHRvIGVhY2ggaXRlbVxuICogaW4gdGhlIGNvbGxlY3Rpb25zIGluIHBhcmFsbGVsLlxuICogVGhlIGl0ZXJhdGVlIHNob3VsZCBjb21wbGV0ZSB3aXRoIGEgYm9vbGVhbiBgcmVzdWx0YCB2YWx1ZS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFzIHNvb24gYXMgYW55XG4gKiBpdGVyYXRlZSByZXR1cm5zIGB0cnVlYCwgb3IgYWZ0ZXIgYWxsIHRoZSBpdGVyYXRlZSBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC5cbiAqIFJlc3VsdCB3aWxsIGJlIGVpdGhlciBgdHJ1ZWAgb3IgYGZhbHNlYCBkZXBlbmRpbmcgb24gdGhlIHZhbHVlcyBvZiB0aGUgYXN5bmNcbiAqIHRlc3RzLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMuc29tZShbJ2ZpbGUxJywnZmlsZTInLCdmaWxlMyddLCBmdW5jdGlvbihmaWxlUGF0aCwgY2FsbGJhY2spIHtcbiAqICAgICBmcy5hY2Nlc3MoZmlsZVBhdGgsIGZ1bmN0aW9uKGVycikge1xuICogICAgICAgICBjYWxsYmFjayhudWxsLCAhZXJyKVxuICogICAgIH0pO1xuICogfSwgZnVuY3Rpb24oZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyBpZiByZXN1bHQgaXMgdHJ1ZSB0aGVuIGF0IGxlYXN0IG9uZSBvZiB0aGUgZmlsZXMgZXhpc3RzXG4gKiB9KTtcbiAqL1xudmFyIHNvbWUgPSBkb1BhcmFsbGVsKF9jcmVhdGVUZXN0ZXIoQm9vbGVhbiwgaWRlbnRpdHkpKTtcblxuLyoqXG4gKiBUaGUgc2FtZSBhcyBbYHNvbWVgXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuc29tZX0gYnV0IHJ1bnMgYSBtYXhpbXVtIG9mIGBsaW1pdGAgYXN5bmMgb3BlcmF0aW9ucyBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgc29tZUxpbWl0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5zb21lXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuc29tZX1cbiAqIEBhbGlhcyBhbnlMaW1pdFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyB0cnV0aCB0ZXN0IHRvIGFwcGx5IHRvIGVhY2ggaXRlbVxuICogaW4gdGhlIGNvbGxlY3Rpb25zIGluIHBhcmFsbGVsLlxuICogVGhlIGl0ZXJhdGVlIHNob3VsZCBjb21wbGV0ZSB3aXRoIGEgYm9vbGVhbiBgcmVzdWx0YCB2YWx1ZS5cbiAqIEludm9rZWQgd2l0aCAoaXRlbSwgY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFzIHNvb24gYXMgYW55XG4gKiBpdGVyYXRlZSByZXR1cm5zIGB0cnVlYCwgb3IgYWZ0ZXIgYWxsIHRoZSBpdGVyYXRlZSBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC5cbiAqIFJlc3VsdCB3aWxsIGJlIGVpdGhlciBgdHJ1ZWAgb3IgYGZhbHNlYCBkZXBlbmRpbmcgb24gdGhlIHZhbHVlcyBvZiB0aGUgYXN5bmNcbiAqIHRlc3RzLiBJbnZva2VkIHdpdGggKGVyciwgcmVzdWx0KS5cbiAqL1xudmFyIHNvbWVMaW1pdCA9IGRvUGFyYWxsZWxMaW1pdChfY3JlYXRlVGVzdGVyKEJvb2xlYW4sIGlkZW50aXR5KSk7XG5cbi8qKlxuICogVGhlIHNhbWUgYXMgW2Bzb21lYF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLnNvbWV9IGJ1dCBydW5zIG9ubHkgYSBzaW5nbGUgYXN5bmMgb3BlcmF0aW9uIGF0IGEgdGltZS5cbiAqXG4gKiBAbmFtZSBzb21lU2VyaWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbGxlY3Rpb25zXG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5zb21lXXtAbGluayBtb2R1bGU6Q29sbGVjdGlvbnMuc29tZX1cbiAqIEBhbGlhcyBhbnlTZXJpZXNcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fEl0ZXJhYmxlfE9iamVjdH0gY29sbCAtIEEgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgdHJ1dGggdGVzdCB0byBhcHBseSB0byBlYWNoIGl0ZW1cbiAqIGluIHRoZSBjb2xsZWN0aW9ucyBpbiBzZXJpZXMuXG4gKiBUaGUgaXRlcmF0ZWUgc2hvdWxkIGNvbXBsZXRlIHdpdGggYSBib29sZWFuIGByZXN1bHRgIHZhbHVlLlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYXMgc29vbiBhcyBhbnlcbiAqIGl0ZXJhdGVlIHJldHVybnMgYHRydWVgLCBvciBhZnRlciBhbGwgdGhlIGl0ZXJhdGVlIGZ1bmN0aW9ucyBoYXZlIGZpbmlzaGVkLlxuICogUmVzdWx0IHdpbGwgYmUgZWl0aGVyIGB0cnVlYCBvciBgZmFsc2VgIGRlcGVuZGluZyBvbiB0aGUgdmFsdWVzIG9mIHRoZSBhc3luY1xuICogdGVzdHMuIEludm9rZWQgd2l0aCAoZXJyLCByZXN1bHQpLlxuICovXG52YXIgc29tZVNlcmllcyA9IGRvTGltaXQoc29tZUxpbWl0LCAxKTtcblxuLyoqXG4gKiBTb3J0cyBhIGxpc3QgYnkgdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGBjb2xsYCB2YWx1ZSB0aHJvdWdoIGFuIGFzeW5jXG4gKiBgaXRlcmF0ZWVgLlxuICpcbiAqIEBuYW1lIHNvcnRCeVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBBbiBhc3luYyBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGl0ZW0gaW5cbiAqIGBjb2xsYC5cbiAqIFRoZSBpdGVyYXRlZSBzaG91bGQgY29tcGxldGUgd2l0aCBhIHZhbHVlIHRvIHVzZSBhcyB0aGUgc29ydCBjcml0ZXJpYSBhc1xuICogaXRzIGByZXN1bHRgLlxuICogSW52b2tlZCB3aXRoIChpdGVtLCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIGFsbCB0aGVcbiAqIGBpdGVyYXRlZWAgZnVuY3Rpb25zIGhhdmUgZmluaXNoZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gUmVzdWx0cyBpcyB0aGUgaXRlbXNcbiAqIGZyb20gdGhlIG9yaWdpbmFsIGBjb2xsYCBzb3J0ZWQgYnkgdGhlIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgYGl0ZXJhdGVlYFxuICogY2FsbHMuIEludm9rZWQgd2l0aCAoZXJyLCByZXN1bHRzKS5cbiAqIEBleGFtcGxlXG4gKlxuICogYXN5bmMuc29ydEJ5KFsnZmlsZTEnLCdmaWxlMicsJ2ZpbGUzJ10sIGZ1bmN0aW9uKGZpbGUsIGNhbGxiYWNrKSB7XG4gKiAgICAgZnMuc3RhdChmaWxlLCBmdW5jdGlvbihlcnIsIHN0YXRzKSB7XG4gKiAgICAgICAgIGNhbGxiYWNrKGVyciwgc3RhdHMubXRpbWUpO1xuICogICAgIH0pO1xuICogfSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gKiAgICAgLy8gcmVzdWx0cyBpcyBub3cgdGhlIG9yaWdpbmFsIGFycmF5IG9mIGZpbGVzIHNvcnRlZCBieVxuICogICAgIC8vIG1vZGlmaWVkIGRhdGVcbiAqIH0pO1xuICpcbiAqIC8vIEJ5IG1vZGlmeWluZyB0aGUgY2FsbGJhY2sgcGFyYW1ldGVyIHRoZVxuICogLy8gc29ydGluZyBvcmRlciBjYW4gYmUgaW5mbHVlbmNlZDpcbiAqXG4gKiAvLyBhc2NlbmRpbmcgb3JkZXJcbiAqIGFzeW5jLnNvcnRCeShbMSw5LDMsNV0sIGZ1bmN0aW9uKHgsIGNhbGxiYWNrKSB7XG4gKiAgICAgY2FsbGJhY2sobnVsbCwgeCk7XG4gKiB9LCBmdW5jdGlvbihlcnIscmVzdWx0KSB7XG4gKiAgICAgLy8gcmVzdWx0IGNhbGxiYWNrXG4gKiB9KTtcbiAqXG4gKiAvLyBkZXNjZW5kaW5nIG9yZGVyXG4gKiBhc3luYy5zb3J0QnkoWzEsOSwzLDVdLCBmdW5jdGlvbih4LCBjYWxsYmFjaykge1xuICogICAgIGNhbGxiYWNrKG51bGwsIHgqLTEpOyAgICAvLzwtIHgqLTEgaW5zdGVhZCBvZiB4LCB0dXJucyB0aGUgb3JkZXIgYXJvdW5kXG4gKiB9LCBmdW5jdGlvbihlcnIscmVzdWx0KSB7XG4gKiAgICAgLy8gcmVzdWx0IGNhbGxiYWNrXG4gKiB9KTtcbiAqL1xuZnVuY3Rpb24gc29ydEJ5IChjb2xsLCBpdGVyYXRlZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgX2l0ZXJhdGVlID0gd3JhcEFzeW5jKGl0ZXJhdGVlKTtcbiAgICBtYXAoY29sbCwgZnVuY3Rpb24gKHgsIGNhbGxiYWNrKSB7XG4gICAgICAgIF9pdGVyYXRlZSh4LCBmdW5jdGlvbiAoZXJyLCBjcml0ZXJpYSkge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7dmFsdWU6IHgsIGNyaXRlcmlhOiBjcml0ZXJpYX0pO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCBhcnJheU1hcChyZXN1bHRzLnNvcnQoY29tcGFyYXRvciksIGJhc2VQcm9wZXJ0eSgndmFsdWUnKSkpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY29tcGFyYXRvcihsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWEsIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTZXRzIGEgdGltZSBsaW1pdCBvbiBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb24uIElmIHRoZSBmdW5jdGlvbiBkb2VzIG5vdCBjYWxsXG4gKiBpdHMgY2FsbGJhY2sgd2l0aGluIHRoZSBzcGVjaWZpZWQgbWlsbGlzZWNvbmRzLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFcbiAqIHRpbWVvdXQgZXJyb3IuIFRoZSBjb2RlIHByb3BlcnR5IGZvciB0aGUgZXJyb3Igb2JqZWN0IHdpbGwgYmUgYCdFVElNRURPVVQnYC5cbiAqXG4gKiBAbmFtZSB0aW1lb3V0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOlV0aWxzXG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBhc3luY0ZuIC0gVGhlIGFzeW5jIGZ1bmN0aW9uIHRvIGxpbWl0IGluIHRpbWUuXG4gKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gVGhlIHNwZWNpZmllZCB0aW1lIGxpbWl0LlxuICogQHBhcmFtIHsqfSBbaW5mb10gLSBBbnkgdmFyaWFibGUgeW91IHdhbnQgYXR0YWNoZWQgKGBzdHJpbmdgLCBgb2JqZWN0YCwgZXRjKVxuICogdG8gdGltZW91dCBFcnJvciBmb3IgbW9yZSBpbmZvcm1hdGlvbi4uXG4gKiBAcmV0dXJucyB7QXN5bmNGdW5jdGlvbn0gUmV0dXJucyBhIHdyYXBwZWQgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB3aXRoIGFueVxuICogb2YgdGhlIGNvbnRyb2wgZmxvdyBmdW5jdGlvbnMuXG4gKiBJbnZva2UgdGhpcyBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHBhcmFtZXRlcnMgYXMgeW91IHdvdWxkIGBhc3luY0Z1bmNgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBteUZ1bmN0aW9uKGZvbywgY2FsbGJhY2spIHtcbiAqICAgICBkb0FzeW5jVGFzayhmb28sIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICogICAgICAgICAvLyBoYW5kbGUgZXJyb3JzXG4gKiAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICpcbiAqICAgICAgICAgLy8gZG8gc29tZSBzdHVmZiAuLi5cbiAqXG4gKiAgICAgICAgIC8vIHJldHVybiBwcm9jZXNzZWQgZGF0YVxuICogICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gKiAgICAgfSk7XG4gKiB9XG4gKlxuICogdmFyIHdyYXBwZWQgPSBhc3luYy50aW1lb3V0KG15RnVuY3Rpb24sIDEwMDApO1xuICpcbiAqIC8vIGNhbGwgYHdyYXBwZWRgIGFzIHlvdSB3b3VsZCBgbXlGdW5jdGlvbmBcbiAqIHdyYXBwZWQoeyBiYXI6ICdiYXInIH0sIGZ1bmN0aW9uKGVyciwgZGF0YSkge1xuICogICAgIC8vIGlmIGBteUZ1bmN0aW9uYCB0YWtlcyA8IDEwMDAgbXMgdG8gZXhlY3V0ZSwgYGVycmBcbiAqICAgICAvLyBhbmQgYGRhdGFgIHdpbGwgaGF2ZSB0aGVpciBleHBlY3RlZCB2YWx1ZXNcbiAqXG4gKiAgICAgLy8gZWxzZSBgZXJyYCB3aWxsIGJlIGFuIEVycm9yIHdpdGggdGhlIGNvZGUgJ0VUSU1FRE9VVCdcbiAqIH0pO1xuICovXG5mdW5jdGlvbiB0aW1lb3V0KGFzeW5jRm4sIG1pbGxpc2Vjb25kcywgaW5mbykge1xuICAgIHZhciBmbiA9IHdyYXBBc3luYyhhc3luY0ZuKTtcblxuICAgIHJldHVybiBpbml0aWFsUGFyYW1zKGZ1bmN0aW9uIChhcmdzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGltZWRPdXQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRpbWVyO1xuXG4gICAgICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gYXN5bmNGbi5uYW1lIHx8ICdhbm9ueW1vdXMnO1xuICAgICAgICAgICAgdmFyIGVycm9yICA9IG5ldyBFcnJvcignQ2FsbGJhY2sgZnVuY3Rpb24gXCInICsgbmFtZSArICdcIiB0aW1lZCBvdXQuJyk7XG4gICAgICAgICAgICBlcnJvci5jb2RlID0gJ0VUSU1FRE9VVCc7XG4gICAgICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgICAgICAgIGVycm9yLmluZm8gPSBpbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGltZWRPdXQgPSB0cnVlO1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJncy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGltZWRPdXQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNldHVwIHRpbWVyIGFuZCBjYWxsIG9yaWdpbmFsIGZ1bmN0aW9uXG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCh0aW1lb3V0Q2FsbGJhY2ssIG1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xufVxuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbDtcbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAqIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFt0aW1lc117QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnRpbWVzfSBidXQgcnVucyBhIG1heGltdW0gb2YgYGxpbWl0YCBhc3luYyBvcGVyYXRpb25zIGF0IGFcbiAqIHRpbWUuXG4gKlxuICogQG5hbWUgdGltZXNMaW1pdFxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb250cm9sRmxvd1xuICogQG1ldGhvZFxuICogQHNlZSBbYXN5bmMudGltZXNde0BsaW5rIG1vZHVsZTpDb250cm9sRmxvdy50aW1lc31cbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcnVuIHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhc3luYyBvcGVyYXRpb25zIGF0IGEgdGltZS5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBUaGUgYXN5bmMgZnVuY3Rpb24gdG8gY2FsbCBgbmAgdGltZXMuXG4gKiBJbnZva2VkIHdpdGggdGhlIGl0ZXJhdGlvbiBpbmRleCBhbmQgYSBjYWxsYmFjazogKG4sIG5leHQpLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBzZWUgW2FzeW5jLm1hcF17QGxpbmsgbW9kdWxlOkNvbGxlY3Rpb25zLm1hcH0uXG4gKi9cbmZ1bmN0aW9uIHRpbWVMaW1pdChjb3VudCwgbGltaXQsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHZhciBfaXRlcmF0ZWUgPSB3cmFwQXN5bmMoaXRlcmF0ZWUpO1xuICAgIG1hcExpbWl0KGJhc2VSYW5nZSgwLCBjb3VudCwgMSksIGxpbWl0LCBfaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBDYWxscyB0aGUgYGl0ZXJhdGVlYCBmdW5jdGlvbiBgbmAgdGltZXMsIGFuZCBhY2N1bXVsYXRlcyByZXN1bHRzIGluIHRoZSBzYW1lXG4gKiBtYW5uZXIgeW91IHdvdWxkIHVzZSB3aXRoIFttYXBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9LlxuICpcbiAqIEBuYW1lIHRpbWVzXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAc2VlIFthc3luYy5tYXBde0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge251bWJlcn0gbiAtIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcnVuIHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBUaGUgYXN5bmMgZnVuY3Rpb24gdG8gY2FsbCBgbmAgdGltZXMuXG4gKiBJbnZva2VkIHdpdGggdGhlIGl0ZXJhdGlvbiBpbmRleCBhbmQgYSBjYWxsYmFjazogKG4sIG5leHQpLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBzZWUge0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9LlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBQcmV0ZW5kIHRoaXMgaXMgc29tZSBjb21wbGljYXRlZCBhc3luYyBmYWN0b3J5XG4gKiB2YXIgY3JlYXRlVXNlciA9IGZ1bmN0aW9uKGlkLCBjYWxsYmFjaykge1xuICogICAgIGNhbGxiYWNrKG51bGwsIHtcbiAqICAgICAgICAgaWQ6ICd1c2VyJyArIGlkXG4gKiAgICAgfSk7XG4gKiB9O1xuICpcbiAqIC8vIGdlbmVyYXRlIDUgdXNlcnNcbiAqIGFzeW5jLnRpbWVzKDUsIGZ1bmN0aW9uKG4sIG5leHQpIHtcbiAqICAgICBjcmVhdGVVc2VyKG4sIGZ1bmN0aW9uKGVyciwgdXNlcikge1xuICogICAgICAgICBuZXh0KGVyciwgdXNlcik7XG4gKiAgICAgfSk7XG4gKiB9LCBmdW5jdGlvbihlcnIsIHVzZXJzKSB7XG4gKiAgICAgLy8gd2Ugc2hvdWxkIG5vdyBoYXZlIDUgdXNlcnNcbiAqIH0pO1xuICovXG52YXIgdGltZXMgPSBkb0xpbWl0KHRpbWVMaW1pdCwgSW5maW5pdHkpO1xuXG4vKipcbiAqIFRoZSBzYW1lIGFzIFt0aW1lc117QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LnRpbWVzfSBidXQgcnVucyBvbmx5IGEgc2luZ2xlIGFzeW5jIG9wZXJhdGlvbiBhdCBhIHRpbWUuXG4gKlxuICogQG5hbWUgdGltZXNTZXJpZXNcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLnRpbWVzXXtAbGluayBtb2R1bGU6Q29udHJvbEZsb3cudGltZXN9XG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge251bWJlcn0gbiAtIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcnVuIHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gaXRlcmF0ZWUgLSBUaGUgYXN5bmMgZnVuY3Rpb24gdG8gY2FsbCBgbmAgdGltZXMuXG4gKiBJbnZva2VkIHdpdGggdGhlIGl0ZXJhdGlvbiBpbmRleCBhbmQgYSBjYWxsYmFjazogKG4sIG5leHQpLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBzZWUge0BsaW5rIG1vZHVsZTpDb2xsZWN0aW9ucy5tYXB9LlxuICovXG52YXIgdGltZXNTZXJpZXMgPSBkb0xpbWl0KHRpbWVMaW1pdCwgMSk7XG5cbi8qKlxuICogQSByZWxhdGl2ZSBvZiBgcmVkdWNlYC4gIFRha2VzIGFuIE9iamVjdCBvciBBcnJheSwgYW5kIGl0ZXJhdGVzIG92ZXIgZWFjaFxuICogZWxlbWVudCBpbiBzZXJpZXMsIGVhY2ggc3RlcCBwb3RlbnRpYWxseSBtdXRhdGluZyBhbiBgYWNjdW11bGF0b3JgIHZhbHVlLlxuICogVGhlIHR5cGUgb2YgdGhlIGFjY3VtdWxhdG9yIGRlZmF1bHRzIHRvIHRoZSB0eXBlIG9mIGNvbGxlY3Rpb24gcGFzc2VkIGluLlxuICpcbiAqIEBuYW1lIHRyYW5zZm9ybVxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIG1vZHVsZTpDb2xsZWN0aW9uc1xuICogQG1ldGhvZFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSBjb2xsIC0gQSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSAtIFRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSB0cmFuc2Zvcm0uICBJZiBvbWl0dGVkLFxuICogaXQgd2lsbCBkZWZhdWx0IHRvIGFuIGVtcHR5IE9iamVjdCBvciBBcnJheSwgZGVwZW5kaW5nIG9uIHRoZSB0eXBlIG9mIGBjb2xsYFxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEEgZnVuY3Rpb24gYXBwbGllZCB0byBlYWNoIGl0ZW0gaW4gdGhlXG4gKiBjb2xsZWN0aW9uIHRoYXQgcG90ZW50aWFsbHkgbW9kaWZpZXMgdGhlIGFjY3VtdWxhdG9yLlxuICogSW52b2tlZCB3aXRoIChhY2N1bXVsYXRvciwgaXRlbSwga2V5LCBjYWxsYmFjaykuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgYWxsIHRoZVxuICogYGl0ZXJhdGVlYCBmdW5jdGlvbnMgaGF2ZSBmaW5pc2hlZC4gUmVzdWx0IGlzIHRoZSB0cmFuc2Zvcm1lZCBhY2N1bXVsYXRvci5cbiAqIEludm9rZWQgd2l0aCAoZXJyLCByZXN1bHQpLlxuICogQGV4YW1wbGVcbiAqXG4gKiBhc3luYy50cmFuc2Zvcm0oWzEsMiwzXSwgZnVuY3Rpb24oYWNjLCBpdGVtLCBpbmRleCwgY2FsbGJhY2spIHtcbiAqICAgICAvLyBwb2ludGxlc3MgYXN5bmM6XG4gKiAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAqICAgICAgICAgYWNjLnB1c2goaXRlbSAqIDIpXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwpXG4gKiAgICAgfSk7XG4gKiB9LCBmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICogICAgIC8vIHJlc3VsdCBpcyBub3cgZXF1YWwgdG8gWzIsIDQsIDZdXG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLnRyYW5zZm9ybSh7YTogMSwgYjogMiwgYzogM30sIGZ1bmN0aW9uIChvYmosIHZhbCwga2V5LCBjYWxsYmFjaykge1xuICogICAgIHNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gKiAgICAgICAgIG9ialtrZXldID0gdmFsICogMjtcbiAqICAgICAgICAgY2FsbGJhY2soKTtcbiAqICAgICB9KVxuICogfSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gKiAgICAgLy8gcmVzdWx0IGlzIGVxdWFsIHRvIHthOiAyLCBiOiA0LCBjOiA2fVxuICogfSlcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtIChjb2xsLCBhY2N1bXVsYXRvciwgaXRlcmF0ZWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMykge1xuICAgICAgICBjYWxsYmFjayA9IGl0ZXJhdGVlO1xuICAgICAgICBpdGVyYXRlZSA9IGFjY3VtdWxhdG9yO1xuICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyYXkoY29sbCkgPyBbXSA6IHt9O1xuICAgIH1cbiAgICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gICAgdmFyIF9pdGVyYXRlZSA9IHdyYXBBc3luYyhpdGVyYXRlZSk7XG5cbiAgICBlYWNoT2YoY29sbCwgZnVuY3Rpb24odiwgaywgY2IpIHtcbiAgICAgICAgX2l0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2LCBrLCBjYik7XG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgYWNjdW11bGF0b3IpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEl0IHJ1bnMgZWFjaCB0YXNrIGluIHNlcmllcyBidXQgc3RvcHMgd2hlbmV2ZXIgYW55IG9mIHRoZSBmdW5jdGlvbnMgd2VyZVxuICogc3VjY2Vzc2Z1bC4gSWYgb25lIG9mIHRoZSB0YXNrcyB3ZXJlIHN1Y2Nlc3NmdWwsIHRoZSBgY2FsbGJhY2tgIHdpbGwgYmVcbiAqIHBhc3NlZCB0aGUgcmVzdWx0IG9mIHRoZSBzdWNjZXNzZnVsIHRhc2suIElmIGFsbCB0YXNrcyBmYWlsLCB0aGUgY2FsbGJhY2tcbiAqIHdpbGwgYmUgcGFzc2VkIHRoZSBlcnJvciBhbmQgcmVzdWx0IChpZiBhbnkpIG9mIHRoZSBmaW5hbCBhdHRlbXB0LlxuICpcbiAqIEBuYW1lIHRyeUVhY2hcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl8SXRlcmFibGV8T2JqZWN0fSB0YXNrcyAtIEEgY29sbGVjdGlvbiBjb250YWluaW5nIGZ1bmN0aW9ucyB0b1xuICogcnVuLCBlYWNoIGZ1bmN0aW9uIGlzIHBhc3NlZCBhIGBjYWxsYmFjayhlcnIsIHJlc3VsdClgIGl0IG11c3QgY2FsbCBvblxuICogY29tcGxldGlvbiB3aXRoIGFuIGVycm9yIGBlcnJgICh3aGljaCBjYW4gYmUgYG51bGxgKSBhbmQgYW4gb3B0aW9uYWwgYHJlc3VsdGBcbiAqIHZhbHVlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCB3aGVuIG9uZVxuICogb2YgdGhlIHRhc2tzIGhhcyBzdWNjZWVkZWQsIG9yIGFsbCBoYXZlIGZhaWxlZC4gSXQgcmVjZWl2ZXMgdGhlIGBlcnJgIGFuZFxuICogYHJlc3VsdGAgYXJndW1lbnRzIG9mIHRoZSBsYXN0IGF0dGVtcHQgYXQgY29tcGxldGluZyB0aGUgYHRhc2tgLiBJbnZva2VkIHdpdGhcbiAqIChlcnIsIHJlc3VsdHMpLlxuICogQGV4YW1wbGVcbiAqIGFzeW5jLnRyeUVhY2goW1xuICogICAgIGZ1bmN0aW9uIGdldERhdGFGcm9tRmlyc3RXZWJzaXRlKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIFRyeSBnZXR0aW5nIHRoZSBkYXRhIGZyb20gdGhlIGZpcnN0IHdlYnNpdGVcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uIGdldERhdGFGcm9tU2Vjb25kV2Vic2l0ZShjYWxsYmFjaykge1xuICogICAgICAgICAvLyBGaXJzdCB3ZWJzaXRlIGZhaWxlZCxcbiAqICAgICAgICAgLy8gVHJ5IGdldHRpbmcgdGhlIGRhdGEgZnJvbSB0aGUgYmFja3VwIHdlYnNpdGVcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAqICAgICB9XG4gKiBdLFxuICogLy8gb3B0aW9uYWwgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICogICAgIE5vdyBkbyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS5cbiAqIH0pO1xuICpcbiAqL1xuZnVuY3Rpb24gdHJ5RWFjaCh0YXNrcywgY2FsbGJhY2spIHtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuICAgIHZhciByZXN1bHQ7XG4gICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBub29wO1xuICAgIGVhY2hTZXJpZXModGFza3MsIGZ1bmN0aW9uKHRhc2ssIGNhbGxiYWNrKSB7XG4gICAgICAgIHdyYXBBc3luYyh0YXNrKShmdW5jdGlvbiAoZXJyLCByZXMvKiwgLi4uYXJncyovKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzbGljZShhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICAgIGNhbGxiYWNrKCFlcnIpO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFVuZG9lcyBhIFttZW1vaXplXXtAbGluayBtb2R1bGU6VXRpbHMubWVtb2l6ZX1kIGZ1bmN0aW9uLCByZXZlcnRpbmcgaXQgdG8gdGhlIG9yaWdpbmFsLFxuICogdW5tZW1vaXplZCBmb3JtLiBIYW5keSBmb3IgdGVzdGluZy5cbiAqXG4gKiBAbmFtZSB1bm1lbW9pemVcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6VXRpbHNcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLm1lbW9pemVde0BsaW5rIG1vZHVsZTpVdGlscy5tZW1vaXplfVxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXN5bmNGdW5jdGlvbn0gZm4gLSB0aGUgbWVtb2l6ZWQgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtBc3luY0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRoYXQgY2FsbHMgdGhlIG9yaWdpbmFsIHVubWVtb2l6ZWQgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gdW5tZW1vaXplKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChmbi51bm1lbW9pemVkIHx8IGZuKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8qKlxuICogUmVwZWF0ZWRseSBjYWxsIGBpdGVyYXRlZWAsIHdoaWxlIGB0ZXN0YCByZXR1cm5zIGB0cnVlYC4gQ2FsbHMgYGNhbGxiYWNrYCB3aGVuXG4gKiBzdG9wcGVkLCBvciBhbiBlcnJvciBvY2N1cnMuXG4gKlxuICogQG5hbWUgd2hpbHN0XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkNvbnRyb2xGbG93XG4gKiBAbWV0aG9kXG4gKiBAY2F0ZWdvcnkgQ29udHJvbCBGbG93XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0ZXN0IC0gc3luY2hyb25vdXMgdHJ1dGggdGVzdCB0byBwZXJmb3JtIGJlZm9yZSBlYWNoXG4gKiBleGVjdXRpb24gb2YgYGl0ZXJhdGVlYC4gSW52b2tlZCB3aXRoICgpLlxuICogQHBhcmFtIHtBc3luY0Z1bmN0aW9ufSBpdGVyYXRlZSAtIEFuIGFzeW5jIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBlYWNoIHRpbWVcbiAqIGB0ZXN0YCBwYXNzZXMuIEludm9rZWQgd2l0aCAoY2FsbGJhY2spLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEEgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGFmdGVyIHRoZSB0ZXN0XG4gKiBmdW5jdGlvbiBoYXMgZmFpbGVkIGFuZCByZXBlYXRlZCBleGVjdXRpb24gb2YgYGl0ZXJhdGVlYCBoYXMgc3RvcHBlZC4gYGNhbGxiYWNrYFxuICogd2lsbCBiZSBwYXNzZWQgYW4gZXJyb3IgYW5kIGFueSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBmaW5hbCBgaXRlcmF0ZWVgJ3NcbiAqIGNhbGxiYWNrLiBJbnZva2VkIHdpdGggKGVyciwgW3Jlc3VsdHNdKTtcbiAqIEByZXR1cm5zIHVuZGVmaW5lZFxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgY291bnQgPSAwO1xuICogYXN5bmMud2hpbHN0KFxuICogICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gY291bnQgPCA1OyB9LFxuICogICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIGNvdW50Kys7XG4gKiAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBjb3VudCk7XG4gKiAgICAgICAgIH0sIDEwMDApO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24gKGVyciwgbikge1xuICogICAgICAgICAvLyA1IHNlY29uZHMgaGF2ZSBwYXNzZWQsIG4gPSA1XG4gKiAgICAgfVxuICogKTtcbiAqL1xuZnVuY3Rpb24gd2hpbHN0KHRlc3QsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gb25seU9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gICAgdmFyIF9pdGVyYXRlZSA9IHdyYXBBc3luYyhpdGVyYXRlZSk7XG4gICAgaWYgKCF0ZXN0KCkpIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uKGVyci8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIGlmICh0ZXN0KCkpIHJldHVybiBfaXRlcmF0ZWUobmV4dCk7XG4gICAgICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbiAgICBfaXRlcmF0ZWUobmV4dCk7XG59XG5cbi8qKlxuICogUmVwZWF0ZWRseSBjYWxsIGBpdGVyYXRlZWAgdW50aWwgYHRlc3RgIHJldHVybnMgYHRydWVgLiBDYWxscyBgY2FsbGJhY2tgIHdoZW5cbiAqIHN0b3BwZWQsIG9yIGFuIGVycm9yIG9jY3Vycy4gYGNhbGxiYWNrYCB3aWxsIGJlIHBhc3NlZCBhbiBlcnJvciBhbmQgYW55XG4gKiBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBmaW5hbCBgaXRlcmF0ZWVgJ3MgY2FsbGJhY2suXG4gKlxuICogVGhlIGludmVyc2Ugb2YgW3doaWxzdF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LndoaWxzdH0uXG4gKlxuICogQG5hbWUgdW50aWxcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBzZWUgW2FzeW5jLndoaWxzdF17QGxpbmsgbW9kdWxlOkNvbnRyb2xGbG93LndoaWxzdH1cbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRlc3QgLSBzeW5jaHJvbm91cyB0cnV0aCB0ZXN0IHRvIHBlcmZvcm0gYmVmb3JlIGVhY2hcbiAqIGV4ZWN1dGlvbiBvZiBgaXRlcmF0ZWVgLiBJbnZva2VkIHdpdGggKCkuXG4gKiBAcGFyYW0ge0FzeW5jRnVuY3Rpb259IGl0ZXJhdGVlIC0gQW4gYXN5bmMgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGVhY2ggdGltZVxuICogYHRlc3RgIGZhaWxzLiBJbnZva2VkIHdpdGggKGNhbGxiYWNrKS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBBIGNhbGxiYWNrIHdoaWNoIGlzIGNhbGxlZCBhZnRlciB0aGUgdGVzdFxuICogZnVuY3Rpb24gaGFzIHBhc3NlZCBhbmQgcmVwZWF0ZWQgZXhlY3V0aW9uIG9mIGBpdGVyYXRlZWAgaGFzIHN0b3BwZWQuIGBjYWxsYmFja2BcbiAqIHdpbGwgYmUgcGFzc2VkIGFuIGVycm9yIGFuZCBhbnkgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgZmluYWwgYGl0ZXJhdGVlYCdzXG4gKiBjYWxsYmFjay4gSW52b2tlZCB3aXRoIChlcnIsIFtyZXN1bHRzXSk7XG4gKi9cbmZ1bmN0aW9uIHVudGlsKHRlc3QsIGl0ZXJhdGVlLCBjYWxsYmFjaykge1xuICAgIHdoaWxzdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICF0ZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSwgaXRlcmF0ZWUsIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBSdW5zIHRoZSBgdGFza3NgIGFycmF5IG9mIGZ1bmN0aW9ucyBpbiBzZXJpZXMsIGVhY2ggcGFzc2luZyB0aGVpciByZXN1bHRzIHRvXG4gKiB0aGUgbmV4dCBpbiB0aGUgYXJyYXkuIEhvd2V2ZXIsIGlmIGFueSBvZiB0aGUgYHRhc2tzYCBwYXNzIGFuIGVycm9yIHRvIHRoZWlyXG4gKiBvd24gY2FsbGJhY2ssIHRoZSBuZXh0IGZ1bmN0aW9uIGlzIG5vdCBleGVjdXRlZCwgYW5kIHRoZSBtYWluIGBjYWxsYmFja2AgaXNcbiAqIGltbWVkaWF0ZWx5IGNhbGxlZCB3aXRoIHRoZSBlcnJvci5cbiAqXG4gKiBAbmFtZSB3YXRlcmZhbGxcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBtb2R1bGU6Q29udHJvbEZsb3dcbiAqIEBtZXRob2RcbiAqIEBjYXRlZ29yeSBDb250cm9sIEZsb3dcbiAqIEBwYXJhbSB7QXJyYXl9IHRhc2tzIC0gQW4gYXJyYXkgb2YgW2FzeW5jIGZ1bmN0aW9uc117QGxpbmsgQXN5bmNGdW5jdGlvbn1cbiAqIHRvIHJ1bi5cbiAqIEVhY2ggZnVuY3Rpb24gc2hvdWxkIGNvbXBsZXRlIHdpdGggYW55IG51bWJlciBvZiBgcmVzdWx0YCB2YWx1ZXMuXG4gKiBUaGUgYHJlc3VsdGAgdmFsdWVzIHdpbGwgYmUgcGFzc2VkIGFzIGFyZ3VtZW50cywgaW4gb3JkZXIsIHRvIHRoZSBuZXh0IHRhc2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gcnVuIG9uY2UgYWxsIHRoZVxuICogZnVuY3Rpb25zIGhhdmUgY29tcGxldGVkLiBUaGlzIHdpbGwgYmUgcGFzc2VkIHRoZSByZXN1bHRzIG9mIHRoZSBsYXN0IHRhc2snc1xuICogY2FsbGJhY2suIEludm9rZWQgd2l0aCAoZXJyLCBbcmVzdWx0c10pLlxuICogQHJldHVybnMgdW5kZWZpbmVkXG4gKiBAZXhhbXBsZVxuICpcbiAqIGFzeW5jLndhdGVyZmFsbChbXG4gKiAgICAgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScsICd0d28nKTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGNhbGxiYWNrKSB7XG4gKiAgICAgICAgIC8vIGFyZzEgbm93IGVxdWFscyAnb25lJyBhbmQgYXJnMiBub3cgZXF1YWxzICd0d28nXG4gKiAgICAgICAgIGNhbGxiYWNrKG51bGwsICd0aHJlZScpO1xuICogICAgIH0sXG4gKiAgICAgZnVuY3Rpb24oYXJnMSwgY2FsbGJhY2spIHtcbiAqICAgICAgICAgLy8gYXJnMSBub3cgZXF1YWxzICd0aHJlZSdcbiAqICAgICAgICAgY2FsbGJhY2sobnVsbCwgJ2RvbmUnKTtcbiAqICAgICB9XG4gKiBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgbm93IGVxdWFscyAnZG9uZSdcbiAqIH0pO1xuICpcbiAqIC8vIE9yLCB3aXRoIG5hbWVkIGZ1bmN0aW9uczpcbiAqIGFzeW5jLndhdGVyZmFsbChbXG4gKiAgICAgbXlGaXJzdEZ1bmN0aW9uLFxuICogICAgIG15U2Vjb25kRnVuY3Rpb24sXG4gKiAgICAgbXlMYXN0RnVuY3Rpb24sXG4gKiBdLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAqICAgICAvLyByZXN1bHQgbm93IGVxdWFscyAnZG9uZSdcbiAqIH0pO1xuICogZnVuY3Rpb24gbXlGaXJzdEZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gKiAgICAgY2FsbGJhY2sobnVsbCwgJ29uZScsICd0d28nKTtcbiAqIH1cbiAqIGZ1bmN0aW9uIG15U2Vjb25kRnVuY3Rpb24oYXJnMSwgYXJnMiwgY2FsbGJhY2spIHtcbiAqICAgICAvLyBhcmcxIG5vdyBlcXVhbHMgJ29uZScgYW5kIGFyZzIgbm93IGVxdWFscyAndHdvJ1xuICogICAgIGNhbGxiYWNrKG51bGwsICd0aHJlZScpO1xuICogfVxuICogZnVuY3Rpb24gbXlMYXN0RnVuY3Rpb24oYXJnMSwgY2FsbGJhY2spIHtcbiAqICAgICAvLyBhcmcxIG5vdyBlcXVhbHMgJ3RocmVlJ1xuICogICAgIGNhbGxiYWNrKG51bGwsICdkb25lJyk7XG4gKiB9XG4gKi9cbnZhciB3YXRlcmZhbGwgPSBmdW5jdGlvbih0YXNrcywgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IG9uY2UoY2FsbGJhY2sgfHwgbm9vcCk7XG4gICAgaWYgKCFpc0FycmF5KHRhc2tzKSkgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignRmlyc3QgYXJndW1lbnQgdG8gd2F0ZXJmYWxsIG11c3QgYmUgYW4gYXJyYXkgb2YgZnVuY3Rpb25zJykpO1xuICAgIGlmICghdGFza3MubGVuZ3RoKSByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB2YXIgdGFza0luZGV4ID0gMDtcblxuICAgIGZ1bmN0aW9uIG5leHRUYXNrKGFyZ3MpIHtcbiAgICAgICAgdmFyIHRhc2sgPSB3cmFwQXN5bmModGFza3NbdGFza0luZGV4KytdKTtcbiAgICAgICAgYXJncy5wdXNoKG9ubHlPbmNlKG5leHQpKTtcbiAgICAgICAgdGFzay5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXh0KGVyci8qLCAuLi5hcmdzKi8pIHtcbiAgICAgICAgaWYgKGVyciB8fCB0YXNrSW5kZXggPT09IHRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dFRhc2soc2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gICAgfVxuXG4gICAgbmV4dFRhc2soW10pO1xufTtcblxuLyoqXG4gKiBBbiBcImFzeW5jIGZ1bmN0aW9uXCIgaW4gdGhlIGNvbnRleHQgb2YgQXN5bmMgaXMgYW4gYXN5bmNocm9ub3VzIGZ1bmN0aW9uIHdpdGhcbiAqIGEgdmFyaWFibGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMsIHdpdGggdGhlIGZpbmFsIHBhcmFtZXRlciBiZWluZyBhIGNhbGxiYWNrLlxuICogKGBmdW5jdGlvbiAoYXJnMSwgYXJnMiwgLi4uLCBjYWxsYmFjaykge31gKVxuICogVGhlIGZpbmFsIGNhbGxiYWNrIGlzIG9mIHRoZSBmb3JtIGBjYWxsYmFjayhlcnIsIHJlc3VsdHMuLi4pYCwgd2hpY2ggbXVzdCBiZVxuICogY2FsbGVkIG9uY2UgdGhlIGZ1bmN0aW9uIGlzIGNvbXBsZXRlZC4gIFRoZSBjYWxsYmFjayBzaG91bGQgYmUgY2FsbGVkIHdpdGggYVxuICogRXJyb3IgYXMgaXRzIGZpcnN0IGFyZ3VtZW50IHRvIHNpZ25hbCB0aGF0IGFuIGVycm9yIG9jY3VycmVkLlxuICogT3RoZXJ3aXNlLCBpZiBubyBlcnJvciBvY2N1cnJlZCwgaXQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIGBudWxsYCBhcyB0aGUgZmlyc3RcbiAqIGFyZ3VtZW50LCBhbmQgYW55IGFkZGl0aW9uYWwgYHJlc3VsdGAgYXJndW1lbnRzIHRoYXQgbWF5IGFwcGx5LCB0byBzaWduYWxcbiAqIHN1Y2Nlc3NmdWwgY29tcGxldGlvbi5cbiAqIFRoZSBjYWxsYmFjayBtdXN0IGJlIGNhbGxlZCBleGFjdGx5IG9uY2UsIGlkZWFsbHkgb24gYSBsYXRlciB0aWNrIG9mIHRoZVxuICogSmF2YVNjcmlwdCBldmVudCBsb29wLlxuICpcbiAqIFRoaXMgdHlwZSBvZiBmdW5jdGlvbiBpcyBhbHNvIHJlZmVycmVkIHRvIGFzIGEgXCJOb2RlLXN0eWxlIGFzeW5jIGZ1bmN0aW9uXCIsXG4gKiBvciBhIFwiY29udGludWF0aW9uIHBhc3Npbmctc3R5bGUgZnVuY3Rpb25cIiAoQ1BTKS4gTW9zdCBvZiB0aGUgbWV0aG9kcyBvZiB0aGlzXG4gKiBsaWJyYXJ5IGFyZSB0aGVtc2VsdmVzIENQUy9Ob2RlLXN0eWxlIGFzeW5jIGZ1bmN0aW9ucywgb3IgZnVuY3Rpb25zIHRoYXRcbiAqIHJldHVybiBDUFMvTm9kZS1zdHlsZSBhc3luYyBmdW5jdGlvbnMuXG4gKlxuICogV2hlcmV2ZXIgd2UgYWNjZXB0IGEgTm9kZS1zdHlsZSBhc3luYyBmdW5jdGlvbiwgd2UgYWxzbyBkaXJlY3RseSBhY2NlcHQgYW5cbiAqIFtFUzIwMTcgYGFzeW5jYCBmdW5jdGlvbl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9hc3luY19mdW5jdGlvbn0uXG4gKiBJbiB0aGlzIGNhc2UsIHRoZSBgYXN5bmNgIGZ1bmN0aW9uIHdpbGwgbm90IGJlIHBhc3NlZCBhIGZpbmFsIGNhbGxiYWNrXG4gKiBhcmd1bWVudCwgYW5kIGFueSB0aHJvd24gZXJyb3Igd2lsbCBiZSB1c2VkIGFzIHRoZSBgZXJyYCBhcmd1bWVudCBvZiB0aGVcbiAqIGltcGxpY2l0IGNhbGxiYWNrLCBhbmQgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGJlIHVzZWQgYXMgdGhlIGByZXN1bHRgIHZhbHVlLlxuICogKGkuZS4gYSBgcmVqZWN0ZWRgIG9mIHRoZSByZXR1cm5lZCBQcm9taXNlIGJlY29tZXMgdGhlIGBlcnJgIGNhbGxiYWNrXG4gKiBhcmd1bWVudCwgYW5kIGEgYHJlc29sdmVkYCB2YWx1ZSBiZWNvbWVzIHRoZSBgcmVzdWx0YC4pXG4gKlxuICogTm90ZSwgZHVlIHRvIEphdmFTY3JpcHQgbGltaXRhdGlvbnMsIHdlIGNhbiBvbmx5IGRldGVjdCBuYXRpdmUgYGFzeW5jYFxuICogZnVuY3Rpb25zIGFuZCBub3QgdHJhbnNwaWxpZWQgaW1wbGVtZW50YXRpb25zLlxuICogWW91ciBlbnZpcm9ubWVudCBtdXN0IGhhdmUgYGFzeW5jYC9gYXdhaXRgIHN1cHBvcnQgZm9yIHRoaXMgdG8gd29yay5cbiAqIChlLmcuIE5vZGUgPiB2Ny42LCBvciBhIHJlY2VudCB2ZXJzaW9uIG9mIGEgbW9kZXJuIGJyb3dzZXIpLlxuICogSWYgeW91IGFyZSB1c2luZyBgYXN5bmNgIGZ1bmN0aW9ucyB0aHJvdWdoIGEgdHJhbnNwaWxlciAoZS5nLiBCYWJlbCksIHlvdVxuICogbXVzdCBzdGlsbCB3cmFwIHRoZSBmdW5jdGlvbiB3aXRoIFthc3luY2lmeV17QGxpbmsgbW9kdWxlOlV0aWxzLmFzeW5jaWZ5fSxcbiAqIGJlY2F1c2UgdGhlIGBhc3luYyBmdW5jdGlvbmAgd2lsbCBiZSBjb21waWxlZCB0byBhbiBvcmRpbmFyeSBmdW5jdGlvbiB0aGF0XG4gKiByZXR1cm5zIGEgcHJvbWlzZS5cbiAqXG4gKiBAdHlwZWRlZiB7RnVuY3Rpb259IEFzeW5jRnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqL1xuXG4vKipcbiAqIEFzeW5jIGlzIGEgdXRpbGl0eSBtb2R1bGUgd2hpY2ggcHJvdmlkZXMgc3RyYWlnaHQtZm9yd2FyZCwgcG93ZXJmdWwgZnVuY3Rpb25zXG4gKiBmb3Igd29ya2luZyB3aXRoIGFzeW5jaHJvbm91cyBKYXZhU2NyaXB0LiBBbHRob3VnaCBvcmlnaW5hbGx5IGRlc2lnbmVkIGZvclxuICogdXNlIHdpdGggW05vZGUuanNdKGh0dHA6Ly9ub2RlanMub3JnKSBhbmQgaW5zdGFsbGFibGUgdmlhXG4gKiBgbnBtIGluc3RhbGwgLS1zYXZlIGFzeW5jYCwgaXQgY2FuIGFsc28gYmUgdXNlZCBkaXJlY3RseSBpbiB0aGUgYnJvd3Nlci5cbiAqIEBtb2R1bGUgYXN5bmNcbiAqIEBzZWUgQXN5bmNGdW5jdGlvblxuICovXG5cblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgYGFzeW5jYCBmdW5jdGlvbnMgZm9yIG1hbmlwdWxhdGluZyBjb2xsZWN0aW9ucywgc3VjaCBhc1xuICogYXJyYXlzIGFuZCBvYmplY3RzLlxuICogQG1vZHVsZSBDb2xsZWN0aW9uc1xuICovXG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGBhc3luY2AgZnVuY3Rpb25zIGZvciBjb250cm9sbGluZyB0aGUgZmxvdyB0aHJvdWdoIGEgc2NyaXB0LlxuICogQG1vZHVsZSBDb250cm9sRmxvd1xuICovXG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGBhc3luY2AgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBAbW9kdWxlIFV0aWxzXG4gKi9cblxudmFyIGluZGV4ID0ge1xuICAgIGFwcGx5OiBhcHBseSxcbiAgICBhcHBseUVhY2g6IGFwcGx5RWFjaCxcbiAgICBhcHBseUVhY2hTZXJpZXM6IGFwcGx5RWFjaFNlcmllcyxcbiAgICBhc3luY2lmeTogYXN5bmNpZnksXG4gICAgYXV0bzogYXV0byxcbiAgICBhdXRvSW5qZWN0OiBhdXRvSW5qZWN0LFxuICAgIGNhcmdvOiBjYXJnbyxcbiAgICBjb21wb3NlOiBjb21wb3NlLFxuICAgIGNvbmNhdDogY29uY2F0LFxuICAgIGNvbmNhdExpbWl0OiBjb25jYXRMaW1pdCxcbiAgICBjb25jYXRTZXJpZXM6IGNvbmNhdFNlcmllcyxcbiAgICBjb25zdGFudDogY29uc3RhbnQsXG4gICAgZGV0ZWN0OiBkZXRlY3QsXG4gICAgZGV0ZWN0TGltaXQ6IGRldGVjdExpbWl0LFxuICAgIGRldGVjdFNlcmllczogZGV0ZWN0U2VyaWVzLFxuICAgIGRpcjogZGlyLFxuICAgIGRvRHVyaW5nOiBkb0R1cmluZyxcbiAgICBkb1VudGlsOiBkb1VudGlsLFxuICAgIGRvV2hpbHN0OiBkb1doaWxzdCxcbiAgICBkdXJpbmc6IGR1cmluZyxcbiAgICBlYWNoOiBlYWNoTGltaXQsXG4gICAgZWFjaExpbWl0OiBlYWNoTGltaXQkMSxcbiAgICBlYWNoT2Y6IGVhY2hPZixcbiAgICBlYWNoT2ZMaW1pdDogZWFjaE9mTGltaXQsXG4gICAgZWFjaE9mU2VyaWVzOiBlYWNoT2ZTZXJpZXMsXG4gICAgZWFjaFNlcmllczogZWFjaFNlcmllcyxcbiAgICBlbnN1cmVBc3luYzogZW5zdXJlQXN5bmMsXG4gICAgZXZlcnk6IGV2ZXJ5LFxuICAgIGV2ZXJ5TGltaXQ6IGV2ZXJ5TGltaXQsXG4gICAgZXZlcnlTZXJpZXM6IGV2ZXJ5U2VyaWVzLFxuICAgIGZpbHRlcjogZmlsdGVyLFxuICAgIGZpbHRlckxpbWl0OiBmaWx0ZXJMaW1pdCxcbiAgICBmaWx0ZXJTZXJpZXM6IGZpbHRlclNlcmllcyxcbiAgICBmb3JldmVyOiBmb3JldmVyLFxuICAgIGdyb3VwQnk6IGdyb3VwQnksXG4gICAgZ3JvdXBCeUxpbWl0OiBncm91cEJ5TGltaXQsXG4gICAgZ3JvdXBCeVNlcmllczogZ3JvdXBCeVNlcmllcyxcbiAgICBsb2c6IGxvZyxcbiAgICBtYXA6IG1hcCxcbiAgICBtYXBMaW1pdDogbWFwTGltaXQsXG4gICAgbWFwU2VyaWVzOiBtYXBTZXJpZXMsXG4gICAgbWFwVmFsdWVzOiBtYXBWYWx1ZXMsXG4gICAgbWFwVmFsdWVzTGltaXQ6IG1hcFZhbHVlc0xpbWl0LFxuICAgIG1hcFZhbHVlc1NlcmllczogbWFwVmFsdWVzU2VyaWVzLFxuICAgIG1lbW9pemU6IG1lbW9pemUsXG4gICAgbmV4dFRpY2s6IG5leHRUaWNrLFxuICAgIHBhcmFsbGVsOiBwYXJhbGxlbExpbWl0LFxuICAgIHBhcmFsbGVsTGltaXQ6IHBhcmFsbGVsTGltaXQkMSxcbiAgICBwcmlvcml0eVF1ZXVlOiBwcmlvcml0eVF1ZXVlLFxuICAgIHF1ZXVlOiBxdWV1ZSQxLFxuICAgIHJhY2U6IHJhY2UsXG4gICAgcmVkdWNlOiByZWR1Y2UsXG4gICAgcmVkdWNlUmlnaHQ6IHJlZHVjZVJpZ2h0LFxuICAgIHJlZmxlY3Q6IHJlZmxlY3QsXG4gICAgcmVmbGVjdEFsbDogcmVmbGVjdEFsbCxcbiAgICByZWplY3Q6IHJlamVjdCxcbiAgICByZWplY3RMaW1pdDogcmVqZWN0TGltaXQsXG4gICAgcmVqZWN0U2VyaWVzOiByZWplY3RTZXJpZXMsXG4gICAgcmV0cnk6IHJldHJ5LFxuICAgIHJldHJ5YWJsZTogcmV0cnlhYmxlLFxuICAgIHNlcTogc2VxLFxuICAgIHNlcmllczogc2VyaWVzLFxuICAgIHNldEltbWVkaWF0ZTogc2V0SW1tZWRpYXRlJDEsXG4gICAgc29tZTogc29tZSxcbiAgICBzb21lTGltaXQ6IHNvbWVMaW1pdCxcbiAgICBzb21lU2VyaWVzOiBzb21lU2VyaWVzLFxuICAgIHNvcnRCeTogc29ydEJ5LFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgdGltZXM6IHRpbWVzLFxuICAgIHRpbWVzTGltaXQ6IHRpbWVMaW1pdCxcbiAgICB0aW1lc1NlcmllczogdGltZXNTZXJpZXMsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgdHJ5RWFjaDogdHJ5RWFjaCxcbiAgICB1bm1lbW9pemU6IHVubWVtb2l6ZSxcbiAgICB1bnRpbDogdW50aWwsXG4gICAgd2F0ZXJmYWxsOiB3YXRlcmZhbGwsXG4gICAgd2hpbHN0OiB3aGlsc3QsXG5cbiAgICAvLyBhbGlhc2VzXG4gICAgYWxsOiBldmVyeSxcbiAgICBhbGxMaW1pdDogZXZlcnlMaW1pdCxcbiAgICBhbGxTZXJpZXM6IGV2ZXJ5U2VyaWVzLFxuICAgIGFueTogc29tZSxcbiAgICBhbnlMaW1pdDogc29tZUxpbWl0LFxuICAgIGFueVNlcmllczogc29tZVNlcmllcyxcbiAgICBmaW5kOiBkZXRlY3QsXG4gICAgZmluZExpbWl0OiBkZXRlY3RMaW1pdCxcbiAgICBmaW5kU2VyaWVzOiBkZXRlY3RTZXJpZXMsXG4gICAgZm9yRWFjaDogZWFjaExpbWl0LFxuICAgIGZvckVhY2hTZXJpZXM6IGVhY2hTZXJpZXMsXG4gICAgZm9yRWFjaExpbWl0OiBlYWNoTGltaXQkMSxcbiAgICBmb3JFYWNoT2Y6IGVhY2hPZixcbiAgICBmb3JFYWNoT2ZTZXJpZXM6IGVhY2hPZlNlcmllcyxcbiAgICBmb3JFYWNoT2ZMaW1pdDogZWFjaE9mTGltaXQsXG4gICAgaW5qZWN0OiByZWR1Y2UsXG4gICAgZm9sZGw6IHJlZHVjZSxcbiAgICBmb2xkcjogcmVkdWNlUmlnaHQsXG4gICAgc2VsZWN0OiBmaWx0ZXIsXG4gICAgc2VsZWN0TGltaXQ6IGZpbHRlckxpbWl0LFxuICAgIHNlbGVjdFNlcmllczogZmlsdGVyU2VyaWVzLFxuICAgIHdyYXBTeW5jOiBhc3luY2lmeVxufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gaW5kZXg7XG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XG5leHBvcnRzLmFwcGx5RWFjaCA9IGFwcGx5RWFjaDtcbmV4cG9ydHMuYXBwbHlFYWNoU2VyaWVzID0gYXBwbHlFYWNoU2VyaWVzO1xuZXhwb3J0cy5hc3luY2lmeSA9IGFzeW5jaWZ5O1xuZXhwb3J0cy5hdXRvID0gYXV0bztcbmV4cG9ydHMuYXV0b0luamVjdCA9IGF1dG9JbmplY3Q7XG5leHBvcnRzLmNhcmdvID0gY2FyZ287XG5leHBvcnRzLmNvbXBvc2UgPSBjb21wb3NlO1xuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG5leHBvcnRzLmNvbmNhdExpbWl0ID0gY29uY2F0TGltaXQ7XG5leHBvcnRzLmNvbmNhdFNlcmllcyA9IGNvbmNhdFNlcmllcztcbmV4cG9ydHMuY29uc3RhbnQgPSBjb25zdGFudDtcbmV4cG9ydHMuZGV0ZWN0ID0gZGV0ZWN0O1xuZXhwb3J0cy5kZXRlY3RMaW1pdCA9IGRldGVjdExpbWl0O1xuZXhwb3J0cy5kZXRlY3RTZXJpZXMgPSBkZXRlY3RTZXJpZXM7XG5leHBvcnRzLmRpciA9IGRpcjtcbmV4cG9ydHMuZG9EdXJpbmcgPSBkb0R1cmluZztcbmV4cG9ydHMuZG9VbnRpbCA9IGRvVW50aWw7XG5leHBvcnRzLmRvV2hpbHN0ID0gZG9XaGlsc3Q7XG5leHBvcnRzLmR1cmluZyA9IGR1cmluZztcbmV4cG9ydHMuZWFjaCA9IGVhY2hMaW1pdDtcbmV4cG9ydHMuZWFjaExpbWl0ID0gZWFjaExpbWl0JDE7XG5leHBvcnRzLmVhY2hPZiA9IGVhY2hPZjtcbmV4cG9ydHMuZWFjaE9mTGltaXQgPSBlYWNoT2ZMaW1pdDtcbmV4cG9ydHMuZWFjaE9mU2VyaWVzID0gZWFjaE9mU2VyaWVzO1xuZXhwb3J0cy5lYWNoU2VyaWVzID0gZWFjaFNlcmllcztcbmV4cG9ydHMuZW5zdXJlQXN5bmMgPSBlbnN1cmVBc3luYztcbmV4cG9ydHMuZXZlcnkgPSBldmVyeTtcbmV4cG9ydHMuZXZlcnlMaW1pdCA9IGV2ZXJ5TGltaXQ7XG5leHBvcnRzLmV2ZXJ5U2VyaWVzID0gZXZlcnlTZXJpZXM7XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbmV4cG9ydHMuZmlsdGVyTGltaXQgPSBmaWx0ZXJMaW1pdDtcbmV4cG9ydHMuZmlsdGVyU2VyaWVzID0gZmlsdGVyU2VyaWVzO1xuZXhwb3J0cy5mb3JldmVyID0gZm9yZXZlcjtcbmV4cG9ydHMuZ3JvdXBCeSA9IGdyb3VwQnk7XG5leHBvcnRzLmdyb3VwQnlMaW1pdCA9IGdyb3VwQnlMaW1pdDtcbmV4cG9ydHMuZ3JvdXBCeVNlcmllcyA9IGdyb3VwQnlTZXJpZXM7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMubWFwID0gbWFwO1xuZXhwb3J0cy5tYXBMaW1pdCA9IG1hcExpbWl0O1xuZXhwb3J0cy5tYXBTZXJpZXMgPSBtYXBTZXJpZXM7XG5leHBvcnRzLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbmV4cG9ydHMubWFwVmFsdWVzTGltaXQgPSBtYXBWYWx1ZXNMaW1pdDtcbmV4cG9ydHMubWFwVmFsdWVzU2VyaWVzID0gbWFwVmFsdWVzU2VyaWVzO1xuZXhwb3J0cy5tZW1vaXplID0gbWVtb2l6ZTtcbmV4cG9ydHMubmV4dFRpY2sgPSBuZXh0VGljaztcbmV4cG9ydHMucGFyYWxsZWwgPSBwYXJhbGxlbExpbWl0O1xuZXhwb3J0cy5wYXJhbGxlbExpbWl0ID0gcGFyYWxsZWxMaW1pdCQxO1xuZXhwb3J0cy5wcmlvcml0eVF1ZXVlID0gcHJpb3JpdHlRdWV1ZTtcbmV4cG9ydHMucXVldWUgPSBxdWV1ZSQxO1xuZXhwb3J0cy5yYWNlID0gcmFjZTtcbmV4cG9ydHMucmVkdWNlID0gcmVkdWNlO1xuZXhwb3J0cy5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuZXhwb3J0cy5yZWZsZWN0ID0gcmVmbGVjdDtcbmV4cG9ydHMucmVmbGVjdEFsbCA9IHJlZmxlY3RBbGw7XG5leHBvcnRzLnJlamVjdCA9IHJlamVjdDtcbmV4cG9ydHMucmVqZWN0TGltaXQgPSByZWplY3RMaW1pdDtcbmV4cG9ydHMucmVqZWN0U2VyaWVzID0gcmVqZWN0U2VyaWVzO1xuZXhwb3J0cy5yZXRyeSA9IHJldHJ5O1xuZXhwb3J0cy5yZXRyeWFibGUgPSByZXRyeWFibGU7XG5leHBvcnRzLnNlcSA9IHNlcTtcbmV4cG9ydHMuc2VyaWVzID0gc2VyaWVzO1xuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGUkMTtcbmV4cG9ydHMuc29tZSA9IHNvbWU7XG5leHBvcnRzLnNvbWVMaW1pdCA9IHNvbWVMaW1pdDtcbmV4cG9ydHMuc29tZVNlcmllcyA9IHNvbWVTZXJpZXM7XG5leHBvcnRzLnNvcnRCeSA9IHNvcnRCeTtcbmV4cG9ydHMudGltZW91dCA9IHRpbWVvdXQ7XG5leHBvcnRzLnRpbWVzID0gdGltZXM7XG5leHBvcnRzLnRpbWVzTGltaXQgPSB0aW1lTGltaXQ7XG5leHBvcnRzLnRpbWVzU2VyaWVzID0gdGltZXNTZXJpZXM7XG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbmV4cG9ydHMudHJ5RWFjaCA9IHRyeUVhY2g7XG5leHBvcnRzLnVubWVtb2l6ZSA9IHVubWVtb2l6ZTtcbmV4cG9ydHMudW50aWwgPSB1bnRpbDtcbmV4cG9ydHMud2F0ZXJmYWxsID0gd2F0ZXJmYWxsO1xuZXhwb3J0cy53aGlsc3QgPSB3aGlsc3Q7XG5leHBvcnRzLmFsbCA9IGV2ZXJ5O1xuZXhwb3J0cy5hbGxMaW1pdCA9IGV2ZXJ5TGltaXQ7XG5leHBvcnRzLmFsbFNlcmllcyA9IGV2ZXJ5U2VyaWVzO1xuZXhwb3J0cy5hbnkgPSBzb21lO1xuZXhwb3J0cy5hbnlMaW1pdCA9IHNvbWVMaW1pdDtcbmV4cG9ydHMuYW55U2VyaWVzID0gc29tZVNlcmllcztcbmV4cG9ydHMuZmluZCA9IGRldGVjdDtcbmV4cG9ydHMuZmluZExpbWl0ID0gZGV0ZWN0TGltaXQ7XG5leHBvcnRzLmZpbmRTZXJpZXMgPSBkZXRlY3RTZXJpZXM7XG5leHBvcnRzLmZvckVhY2ggPSBlYWNoTGltaXQ7XG5leHBvcnRzLmZvckVhY2hTZXJpZXMgPSBlYWNoU2VyaWVzO1xuZXhwb3J0cy5mb3JFYWNoTGltaXQgPSBlYWNoTGltaXQkMTtcbmV4cG9ydHMuZm9yRWFjaE9mID0gZWFjaE9mO1xuZXhwb3J0cy5mb3JFYWNoT2ZTZXJpZXMgPSBlYWNoT2ZTZXJpZXM7XG5leHBvcnRzLmZvckVhY2hPZkxpbWl0ID0gZWFjaE9mTGltaXQ7XG5leHBvcnRzLmluamVjdCA9IHJlZHVjZTtcbmV4cG9ydHMuZm9sZGwgPSByZWR1Y2U7XG5leHBvcnRzLmZvbGRyID0gcmVkdWNlUmlnaHQ7XG5leHBvcnRzLnNlbGVjdCA9IGZpbHRlcjtcbmV4cG9ydHMuc2VsZWN0TGltaXQgPSBmaWx0ZXJMaW1pdDtcbmV4cG9ydHMuc2VsZWN0U2VyaWVzID0gZmlsdGVyU2VyaWVzO1xuZXhwb3J0cy53cmFwU3luYyA9IGFzeW5jaWZ5O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByaW1yYWZcbnJpbXJhZi5zeW5jID0gcmltcmFmU3luY1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKVxudmFyIHBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxudmFyIGZzID0gcmVxdWlyZShcImZzXCIpXG52YXIgZ2xvYiA9IHVuZGVmaW5lZFxudHJ5IHtcbiAgZ2xvYiA9IHJlcXVpcmUoXCJnbG9iXCIpXG59IGNhdGNoIChfZXJyKSB7XG4gIC8vIHRyZWF0IGdsb2IgYXMgb3B0aW9uYWwuXG59XG52YXIgXzA2NjYgPSBwYXJzZUludCgnNjY2JywgOClcblxudmFyIGRlZmF1bHRHbG9iT3B0cyA9IHtcbiAgbm9zb3J0OiB0cnVlLFxuICBzaWxlbnQ6IHRydWVcbn1cblxuLy8gZm9yIEVNRklMRSBoYW5kbGluZ1xudmFyIHRpbWVvdXQgPSAwXG5cbnZhciBpc1dpbmRvd3MgPSAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiKVxuXG5mdW5jdGlvbiBkZWZhdWx0cyAob3B0aW9ucykge1xuICB2YXIgbWV0aG9kcyA9IFtcbiAgICAndW5saW5rJyxcbiAgICAnY2htb2QnLFxuICAgICdzdGF0JyxcbiAgICAnbHN0YXQnLFxuICAgICdybWRpcicsXG4gICAgJ3JlYWRkaXInXG4gIF1cbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG0pIHtcbiAgICBvcHRpb25zW21dID0gb3B0aW9uc1ttXSB8fCBmc1ttXVxuICAgIG0gPSBtICsgJ1N5bmMnXG4gICAgb3B0aW9uc1ttXSA9IG9wdGlvbnNbbV0gfHwgZnNbbV1cbiAgfSlcblxuICBvcHRpb25zLm1heEJ1c3lUcmllcyA9IG9wdGlvbnMubWF4QnVzeVRyaWVzIHx8IDNcbiAgb3B0aW9ucy5lbWZpbGVXYWl0ID0gb3B0aW9ucy5lbWZpbGVXYWl0IHx8IDEwMDBcbiAgaWYgKG9wdGlvbnMuZ2xvYiA9PT0gZmFsc2UpIHtcbiAgICBvcHRpb25zLmRpc2FibGVHbG9iID0gdHJ1ZVxuICB9XG4gIGlmIChvcHRpb25zLmRpc2FibGVHbG9iICE9PSB0cnVlICYmIGdsb2IgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IEVycm9yKCdnbG9iIGRlcGVuZGVuY3kgbm90IGZvdW5kLCBzZXQgYG9wdGlvbnMuZGlzYWJsZUdsb2IgPSB0cnVlYCBpZiBpbnRlbnRpb25hbCcpXG4gIH1cbiAgb3B0aW9ucy5kaXNhYmxlR2xvYiA9IG9wdGlvbnMuZGlzYWJsZUdsb2IgfHwgZmFsc2VcbiAgb3B0aW9ucy5nbG9iID0gb3B0aW9ucy5nbG9iIHx8IGRlZmF1bHRHbG9iT3B0c1xufVxuXG5mdW5jdGlvbiByaW1yYWYgKHAsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgYXNzZXJ0KHAsICdyaW1yYWY6IG1pc3NpbmcgcGF0aCcpXG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgcCwgJ3N0cmluZycsICdyaW1yYWY6IHBhdGggc2hvdWxkIGJlIGEgc3RyaW5nJylcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBjYiwgJ2Z1bmN0aW9uJywgJ3JpbXJhZjogY2FsbGJhY2sgZnVuY3Rpb24gcmVxdWlyZWQnKVxuICBhc3NlcnQob3B0aW9ucywgJ3JpbXJhZjogaW52YWxpZCBvcHRpb25zIGFyZ3VtZW50IHByb3ZpZGVkJylcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBvcHRpb25zLCAnb2JqZWN0JywgJ3JpbXJhZjogb3B0aW9ucyBzaG91bGQgYmUgb2JqZWN0JylcblxuICBkZWZhdWx0cyhvcHRpb25zKVxuXG4gIHZhciBidXN5VHJpZXMgPSAwXG4gIHZhciBlcnJTdGF0ZSA9IG51bGxcbiAgdmFyIG4gPSAwXG5cbiAgaWYgKG9wdGlvbnMuZGlzYWJsZUdsb2IgfHwgIWdsb2IuaGFzTWFnaWMocCkpXG4gICAgcmV0dXJuIGFmdGVyR2xvYihudWxsLCBbcF0pXG5cbiAgb3B0aW9ucy5sc3RhdChwLCBmdW5jdGlvbiAoZXIsIHN0YXQpIHtcbiAgICBpZiAoIWVyKVxuICAgICAgcmV0dXJuIGFmdGVyR2xvYihudWxsLCBbcF0pXG5cbiAgICBnbG9iKHAsIG9wdGlvbnMuZ2xvYiwgYWZ0ZXJHbG9iKVxuICB9KVxuXG4gIGZ1bmN0aW9uIG5leHQgKGVyKSB7XG4gICAgZXJyU3RhdGUgPSBlcnJTdGF0ZSB8fCBlclxuICAgIGlmICgtLW4gPT09IDApXG4gICAgICBjYihlcnJTdGF0ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyR2xvYiAoZXIsIHJlc3VsdHMpIHtcbiAgICBpZiAoZXIpXG4gICAgICByZXR1cm4gY2IoZXIpXG5cbiAgICBuID0gcmVzdWx0cy5sZW5ndGhcbiAgICBpZiAobiA9PT0gMClcbiAgICAgIHJldHVybiBjYigpXG5cbiAgICByZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgIHJpbXJhZl8ocCwgb3B0aW9ucywgZnVuY3Rpb24gQ0IgKGVyKSB7XG4gICAgICAgIGlmIChlcikge1xuICAgICAgICAgIGlmICgoZXIuY29kZSA9PT0gXCJFQlVTWVwiIHx8IGVyLmNvZGUgPT09IFwiRU5PVEVNUFRZXCIgfHwgZXIuY29kZSA9PT0gXCJFUEVSTVwiKSAmJlxuICAgICAgICAgICAgICBidXN5VHJpZXMgPCBvcHRpb25zLm1heEJ1c3lUcmllcykge1xuICAgICAgICAgICAgYnVzeVRyaWVzICsrXG4gICAgICAgICAgICB2YXIgdGltZSA9IGJ1c3lUcmllcyAqIDEwMFxuICAgICAgICAgICAgLy8gdHJ5IGFnYWluLCB3aXRoIHRoZSBzYW1lIGV4YWN0IGNhbGxiYWNrIGFzIHRoaXMgb25lLlxuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByaW1yYWZfKHAsIG9wdGlvbnMsIENCKVxuICAgICAgICAgICAgfSwgdGltZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0aGlzIG9uZSB3b24ndCBoYXBwZW4gaWYgZ3JhY2VmdWwtZnMgaXMgdXNlZC5cbiAgICAgICAgICBpZiAoZXIuY29kZSA9PT0gXCJFTUZJTEVcIiAmJiB0aW1lb3V0IDwgb3B0aW9ucy5lbWZpbGVXYWl0KSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJpbXJhZl8ocCwgb3B0aW9ucywgQ0IpXG4gICAgICAgICAgICB9LCB0aW1lb3V0ICsrKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGFscmVhZHkgZ29uZVxuICAgICAgICAgIGlmIChlci5jb2RlID09PSBcIkVOT0VOVFwiKSBlciA9IG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVvdXQgPSAwXG4gICAgICAgIG5leHQoZXIpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxuLy8gVHdvIHBvc3NpYmxlIHN0cmF0ZWdpZXMuXG4vLyAxLiBBc3N1bWUgaXQncyBhIGZpbGUuICB1bmxpbmsgaXQsIHRoZW4gZG8gdGhlIGRpciBzdHVmZiBvbiBFUEVSTSBvciBFSVNESVJcbi8vIDIuIEFzc3VtZSBpdCdzIGEgZGlyZWN0b3J5LiAgcmVhZGRpciwgdGhlbiBkbyB0aGUgZmlsZSBzdHVmZiBvbiBFTk9URElSXG4vL1xuLy8gQm90aCByZXN1bHQgaW4gYW4gZXh0cmEgc3lzY2FsbCB3aGVuIHlvdSBndWVzcyB3cm9uZy4gIEhvd2V2ZXIsIHRoZXJlXG4vLyBhcmUgbGlrZWx5IGZhciBtb3JlIG5vcm1hbCBmaWxlcyBpbiB0aGUgd29ybGQgdGhhbiBkaXJlY3Rvcmllcy4gIFRoaXNcbi8vIGlzIGJhc2VkIG9uIHRoZSBhc3N1bXB0aW9uIHRoYXQgYSB0aGUgYXZlcmFnZSBudW1iZXIgb2YgZmlsZXMgcGVyXG4vLyBkaXJlY3RvcnkgaXMgPj0gMS5cbi8vXG4vLyBJZiBhbnlvbmUgZXZlciBjb21wbGFpbnMgYWJvdXQgdGhpcywgdGhlbiBJIGd1ZXNzIHRoZSBzdHJhdGVneSBjb3VsZFxuLy8gYmUgbWFkZSBjb25maWd1cmFibGUgc29tZWhvdy4gIEJ1dCB1bnRpbCB0aGVuLCBZQUdOSS5cbmZ1bmN0aW9uIHJpbXJhZl8gKHAsIG9wdGlvbnMsIGNiKSB7XG4gIGFzc2VydChwKVxuICBhc3NlcnQob3B0aW9ucylcbiAgYXNzZXJ0KHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJylcblxuICAvLyBzdW5vcyBsZXRzIHRoZSByb290IHVzZXIgdW5saW5rIGRpcmVjdG9yaWVzLCB3aGljaCBpcy4uLiB3ZWlyZC5cbiAgLy8gc28gd2UgaGF2ZSB0byBsc3RhdCBoZXJlIGFuZCBtYWtlIHN1cmUgaXQncyBub3QgYSBkaXIuXG4gIG9wdGlvbnMubHN0YXQocCwgZnVuY3Rpb24gKGVyLCBzdCkge1xuICAgIGlmIChlciAmJiBlci5jb2RlID09PSBcIkVOT0VOVFwiKVxuICAgICAgcmV0dXJuIGNiKG51bGwpXG5cbiAgICAvLyBXaW5kb3dzIGNhbiBFUEVSTSBvbiBzdGF0LiAgTGlmZSBpcyBzdWZmZXJpbmcuXG4gICAgaWYgKGVyICYmIGVyLmNvZGUgPT09IFwiRVBFUk1cIiAmJiBpc1dpbmRvd3MpXG4gICAgICBmaXhXaW5FUEVSTShwLCBvcHRpb25zLCBlciwgY2IpXG5cbiAgICBpZiAoc3QgJiYgc3QuaXNEaXJlY3RvcnkoKSlcbiAgICAgIHJldHVybiBybWRpcihwLCBvcHRpb25zLCBlciwgY2IpXG5cbiAgICBvcHRpb25zLnVubGluayhwLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgIGlmIChlcikge1xuICAgICAgICBpZiAoZXIuY29kZSA9PT0gXCJFTk9FTlRcIilcbiAgICAgICAgICByZXR1cm4gY2IobnVsbClcbiAgICAgICAgaWYgKGVyLmNvZGUgPT09IFwiRVBFUk1cIilcbiAgICAgICAgICByZXR1cm4gKGlzV2luZG93cylcbiAgICAgICAgICAgID8gZml4V2luRVBFUk0ocCwgb3B0aW9ucywgZXIsIGNiKVxuICAgICAgICAgICAgOiBybWRpcihwLCBvcHRpb25zLCBlciwgY2IpXG4gICAgICAgIGlmIChlci5jb2RlID09PSBcIkVJU0RJUlwiKVxuICAgICAgICAgIHJldHVybiBybWRpcihwLCBvcHRpb25zLCBlciwgY2IpXG4gICAgICB9XG4gICAgICByZXR1cm4gY2IoZXIpXG4gICAgfSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gZml4V2luRVBFUk0gKHAsIG9wdGlvbnMsIGVyLCBjYikge1xuICBhc3NlcnQocClcbiAgYXNzZXJ0KG9wdGlvbnMpXG4gIGFzc2VydCh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gIGlmIChlcilcbiAgICBhc3NlcnQoZXIgaW5zdGFuY2VvZiBFcnJvcilcblxuICBvcHRpb25zLmNobW9kKHAsIF8wNjY2LCBmdW5jdGlvbiAoZXIyKSB7XG4gICAgaWYgKGVyMilcbiAgICAgIGNiKGVyMi5jb2RlID09PSBcIkVOT0VOVFwiID8gbnVsbCA6IGVyKVxuICAgIGVsc2VcbiAgICAgIG9wdGlvbnMuc3RhdChwLCBmdW5jdGlvbihlcjMsIHN0YXRzKSB7XG4gICAgICAgIGlmIChlcjMpXG4gICAgICAgICAgY2IoZXIzLmNvZGUgPT09IFwiRU5PRU5UXCIgPyBudWxsIDogZXIpXG4gICAgICAgIGVsc2UgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpXG4gICAgICAgICAgcm1kaXIocCwgb3B0aW9ucywgZXIsIGNiKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgb3B0aW9ucy51bmxpbmsocCwgY2IpXG4gICAgICB9KVxuICB9KVxufVxuXG5mdW5jdGlvbiBmaXhXaW5FUEVSTVN5bmMgKHAsIG9wdGlvbnMsIGVyKSB7XG4gIGFzc2VydChwKVxuICBhc3NlcnQob3B0aW9ucylcbiAgaWYgKGVyKVxuICAgIGFzc2VydChlciBpbnN0YW5jZW9mIEVycm9yKVxuXG4gIHRyeSB7XG4gICAgb3B0aW9ucy5jaG1vZFN5bmMocCwgXzA2NjYpXG4gIH0gY2F0Y2ggKGVyMikge1xuICAgIGlmIChlcjIuY29kZSA9PT0gXCJFTk9FTlRcIilcbiAgICAgIHJldHVyblxuICAgIGVsc2VcbiAgICAgIHRocm93IGVyXG4gIH1cblxuICB0cnkge1xuICAgIHZhciBzdGF0cyA9IG9wdGlvbnMuc3RhdFN5bmMocClcbiAgfSBjYXRjaCAoZXIzKSB7XG4gICAgaWYgKGVyMy5jb2RlID09PSBcIkVOT0VOVFwiKVxuICAgICAgcmV0dXJuXG4gICAgZWxzZVxuICAgICAgdGhyb3cgZXJcbiAgfVxuXG4gIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKVxuICAgIHJtZGlyU3luYyhwLCBvcHRpb25zLCBlcilcbiAgZWxzZVxuICAgIG9wdGlvbnMudW5saW5rU3luYyhwKVxufVxuXG5mdW5jdGlvbiBybWRpciAocCwgb3B0aW9ucywgb3JpZ2luYWxFciwgY2IpIHtcbiAgYXNzZXJ0KHApXG4gIGFzc2VydChvcHRpb25zKVxuICBpZiAob3JpZ2luYWxFcilcbiAgICBhc3NlcnQob3JpZ2luYWxFciBpbnN0YW5jZW9mIEVycm9yKVxuICBhc3NlcnQodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKVxuXG4gIC8vIHRyeSB0byBybWRpciBmaXJzdCwgYW5kIG9ubHkgcmVhZGRpciBvbiBFTk9URU1QVFkgb3IgRUVYSVNUIChTdW5PUylcbiAgLy8gaWYgd2UgZ3Vlc3NlZCB3cm9uZywgYW5kIGl0J3Mgbm90IGEgZGlyZWN0b3J5LCB0aGVuXG4gIC8vIHJhaXNlIHRoZSBvcmlnaW5hbCBlcnJvci5cbiAgb3B0aW9ucy5ybWRpcihwLCBmdW5jdGlvbiAoZXIpIHtcbiAgICBpZiAoZXIgJiYgKGVyLmNvZGUgPT09IFwiRU5PVEVNUFRZXCIgfHwgZXIuY29kZSA9PT0gXCJFRVhJU1RcIiB8fCBlci5jb2RlID09PSBcIkVQRVJNXCIpKVxuICAgICAgcm1raWRzKHAsIG9wdGlvbnMsIGNiKVxuICAgIGVsc2UgaWYgKGVyICYmIGVyLmNvZGUgPT09IFwiRU5PVERJUlwiKVxuICAgICAgY2Iob3JpZ2luYWxFcilcbiAgICBlbHNlXG4gICAgICBjYihlcilcbiAgfSlcbn1cblxuZnVuY3Rpb24gcm1raWRzKHAsIG9wdGlvbnMsIGNiKSB7XG4gIGFzc2VydChwKVxuICBhc3NlcnQob3B0aW9ucylcbiAgYXNzZXJ0KHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJylcblxuICBvcHRpb25zLnJlYWRkaXIocCwgZnVuY3Rpb24gKGVyLCBmaWxlcykge1xuICAgIGlmIChlcilcbiAgICAgIHJldHVybiBjYihlcilcbiAgICB2YXIgbiA9IGZpbGVzLmxlbmd0aFxuICAgIGlmIChuID09PSAwKVxuICAgICAgcmV0dXJuIG9wdGlvbnMucm1kaXIocCwgY2IpXG4gICAgdmFyIGVyclN0YXRlXG4gICAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgcmltcmFmKHBhdGguam9pbihwLCBmKSwgb3B0aW9ucywgZnVuY3Rpb24gKGVyKSB7XG4gICAgICAgIGlmIChlcnJTdGF0ZSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgaWYgKGVyKVxuICAgICAgICAgIHJldHVybiBjYihlcnJTdGF0ZSA9IGVyKVxuICAgICAgICBpZiAoLS1uID09PSAwKVxuICAgICAgICAgIG9wdGlvbnMucm1kaXIocCwgY2IpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59XG5cbi8vIHRoaXMgbG9va3Mgc2ltcGxlciwgYW5kIGlzIHN0cmljdGx5ICpmYXN0ZXIqLCBidXQgd2lsbFxuLy8gdGllIHVwIHRoZSBKYXZhU2NyaXB0IHRocmVhZCBhbmQgZmFpbCBvbiBleGNlc3NpdmVseVxuLy8gZGVlcCBkaXJlY3RvcnkgdHJlZXMuXG5mdW5jdGlvbiByaW1yYWZTeW5jIChwLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIGRlZmF1bHRzKG9wdGlvbnMpXG5cbiAgYXNzZXJ0KHAsICdyaW1yYWY6IG1pc3NpbmcgcGF0aCcpXG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgcCwgJ3N0cmluZycsICdyaW1yYWY6IHBhdGggc2hvdWxkIGJlIGEgc3RyaW5nJylcbiAgYXNzZXJ0KG9wdGlvbnMsICdyaW1yYWY6IG1pc3Npbmcgb3B0aW9ucycpXG4gIGFzc2VydC5lcXVhbCh0eXBlb2Ygb3B0aW9ucywgJ29iamVjdCcsICdyaW1yYWY6IG9wdGlvbnMgc2hvdWxkIGJlIG9iamVjdCcpXG5cbiAgdmFyIHJlc3VsdHNcblxuICBpZiAob3B0aW9ucy5kaXNhYmxlR2xvYiB8fCAhZ2xvYi5oYXNNYWdpYyhwKSkge1xuICAgIHJlc3VsdHMgPSBbcF1cbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgb3B0aW9ucy5sc3RhdFN5bmMocClcbiAgICAgIHJlc3VsdHMgPSBbcF1cbiAgICB9IGNhdGNoIChlcikge1xuICAgICAgcmVzdWx0cyA9IGdsb2Iuc3luYyhwLCBvcHRpb25zLmdsb2IpXG4gICAgfVxuICB9XG5cbiAgaWYgKCFyZXN1bHRzLmxlbmd0aClcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcCA9IHJlc3VsdHNbaV1cblxuICAgIHRyeSB7XG4gICAgICB2YXIgc3QgPSBvcHRpb25zLmxzdGF0U3luYyhwKVxuICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICBpZiAoZXIuY29kZSA9PT0gXCJFTk9FTlRcIilcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIC8vIFdpbmRvd3MgY2FuIEVQRVJNIG9uIHN0YXQuICBMaWZlIGlzIHN1ZmZlcmluZy5cbiAgICAgIGlmIChlci5jb2RlID09PSBcIkVQRVJNXCIgJiYgaXNXaW5kb3dzKVxuICAgICAgICBmaXhXaW5FUEVSTVN5bmMocCwgb3B0aW9ucywgZXIpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIHN1bm9zIGxldHMgdGhlIHJvb3QgdXNlciB1bmxpbmsgZGlyZWN0b3JpZXMsIHdoaWNoIGlzLi4uIHdlaXJkLlxuICAgICAgaWYgKHN0ICYmIHN0LmlzRGlyZWN0b3J5KCkpXG4gICAgICAgIHJtZGlyU3luYyhwLCBvcHRpb25zLCBudWxsKVxuICAgICAgZWxzZVxuICAgICAgICBvcHRpb25zLnVubGlua1N5bmMocClcbiAgICB9IGNhdGNoIChlcikge1xuICAgICAgaWYgKGVyLmNvZGUgPT09IFwiRU5PRU5UXCIpXG4gICAgICAgIHJldHVyblxuICAgICAgaWYgKGVyLmNvZGUgPT09IFwiRVBFUk1cIilcbiAgICAgICAgcmV0dXJuIGlzV2luZG93cyA/IGZpeFdpbkVQRVJNU3luYyhwLCBvcHRpb25zLCBlcikgOiBybWRpclN5bmMocCwgb3B0aW9ucywgZXIpXG4gICAgICBpZiAoZXIuY29kZSAhPT0gXCJFSVNESVJcIilcbiAgICAgICAgdGhyb3cgZXJcblxuICAgICAgcm1kaXJTeW5jKHAsIG9wdGlvbnMsIGVyKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBybWRpclN5bmMgKHAsIG9wdGlvbnMsIG9yaWdpbmFsRXIpIHtcbiAgYXNzZXJ0KHApXG4gIGFzc2VydChvcHRpb25zKVxuICBpZiAob3JpZ2luYWxFcilcbiAgICBhc3NlcnQob3JpZ2luYWxFciBpbnN0YW5jZW9mIEVycm9yKVxuXG4gIHRyeSB7XG4gICAgb3B0aW9ucy5ybWRpclN5bmMocClcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICBpZiAoZXIuY29kZSA9PT0gXCJFTk9FTlRcIilcbiAgICAgIHJldHVyblxuICAgIGlmIChlci5jb2RlID09PSBcIkVOT1RESVJcIilcbiAgICAgIHRocm93IG9yaWdpbmFsRXJcbiAgICBpZiAoZXIuY29kZSA9PT0gXCJFTk9URU1QVFlcIiB8fCBlci5jb2RlID09PSBcIkVFWElTVFwiIHx8IGVyLmNvZGUgPT09IFwiRVBFUk1cIilcbiAgICAgIHJta2lkc1N5bmMocCwgb3B0aW9ucylcbiAgfVxufVxuXG5mdW5jdGlvbiBybWtpZHNTeW5jIChwLCBvcHRpb25zKSB7XG4gIGFzc2VydChwKVxuICBhc3NlcnQob3B0aW9ucylcbiAgb3B0aW9ucy5yZWFkZGlyU3luYyhwKS5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgcmltcmFmU3luYyhwYXRoLmpvaW4ocCwgZiksIG9wdGlvbnMpXG4gIH0pXG5cbiAgLy8gV2Ugb25seSBlbmQgdXAgaGVyZSBvbmNlIHdlIGdvdCBFTk9URU1QVFkgYXQgbGVhc3Qgb25jZSwgYW5kXG4gIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgcmVtb3ZlZCBhbGwgdGhlIGtpZHMuXG4gIC8vIFNvLCB3ZSBrbm93IHRoYXQgaXQgd29uJ3QgYmUgRU5PRU5UIG9yIEVOT1RESVIgb3IgYW55dGhpbmcgZWxzZS5cbiAgLy8gdHJ5IHJlYWxseSBoYXJkIHRvIGRlbGV0ZSBzdHVmZiBvbiB3aW5kb3dzLCBiZWNhdXNlIGl0IGhhcyBhXG4gIC8vIFBST0ZPVU5ETFkgYW5ub3lpbmcgaGFiaXQgb2Ygbm90IGNsb3NpbmcgaGFuZGxlcyBwcm9tcHRseSB3aGVuXG4gIC8vIGZpbGVzIGFyZSBkZWxldGVkLCByZXN1bHRpbmcgaW4gc3B1cmlvdXMgRU5PVEVNUFRZIGVycm9ycy5cbiAgdmFyIHJldHJpZXMgPSBpc1dpbmRvd3MgPyAxMDAgOiAxXG4gIHZhciBpID0gMFxuICBkbyB7XG4gICAgdmFyIHRocmV3ID0gdHJ1ZVxuICAgIHRyeSB7XG4gICAgICB2YXIgcmV0ID0gb3B0aW9ucy5ybWRpclN5bmMocCwgb3B0aW9ucylcbiAgICAgIHRocmV3ID0gZmFsc2VcbiAgICAgIHJldHVybiByZXRcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKCsraSA8IHJldHJpZXMgJiYgdGhyZXcpXG4gICAgICAgIGNvbnRpbnVlXG4gICAgfVxuICB9IHdoaWxlICh0cnVlKVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBwYXRoTW9kdWxlID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGlzV2luZG93cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vLyBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHJlYWxwYXRoLCBwb3J0ZWQgZnJvbSBub2RlIHByZS12NlxuXG52YXIgREVCVUcgPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHICYmIC9mcy8udGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKTtcblxuZnVuY3Rpb24gcmV0aHJvdygpIHtcbiAgLy8gT25seSBlbmFibGUgaW4gZGVidWcgbW9kZS4gQSBiYWNrdHJhY2UgdXNlcyB+MTAwMCBieXRlcyBvZiBoZWFwIHNwYWNlIGFuZFxuICAvLyBpcyBmYWlybHkgc2xvdyB0byBnZW5lcmF0ZS5cbiAgdmFyIGNhbGxiYWNrO1xuICBpZiAoREVCVUcpIHtcbiAgICB2YXIgYmFja3RyYWNlID0gbmV3IEVycm9yO1xuICAgIGNhbGxiYWNrID0gZGVidWdDYWxsYmFjaztcbiAgfSBlbHNlXG4gICAgY2FsbGJhY2sgPSBtaXNzaW5nQ2FsbGJhY2s7XG5cbiAgcmV0dXJuIGNhbGxiYWNrO1xuXG4gIGZ1bmN0aW9uIGRlYnVnQ2FsbGJhY2soZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgYmFja3RyYWNlLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICAgIGVyciA9IGJhY2t0cmFjZTtcbiAgICAgIG1pc3NpbmdDYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1pc3NpbmdDYWxsYmFjayhlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKVxuICAgICAgICB0aHJvdyBlcnI7ICAvLyBGb3Jnb3QgYSBjYWxsYmFjayBidXQgZG9uJ3Qga25vdyB3aGVyZT8gVXNlIE5PREVfREVCVUc9ZnNcbiAgICAgIGVsc2UgaWYgKCFwcm9jZXNzLm5vRGVwcmVjYXRpb24pIHtcbiAgICAgICAgdmFyIG1zZyA9ICdmczogbWlzc2luZyBjYWxsYmFjayAnICsgKGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSk7XG4gICAgICAgIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pXG4gICAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZUNhbGxiYWNrKGNiKSB7XG4gIHJldHVybiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicgPyBjYiA6IHJldGhyb3coKTtcbn1cblxudmFyIG5vcm1hbGl6ZSA9IHBhdGhNb2R1bGUubm9ybWFsaXplO1xuXG4vLyBSZWdleHAgdGhhdCBmaW5kcyB0aGUgbmV4dCBwYXJ0aW9uIG9mIGEgKHBhcnRpYWwpIHBhdGhcbi8vIHJlc3VsdCBpcyBbYmFzZV93aXRoX3NsYXNoLCBiYXNlXSwgZS5nLiBbJ3NvbWVkaXIvJywgJ3NvbWVkaXInXVxuaWYgKGlzV2luZG93cykge1xuICB2YXIgbmV4dFBhcnRSZSA9IC8oLio/KSg/OltcXC9cXFxcXSt8JCkvZztcbn0gZWxzZSB7XG4gIHZhciBuZXh0UGFydFJlID0gLyguKj8pKD86W1xcL10rfCQpL2c7XG59XG5cbi8vIFJlZ2V4IHRvIGZpbmQgdGhlIGRldmljZSByb290LCBpbmNsdWRpbmcgdHJhaWxpbmcgc2xhc2guIEUuZy4gJ2M6XFxcXCcuXG5pZiAoaXNXaW5kb3dzKSB7XG4gIHZhciBzcGxpdFJvb3RSZSA9IC9eKD86W2EtekEtWl06fFtcXFxcXFwvXXsyfVteXFxcXFxcL10rW1xcXFxcXC9dW15cXFxcXFwvXSspP1tcXFxcXFwvXSovO1xufSBlbHNlIHtcbiAgdmFyIHNwbGl0Um9vdFJlID0gL15bXFwvXSovO1xufVxuXG5leHBvcnRzLnJlYWxwYXRoU3luYyA9IGZ1bmN0aW9uIHJlYWxwYXRoU3luYyhwLCBjYWNoZSkge1xuICAvLyBtYWtlIHAgaXMgYWJzb2x1dGVcbiAgcCA9IHBhdGhNb2R1bGUucmVzb2x2ZShwKTtcblxuICBpZiAoY2FjaGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlLCBwKSkge1xuICAgIHJldHVybiBjYWNoZVtwXTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbCA9IHAsXG4gICAgICBzZWVuTGlua3MgPSB7fSxcbiAgICAgIGtub3duSGFyZCA9IHt9O1xuXG4gIC8vIGN1cnJlbnQgY2hhcmFjdGVyIHBvc2l0aW9uIGluIHBcbiAgdmFyIHBvcztcbiAgLy8gdGhlIHBhcnRpYWwgcGF0aCBzbyBmYXIsIGluY2x1ZGluZyBhIHRyYWlsaW5nIHNsYXNoIGlmIGFueVxuICB2YXIgY3VycmVudDtcbiAgLy8gdGhlIHBhcnRpYWwgcGF0aCB3aXRob3V0IGEgdHJhaWxpbmcgc2xhc2ggKGV4Y2VwdCB3aGVuIHBvaW50aW5nIGF0IGEgcm9vdClcbiAgdmFyIGJhc2U7XG4gIC8vIHRoZSBwYXJ0aWFsIHBhdGggc2Nhbm5lZCBpbiB0aGUgcHJldmlvdXMgcm91bmQsIHdpdGggc2xhc2hcbiAgdmFyIHByZXZpb3VzO1xuXG4gIHN0YXJ0KCk7XG5cbiAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgLy8gU2tpcCBvdmVyIHJvb3RzXG4gICAgdmFyIG0gPSBzcGxpdFJvb3RSZS5leGVjKHApO1xuICAgIHBvcyA9IG1bMF0ubGVuZ3RoO1xuICAgIGN1cnJlbnQgPSBtWzBdO1xuICAgIGJhc2UgPSBtWzBdO1xuICAgIHByZXZpb3VzID0gJyc7XG5cbiAgICAvLyBPbiB3aW5kb3dzLCBjaGVjayB0aGF0IHRoZSByb290IGV4aXN0cy4gT24gdW5peCB0aGVyZSBpcyBubyBuZWVkLlxuICAgIGlmIChpc1dpbmRvd3MgJiYgIWtub3duSGFyZFtiYXNlXSkge1xuICAgICAgZnMubHN0YXRTeW5jKGJhc2UpO1xuICAgICAga25vd25IYXJkW2Jhc2VdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyB3YWxrIGRvd24gdGhlIHBhdGgsIHN3YXBwaW5nIG91dCBsaW5rZWQgcGF0aHBhcnRzIGZvciB0aGVpciByZWFsXG4gIC8vIHZhbHVlc1xuICAvLyBOQjogcC5sZW5ndGggY2hhbmdlcy5cbiAgd2hpbGUgKHBvcyA8IHAubGVuZ3RoKSB7XG4gICAgLy8gZmluZCB0aGUgbmV4dCBwYXJ0XG4gICAgbmV4dFBhcnRSZS5sYXN0SW5kZXggPSBwb3M7XG4gICAgdmFyIHJlc3VsdCA9IG5leHRQYXJ0UmUuZXhlYyhwKTtcbiAgICBwcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgY3VycmVudCArPSByZXN1bHRbMF07XG4gICAgYmFzZSA9IHByZXZpb3VzICsgcmVzdWx0WzFdO1xuICAgIHBvcyA9IG5leHRQYXJ0UmUubGFzdEluZGV4O1xuXG4gICAgLy8gY29udGludWUgaWYgbm90IGEgc3ltbGlua1xuICAgIGlmIChrbm93bkhhcmRbYmFzZV0gfHwgKGNhY2hlICYmIGNhY2hlW2Jhc2VdID09PSBiYXNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmVkTGluaztcbiAgICBpZiAoY2FjaGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlLCBiYXNlKSkge1xuICAgICAgLy8gc29tZSBrbm93biBzeW1ib2xpYyBsaW5rLiAgbm8gbmVlZCB0byBzdGF0IGFnYWluLlxuICAgICAgcmVzb2x2ZWRMaW5rID0gY2FjaGVbYmFzZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGF0ID0gZnMubHN0YXRTeW5jKGJhc2UpO1xuICAgICAgaWYgKCFzdGF0LmlzU3ltYm9saWNMaW5rKCkpIHtcbiAgICAgICAga25vd25IYXJkW2Jhc2VdID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNhY2hlKSBjYWNoZVtiYXNlXSA9IGJhc2U7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyByZWFkIHRoZSBsaW5rIGlmIGl0IHdhc24ndCByZWFkIGJlZm9yZVxuICAgICAgLy8gZGV2L2lubyBhbHdheXMgcmV0dXJuIDAgb24gd2luZG93cywgc28gc2tpcCB0aGUgY2hlY2suXG4gICAgICB2YXIgbGlua1RhcmdldCA9IG51bGw7XG4gICAgICBpZiAoIWlzV2luZG93cykge1xuICAgICAgICB2YXIgaWQgPSBzdGF0LmRldi50b1N0cmluZygzMikgKyAnOicgKyBzdGF0Lmluby50b1N0cmluZygzMik7XG4gICAgICAgIGlmIChzZWVuTGlua3MuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgbGlua1RhcmdldCA9IHNlZW5MaW5rc1tpZF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsaW5rVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgIGZzLnN0YXRTeW5jKGJhc2UpO1xuICAgICAgICBsaW5rVGFyZ2V0ID0gZnMucmVhZGxpbmtTeW5jKGJhc2UpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWRMaW5rID0gcGF0aE1vZHVsZS5yZXNvbHZlKHByZXZpb3VzLCBsaW5rVGFyZ2V0KTtcbiAgICAgIC8vIHRyYWNrIHRoaXMsIGlmIGdpdmVuIGEgY2FjaGUuXG4gICAgICBpZiAoY2FjaGUpIGNhY2hlW2Jhc2VdID0gcmVzb2x2ZWRMaW5rO1xuICAgICAgaWYgKCFpc1dpbmRvd3MpIHNlZW5MaW5rc1tpZF0gPSBsaW5rVGFyZ2V0O1xuICAgIH1cblxuICAgIC8vIHJlc29sdmUgdGhlIGxpbmssIHRoZW4gc3RhcnQgb3ZlclxuICAgIHAgPSBwYXRoTW9kdWxlLnJlc29sdmUocmVzb2x2ZWRMaW5rLCBwLnNsaWNlKHBvcykpO1xuICAgIHN0YXJ0KCk7XG4gIH1cblxuICBpZiAoY2FjaGUpIGNhY2hlW29yaWdpbmFsXSA9IHA7XG5cbiAgcmV0dXJuIHA7XG59O1xuXG5cbmV4cG9ydHMucmVhbHBhdGggPSBmdW5jdGlvbiByZWFscGF0aChwLCBjYWNoZSwgY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gbWF5YmVDYWxsYmFjayhjYWNoZSk7XG4gICAgY2FjaGUgPSBudWxsO1xuICB9XG5cbiAgLy8gbWFrZSBwIGlzIGFic29sdXRlXG4gIHAgPSBwYXRoTW9kdWxlLnJlc29sdmUocCk7XG5cbiAgaWYgKGNhY2hlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjYWNoZSwgcCkpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhjYi5iaW5kKG51bGwsIG51bGwsIGNhY2hlW3BdKSk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWwgPSBwLFxuICAgICAgc2VlbkxpbmtzID0ge30sXG4gICAgICBrbm93bkhhcmQgPSB7fTtcblxuICAvLyBjdXJyZW50IGNoYXJhY3RlciBwb3NpdGlvbiBpbiBwXG4gIHZhciBwb3M7XG4gIC8vIHRoZSBwYXJ0aWFsIHBhdGggc28gZmFyLCBpbmNsdWRpbmcgYSB0cmFpbGluZyBzbGFzaCBpZiBhbnlcbiAgdmFyIGN1cnJlbnQ7XG4gIC8vIHRoZSBwYXJ0aWFsIHBhdGggd2l0aG91dCBhIHRyYWlsaW5nIHNsYXNoIChleGNlcHQgd2hlbiBwb2ludGluZyBhdCBhIHJvb3QpXG4gIHZhciBiYXNlO1xuICAvLyB0aGUgcGFydGlhbCBwYXRoIHNjYW5uZWQgaW4gdGhlIHByZXZpb3VzIHJvdW5kLCB3aXRoIHNsYXNoXG4gIHZhciBwcmV2aW91cztcblxuICBzdGFydCgpO1xuXG4gIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIC8vIFNraXAgb3ZlciByb290c1xuICAgIHZhciBtID0gc3BsaXRSb290UmUuZXhlYyhwKTtcbiAgICBwb3MgPSBtWzBdLmxlbmd0aDtcbiAgICBjdXJyZW50ID0gbVswXTtcbiAgICBiYXNlID0gbVswXTtcbiAgICBwcmV2aW91cyA9ICcnO1xuXG4gICAgLy8gT24gd2luZG93cywgY2hlY2sgdGhhdCB0aGUgcm9vdCBleGlzdHMuIE9uIHVuaXggdGhlcmUgaXMgbm8gbmVlZC5cbiAgICBpZiAoaXNXaW5kb3dzICYmICFrbm93bkhhcmRbYmFzZV0pIHtcbiAgICAgIGZzLmxzdGF0KGJhc2UsIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAga25vd25IYXJkW2Jhc2VdID0gdHJ1ZTtcbiAgICAgICAgTE9PUCgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soTE9PUCk7XG4gICAgfVxuICB9XG5cbiAgLy8gd2FsayBkb3duIHRoZSBwYXRoLCBzd2FwcGluZyBvdXQgbGlua2VkIHBhdGhwYXJ0cyBmb3IgdGhlaXIgcmVhbFxuICAvLyB2YWx1ZXNcbiAgZnVuY3Rpb24gTE9PUCgpIHtcbiAgICAvLyBzdG9wIGlmIHNjYW5uZWQgcGFzdCBlbmQgb2YgcGF0aFxuICAgIGlmIChwb3MgPj0gcC5sZW5ndGgpIHtcbiAgICAgIGlmIChjYWNoZSkgY2FjaGVbb3JpZ2luYWxdID0gcDtcbiAgICAgIHJldHVybiBjYihudWxsLCBwKTtcbiAgICB9XG5cbiAgICAvLyBmaW5kIHRoZSBuZXh0IHBhcnRcbiAgICBuZXh0UGFydFJlLmxhc3RJbmRleCA9IHBvcztcbiAgICB2YXIgcmVzdWx0ID0gbmV4dFBhcnRSZS5leGVjKHApO1xuICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICBjdXJyZW50ICs9IHJlc3VsdFswXTtcbiAgICBiYXNlID0gcHJldmlvdXMgKyByZXN1bHRbMV07XG4gICAgcG9zID0gbmV4dFBhcnRSZS5sYXN0SW5kZXg7XG5cbiAgICAvLyBjb250aW51ZSBpZiBub3QgYSBzeW1saW5rXG4gICAgaWYgKGtub3duSGFyZFtiYXNlXSB8fCAoY2FjaGUgJiYgY2FjaGVbYmFzZV0gPT09IGJhc2UpKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhMT09QKTtcbiAgICB9XG5cbiAgICBpZiAoY2FjaGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNhY2hlLCBiYXNlKSkge1xuICAgICAgLy8ga25vd24gc3ltYm9saWMgbGluay4gIG5vIG5lZWQgdG8gc3RhdCBhZ2Fpbi5cbiAgICAgIHJldHVybiBnb3RSZXNvbHZlZExpbmsoY2FjaGVbYmFzZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBmcy5sc3RhdChiYXNlLCBnb3RTdGF0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvdFN0YXQoZXJyLCBzdGF0KSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG5cbiAgICAvLyBpZiBub3QgYSBzeW1saW5rLCBza2lwIHRvIHRoZSBuZXh0IHBhdGggcGFydFxuICAgIGlmICghc3RhdC5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgICBrbm93bkhhcmRbYmFzZV0gPSB0cnVlO1xuICAgICAgaWYgKGNhY2hlKSBjYWNoZVtiYXNlXSA9IGJhc2U7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhMT09QKTtcbiAgICB9XG5cbiAgICAvLyBzdGF0ICYgcmVhZCB0aGUgbGluayBpZiBub3QgcmVhZCBiZWZvcmVcbiAgICAvLyBjYWxsIGdvdFRhcmdldCBhcyBzb29uIGFzIHRoZSBsaW5rIHRhcmdldCBpcyBrbm93blxuICAgIC8vIGRldi9pbm8gYWx3YXlzIHJldHVybiAwIG9uIHdpbmRvd3MsIHNvIHNraXAgdGhlIGNoZWNrLlxuICAgIGlmICghaXNXaW5kb3dzKSB7XG4gICAgICB2YXIgaWQgPSBzdGF0LmRldi50b1N0cmluZygzMikgKyAnOicgKyBzdGF0Lmluby50b1N0cmluZygzMik7XG4gICAgICBpZiAoc2VlbkxpbmtzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICByZXR1cm4gZ290VGFyZ2V0KG51bGwsIHNlZW5MaW5rc1tpZF0sIGJhc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBmcy5zdGF0KGJhc2UsIGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNiKGVycik7XG5cbiAgICAgIGZzLnJlYWRsaW5rKGJhc2UsIGZ1bmN0aW9uKGVyciwgdGFyZ2V0KSB7XG4gICAgICAgIGlmICghaXNXaW5kb3dzKSBzZWVuTGlua3NbaWRdID0gdGFyZ2V0O1xuICAgICAgICBnb3RUYXJnZXQoZXJyLCB0YXJnZXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb3RUYXJnZXQoZXJyLCB0YXJnZXQsIGJhc2UpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2IoZXJyKTtcblxuICAgIHZhciByZXNvbHZlZExpbmsgPSBwYXRoTW9kdWxlLnJlc29sdmUocHJldmlvdXMsIHRhcmdldCk7XG4gICAgaWYgKGNhY2hlKSBjYWNoZVtiYXNlXSA9IHJlc29sdmVkTGluaztcbiAgICBnb3RSZXNvbHZlZExpbmsocmVzb2x2ZWRMaW5rKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvdFJlc29sdmVkTGluayhyZXNvbHZlZExpbmspIHtcbiAgICAvLyByZXNvbHZlIHRoZSBsaW5rLCB0aGVuIHN0YXJ0IG92ZXJcbiAgICBwID0gcGF0aE1vZHVsZS5yZXNvbHZlKHJlc29sdmVkTGluaywgcC5zbGljZShwb3MpKTtcbiAgICBzdGFydCgpO1xuICB9XG59O1xuIiwidmFyIGNvbmNhdE1hcCA9IHJlcXVpcmUoJ2NvbmNhdC1tYXAnKTtcbnZhciBiYWxhbmNlZCA9IHJlcXVpcmUoJ2JhbGFuY2VkLW1hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwYW5kVG9wO1xuXG52YXIgZXNjU2xhc2ggPSAnXFwwU0xBU0gnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG52YXIgZXNjT3BlbiA9ICdcXDBPUEVOJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY0Nsb3NlID0gJ1xcMENMT1NFJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY0NvbW1hID0gJ1xcMENPTU1BJytNYXRoLnJhbmRvbSgpKydcXDAnO1xudmFyIGVzY1BlcmlvZCA9ICdcXDBQRVJJT0QnK01hdGgucmFuZG9tKCkrJ1xcMCc7XG5cbmZ1bmN0aW9uIG51bWVyaWMoc3RyKSB7XG4gIHJldHVybiBwYXJzZUludChzdHIsIDEwKSA9PSBzdHJcbiAgICA/IHBhcnNlSW50KHN0ciwgMTApXG4gICAgOiBzdHIuY2hhckNvZGVBdCgwKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlQnJhY2VzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KCdcXFxcXFxcXCcpLmpvaW4oZXNjU2xhc2gpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFx7Jykuam9pbihlc2NPcGVuKVxuICAgICAgICAgICAgLnNwbGl0KCdcXFxcfScpLmpvaW4oZXNjQ2xvc2UpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcXFwsJykuam9pbihlc2NDb21tYSlcbiAgICAgICAgICAgIC5zcGxpdCgnXFxcXC4nKS5qb2luKGVzY1BlcmlvZCk7XG59XG5cbmZ1bmN0aW9uIHVuZXNjYXBlQnJhY2VzKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KGVzY1NsYXNoKS5qb2luKCdcXFxcJylcbiAgICAgICAgICAgIC5zcGxpdChlc2NPcGVuKS5qb2luKCd7JylcbiAgICAgICAgICAgIC5zcGxpdChlc2NDbG9zZSkuam9pbignfScpXG4gICAgICAgICAgICAuc3BsaXQoZXNjQ29tbWEpLmpvaW4oJywnKVxuICAgICAgICAgICAgLnNwbGl0KGVzY1BlcmlvZCkuam9pbignLicpO1xufVxuXG5cbi8vIEJhc2ljYWxseSBqdXN0IHN0ci5zcGxpdChcIixcIiksIGJ1dCBoYW5kbGluZyBjYXNlc1xuLy8gd2hlcmUgd2UgaGF2ZSBuZXN0ZWQgYnJhY2VkIHNlY3Rpb25zLCB3aGljaCBzaG91bGQgYmVcbi8vIHRyZWF0ZWQgYXMgaW5kaXZpZHVhbCBtZW1iZXJzLCBsaWtlIHthLHtiLGN9LGR9XG5mdW5jdGlvbiBwYXJzZUNvbW1hUGFydHMoc3RyKSB7XG4gIGlmICghc3RyKVxuICAgIHJldHVybiBbJyddO1xuXG4gIHZhciBwYXJ0cyA9IFtdO1xuICB2YXIgbSA9IGJhbGFuY2VkKCd7JywgJ30nLCBzdHIpO1xuXG4gIGlmICghbSlcbiAgICByZXR1cm4gc3RyLnNwbGl0KCcsJyk7XG5cbiAgdmFyIHByZSA9IG0ucHJlO1xuICB2YXIgYm9keSA9IG0uYm9keTtcbiAgdmFyIHBvc3QgPSBtLnBvc3Q7XG4gIHZhciBwID0gcHJlLnNwbGl0KCcsJyk7XG5cbiAgcFtwLmxlbmd0aC0xXSArPSAneycgKyBib2R5ICsgJ30nO1xuICB2YXIgcG9zdFBhcnRzID0gcGFyc2VDb21tYVBhcnRzKHBvc3QpO1xuICBpZiAocG9zdC5sZW5ndGgpIHtcbiAgICBwW3AubGVuZ3RoLTFdICs9IHBvc3RQYXJ0cy5zaGlmdCgpO1xuICAgIHAucHVzaC5hcHBseShwLCBwb3N0UGFydHMpO1xuICB9XG5cbiAgcGFydHMucHVzaC5hcHBseShwYXJ0cywgcCk7XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG5mdW5jdGlvbiBleHBhbmRUb3Aoc3RyKSB7XG4gIGlmICghc3RyKVxuICAgIHJldHVybiBbXTtcblxuICAvLyBJIGRvbid0IGtub3cgd2h5IEJhc2ggNC4zIGRvZXMgdGhpcywgYnV0IGl0IGRvZXMuXG4gIC8vIEFueXRoaW5nIHN0YXJ0aW5nIHdpdGgge30gd2lsbCBoYXZlIHRoZSBmaXJzdCB0d28gYnl0ZXMgcHJlc2VydmVkXG4gIC8vIGJ1dCAqb25seSogYXQgdGhlIHRvcCBsZXZlbCwgc28ge30sYX1iIHdpbGwgbm90IGV4cGFuZCB0byBhbnl0aGluZyxcbiAgLy8gYnV0IGF7fSxifWMgd2lsbCBiZSBleHBhbmRlZCB0byBbYX1jLGFiY10uXG4gIC8vIE9uZSBjb3VsZCBhcmd1ZSB0aGF0IHRoaXMgaXMgYSBidWcgaW4gQmFzaCwgYnV0IHNpbmNlIHRoZSBnb2FsIG9mXG4gIC8vIHRoaXMgbW9kdWxlIGlzIHRvIG1hdGNoIEJhc2gncyBydWxlcywgd2UgZXNjYXBlIGEgbGVhZGluZyB7fVxuICBpZiAoc3RyLnN1YnN0cigwLCAyKSA9PT0gJ3t9Jykge1xuICAgIHN0ciA9ICdcXFxce1xcXFx9JyArIHN0ci5zdWJzdHIoMik7XG4gIH1cblxuICByZXR1cm4gZXhwYW5kKGVzY2FwZUJyYWNlcyhzdHIpLCB0cnVlKS5tYXAodW5lc2NhcGVCcmFjZXMpO1xufVxuXG5mdW5jdGlvbiBpZGVudGl0eShlKSB7XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBlbWJyYWNlKHN0cikge1xuICByZXR1cm4gJ3snICsgc3RyICsgJ30nO1xufVxuZnVuY3Rpb24gaXNQYWRkZWQoZWwpIHtcbiAgcmV0dXJuIC9eLT8wXFxkLy50ZXN0KGVsKTtcbn1cblxuZnVuY3Rpb24gbHRlKGksIHkpIHtcbiAgcmV0dXJuIGkgPD0geTtcbn1cbmZ1bmN0aW9uIGd0ZShpLCB5KSB7XG4gIHJldHVybiBpID49IHk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZChzdHIsIGlzVG9wKSB7XG4gIHZhciBleHBhbnNpb25zID0gW107XG5cbiAgdmFyIG0gPSBiYWxhbmNlZCgneycsICd9Jywgc3RyKTtcbiAgaWYgKCFtIHx8IC9cXCQkLy50ZXN0KG0ucHJlKSkgcmV0dXJuIFtzdHJdO1xuXG4gIHZhciBpc051bWVyaWNTZXF1ZW5jZSA9IC9eLT9cXGQrXFwuXFwuLT9cXGQrKD86XFwuXFwuLT9cXGQrKT8kLy50ZXN0KG0uYm9keSk7XG4gIHZhciBpc0FscGhhU2VxdWVuY2UgPSAvXlthLXpBLVpdXFwuXFwuW2EtekEtWl0oPzpcXC5cXC4tP1xcZCspPyQvLnRlc3QobS5ib2R5KTtcbiAgdmFyIGlzU2VxdWVuY2UgPSBpc051bWVyaWNTZXF1ZW5jZSB8fCBpc0FscGhhU2VxdWVuY2U7XG4gIHZhciBpc09wdGlvbnMgPSBtLmJvZHkuaW5kZXhPZignLCcpID49IDA7XG4gIGlmICghaXNTZXF1ZW5jZSAmJiAhaXNPcHRpb25zKSB7XG4gICAgLy8ge2F9LGJ9XG4gICAgaWYgKG0ucG9zdC5tYXRjaCgvLC4qXFx9LykpIHtcbiAgICAgIHN0ciA9IG0ucHJlICsgJ3snICsgbS5ib2R5ICsgZXNjQ2xvc2UgKyBtLnBvc3Q7XG4gICAgICByZXR1cm4gZXhwYW5kKHN0cik7XG4gICAgfVxuICAgIHJldHVybiBbc3RyXTtcbiAgfVxuXG4gIHZhciBuO1xuICBpZiAoaXNTZXF1ZW5jZSkge1xuICAgIG4gPSBtLmJvZHkuc3BsaXQoL1xcLlxcLi8pO1xuICB9IGVsc2Uge1xuICAgIG4gPSBwYXJzZUNvbW1hUGFydHMobS5ib2R5KTtcbiAgICBpZiAobi5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIHh7e2EsYn19eSA9PT4geHthfXkgeHtifXlcbiAgICAgIG4gPSBleHBhbmQoblswXSwgZmFsc2UpLm1hcChlbWJyYWNlKTtcbiAgICAgIGlmIChuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgcG9zdCA9IG0ucG9zdC5sZW5ndGhcbiAgICAgICAgICA/IGV4cGFuZChtLnBvc3QsIGZhbHNlKVxuICAgICAgICAgIDogWycnXTtcbiAgICAgICAgcmV0dXJuIHBvc3QubWFwKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgICByZXR1cm4gbS5wcmUgKyBuWzBdICsgcDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gYXQgdGhpcyBwb2ludCwgbiBpcyB0aGUgcGFydHMsIGFuZCB3ZSBrbm93IGl0J3Mgbm90IGEgY29tbWEgc2V0XG4gIC8vIHdpdGggYSBzaW5nbGUgZW50cnkuXG5cbiAgLy8gbm8gbmVlZCB0byBleHBhbmQgcHJlLCBzaW5jZSBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIGZyZWUgb2YgYnJhY2Utc2V0c1xuICB2YXIgcHJlID0gbS5wcmU7XG4gIHZhciBwb3N0ID0gbS5wb3N0Lmxlbmd0aFxuICAgID8gZXhwYW5kKG0ucG9zdCwgZmFsc2UpXG4gICAgOiBbJyddO1xuXG4gIHZhciBOO1xuXG4gIGlmIChpc1NlcXVlbmNlKSB7XG4gICAgdmFyIHggPSBudW1lcmljKG5bMF0pO1xuICAgIHZhciB5ID0gbnVtZXJpYyhuWzFdKTtcbiAgICB2YXIgd2lkdGggPSBNYXRoLm1heChuWzBdLmxlbmd0aCwgblsxXS5sZW5ndGgpXG4gICAgdmFyIGluY3IgPSBuLmxlbmd0aCA9PSAzXG4gICAgICA/IE1hdGguYWJzKG51bWVyaWMoblsyXSkpXG4gICAgICA6IDE7XG4gICAgdmFyIHRlc3QgPSBsdGU7XG4gICAgdmFyIHJldmVyc2UgPSB5IDwgeDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgaW5jciAqPSAtMTtcbiAgICAgIHRlc3QgPSBndGU7XG4gICAgfVxuICAgIHZhciBwYWQgPSBuLnNvbWUoaXNQYWRkZWQpO1xuXG4gICAgTiA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IHg7IHRlc3QoaSwgeSk7IGkgKz0gaW5jcikge1xuICAgICAgdmFyIGM7XG4gICAgICBpZiAoaXNBbHBoYVNlcXVlbmNlKSB7XG4gICAgICAgIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpO1xuICAgICAgICBpZiAoYyA9PT0gJ1xcXFwnKVxuICAgICAgICAgIGMgPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGMgPSBTdHJpbmcoaSk7XG4gICAgICAgIGlmIChwYWQpIHtcbiAgICAgICAgICB2YXIgbmVlZCA9IHdpZHRoIC0gYy5sZW5ndGg7XG4gICAgICAgICAgaWYgKG5lZWQgPiAwKSB7XG4gICAgICAgICAgICB2YXIgeiA9IG5ldyBBcnJheShuZWVkICsgMSkuam9pbignMCcpO1xuICAgICAgICAgICAgaWYgKGkgPCAwKVxuICAgICAgICAgICAgICBjID0gJy0nICsgeiArIGMuc2xpY2UoMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGMgPSB6ICsgYztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIE4ucHVzaChjKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgTiA9IGNvbmNhdE1hcChuLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZXhwYW5kKGVsLCBmYWxzZSkgfSk7XG4gIH1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IE4ubGVuZ3RoOyBqKyspIHtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHBvc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgIHZhciBleHBhbnNpb24gPSBwcmUgKyBOW2pdICsgcG9zdFtrXTtcbiAgICAgIGlmICghaXNUb3AgfHwgaXNTZXF1ZW5jZSB8fCBleHBhbnNpb24pXG4gICAgICAgIGV4cGFuc2lvbnMucHVzaChleHBhbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHBhbnNpb25zO1xufVxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4cywgZm4pIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgeCA9IGZuKHhzW2ldLCBpKTtcbiAgICAgICAgaWYgKGlzQXJyYXkoeCkpIHJlcy5wdXNoLmFwcGx5KHJlcywgeCk7XG4gICAgICAgIGVsc2UgcmVzLnB1c2goeCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBiYWxhbmNlZDtcbmZ1bmN0aW9uIGJhbGFuY2VkKGEsIGIsIHN0cikge1xuICBpZiAoYSBpbnN0YW5jZW9mIFJlZ0V4cCkgYSA9IG1heWJlTWF0Y2goYSwgc3RyKTtcbiAgaWYgKGIgaW5zdGFuY2VvZiBSZWdFeHApIGIgPSBtYXliZU1hdGNoKGIsIHN0cik7XG5cbiAgdmFyIHIgPSByYW5nZShhLCBiLCBzdHIpO1xuXG4gIHJldHVybiByICYmIHtcbiAgICBzdGFydDogclswXSxcbiAgICBlbmQ6IHJbMV0sXG4gICAgcHJlOiBzdHIuc2xpY2UoMCwgclswXSksXG4gICAgYm9keTogc3RyLnNsaWNlKHJbMF0gKyBhLmxlbmd0aCwgclsxXSksXG4gICAgcG9zdDogc3RyLnNsaWNlKHJbMV0gKyBiLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWF5YmVNYXRjaChyZWcsIHN0cikge1xuICB2YXIgbSA9IHN0ci5tYXRjaChyZWcpO1xuICByZXR1cm4gbSA/IG1bMF0gOiBudWxsO1xufVxuXG5iYWxhbmNlZC5yYW5nZSA9IHJhbmdlO1xuZnVuY3Rpb24gcmFuZ2UoYSwgYiwgc3RyKSB7XG4gIHZhciBiZWdzLCBiZWcsIGxlZnQsIHJpZ2h0LCByZXN1bHQ7XG4gIHZhciBhaSA9IHN0ci5pbmRleE9mKGEpO1xuICB2YXIgYmkgPSBzdHIuaW5kZXhPZihiLCBhaSArIDEpO1xuICB2YXIgaSA9IGFpO1xuXG4gIGlmIChhaSA+PSAwICYmIGJpID4gMCkge1xuICAgIGJlZ3MgPSBbXTtcbiAgICBsZWZ0ID0gc3RyLmxlbmd0aDtcblxuICAgIHdoaWxlIChpID49IDAgJiYgIXJlc3VsdCkge1xuICAgICAgaWYgKGkgPT0gYWkpIHtcbiAgICAgICAgYmVncy5wdXNoKGkpO1xuICAgICAgICBhaSA9IHN0ci5pbmRleE9mKGEsIGkgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAoYmVncy5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXN1bHQgPSBbIGJlZ3MucG9wKCksIGJpIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWcgPSBiZWdzLnBvcCgpO1xuICAgICAgICBpZiAoYmVnIDwgbGVmdCkge1xuICAgICAgICAgIGxlZnQgPSBiZWc7XG4gICAgICAgICAgcmlnaHQgPSBiaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpID0gc3RyLmluZGV4T2YoYiwgaSArIDEpO1xuICAgICAgfVxuXG4gICAgICBpID0gYWkgPCBiaSAmJiBhaSA+PSAwID8gYWkgOiBiaTtcbiAgICB9XG5cbiAgICBpZiAoYmVncy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IFsgbGVmdCwgcmlnaHQgXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwidHJ5IHtcbiAgdmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4gIGlmICh0eXBlb2YgdXRpbC5pbmhlcml0cyAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgJyc7XG4gIG1vZHVsZS5leHBvcnRzID0gdXRpbC5pbmhlcml0cztcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2luaGVyaXRzX2Jyb3dzZXIuanMnKTtcbn1cbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iU3luY1xuZ2xvYlN5bmMuR2xvYlN5bmMgPSBHbG9iU3luY1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpXG52YXIgcnAgPSByZXF1aXJlKCdmcy5yZWFscGF0aCcpXG52YXIgbWluaW1hdGNoID0gcmVxdWlyZSgnbWluaW1hdGNoJylcbnZhciBNaW5pbWF0Y2ggPSBtaW5pbWF0Y2guTWluaW1hdGNoXG52YXIgR2xvYiA9IHJlcXVpcmUoJy4vZ2xvYi5qcycpLkdsb2JcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG52YXIgaXNBYnNvbHV0ZSA9IHJlcXVpcmUoJ3BhdGgtaXMtYWJzb2x1dGUnKVxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJylcbnZhciBhbHBoYXNvcnQgPSBjb21tb24uYWxwaGFzb3J0XG52YXIgYWxwaGFzb3J0aSA9IGNvbW1vbi5hbHBoYXNvcnRpXG52YXIgc2V0b3B0cyA9IGNvbW1vbi5zZXRvcHRzXG52YXIgb3duUHJvcCA9IGNvbW1vbi5vd25Qcm9wXG52YXIgY2hpbGRyZW5JZ25vcmVkID0gY29tbW9uLmNoaWxkcmVuSWdub3JlZFxudmFyIGlzSWdub3JlZCA9IGNvbW1vbi5pc0lnbm9yZWRcblxuZnVuY3Rpb24gZ2xvYlN5bmMgKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDMpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgcHJvdmlkZWQgdG8gc3luYyBnbG9iXFxuJytcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3Mvbm9kZS1nbG9iL2lzc3Vlcy8xNjcnKVxuXG4gIHJldHVybiBuZXcgR2xvYlN5bmMocGF0dGVybiwgb3B0aW9ucykuZm91bmRcbn1cblxuZnVuY3Rpb24gR2xvYlN5bmMgKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXR0ZXJuKVxuICAgIHRocm93IG5ldyBFcnJvcignbXVzdCBwcm92aWRlIHBhdHRlcm4nKVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJyB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAzKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbGxiYWNrIHByb3ZpZGVkIHRvIHN5bmMgZ2xvYlxcbicrXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlOiBodHRwczovL2dpdGh1Yi5jb20vaXNhYWNzL25vZGUtZ2xvYi9pc3N1ZXMvMTY3JylcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgR2xvYlN5bmMpKVxuICAgIHJldHVybiBuZXcgR2xvYlN5bmMocGF0dGVybiwgb3B0aW9ucylcblxuICBzZXRvcHRzKHRoaXMsIHBhdHRlcm4sIG9wdGlvbnMpXG5cbiAgaWYgKHRoaXMubm9wcm9jZXNzKVxuICAgIHJldHVybiB0aGlzXG5cbiAgdmFyIG4gPSB0aGlzLm1pbmltYXRjaC5zZXQubGVuZ3RoXG4gIHRoaXMubWF0Y2hlcyA9IG5ldyBBcnJheShuKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkgKyspIHtcbiAgICB0aGlzLl9wcm9jZXNzKHRoaXMubWluaW1hdGNoLnNldFtpXSwgaSwgZmFsc2UpXG4gIH1cbiAgdGhpcy5fZmluaXNoKClcbn1cblxuR2xvYlN5bmMucHJvdG90eXBlLl9maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgR2xvYlN5bmMpXG4gIGlmICh0aGlzLnJlYWxwYXRoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgdGhpcy5tYXRjaGVzLmZvckVhY2goZnVuY3Rpb24gKG1hdGNoc2V0LCBpbmRleCkge1xuICAgICAgdmFyIHNldCA9IHNlbGYubWF0Y2hlc1tpbmRleF0gPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgICBmb3IgKHZhciBwIGluIG1hdGNoc2V0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcCA9IHNlbGYuX21ha2VBYnMocClcbiAgICAgICAgICB2YXIgcmVhbCA9IHJwLnJlYWxwYXRoU3luYyhwLCBzZWxmLnJlYWxwYXRoQ2FjaGUpXG4gICAgICAgICAgc2V0W3JlYWxdID0gdHJ1ZVxuICAgICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICAgIGlmIChlci5zeXNjYWxsID09PSAnc3RhdCcpXG4gICAgICAgICAgICBzZXRbc2VsZi5fbWFrZUFicyhwKV0gPSB0cnVlXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgZXJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgY29tbW9uLmZpbmlzaCh0aGlzKVxufVxuXG5cbkdsb2JTeW5jLnByb3RvdHlwZS5fcHJvY2VzcyA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBpbmRleCwgaW5HbG9iU3Rhcikge1xuICBhc3NlcnQodGhpcyBpbnN0YW5jZW9mIEdsb2JTeW5jKVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgW25dIHBhcnRzIG9mIHBhdHRlcm4gdGhhdCBhcmUgYWxsIHN0cmluZ3MuXG4gIHZhciBuID0gMFxuICB3aGlsZSAodHlwZW9mIHBhdHRlcm5bbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgbiArK1xuICB9XG4gIC8vIG5vdyBuIGlzIHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgb25lIHRoYXQgaXMgKm5vdCogYSBzdHJpbmcuXG5cbiAgLy8gU2VlIGlmIHRoZXJlJ3MgYW55dGhpbmcgZWxzZVxuICB2YXIgcHJlZml4XG4gIHN3aXRjaCAobikge1xuICAgIC8vIGlmIG5vdCwgdGhlbiB0aGlzIGlzIHJhdGhlciBzaW1wbGVcbiAgICBjYXNlIHBhdHRlcm4ubGVuZ3RoOlxuICAgICAgdGhpcy5fcHJvY2Vzc1NpbXBsZShwYXR0ZXJuLmpvaW4oJy8nKSwgaW5kZXgpXG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgMDpcbiAgICAgIC8vIHBhdHRlcm4gKnN0YXJ0cyogd2l0aCBzb21lIG5vbi10cml2aWFsIGl0ZW0uXG4gICAgICAvLyBnb2luZyB0byByZWFkZGlyKGN3ZCksIGJ1dCBub3QgaW5jbHVkZSB0aGUgcHJlZml4IGluIG1hdGNoZXMuXG4gICAgICBwcmVmaXggPSBudWxsXG4gICAgICBicmVha1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIHBhdHRlcm4gaGFzIHNvbWUgc3RyaW5nIGJpdHMgaW4gdGhlIGZyb250LlxuICAgICAgLy8gd2hhdGV2ZXIgaXQgc3RhcnRzIHdpdGgsIHdoZXRoZXIgdGhhdCdzICdhYnNvbHV0ZScgbGlrZSAvZm9vL2JhcixcbiAgICAgIC8vIG9yICdyZWxhdGl2ZScgbGlrZSAnLi4vYmF6J1xuICAgICAgcHJlZml4ID0gcGF0dGVybi5zbGljZSgwLCBuKS5qb2luKCcvJylcbiAgICAgIGJyZWFrXG4gIH1cblxuICB2YXIgcmVtYWluID0gcGF0dGVybi5zbGljZShuKVxuXG4gIC8vIGdldCB0aGUgbGlzdCBvZiBlbnRyaWVzLlxuICB2YXIgcmVhZFxuICBpZiAocHJlZml4ID09PSBudWxsKVxuICAgIHJlYWQgPSAnLidcbiAgZWxzZSBpZiAoaXNBYnNvbHV0ZShwcmVmaXgpIHx8IGlzQWJzb2x1dGUocGF0dGVybi5qb2luKCcvJykpKSB7XG4gICAgaWYgKCFwcmVmaXggfHwgIWlzQWJzb2x1dGUocHJlZml4KSlcbiAgICAgIHByZWZpeCA9ICcvJyArIHByZWZpeFxuICAgIHJlYWQgPSBwcmVmaXhcbiAgfSBlbHNlXG4gICAgcmVhZCA9IHByZWZpeFxuXG4gIHZhciBhYnMgPSB0aGlzLl9tYWtlQWJzKHJlYWQpXG5cbiAgLy9pZiBpZ25vcmVkLCBza2lwIHByb2Nlc3NpbmdcbiAgaWYgKGNoaWxkcmVuSWdub3JlZCh0aGlzLCByZWFkKSlcbiAgICByZXR1cm5cblxuICB2YXIgaXNHbG9iU3RhciA9IHJlbWFpblswXSA9PT0gbWluaW1hdGNoLkdMT0JTVEFSXG4gIGlmIChpc0dsb2JTdGFyKVxuICAgIHRoaXMuX3Byb2Nlc3NHbG9iU3RhcihwcmVmaXgsIHJlYWQsIGFicywgcmVtYWluLCBpbmRleCwgaW5HbG9iU3RhcilcbiAgZWxzZVxuICAgIHRoaXMuX3Byb2Nlc3NSZWFkZGlyKHByZWZpeCwgcmVhZCwgYWJzLCByZW1haW4sIGluZGV4LCBpbkdsb2JTdGFyKVxufVxuXG5cbkdsb2JTeW5jLnByb3RvdHlwZS5fcHJvY2Vzc1JlYWRkaXIgPSBmdW5jdGlvbiAocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIpIHtcbiAgdmFyIGVudHJpZXMgPSB0aGlzLl9yZWFkZGlyKGFicywgaW5HbG9iU3RhcilcblxuICAvLyBpZiB0aGUgYWJzIGlzbid0IGEgZGlyLCB0aGVuIG5vdGhpbmcgY2FuIG1hdGNoIVxuICBpZiAoIWVudHJpZXMpXG4gICAgcmV0dXJuXG5cbiAgLy8gSXQgd2lsbCBvbmx5IG1hdGNoIGRvdCBlbnRyaWVzIGlmIGl0IHN0YXJ0cyB3aXRoIGEgZG90LCBvciBpZlxuICAvLyBkb3QgaXMgc2V0LiAgU3R1ZmYgbGlrZSBAKC5mb298LmJhcikgaXNuJ3QgYWxsb3dlZC5cbiAgdmFyIHBuID0gcmVtYWluWzBdXG4gIHZhciBuZWdhdGUgPSAhIXRoaXMubWluaW1hdGNoLm5lZ2F0ZVxuICB2YXIgcmF3R2xvYiA9IHBuLl9nbG9iXG4gIHZhciBkb3RPayA9IHRoaXMuZG90IHx8IHJhd0dsb2IuY2hhckF0KDApID09PSAnLidcblxuICB2YXIgbWF0Y2hlZEVudHJpZXMgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZSA9IGVudHJpZXNbaV1cbiAgICBpZiAoZS5jaGFyQXQoMCkgIT09ICcuJyB8fCBkb3RPaykge1xuICAgICAgdmFyIG1cbiAgICAgIGlmIChuZWdhdGUgJiYgIXByZWZpeCkge1xuICAgICAgICBtID0gIWUubWF0Y2gocG4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtID0gZS5tYXRjaChwbilcbiAgICAgIH1cbiAgICAgIGlmIChtKVxuICAgICAgICBtYXRjaGVkRW50cmllcy5wdXNoKGUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGxlbiA9IG1hdGNoZWRFbnRyaWVzLmxlbmd0aFxuICAvLyBJZiB0aGVyZSBhcmUgbm8gbWF0Y2hlZCBlbnRyaWVzLCB0aGVuIG5vdGhpbmcgbWF0Y2hlcy5cbiAgaWYgKGxlbiA9PT0gMClcbiAgICByZXR1cm5cblxuICAvLyBpZiB0aGlzIGlzIHRoZSBsYXN0IHJlbWFpbmluZyBwYXR0ZXJuIGJpdCwgdGhlbiBubyBuZWVkIGZvclxuICAvLyBhbiBhZGRpdGlvbmFsIHN0YXQgKnVubGVzcyogdGhlIHVzZXIgaGFzIHNwZWNpZmllZCBtYXJrIG9yXG4gIC8vIHN0YXQgZXhwbGljaXRseS4gIFdlIGtub3cgdGhleSBleGlzdCwgc2luY2UgcmVhZGRpciByZXR1cm5lZFxuICAvLyB0aGVtLlxuXG4gIGlmIChyZW1haW4ubGVuZ3RoID09PSAxICYmICF0aGlzLm1hcmsgJiYgIXRoaXMuc3RhdCkge1xuICAgIGlmICghdGhpcy5tYXRjaGVzW2luZGV4XSlcbiAgICAgIHRoaXMubWF0Y2hlc1tpbmRleF0gPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArKykge1xuICAgICAgdmFyIGUgPSBtYXRjaGVkRW50cmllc1tpXVxuICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICBpZiAocHJlZml4LnNsaWNlKC0xKSAhPT0gJy8nKVxuICAgICAgICAgIGUgPSBwcmVmaXggKyAnLycgKyBlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBlID0gcHJlZml4ICsgZVxuICAgICAgfVxuXG4gICAgICBpZiAoZS5jaGFyQXQoMCkgPT09ICcvJyAmJiAhdGhpcy5ub21vdW50KSB7XG4gICAgICAgIGUgPSBwYXRoLmpvaW4odGhpcy5yb290LCBlKVxuICAgICAgfVxuICAgICAgdGhpcy5fZW1pdE1hdGNoKGluZGV4LCBlKVxuICAgIH1cbiAgICAvLyBUaGlzIHdhcyB0aGUgbGFzdCBvbmUsIGFuZCBubyBzdGF0cyB3ZXJlIG5lZWRlZFxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gbm93IHRlc3QgYWxsIG1hdGNoZWQgZW50cmllcyBhcyBzdGFuZC1pbnMgZm9yIHRoYXQgcGFydFxuICAvLyBvZiB0aGUgcGF0dGVybi5cbiAgcmVtYWluLnNoaWZ0KClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKyspIHtcbiAgICB2YXIgZSA9IG1hdGNoZWRFbnRyaWVzW2ldXG4gICAgdmFyIG5ld1BhdHRlcm5cbiAgICBpZiAocHJlZml4KVxuICAgICAgbmV3UGF0dGVybiA9IFtwcmVmaXgsIGVdXG4gICAgZWxzZVxuICAgICAgbmV3UGF0dGVybiA9IFtlXVxuICAgIHRoaXMuX3Byb2Nlc3MobmV3UGF0dGVybi5jb25jYXQocmVtYWluKSwgaW5kZXgsIGluR2xvYlN0YXIpXG4gIH1cbn1cblxuXG5HbG9iU3luYy5wcm90b3R5cGUuX2VtaXRNYXRjaCA9IGZ1bmN0aW9uIChpbmRleCwgZSkge1xuICBpZiAoaXNJZ25vcmVkKHRoaXMsIGUpKVxuICAgIHJldHVyblxuXG4gIHZhciBhYnMgPSB0aGlzLl9tYWtlQWJzKGUpXG5cbiAgaWYgKHRoaXMubWFyaylcbiAgICBlID0gdGhpcy5fbWFyayhlKVxuXG4gIGlmICh0aGlzLmFic29sdXRlKSB7XG4gICAgZSA9IGFic1xuICB9XG5cbiAgaWYgKHRoaXMubWF0Y2hlc1tpbmRleF1bZV0pXG4gICAgcmV0dXJuXG5cbiAgaWYgKHRoaXMubm9kaXIpIHtcbiAgICB2YXIgYyA9IHRoaXMuY2FjaGVbYWJzXVxuICAgIGlmIChjID09PSAnRElSJyB8fCBBcnJheS5pc0FycmF5KGMpKVxuICAgICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLm1hdGNoZXNbaW5kZXhdW2VdID0gdHJ1ZVxuXG4gIGlmICh0aGlzLnN0YXQpXG4gICAgdGhpcy5fc3RhdChlKVxufVxuXG5cbkdsb2JTeW5jLnByb3RvdHlwZS5fcmVhZGRpckluR2xvYlN0YXIgPSBmdW5jdGlvbiAoYWJzKSB7XG4gIC8vIGZvbGxvdyBhbGwgc3ltbGlua2VkIGRpcmVjdG9yaWVzIGZvcmV2ZXJcbiAgLy8ganVzdCBwcm9jZWVkIGFzIGlmIHRoaXMgaXMgYSBub24tZ2xvYnN0YXIgc2l0dWF0aW9uXG4gIGlmICh0aGlzLmZvbGxvdylcbiAgICByZXR1cm4gdGhpcy5fcmVhZGRpcihhYnMsIGZhbHNlKVxuXG4gIHZhciBlbnRyaWVzXG4gIHZhciBsc3RhdFxuICB2YXIgc3RhdFxuICB0cnkge1xuICAgIGxzdGF0ID0gZnMubHN0YXRTeW5jKGFicylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICBpZiAoZXIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgIC8vIGxzdGF0IGZhaWxlZCwgZG9lc24ndCBleGlzdFxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICB2YXIgaXNTeW0gPSBsc3RhdCAmJiBsc3RhdC5pc1N5bWJvbGljTGluaygpXG4gIHRoaXMuc3ltbGlua3NbYWJzXSA9IGlzU3ltXG5cbiAgLy8gSWYgaXQncyBub3QgYSBzeW1saW5rIG9yIGEgZGlyLCB0aGVuIGl0J3MgZGVmaW5pdGVseSBhIHJlZ3VsYXIgZmlsZS5cbiAgLy8gZG9uJ3QgYm90aGVyIGRvaW5nIGEgcmVhZGRpciBpbiB0aGF0IGNhc2UuXG4gIGlmICghaXNTeW0gJiYgbHN0YXQgJiYgIWxzdGF0LmlzRGlyZWN0b3J5KCkpXG4gICAgdGhpcy5jYWNoZVthYnNdID0gJ0ZJTEUnXG4gIGVsc2VcbiAgICBlbnRyaWVzID0gdGhpcy5fcmVhZGRpcihhYnMsIGZhbHNlKVxuXG4gIHJldHVybiBlbnRyaWVzXG59XG5cbkdsb2JTeW5jLnByb3RvdHlwZS5fcmVhZGRpciA9IGZ1bmN0aW9uIChhYnMsIGluR2xvYlN0YXIpIHtcbiAgdmFyIGVudHJpZXNcblxuICBpZiAoaW5HbG9iU3RhciAmJiAhb3duUHJvcCh0aGlzLnN5bWxpbmtzLCBhYnMpKVxuICAgIHJldHVybiB0aGlzLl9yZWFkZGlySW5HbG9iU3RhcihhYnMpXG5cbiAgaWYgKG93blByb3AodGhpcy5jYWNoZSwgYWJzKSkge1xuICAgIHZhciBjID0gdGhpcy5jYWNoZVthYnNdXG4gICAgaWYgKCFjIHx8IGMgPT09ICdGSUxFJylcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSlcbiAgICAgIHJldHVybiBjXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkZGlyRW50cmllcyhhYnMsIGZzLnJlYWRkaXJTeW5jKGFicykpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgdGhpcy5fcmVhZGRpckVycm9yKGFicywgZXIpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5HbG9iU3luYy5wcm90b3R5cGUuX3JlYWRkaXJFbnRyaWVzID0gZnVuY3Rpb24gKGFicywgZW50cmllcykge1xuICAvLyBpZiB3ZSBoYXZlbid0IGFza2VkIHRvIHN0YXQgZXZlcnl0aGluZywgdGhlbiBqdXN0XG4gIC8vIGFzc3VtZSB0aGF0IGV2ZXJ5dGhpbmcgaW4gdGhlcmUgZXhpc3RzLCBzbyB3ZSBjYW4gYXZvaWRcbiAgLy8gaGF2aW5nIHRvIHN0YXQgaXQgYSBzZWNvbmQgdGltZS5cbiAgaWYgKCF0aGlzLm1hcmsgJiYgIXRoaXMuc3RhdCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkgKyspIHtcbiAgICAgIHZhciBlID0gZW50cmllc1tpXVxuICAgICAgaWYgKGFicyA9PT0gJy8nKVxuICAgICAgICBlID0gYWJzICsgZVxuICAgICAgZWxzZVxuICAgICAgICBlID0gYWJzICsgJy8nICsgZVxuICAgICAgdGhpcy5jYWNoZVtlXSA9IHRydWVcbiAgICB9XG4gIH1cblxuICB0aGlzLmNhY2hlW2Fic10gPSBlbnRyaWVzXG5cbiAgLy8gbWFyayBhbmQgY2FjaGUgZGlyLW5lc3NcbiAgcmV0dXJuIGVudHJpZXNcbn1cblxuR2xvYlN5bmMucHJvdG90eXBlLl9yZWFkZGlyRXJyb3IgPSBmdW5jdGlvbiAoZiwgZXIpIHtcbiAgLy8gaGFuZGxlIGVycm9ycywgYW5kIGNhY2hlIHRoZSBpbmZvcm1hdGlvblxuICBzd2l0Y2ggKGVyLmNvZGUpIHtcbiAgICBjYXNlICdFTk9UU1VQJzogLy8gaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9ub2RlLWdsb2IvaXNzdWVzLzIwNVxuICAgIGNhc2UgJ0VOT1RESVInOiAvLyB0b3RhbGx5IG5vcm1hbC4gbWVhbnMgaXQgKmRvZXMqIGV4aXN0LlxuICAgICAgdmFyIGFicyA9IHRoaXMuX21ha2VBYnMoZilcbiAgICAgIHRoaXMuY2FjaGVbYWJzXSA9ICdGSUxFJ1xuICAgICAgaWYgKGFicyA9PT0gdGhpcy5jd2RBYnMpIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKGVyLmNvZGUgKyAnIGludmFsaWQgY3dkICcgKyB0aGlzLmN3ZClcbiAgICAgICAgZXJyb3IucGF0aCA9IHRoaXMuY3dkXG4gICAgICAgIGVycm9yLmNvZGUgPSBlci5jb2RlXG4gICAgICAgIHRocm93IGVycm9yXG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSAnRU5PRU5UJzogLy8gbm90IHRlcnJpYmx5IHVudXN1YWxcbiAgICBjYXNlICdFTE9PUCc6XG4gICAgY2FzZSAnRU5BTUVUT09MT05HJzpcbiAgICBjYXNlICdVTktOT1dOJzpcbiAgICAgIHRoaXMuY2FjaGVbdGhpcy5fbWFrZUFicyhmKV0gPSBmYWxzZVxuICAgICAgYnJlYWtcblxuICAgIGRlZmF1bHQ6IC8vIHNvbWUgdW51c3VhbCBlcnJvci4gIFRyZWF0IGFzIGZhaWx1cmUuXG4gICAgICB0aGlzLmNhY2hlW3RoaXMuX21ha2VBYnMoZildID0gZmFsc2VcbiAgICAgIGlmICh0aGlzLnN0cmljdClcbiAgICAgICAgdGhyb3cgZXJcbiAgICAgIGlmICghdGhpcy5zaWxlbnQpXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsb2IgZXJyb3InLCBlcilcbiAgICAgIGJyZWFrXG4gIH1cbn1cblxuR2xvYlN5bmMucHJvdG90eXBlLl9wcm9jZXNzR2xvYlN0YXIgPSBmdW5jdGlvbiAocHJlZml4LCByZWFkLCBhYnMsIHJlbWFpbiwgaW5kZXgsIGluR2xvYlN0YXIpIHtcblxuICB2YXIgZW50cmllcyA9IHRoaXMuX3JlYWRkaXIoYWJzLCBpbkdsb2JTdGFyKVxuXG4gIC8vIG5vIGVudHJpZXMgbWVhbnMgbm90IGEgZGlyLCBzbyBpdCBjYW4gbmV2ZXIgaGF2ZSBtYXRjaGVzXG4gIC8vIGZvby50eHQvKiogZG9lc24ndCBtYXRjaCBmb28udHh0XG4gIGlmICghZW50cmllcylcbiAgICByZXR1cm5cblxuICAvLyB0ZXN0IHdpdGhvdXQgdGhlIGdsb2JzdGFyLCBhbmQgd2l0aCBldmVyeSBjaGlsZCBib3RoIGJlbG93XG4gIC8vIGFuZCByZXBsYWNpbmcgdGhlIGdsb2JzdGFyLlxuICB2YXIgcmVtYWluV2l0aG91dEdsb2JTdGFyID0gcmVtYWluLnNsaWNlKDEpXG4gIHZhciBnc3ByZWYgPSBwcmVmaXggPyBbIHByZWZpeCBdIDogW11cbiAgdmFyIG5vR2xvYlN0YXIgPSBnc3ByZWYuY29uY2F0KHJlbWFpbldpdGhvdXRHbG9iU3RhcilcblxuICAvLyB0aGUgbm9HbG9iU3RhciBwYXR0ZXJuIGV4aXRzIHRoZSBpbkdsb2JTdGFyIHN0YXRlXG4gIHRoaXMuX3Byb2Nlc3Mobm9HbG9iU3RhciwgaW5kZXgsIGZhbHNlKVxuXG4gIHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aFxuICB2YXIgaXNTeW0gPSB0aGlzLnN5bWxpbmtzW2Fic11cblxuICAvLyBJZiBpdCdzIGEgc3ltbGluaywgYW5kIHdlJ3JlIGluIGEgZ2xvYnN0YXIsIHRoZW4gc3RvcFxuICBpZiAoaXNTeW0gJiYgaW5HbG9iU3RhcilcbiAgICByZXR1cm5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGUgPSBlbnRyaWVzW2ldXG4gICAgaWYgKGUuY2hhckF0KDApID09PSAnLicgJiYgIXRoaXMuZG90KVxuICAgICAgY29udGludWVcblxuICAgIC8vIHRoZXNlIHR3byBjYXNlcyBlbnRlciB0aGUgaW5HbG9iU3RhciBzdGF0ZVxuICAgIHZhciBpbnN0ZWFkID0gZ3NwcmVmLmNvbmNhdChlbnRyaWVzW2ldLCByZW1haW5XaXRob3V0R2xvYlN0YXIpXG4gICAgdGhpcy5fcHJvY2VzcyhpbnN0ZWFkLCBpbmRleCwgdHJ1ZSlcblxuICAgIHZhciBiZWxvdyA9IGdzcHJlZi5jb25jYXQoZW50cmllc1tpXSwgcmVtYWluKVxuICAgIHRoaXMuX3Byb2Nlc3MoYmVsb3csIGluZGV4LCB0cnVlKVxuICB9XG59XG5cbkdsb2JTeW5jLnByb3RvdHlwZS5fcHJvY2Vzc1NpbXBsZSA9IGZ1bmN0aW9uIChwcmVmaXgsIGluZGV4KSB7XG4gIC8vIFhYWCByZXZpZXcgdGhpcy4gIFNob3VsZG4ndCBpdCBiZSBkb2luZyB0aGUgbW91bnRpbmcgZXRjXG4gIC8vIGJlZm9yZSBkb2luZyBzdGF0PyAga2luZGEgd2VpcmQ/XG4gIHZhciBleGlzdHMgPSB0aGlzLl9zdGF0KHByZWZpeClcblxuICBpZiAoIXRoaXMubWF0Y2hlc1tpbmRleF0pXG4gICAgdGhpcy5tYXRjaGVzW2luZGV4XSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICAvLyBJZiBpdCBkb2Vzbid0IGV4aXN0LCB0aGVuIGp1c3QgbWFyayB0aGUgbGFjayBvZiByZXN1bHRzXG4gIGlmICghZXhpc3RzKVxuICAgIHJldHVyblxuXG4gIGlmIChwcmVmaXggJiYgaXNBYnNvbHV0ZShwcmVmaXgpICYmICF0aGlzLm5vbW91bnQpIHtcbiAgICB2YXIgdHJhaWwgPSAvW1xcL1xcXFxdJC8udGVzdChwcmVmaXgpXG4gICAgaWYgKHByZWZpeC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgcHJlZml4ID0gcGF0aC5qb2luKHRoaXMucm9vdCwgcHJlZml4KVxuICAgIH0gZWxzZSB7XG4gICAgICBwcmVmaXggPSBwYXRoLnJlc29sdmUodGhpcy5yb290LCBwcmVmaXgpXG4gICAgICBpZiAodHJhaWwpXG4gICAgICAgIHByZWZpeCArPSAnLydcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJylcbiAgICBwcmVmaXggPSBwcmVmaXgucmVwbGFjZSgvXFxcXC9nLCAnLycpXG5cbiAgLy8gTWFyayB0aGlzIGFzIGEgbWF0Y2hcbiAgdGhpcy5fZW1pdE1hdGNoKGluZGV4LCBwcmVmaXgpXG59XG5cbi8vIFJldHVybnMgZWl0aGVyICdESVInLCAnRklMRScsIG9yIGZhbHNlXG5HbG9iU3luYy5wcm90b3R5cGUuX3N0YXQgPSBmdW5jdGlvbiAoZikge1xuICB2YXIgYWJzID0gdGhpcy5fbWFrZUFicyhmKVxuICB2YXIgbmVlZERpciA9IGYuc2xpY2UoLTEpID09PSAnLydcblxuICBpZiAoZi5sZW5ndGggPiB0aGlzLm1heExlbmd0aClcbiAgICByZXR1cm4gZmFsc2VcblxuICBpZiAoIXRoaXMuc3RhdCAmJiBvd25Qcm9wKHRoaXMuY2FjaGUsIGFicykpIHtcbiAgICB2YXIgYyA9IHRoaXMuY2FjaGVbYWJzXVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpXG4gICAgICBjID0gJ0RJUidcblxuICAgIC8vIEl0IGV4aXN0cywgYnV0IG1heWJlIG5vdCBob3cgd2UgbmVlZCBpdFxuICAgIGlmICghbmVlZERpciB8fCBjID09PSAnRElSJylcbiAgICAgIHJldHVybiBjXG5cbiAgICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgICByZXR1cm4gZmFsc2VcblxuICAgIC8vIG90aGVyd2lzZSB3ZSBoYXZlIHRvIHN0YXQsIGJlY2F1c2UgbWF5YmUgYz10cnVlXG4gICAgLy8gaWYgd2Uga25vdyBpdCBleGlzdHMsIGJ1dCBub3Qgd2hhdCBpdCBpcy5cbiAgfVxuXG4gIHZhciBleGlzdHNcbiAgdmFyIHN0YXQgPSB0aGlzLnN0YXRDYWNoZVthYnNdXG4gIGlmICghc3RhdCkge1xuICAgIHZhciBsc3RhdFxuICAgIHRyeSB7XG4gICAgICBsc3RhdCA9IGZzLmxzdGF0U3luYyhhYnMpXG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIGlmIChlciAmJiAoZXIuY29kZSA9PT0gJ0VOT0VOVCcgfHwgZXIuY29kZSA9PT0gJ0VOT1RESVInKSkge1xuICAgICAgICB0aGlzLnN0YXRDYWNoZVthYnNdID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxzdGF0ICYmIGxzdGF0LmlzU3ltYm9saWNMaW5rKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0YXQgPSBmcy5zdGF0U3luYyhhYnMpXG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICBzdGF0ID0gbHN0YXRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdCA9IGxzdGF0XG4gICAgfVxuICB9XG5cbiAgdGhpcy5zdGF0Q2FjaGVbYWJzXSA9IHN0YXRcblxuICB2YXIgYyA9IHRydWVcbiAgaWYgKHN0YXQpXG4gICAgYyA9IHN0YXQuaXNEaXJlY3RvcnkoKSA/ICdESVInIDogJ0ZJTEUnXG5cbiAgdGhpcy5jYWNoZVthYnNdID0gdGhpcy5jYWNoZVthYnNdIHx8IGNcblxuICBpZiAobmVlZERpciAmJiBjID09PSAnRklMRScpXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgcmV0dXJuIGNcbn1cblxuR2xvYlN5bmMucHJvdG90eXBlLl9tYXJrID0gZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIGNvbW1vbi5tYXJrKHRoaXMsIHApXG59XG5cbkdsb2JTeW5jLnByb3RvdHlwZS5fbWFrZUFicyA9IGZ1bmN0aW9uIChmKSB7XG4gIHJldHVybiBjb21tb24ubWFrZUFicyh0aGlzLCBmKVxufVxuIiwidmFyIHdyYXBweSA9IHJlcXVpcmUoJ3dyYXBweScpXG52YXIgcmVxcyA9IE9iamVjdC5jcmVhdGUobnVsbClcbnZhciBvbmNlID0gcmVxdWlyZSgnb25jZScpXG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcHB5KGluZmxpZ2h0KVxuXG5mdW5jdGlvbiBpbmZsaWdodCAoa2V5LCBjYikge1xuICBpZiAocmVxc1trZXldKSB7XG4gICAgcmVxc1trZXldLnB1c2goY2IpXG4gICAgcmV0dXJuIG51bGxcbiAgfSBlbHNlIHtcbiAgICByZXFzW2tleV0gPSBbY2JdXG4gICAgcmV0dXJuIG1ha2VyZXMoa2V5KVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VyZXMgKGtleSkge1xuICByZXR1cm4gb25jZShmdW5jdGlvbiBSRVMgKCkge1xuICAgIHZhciBjYnMgPSByZXFzW2tleV1cbiAgICB2YXIgbGVuID0gY2JzLmxlbmd0aFxuICAgIHZhciBhcmdzID0gc2xpY2UoYXJndW1lbnRzKVxuXG4gICAgLy8gWFhYIEl0J3Mgc29tZXdoYXQgYW1iaWd1b3VzIHdoZXRoZXIgYSBuZXcgY2FsbGJhY2sgYWRkZWQgaW4gdGhpc1xuICAgIC8vIHBhc3Mgc2hvdWxkIGJlIHF1ZXVlZCBmb3IgbGF0ZXIgZXhlY3V0aW9uIGlmIHNvbWV0aGluZyBpbiB0aGVcbiAgICAvLyBsaXN0IG9mIGNhbGxiYWNrcyB0aHJvd3MsIG9yIGlmIGl0IHNob3VsZCBqdXN0IGJlIGRpc2NhcmRlZC5cbiAgICAvLyBIb3dldmVyLCBpdCdzIHN1Y2ggYW4gZWRnZSBjYXNlIHRoYXQgaXQgaGFyZGx5IG1hdHRlcnMsIGFuZCBlaXRoZXJcbiAgICAvLyBjaG9pY2UgaXMgbGlrZWx5IGFzIHN1cnByaXNpbmcgYXMgdGhlIG90aGVyLlxuICAgIC8vIEFzIGl0IGhhcHBlbnMsIHdlIGRvIGdvIGFoZWFkIGFuZCBzY2hlZHVsZSBpdCBmb3IgbGF0ZXIgZXhlY3V0aW9uLlxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNic1tpXS5hcHBseShudWxsLCBhcmdzKVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoY2JzLmxlbmd0aCA+IGxlbikge1xuICAgICAgICAvLyBhZGRlZCBtb3JlIGluIHRoZSBpbnRlcmltLlxuICAgICAgICAvLyBkZS16YWxnbywganVzdCBpbiBjYXNlLCBidXQgZG9uJ3QgY2FsbCBhZ2Fpbi5cbiAgICAgICAgY2JzLnNwbGljZSgwLCBsZW4pXG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIFJFUy5hcHBseShudWxsLCBhcmdzKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHJlcXNba2V5XVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gc2xpY2UgKGFyZ3MpIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3MubGVuZ3RoXG4gIHZhciBhcnJheSA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgYXJyYXlbaV0gPSBhcmdzW2ldXG4gIHJldHVybiBhcnJheVxufVxuIiwidmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIF8wNzc3ID0gcGFyc2VJbnQoJzA3NzcnLCA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBta2RpclAubWtkaXJwID0gbWtkaXJQLm1rZGlyUCA9IG1rZGlyUDtcblxuZnVuY3Rpb24gbWtkaXJQIChwLCBvcHRzLCBmLCBtYWRlKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGYgPSBvcHRzO1xuICAgICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRzID0geyBtb2RlOiBvcHRzIH07XG4gICAgfVxuICAgIFxuICAgIHZhciBtb2RlID0gb3B0cy5tb2RlO1xuICAgIHZhciB4ZnMgPSBvcHRzLmZzIHx8IGZzO1xuICAgIFxuICAgIGlmIChtb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW9kZSA9IF8wNzc3XG4gICAgfVxuICAgIGlmICghbWFkZSkgbWFkZSA9IG51bGw7XG4gICAgXG4gICAgdmFyIGNiID0gZiB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICBwID0gcGF0aC5yZXNvbHZlKHApO1xuICAgIFxuICAgIHhmcy5ta2RpcihwLCBtb2RlLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgaWYgKCFlcikge1xuICAgICAgICAgICAgbWFkZSA9IG1hZGUgfHwgcDtcbiAgICAgICAgICAgIHJldHVybiBjYihudWxsLCBtYWRlKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGVyLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VOT0VOVCc6XG4gICAgICAgICAgICAgICAgaWYgKHBhdGguZGlybmFtZShwKSA9PT0gcCkgcmV0dXJuIGNiKGVyKTtcbiAgICAgICAgICAgICAgICBta2RpclAocGF0aC5kaXJuYW1lKHApLCBvcHRzLCBmdW5jdGlvbiAoZXIsIG1hZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyKSBjYihlciwgbWFkZSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgbWtkaXJQKHAsIG9wdHMsIGNiLCBtYWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgYW55IG90aGVyIGVycm9yLCBqdXN0IHNlZSBpZiB0aGVyZSdzIGEgZGlyXG4gICAgICAgICAgICAvLyB0aGVyZSBhbHJlYWR5LiAgSWYgc28sIHRoZW4gaG9vcmF5ISAgSWYgbm90LCB0aGVuIHNvbWV0aGluZ1xuICAgICAgICAgICAgLy8gaXMgYm9ya2VkLlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB4ZnMuc3RhdChwLCBmdW5jdGlvbiAoZXIyLCBzdGF0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdGF0IGZhaWxzLCB0aGVuIHRoYXQncyBzdXBlciB3ZWlyZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHRoZSBvcmlnaW5hbCBlcnJvciBiZSB0aGUgZmFpbHVyZSByZWFzb24uXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcjIgfHwgIXN0YXQuaXNEaXJlY3RvcnkoKSkgY2IoZXIsIG1hZGUpXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY2IobnVsbCwgbWFkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxubWtkaXJQLnN5bmMgPSBmdW5jdGlvbiBzeW5jIChwLCBvcHRzLCBtYWRlKSB7XG4gICAgaWYgKCFvcHRzIHx8IHR5cGVvZiBvcHRzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRzID0geyBtb2RlOiBvcHRzIH07XG4gICAgfVxuICAgIFxuICAgIHZhciBtb2RlID0gb3B0cy5tb2RlO1xuICAgIHZhciB4ZnMgPSBvcHRzLmZzIHx8IGZzO1xuICAgIFxuICAgIGlmIChtb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbW9kZSA9IF8wNzc3XG4gICAgfVxuICAgIGlmICghbWFkZSkgbWFkZSA9IG51bGw7XG5cbiAgICBwID0gcGF0aC5yZXNvbHZlKHApO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgeGZzLm1rZGlyU3luYyhwLCBtb2RlKTtcbiAgICAgICAgbWFkZSA9IG1hZGUgfHwgcDtcbiAgICB9XG4gICAgY2F0Y2ggKGVycjApIHtcbiAgICAgICAgc3dpdGNoIChlcnIwLmNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0VOT0VOVCcgOlxuICAgICAgICAgICAgICAgIG1hZGUgPSBzeW5jKHBhdGguZGlybmFtZShwKSwgb3B0cywgbWFkZSk7XG4gICAgICAgICAgICAgICAgc3luYyhwLCBvcHRzLCBtYWRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgYW55IG90aGVyIGVycm9yLCBqdXN0IHNlZSBpZiB0aGVyZSdzIGEgZGlyXG4gICAgICAgICAgICAvLyB0aGVyZSBhbHJlYWR5LiAgSWYgc28sIHRoZW4gaG9vcmF5ISAgSWYgbm90LCB0aGVuIHNvbWV0aGluZ1xuICAgICAgICAgICAgLy8gaXMgYm9ya2VkLlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB2YXIgc3RhdDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ID0geGZzLnN0YXRTeW5jKHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnIwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN0YXQuaXNEaXJlY3RvcnkoKSkgdGhyb3cgZXJyMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYWRlO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSB3cml0ZUZpbGVcbm1vZHVsZS5leHBvcnRzLnN5bmMgPSB3cml0ZUZpbGVTeW5jXG5tb2R1bGUuZXhwb3J0cy5fZ2V0VG1wbmFtZSA9IGdldFRtcG5hbWUgLy8gZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzLl9jbGVhbnVwT25FeGl0ID0gY2xlYW51cE9uRXhpdFxuXG52YXIgZnMgPSByZXF1aXJlKCdncmFjZWZ1bC1mcycpXG52YXIgTXVybXVySGFzaDMgPSByZXF1aXJlKCdpbXVybXVyaGFzaCcpXG52YXIgb25FeGl0ID0gcmVxdWlyZSgnc2lnbmFsLWV4aXQnKVxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbnZhciBhY3RpdmVGaWxlcyA9IHt9XG5cbi8vIGlmIHdlIHJ1biBpbnNpZGUgb2YgYSB3b3JrZXJfdGhyZWFkLCBgcHJvY2Vzcy5waWRgIGlzIG5vdCB1bmlxdWVcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG52YXIgdGhyZWFkSWQgPSAoZnVuY3Rpb24gZ2V0SWQgKCkge1xuICB0cnkge1xuICAgIHZhciB3b3JrZXJUaHJlYWRzID0gcmVxdWlyZSgnd29ya2VyX3RocmVhZHMnKVxuXG4gICAgLy8vIGlmIHdlIGFyZSBpbiBtYWluIHRocmVhZCwgdGhpcyBpcyBzZXQgdG8gYDBgXG4gICAgcmV0dXJuIHdvcmtlclRocmVhZHMudGhyZWFkSWRcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHdvcmtlcl90aHJlYWRzIGFyZSBub3QgYXZhaWxhYmxlLCBmYWxsYmFjayB0byAwXG4gICAgcmV0dXJuIDBcbiAgfVxufSkoKVxuXG52YXIgaW52b2NhdGlvbnMgPSAwXG5mdW5jdGlvbiBnZXRUbXBuYW1lIChmaWxlbmFtZSkge1xuICByZXR1cm4gZmlsZW5hbWUgKyAnLicgK1xuICAgIE11cm11ckhhc2gzKF9fZmlsZW5hbWUpXG4gICAgICAuaGFzaChTdHJpbmcocHJvY2Vzcy5waWQpKVxuICAgICAgLmhhc2goU3RyaW5nKHRocmVhZElkKSlcbiAgICAgIC5oYXNoKFN0cmluZygrK2ludm9jYXRpb25zKSlcbiAgICAgIC5yZXN1bHQoKVxufVxuXG5mdW5jdGlvbiBjbGVhbnVwT25FeGl0ICh0bXBmaWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZzLnVubGlua1N5bmModHlwZW9mIHRtcGZpbGUgPT09ICdmdW5jdGlvbicgPyB0bXBmaWxlKCkgOiB0bXBmaWxlKVxuICAgIH0gY2F0Y2ggKF8pIHt9XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVGaWxlIChmaWxlbmFtZSwgZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnNcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHRpb25zID0geyBlbmNvZGluZzogb3B0aW9ucyB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdmFyIFByb21pc2UgPSBvcHRpb25zLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2VcbiAgdmFyIHRydWVuYW1lXG4gIHZhciBmZFxuICB2YXIgdG1wZmlsZVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtLSBUaGUgY2xvc3VyZSBvbmx5IGdldHMgY2FsbGVkIHdoZW4gb25FeGl0IHRyaWdnZXJzICovXG4gIHZhciByZW1vdmVPbkV4aXRIYW5kbGVyID0gb25FeGl0KGNsZWFudXBPbkV4aXQoKCkgPT4gdG1wZmlsZSkpXG4gIHZhciBhYnNvbHV0ZU5hbWUgPSBwYXRoLnJlc29sdmUoZmlsZW5hbWUpXG5cbiAgbmV3IFByb21pc2UoZnVuY3Rpb24gc2VyaWFsaXplU2FtZUZpbGUgKHJlc29sdmUpIHtcbiAgICAvLyBtYWtlIGEgcXVldWUgaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0XG4gICAgaWYgKCFhY3RpdmVGaWxlc1thYnNvbHV0ZU5hbWVdKSBhY3RpdmVGaWxlc1thYnNvbHV0ZU5hbWVdID0gW11cblxuICAgIGFjdGl2ZUZpbGVzW2Fic29sdXRlTmFtZV0ucHVzaChyZXNvbHZlKSAvLyBhZGQgdGhpcyBqb2IgdG8gdGhlIHF1ZXVlXG4gICAgaWYgKGFjdGl2ZUZpbGVzW2Fic29sdXRlTmFtZV0ubGVuZ3RoID09PSAxKSByZXNvbHZlKCkgLy8ga2ljayBvZmYgdGhlIGZpcnN0IG9uZVxuICB9KS50aGVuKGZ1bmN0aW9uIGdldFJlYWxQYXRoICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIGZzLnJlYWxwYXRoKGZpbGVuYW1lLCBmdW5jdGlvbiAoXywgcmVhbG5hbWUpIHtcbiAgICAgICAgdHJ1ZW5hbWUgPSByZWFsbmFtZSB8fCBmaWxlbmFtZVxuICAgICAgICB0bXBmaWxlID0gZ2V0VG1wbmFtZSh0cnVlbmFtZSlcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pLnRoZW4oZnVuY3Rpb24gc3RhdCAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIHN0YXQgKHJlc29sdmUpIHtcbiAgICAgIGlmIChvcHRpb25zLm1vZGUgJiYgb3B0aW9ucy5jaG93bikgcmVzb2x2ZSgpXG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gRWl0aGVyIG1vZGUgb3IgY2hvd24gaXMgbm90IGV4cGxpY2l0bHkgc2V0XG4gICAgICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gY29weSBpdCBmcm9tIG9yaWdpbmFsIGZpbGVcbiAgICAgICAgZnMuc3RhdCh0cnVlbmFtZSwgZnVuY3Rpb24gKGVyciwgc3RhdHMpIHtcbiAgICAgICAgICBpZiAoZXJyIHx8ICFzdGF0cykgcmVzb2x2ZSgpXG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucylcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubW9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMubW9kZSA9IHN0YXRzLm1vZGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNob3duID09IG51bGwgJiYgcHJvY2Vzcy5nZXR1aWQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jaG93biA9IHsgdWlkOiBzdGF0cy51aWQsIGdpZDogc3RhdHMuZ2lkIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9KS50aGVuKGZ1bmN0aW9uIHRoZW5Xcml0ZUZpbGUgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmcy5vcGVuKHRtcGZpbGUsICd3Jywgb3B0aW9ucy5tb2RlLCBmdW5jdGlvbiAoZXJyLCBfZmQpIHtcbiAgICAgICAgZmQgPSBfZmRcbiAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgICAgZWxzZSByZXNvbHZlKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSkudGhlbihmdW5jdGlvbiB3cml0ZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgZnMud3JpdGUoZmQsIGRhdGEsIDAsIGRhdGEubGVuZ3RoLCAwLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgICAgICBlbHNlIHJlc29sdmUoKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgZnMud3JpdGUoZmQsIFN0cmluZyhkYXRhKSwgMCwgU3RyaW5nKG9wdGlvbnMuZW5jb2RpbmcgfHwgJ3V0ZjgnKSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpXG4gICAgICAgICAgZWxzZSByZXNvbHZlKClcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSByZXNvbHZlKClcbiAgICB9KVxuICB9KS50aGVuKGZ1bmN0aW9uIHN5bmNBbmRDbG9zZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChvcHRpb25zLmZzeW5jICE9PSBmYWxzZSkge1xuICAgICAgICBmcy5mc3luYyhmZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIGZzLmNsb3NlKGZkLCAoKSA9PiByZWplY3QoZXJyKSlcbiAgICAgICAgICBlbHNlIGZzLmNsb3NlKGZkLCByZXNvbHZlKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnMuY2xvc2UoZmQsIHJlc29sdmUpXG4gICAgICB9XG4gICAgfSlcbiAgfSkudGhlbihmdW5jdGlvbiBjaG93biAoKSB7XG4gICAgZmQgPSBudWxsXG4gICAgaWYgKG9wdGlvbnMuY2hvd24pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZzLmNob3duKHRtcGZpbGUsIG9wdGlvbnMuY2hvd24udWlkLCBvcHRpb25zLmNob3duLmdpZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpXG4gICAgICAgICAgZWxzZSByZXNvbHZlKClcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9KS50aGVuKGZ1bmN0aW9uIGNobW9kICgpIHtcbiAgICBpZiAob3B0aW9ucy5tb2RlKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmcy5jaG1vZCh0bXBmaWxlLCBvcHRpb25zLm1vZGUsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyKSByZWplY3QoZXJyKVxuICAgICAgICAgIGVsc2UgcmVzb2x2ZSgpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfSkudGhlbihmdW5jdGlvbiByZW5hbWUgKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmcy5yZW5hbWUodG1wZmlsZSwgdHJ1ZW5hbWUsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgICAgZWxzZSByZXNvbHZlKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSkudGhlbihmdW5jdGlvbiBzdWNjZXNzICgpIHtcbiAgICByZW1vdmVPbkV4aXRIYW5kbGVyKClcbiAgICBjYWxsYmFjaygpXG4gIH0sIGZ1bmN0aW9uIGZhaWwgKGVycikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHJldHVybiBmZCA/IGZzLmNsb3NlKGZkLCByZXNvbHZlKSA6IHJlc29sdmUoKVxuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgcmVtb3ZlT25FeGl0SGFuZGxlcigpXG4gICAgICBmcy51bmxpbmsodG1wZmlsZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhlcnIpXG4gICAgICB9KVxuICAgIH0pXG4gIH0pLnRoZW4oZnVuY3Rpb24gY2hlY2tRdWV1ZSAoKSB7XG4gICAgYWN0aXZlRmlsZXNbYWJzb2x1dGVOYW1lXS5zaGlmdCgpIC8vIHJlbW92ZSB0aGUgZWxlbWVudCBhZGRlZCBieSBzZXJpYWxpemVTYW1lRmlsZVxuICAgIGlmIChhY3RpdmVGaWxlc1thYnNvbHV0ZU5hbWVdLmxlbmd0aCA+IDApIHtcbiAgICAgIGFjdGl2ZUZpbGVzW2Fic29sdXRlTmFtZV1bMF0oKSAvLyBzdGFydCBuZXh0IGpvYiBpZiBvbmUgaXMgcGVuZGluZ1xuICAgIH0gZWxzZSBkZWxldGUgYWN0aXZlRmlsZXNbYWJzb2x1dGVOYW1lXVxuICB9KVxufVxuXG5mdW5jdGlvbiB3cml0ZUZpbGVTeW5jIChmaWxlbmFtZSwgZGF0YSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSBvcHRpb25zID0geyBlbmNvZGluZzogb3B0aW9ucyB9XG4gIGVsc2UgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cbiAgdHJ5IHtcbiAgICBmaWxlbmFtZSA9IGZzLnJlYWxwYXRoU3luYyhmaWxlbmFtZSlcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICAvLyBpdCdzIG9rLCBpdCdsbCBoYXBwZW4gb24gYSBub3QgeWV0IGV4aXN0aW5nIGZpbGVcbiAgfVxuICB2YXIgdG1wZmlsZSA9IGdldFRtcG5hbWUoZmlsZW5hbWUpXG5cbiAgaWYgKCFvcHRpb25zLm1vZGUgfHwgIW9wdGlvbnMuY2hvd24pIHtcbiAgICAvLyBFaXRoZXIgbW9kZSBvciBjaG93biBpcyBub3QgZXhwbGljaXRseSBzZXRcbiAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIGNvcHkgaXQgZnJvbSBvcmlnaW5hbCBmaWxlXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGVuYW1lKVxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpXG4gICAgICBpZiAoIW9wdGlvbnMubW9kZSkge1xuICAgICAgICBvcHRpb25zLm1vZGUgPSBzdGF0cy5tb2RlXG4gICAgICB9XG4gICAgICBpZiAoIW9wdGlvbnMuY2hvd24gJiYgcHJvY2Vzcy5nZXR1aWQpIHtcbiAgICAgICAgb3B0aW9ucy5jaG93biA9IHsgdWlkOiBzdGF0cy51aWQsIGdpZDogc3RhdHMuZ2lkIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gaWdub3JlIHN0YXQgZXJyb3JzXG4gICAgfVxuICB9XG5cbiAgdmFyIGZkXG4gIHZhciBjbGVhbnVwID0gY2xlYW51cE9uRXhpdCh0bXBmaWxlKVxuICB2YXIgcmVtb3ZlT25FeGl0SGFuZGxlciA9IG9uRXhpdChjbGVhbnVwKVxuXG4gIHRyeSB7XG4gICAgZmQgPSBmcy5vcGVuU3luYyh0bXBmaWxlLCAndycsIG9wdGlvbnMubW9kZSlcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICBmcy53cml0ZVN5bmMoZmQsIGRhdGEsIDAsIGRhdGEubGVuZ3RoLCAwKVxuICAgIH0gZWxzZSBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICBmcy53cml0ZVN5bmMoZmQsIFN0cmluZyhkYXRhKSwgMCwgU3RyaW5nKG9wdGlvbnMuZW5jb2RpbmcgfHwgJ3V0ZjgnKSlcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZnN5bmMgIT09IGZhbHNlKSB7XG4gICAgICBmcy5mc3luY1N5bmMoZmQpXG4gICAgfVxuICAgIGZzLmNsb3NlU3luYyhmZClcbiAgICBpZiAob3B0aW9ucy5jaG93bikgZnMuY2hvd25TeW5jKHRtcGZpbGUsIG9wdGlvbnMuY2hvd24udWlkLCBvcHRpb25zLmNob3duLmdpZClcbiAgICBpZiAob3B0aW9ucy5tb2RlKSBmcy5jaG1vZFN5bmModG1wZmlsZSwgb3B0aW9ucy5tb2RlKVxuICAgIGZzLnJlbmFtZVN5bmModG1wZmlsZSwgZmlsZW5hbWUpXG4gICAgcmVtb3ZlT25FeGl0SGFuZGxlcigpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChmZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZnMuY2xvc2VTeW5jKGZkKVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgLy8gaWdub3JlIGNsb3NlIGVycm9ycyBhdCB0aGlzIHN0YWdlLCBlcnJvciBtYXkgaGF2ZSBjbG9zZWQgZmQgYWxyZWFkeS5cbiAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlT25FeGl0SGFuZGxlcigpXG4gICAgY2xlYW51cCgpXG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cbiIsInZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbnZhciBwb2x5ZmlsbHMgPSByZXF1aXJlKCcuL3BvbHlmaWxscy5qcycpXG52YXIgbGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3ktc3RyZWFtcy5qcycpXG52YXIgY2xvbmUgPSByZXF1aXJlKCcuL2Nsb25lLmpzJylcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBub2RlIDAueCBwb2x5ZmlsbCAqL1xudmFyIGdyYWNlZnVsUXVldWVcbnZhciBwcmV2aW91c1N5bWJvbFxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtIG5vZGUgMC54IHBvbHlmaWxsICovXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBncmFjZWZ1bFF1ZXVlID0gU3ltYm9sLmZvcignZ3JhY2VmdWwtZnMucXVldWUnKVxuICAvLyBUaGlzIGlzIHVzZWQgaW4gdGVzdGluZyBieSBmdXR1cmUgdmVyc2lvbnNcbiAgcHJldmlvdXNTeW1ib2wgPSBTeW1ib2wuZm9yKCdncmFjZWZ1bC1mcy5wcmV2aW91cycpXG59IGVsc2Uge1xuICBncmFjZWZ1bFF1ZXVlID0gJ19fX2dyYWNlZnVsLWZzLnF1ZXVlJ1xuICBwcmV2aW91c1N5bWJvbCA9ICdfX19ncmFjZWZ1bC1mcy5wcmV2aW91cydcbn1cblxuZnVuY3Rpb24gbm9vcCAoKSB7fVxuXG52YXIgZGVidWcgPSBub29wXG5pZiAodXRpbC5kZWJ1Z2xvZylcbiAgZGVidWcgPSB1dGlsLmRlYnVnbG9nKCdnZnM0JylcbmVsc2UgaWYgKC9cXGJnZnM0XFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnKSlcbiAgZGVidWcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbSA9IHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cylcbiAgICBtID0gJ0dGUzQ6ICcgKyBtLnNwbGl0KC9cXG4vKS5qb2luKCdcXG5HRlM0OiAnKVxuICAgIGNvbnNvbGUuZXJyb3IobSlcbiAgfVxuXG4vLyBPbmNlIHRpbWUgaW5pdGlhbGl6YXRpb25cbmlmICghZ2xvYmFsW2dyYWNlZnVsUXVldWVdKSB7XG4gIC8vIFRoaXMgcXVldWUgY2FuIGJlIHNoYXJlZCBieSBtdWx0aXBsZSBsb2FkZWQgaW5zdGFuY2VzXG4gIHZhciBxdWV1ZSA9IFtdXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsIGdyYWNlZnVsUXVldWUsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHF1ZXVlXG4gICAgfVxuICB9KVxuXG4gIC8vIFBhdGNoIGZzLmNsb3NlL2Nsb3NlU3luYyB0byBzaGFyZWQgcXVldWUgdmVyc2lvbiwgYmVjYXVzZSB3ZSBuZWVkXG4gIC8vIHRvIHJldHJ5KCkgd2hlbmV2ZXIgYSBjbG9zZSBoYXBwZW5zICphbnl3aGVyZSogaW4gdGhlIHByb2dyYW0uXG4gIC8vIFRoaXMgaXMgZXNzZW50aWFsIHdoZW4gbXVsdGlwbGUgZ3JhY2VmdWwtZnMgaW5zdGFuY2VzIGFyZVxuICAvLyBpbiBwbGF5IGF0IHRoZSBzYW1lIHRpbWUuXG4gIGZzLmNsb3NlID0gKGZ1bmN0aW9uIChmcyRjbG9zZSkge1xuICAgIGZ1bmN0aW9uIGNsb3NlIChmZCwgY2IpIHtcbiAgICAgIHJldHVybiBmcyRjbG9zZS5jYWxsKGZzLCBmZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHVzZXMgdGhlIGdyYWNlZnVsLWZzIHNoYXJlZCBxdWV1ZVxuICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgIHJldHJ5KClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvc2UsIHByZXZpb3VzU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZnMkY2xvc2VcbiAgICB9KVxuICAgIHJldHVybiBjbG9zZVxuICB9KShmcy5jbG9zZSlcblxuICBmcy5jbG9zZVN5bmMgPSAoZnVuY3Rpb24gKGZzJGNsb3NlU3luYykge1xuICAgIGZ1bmN0aW9uIGNsb3NlU3luYyAoZmQpIHtcbiAgICAgIC8vIFRoaXMgZnVuY3Rpb24gdXNlcyB0aGUgZ3JhY2VmdWwtZnMgc2hhcmVkIHF1ZXVlXG4gICAgICBmcyRjbG9zZVN5bmMuYXBwbHkoZnMsIGFyZ3VtZW50cylcbiAgICAgIHJldHJ5KClcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvc2VTeW5jLCBwcmV2aW91c1N5bWJvbCwge1xuICAgICAgdmFsdWU6IGZzJGNsb3NlU3luY1xuICAgIH0pXG4gICAgcmV0dXJuIGNsb3NlU3luY1xuICB9KShmcy5jbG9zZVN5bmMpXG5cbiAgaWYgKC9cXGJnZnM0XFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnKSkge1xuICAgIHByb2Nlc3Mub24oJ2V4aXQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKGdsb2JhbFtncmFjZWZ1bFF1ZXVlXSlcbiAgICAgIHJlcXVpcmUoJ2Fzc2VydCcpLmVxdWFsKGdsb2JhbFtncmFjZWZ1bFF1ZXVlXS5sZW5ndGgsIDApXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoKGNsb25lKGZzKSlcbmlmIChwcm9jZXNzLmVudi5URVNUX0dSQUNFRlVMX0ZTX0dMT0JBTF9QQVRDSCAmJiAhZnMuX19wYXRjaGVkKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBwYXRjaChmcylcbiAgICBmcy5fX3BhdGNoZWQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBwYXRjaCAoZnMpIHtcbiAgLy8gRXZlcnl0aGluZyB0aGF0IHJlZmVyZW5jZXMgdGhlIG9wZW4oKSBmdW5jdGlvbiBuZWVkcyB0byBiZSBpbiBoZXJlXG4gIHBvbHlmaWxscyhmcylcbiAgZnMuZ3JhY2VmdWxpZnkgPSBwYXRjaFxuXG4gIGZzLmNyZWF0ZVJlYWRTdHJlYW0gPSBjcmVhdGVSZWFkU3RyZWFtXG4gIGZzLmNyZWF0ZVdyaXRlU3RyZWFtID0gY3JlYXRlV3JpdGVTdHJlYW1cbiAgdmFyIGZzJHJlYWRGaWxlID0gZnMucmVhZEZpbGVcbiAgZnMucmVhZEZpbGUgPSByZWFkRmlsZVxuICBmdW5jdGlvbiByZWFkRmlsZSAocGF0aCwgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpXG4gICAgICBjYiA9IG9wdGlvbnMsIG9wdGlvbnMgPSBudWxsXG5cbiAgICByZXR1cm4gZ28kcmVhZEZpbGUocGF0aCwgb3B0aW9ucywgY2IpXG5cbiAgICBmdW5jdGlvbiBnbyRyZWFkRmlsZSAocGF0aCwgb3B0aW9ucywgY2IpIHtcbiAgICAgIHJldHVybiBmcyRyZWFkRmlsZShwYXRoLCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgJiYgKGVyci5jb2RlID09PSAnRU1GSUxFJyB8fCBlcnIuY29kZSA9PT0gJ0VORklMRScpKVxuICAgICAgICAgIGVucXVldWUoW2dvJHJlYWRGaWxlLCBbcGF0aCwgb3B0aW9ucywgY2JdXSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICByZXRyeSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdmFyIGZzJHdyaXRlRmlsZSA9IGZzLndyaXRlRmlsZVxuICBmcy53cml0ZUZpbGUgPSB3cml0ZUZpbGVcbiAgZnVuY3Rpb24gd3JpdGVGaWxlIChwYXRoLCBkYXRhLCBvcHRpb25zLCBjYikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIGNiID0gb3B0aW9ucywgb3B0aW9ucyA9IG51bGxcblxuICAgIHJldHVybiBnbyR3cml0ZUZpbGUocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpXG5cbiAgICBmdW5jdGlvbiBnbyR3cml0ZUZpbGUgKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gICAgICByZXR1cm4gZnMkd3JpdGVGaWxlKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVyciAmJiAoZXJyLmNvZGUgPT09ICdFTUZJTEUnIHx8IGVyci5jb2RlID09PSAnRU5GSUxFJykpXG4gICAgICAgICAgZW5xdWV1ZShbZ28kd3JpdGVGaWxlLCBbcGF0aCwgZGF0YSwgb3B0aW9ucywgY2JdXSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICByZXRyeSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdmFyIGZzJGFwcGVuZEZpbGUgPSBmcy5hcHBlbmRGaWxlXG4gIGlmIChmcyRhcHBlbmRGaWxlKVxuICAgIGZzLmFwcGVuZEZpbGUgPSBhcHBlbmRGaWxlXG4gIGZ1bmN0aW9uIGFwcGVuZEZpbGUgKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKVxuICAgICAgY2IgPSBvcHRpb25zLCBvcHRpb25zID0gbnVsbFxuXG4gICAgcmV0dXJuIGdvJGFwcGVuZEZpbGUocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpXG5cbiAgICBmdW5jdGlvbiBnbyRhcHBlbmRGaWxlIChwYXRoLCBkYXRhLCBvcHRpb25zLCBjYikge1xuICAgICAgcmV0dXJuIGZzJGFwcGVuZEZpbGUocGF0aCwgZGF0YSwgb3B0aW9ucywgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyICYmIChlcnIuY29kZSA9PT0gJ0VNRklMRScgfHwgZXJyLmNvZGUgPT09ICdFTkZJTEUnKSlcbiAgICAgICAgICBlbnF1ZXVlKFtnbyRhcHBlbmRGaWxlLCBbcGF0aCwgZGF0YSwgb3B0aW9ucywgY2JdXSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICByZXRyeSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgdmFyIGZzJHJlYWRkaXIgPSBmcy5yZWFkZGlyXG4gIGZzLnJlYWRkaXIgPSByZWFkZGlyXG4gIGZ1bmN0aW9uIHJlYWRkaXIgKHBhdGgsIG9wdGlvbnMsIGNiKSB7XG4gICAgdmFyIGFyZ3MgPSBbcGF0aF1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFyZ3MucHVzaChvcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYiA9IG9wdGlvbnNcbiAgICB9XG4gICAgYXJncy5wdXNoKGdvJHJlYWRkaXIkY2IpXG5cbiAgICByZXR1cm4gZ28kcmVhZGRpcihhcmdzKVxuXG4gICAgZnVuY3Rpb24gZ28kcmVhZGRpciRjYiAoZXJyLCBmaWxlcykge1xuICAgICAgaWYgKGZpbGVzICYmIGZpbGVzLnNvcnQpXG4gICAgICAgIGZpbGVzLnNvcnQoKVxuXG4gICAgICBpZiAoZXJyICYmIChlcnIuY29kZSA9PT0gJ0VNRklMRScgfHwgZXJyLmNvZGUgPT09ICdFTkZJTEUnKSlcbiAgICAgICAgZW5xdWV1ZShbZ28kcmVhZGRpciwgW2FyZ3NdXSlcblxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICByZXRyeSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ28kcmVhZGRpciAoYXJncykge1xuICAgIHJldHVybiBmcyRyZWFkZGlyLmFwcGx5KGZzLCBhcmdzKVxuICB9XG5cbiAgaWYgKHByb2Nlc3MudmVyc2lvbi5zdWJzdHIoMCwgNCkgPT09ICd2MC44Jykge1xuICAgIHZhciBsZWdTdHJlYW1zID0gbGVnYWN5KGZzKVxuICAgIFJlYWRTdHJlYW0gPSBsZWdTdHJlYW1zLlJlYWRTdHJlYW1cbiAgICBXcml0ZVN0cmVhbSA9IGxlZ1N0cmVhbXMuV3JpdGVTdHJlYW1cbiAgfVxuXG4gIHZhciBmcyRSZWFkU3RyZWFtID0gZnMuUmVhZFN0cmVhbVxuICBpZiAoZnMkUmVhZFN0cmVhbSkge1xuICAgIFJlYWRTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShmcyRSZWFkU3RyZWFtLnByb3RvdHlwZSlcbiAgICBSZWFkU3RyZWFtLnByb3RvdHlwZS5vcGVuID0gUmVhZFN0cmVhbSRvcGVuXG4gIH1cblxuICB2YXIgZnMkV3JpdGVTdHJlYW0gPSBmcy5Xcml0ZVN0cmVhbVxuICBpZiAoZnMkV3JpdGVTdHJlYW0pIHtcbiAgICBXcml0ZVN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGZzJFdyaXRlU3RyZWFtLnByb3RvdHlwZSlcbiAgICBXcml0ZVN0cmVhbS5wcm90b3R5cGUub3BlbiA9IFdyaXRlU3RyZWFtJG9wZW5cbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmcywgJ1JlYWRTdHJlYW0nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUmVhZFN0cmVhbVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBSZWFkU3RyZWFtID0gdmFsXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnMsICdXcml0ZVN0cmVhbScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBXcml0ZVN0cmVhbVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBXcml0ZVN0cmVhbSA9IHZhbFxuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcblxuICAvLyBsZWdhY3kgbmFtZXNcbiAgdmFyIEZpbGVSZWFkU3RyZWFtID0gUmVhZFN0cmVhbVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnMsICdGaWxlUmVhZFN0cmVhbScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBGaWxlUmVhZFN0cmVhbVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICBGaWxlUmVhZFN0cmVhbSA9IHZhbFxuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcbiAgdmFyIEZpbGVXcml0ZVN0cmVhbSA9IFdyaXRlU3RyZWFtXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmcywgJ0ZpbGVXcml0ZVN0cmVhbScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBGaWxlV3JpdGVTdHJlYW1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgRmlsZVdyaXRlU3RyZWFtID0gdmFsXG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxuXG4gIGZ1bmN0aW9uIFJlYWRTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFJlYWRTdHJlYW0pXG4gICAgICByZXR1cm4gZnMkUmVhZFN0cmVhbS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0aGlzXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIFJlYWRTdHJlYW0uYXBwbHkoT2JqZWN0LmNyZWF0ZShSZWFkU3RyZWFtLnByb3RvdHlwZSksIGFyZ3VtZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlYWRTdHJlYW0kb3BlbiAoKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgb3Blbih0aGF0LnBhdGgsIHRoYXQuZmxhZ3MsIHRoYXQubW9kZSwgZnVuY3Rpb24gKGVyciwgZmQpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKHRoYXQuYXV0b0Nsb3NlKVxuICAgICAgICAgIHRoYXQuZGVzdHJveSgpXG5cbiAgICAgICAgdGhhdC5lbWl0KCdlcnJvcicsIGVycilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQuZmQgPSBmZFxuICAgICAgICB0aGF0LmVtaXQoJ29wZW4nLCBmZClcbiAgICAgICAgdGhhdC5yZWFkKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gV3JpdGVTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFdyaXRlU3RyZWFtKVxuICAgICAgcmV0dXJuIGZzJFdyaXRlU3RyZWFtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRoaXNcbiAgICBlbHNlXG4gICAgICByZXR1cm4gV3JpdGVTdHJlYW0uYXBwbHkoT2JqZWN0LmNyZWF0ZShXcml0ZVN0cmVhbS5wcm90b3R5cGUpLCBhcmd1bWVudHMpXG4gIH1cblxuICBmdW5jdGlvbiBXcml0ZVN0cmVhbSRvcGVuICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICBvcGVuKHRoYXQucGF0aCwgdGhhdC5mbGFncywgdGhhdC5tb2RlLCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICB0aGF0LmRlc3Ryb3koKVxuICAgICAgICB0aGF0LmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhhdC5mZCA9IGZkXG4gICAgICAgIHRoYXQuZW1pdCgnb3BlbicsIGZkKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSZWFkU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBmcy5SZWFkU3RyZWFtKHBhdGgsIG9wdGlvbnMpXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVXcml0ZVN0cmVhbSAocGF0aCwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgZnMuV3JpdGVTdHJlYW0ocGF0aCwgb3B0aW9ucylcbiAgfVxuXG4gIHZhciBmcyRvcGVuID0gZnMub3BlblxuICBmcy5vcGVuID0gb3BlblxuICBmdW5jdGlvbiBvcGVuIChwYXRoLCBmbGFncywgbW9kZSwgY2IpIHtcbiAgICBpZiAodHlwZW9mIG1vZGUgPT09ICdmdW5jdGlvbicpXG4gICAgICBjYiA9IG1vZGUsIG1vZGUgPSBudWxsXG5cbiAgICByZXR1cm4gZ28kb3BlbihwYXRoLCBmbGFncywgbW9kZSwgY2IpXG5cbiAgICBmdW5jdGlvbiBnbyRvcGVuIChwYXRoLCBmbGFncywgbW9kZSwgY2IpIHtcbiAgICAgIHJldHVybiBmcyRvcGVuKHBhdGgsIGZsYWdzLCBtb2RlLCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgICBpZiAoZXJyICYmIChlcnIuY29kZSA9PT0gJ0VNRklMRScgfHwgZXJyLmNvZGUgPT09ICdFTkZJTEUnKSlcbiAgICAgICAgICBlbnF1ZXVlKFtnbyRvcGVuLCBbcGF0aCwgZmxhZ3MsIG1vZGUsIGNiXV0pXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBjYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgcmV0cnkoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmc1xufVxuXG5mdW5jdGlvbiBlbnF1ZXVlIChlbGVtKSB7XG4gIGRlYnVnKCdFTlFVRVVFJywgZWxlbVswXS5uYW1lLCBlbGVtWzFdKVxuICBnbG9iYWxbZ3JhY2VmdWxRdWV1ZV0ucHVzaChlbGVtKVxufVxuXG5mdW5jdGlvbiByZXRyeSAoKSB7XG4gIHZhciBlbGVtID0gZ2xvYmFsW2dyYWNlZnVsUXVldWVdLnNoaWZ0KClcbiAgaWYgKGVsZW0pIHtcbiAgICBkZWJ1ZygnUkVUUlknLCBlbGVtWzBdLm5hbWUsIGVsZW1bMV0pXG4gICAgZWxlbVswXS5hcHBseShudWxsLCBlbGVtWzFdKVxuICB9XG59XG4iLCJ2YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnY29uc3RhbnRzJylcblxudmFyIG9yaWdDd2QgPSBwcm9jZXNzLmN3ZFxudmFyIGN3ZCA9IG51bGxcblxudmFyIHBsYXRmb3JtID0gcHJvY2Vzcy5lbnYuR1JBQ0VGVUxfRlNfUExBVEZPUk0gfHwgcHJvY2Vzcy5wbGF0Zm9ybVxuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIWN3ZClcbiAgICBjd2QgPSBvcmlnQ3dkLmNhbGwocHJvY2VzcylcbiAgcmV0dXJuIGN3ZFxufVxudHJ5IHtcbiAgcHJvY2Vzcy5jd2QoKVxufSBjYXRjaCAoZXIpIHt9XG5cbnZhciBjaGRpciA9IHByb2Nlc3MuY2hkaXJcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbihkKSB7XG4gIGN3ZCA9IG51bGxcbiAgY2hkaXIuY2FsbChwcm9jZXNzLCBkKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoXG5cbmZ1bmN0aW9uIHBhdGNoIChmcykge1xuICAvLyAocmUtKWltcGxlbWVudCBzb21lIHRoaW5ncyB0aGF0IGFyZSBrbm93biBidXN0ZWQgb3IgbWlzc2luZy5cblxuICAvLyBsY2htb2QsIGJyb2tlbiBwcmlvciB0byAwLjYuMlxuICAvLyBiYWNrLXBvcnQgdGhlIGZpeCBoZXJlLlxuICBpZiAoY29uc3RhbnRzLmhhc093blByb3BlcnR5KCdPX1NZTUxJTksnKSAmJlxuICAgICAgcHJvY2Vzcy52ZXJzaW9uLm1hdGNoKC9edjBcXC42XFwuWzAtMl18XnYwXFwuNVxcLi8pKSB7XG4gICAgcGF0Y2hMY2htb2QoZnMpXG4gIH1cblxuICAvLyBsdXRpbWVzIGltcGxlbWVudGF0aW9uLCBvciBuby1vcFxuICBpZiAoIWZzLmx1dGltZXMpIHtcbiAgICBwYXRjaEx1dGltZXMoZnMpXG4gIH1cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vaXNhYWNzL25vZGUtZ3JhY2VmdWwtZnMvaXNzdWVzLzRcbiAgLy8gQ2hvd24gc2hvdWxkIG5vdCBmYWlsIG9uIGVpbnZhbCBvciBlcGVybSBpZiBub24tcm9vdC5cbiAgLy8gSXQgc2hvdWxkIG5vdCBmYWlsIG9uIGVub3N5cyBldmVyLCBhcyB0aGlzIGp1c3QgaW5kaWNhdGVzXG4gIC8vIHRoYXQgYSBmcyBkb2Vzbid0IHN1cHBvcnQgdGhlIGludGVuZGVkIG9wZXJhdGlvbi5cblxuICBmcy5jaG93biA9IGNob3duRml4KGZzLmNob3duKVxuICBmcy5mY2hvd24gPSBjaG93bkZpeChmcy5mY2hvd24pXG4gIGZzLmxjaG93biA9IGNob3duRml4KGZzLmxjaG93bilcblxuICBmcy5jaG1vZCA9IGNobW9kRml4KGZzLmNobW9kKVxuICBmcy5mY2htb2QgPSBjaG1vZEZpeChmcy5mY2htb2QpXG4gIGZzLmxjaG1vZCA9IGNobW9kRml4KGZzLmxjaG1vZClcblxuICBmcy5jaG93blN5bmMgPSBjaG93bkZpeFN5bmMoZnMuY2hvd25TeW5jKVxuICBmcy5mY2hvd25TeW5jID0gY2hvd25GaXhTeW5jKGZzLmZjaG93blN5bmMpXG4gIGZzLmxjaG93blN5bmMgPSBjaG93bkZpeFN5bmMoZnMubGNob3duU3luYylcblxuICBmcy5jaG1vZFN5bmMgPSBjaG1vZEZpeFN5bmMoZnMuY2htb2RTeW5jKVxuICBmcy5mY2htb2RTeW5jID0gY2htb2RGaXhTeW5jKGZzLmZjaG1vZFN5bmMpXG4gIGZzLmxjaG1vZFN5bmMgPSBjaG1vZEZpeFN5bmMoZnMubGNobW9kU3luYylcblxuICBmcy5zdGF0ID0gc3RhdEZpeChmcy5zdGF0KVxuICBmcy5mc3RhdCA9IHN0YXRGaXgoZnMuZnN0YXQpXG4gIGZzLmxzdGF0ID0gc3RhdEZpeChmcy5sc3RhdClcblxuICBmcy5zdGF0U3luYyA9IHN0YXRGaXhTeW5jKGZzLnN0YXRTeW5jKVxuICBmcy5mc3RhdFN5bmMgPSBzdGF0Rml4U3luYyhmcy5mc3RhdFN5bmMpXG4gIGZzLmxzdGF0U3luYyA9IHN0YXRGaXhTeW5jKGZzLmxzdGF0U3luYylcblxuICAvLyBpZiBsY2htb2QvbGNob3duIGRvIG5vdCBleGlzdCwgdGhlbiBtYWtlIHRoZW0gbm8tb3BzXG4gIGlmICghZnMubGNobW9kKSB7XG4gICAgZnMubGNobW9kID0gZnVuY3Rpb24gKHBhdGgsIG1vZGUsIGNiKSB7XG4gICAgICBpZiAoY2IpIHByb2Nlc3MubmV4dFRpY2soY2IpXG4gICAgfVxuICAgIGZzLmxjaG1vZFN5bmMgPSBmdW5jdGlvbiAoKSB7fVxuICB9XG4gIGlmICghZnMubGNob3duKSB7XG4gICAgZnMubGNob3duID0gZnVuY3Rpb24gKHBhdGgsIHVpZCwgZ2lkLCBjYikge1xuICAgICAgaWYgKGNiKSBwcm9jZXNzLm5leHRUaWNrKGNiKVxuICAgIH1cbiAgICBmcy5sY2hvd25TeW5jID0gZnVuY3Rpb24gKCkge31cbiAgfVxuXG4gIC8vIG9uIFdpbmRvd3MsIEEvViBzb2Z0d2FyZSBjYW4gbG9jayB0aGUgZGlyZWN0b3J5LCBjYXVzaW5nIHRoaXNcbiAgLy8gdG8gZmFpbCB3aXRoIGFuIEVBQ0NFUyBvciBFUEVSTSBpZiB0aGUgZGlyZWN0b3J5IGNvbnRhaW5zIG5ld2x5XG4gIC8vIGNyZWF0ZWQgZmlsZXMuICBUcnkgYWdhaW4gb24gZmFpbHVyZSwgZm9yIHVwIHRvIDYwIHNlY29uZHMuXG5cbiAgLy8gU2V0IHRoZSB0aW1lb3V0IHRoaXMgbG9uZyBiZWNhdXNlIHNvbWUgV2luZG93cyBBbnRpLVZpcnVzLCBzdWNoIGFzIFBhcml0eVxuICAvLyBiaXQ5LCBtYXkgbG9jayBmaWxlcyBmb3IgdXAgdG8gYSBtaW51dGUsIGNhdXNpbmcgbnBtIHBhY2thZ2UgaW5zdGFsbFxuICAvLyBmYWlsdXJlcy4gQWxzbywgdGFrZSBjYXJlIHRvIHlpZWxkIHRoZSBzY2hlZHVsZXIuIFdpbmRvd3Mgc2NoZWR1bGluZyBnaXZlc1xuICAvLyBDUFUgdG8gYSBidXN5IGxvb3BpbmcgcHJvY2Vzcywgd2hpY2ggY2FuIGNhdXNlIHRoZSBwcm9ncmFtIGNhdXNpbmcgdGhlIGxvY2tcbiAgLy8gY29udGVudGlvbiB0byBiZSBzdGFydmVkIG9mIENQVSBieSBub2RlLCBzbyB0aGUgY29udGVudGlvbiBkb2Vzbid0IHJlc29sdmUuXG4gIGlmIChwbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiKSB7XG4gICAgZnMucmVuYW1lID0gKGZ1bmN0aW9uIChmcyRyZW5hbWUpIHsgcmV0dXJuIGZ1bmN0aW9uIChmcm9tLCB0bywgY2IpIHtcbiAgICAgIHZhciBzdGFydCA9IERhdGUubm93KClcbiAgICAgIHZhciBiYWNrb2ZmID0gMDtcbiAgICAgIGZzJHJlbmFtZShmcm9tLCB0bywgZnVuY3Rpb24gQ0IgKGVyKSB7XG4gICAgICAgIGlmIChlclxuICAgICAgICAgICAgJiYgKGVyLmNvZGUgPT09IFwiRUFDQ0VTXCIgfHwgZXIuY29kZSA9PT0gXCJFUEVSTVwiKVxuICAgICAgICAgICAgJiYgRGF0ZS5ub3coKSAtIHN0YXJ0IDwgNjAwMDApIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZnMuc3RhdCh0bywgZnVuY3Rpb24gKHN0YXRlciwgc3QpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXRlciAmJiBzdGF0ZXIuY29kZSA9PT0gXCJFTk9FTlRcIilcbiAgICAgICAgICAgICAgICBmcyRyZW5hbWUoZnJvbSwgdG8sIENCKTtcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNiKGVyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LCBiYWNrb2ZmKVxuICAgICAgICAgIGlmIChiYWNrb2ZmIDwgMTAwKVxuICAgICAgICAgICAgYmFja29mZiArPSAxMDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNiKSBjYihlcilcbiAgICAgIH0pXG4gICAgfX0pKGZzLnJlbmFtZSlcbiAgfVxuXG4gIC8vIGlmIHJlYWQoKSByZXR1cm5zIEVBR0FJTiwgdGhlbiBqdXN0IHRyeSBpdCBhZ2Fpbi5cbiAgZnMucmVhZCA9IChmdW5jdGlvbiAoZnMkcmVhZCkge1xuICAgIGZ1bmN0aW9uIHJlYWQgKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2tfKSB7XG4gICAgICB2YXIgY2FsbGJhY2tcbiAgICAgIGlmIChjYWxsYmFja18gJiYgdHlwZW9mIGNhbGxiYWNrXyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZWFnQ291bnRlciA9IDBcbiAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoZXIsIF8sIF9fKSB7XG4gICAgICAgICAgaWYgKGVyICYmIGVyLmNvZGUgPT09ICdFQUdBSU4nICYmIGVhZ0NvdW50ZXIgPCAxMCkge1xuICAgICAgICAgICAgZWFnQ291bnRlciArK1xuICAgICAgICAgICAgcmV0dXJuIGZzJHJlYWQuY2FsbChmcywgZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaylcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2tfLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZzJHJlYWQuY2FsbChmcywgZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaylcbiAgICB9XG5cbiAgICAvLyBUaGlzIGVuc3VyZXMgYHV0aWwucHJvbWlzaWZ5YCB3b3JrcyBhcyBpdCBkb2VzIGZvciBuYXRpdmUgYGZzLnJlYWRgLlxuICAgIHJlYWQuX19wcm90b19fID0gZnMkcmVhZFxuICAgIHJldHVybiByZWFkXG4gIH0pKGZzLnJlYWQpXG5cbiAgZnMucmVhZFN5bmMgPSAoZnVuY3Rpb24gKGZzJHJlYWRTeW5jKSB7IHJldHVybiBmdW5jdGlvbiAoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKSB7XG4gICAgdmFyIGVhZ0NvdW50ZXIgPSAwXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmcyRyZWFkU3luYy5jYWxsKGZzLCBmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pXG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICBpZiAoZXIuY29kZSA9PT0gJ0VBR0FJTicgJiYgZWFnQ291bnRlciA8IDEwKSB7XG4gICAgICAgICAgZWFnQ291bnRlciArK1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJcbiAgICAgIH1cbiAgICB9XG4gIH19KShmcy5yZWFkU3luYylcblxuICBmdW5jdGlvbiBwYXRjaExjaG1vZCAoZnMpIHtcbiAgICBmcy5sY2htb2QgPSBmdW5jdGlvbiAocGF0aCwgbW9kZSwgY2FsbGJhY2spIHtcbiAgICAgIGZzLm9wZW4oIHBhdGhcbiAgICAgICAgICAgICAsIGNvbnN0YW50cy5PX1dST05MWSB8IGNvbnN0YW50cy5PX1NZTUxJTktcbiAgICAgICAgICAgICAsIG1vZGVcbiAgICAgICAgICAgICAsIGZ1bmN0aW9uIChlcnIsIGZkKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycilcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICAvLyBwcmVmZXIgdG8gcmV0dXJuIHRoZSBjaG1vZCBlcnJvciwgaWYgb25lIG9jY3VycyxcbiAgICAgICAgLy8gYnV0IHN0aWxsIHRyeSB0byBjbG9zZSwgYW5kIHJlcG9ydCBjbG9zaW5nIGVycm9ycyBpZiB0aGV5IG9jY3VyLlxuICAgICAgICBmcy5mY2htb2QoZmQsIG1vZGUsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBmcy5jbG9zZShmZCwgZnVuY3Rpb24oZXJyMikge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIgfHwgZXJyMilcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmcy5sY2htb2RTeW5jID0gZnVuY3Rpb24gKHBhdGgsIG1vZGUpIHtcbiAgICAgIHZhciBmZCA9IGZzLm9wZW5TeW5jKHBhdGgsIGNvbnN0YW50cy5PX1dST05MWSB8IGNvbnN0YW50cy5PX1NZTUxJTkssIG1vZGUpXG5cbiAgICAgIC8vIHByZWZlciB0byByZXR1cm4gdGhlIGNobW9kIGVycm9yLCBpZiBvbmUgb2NjdXJzLFxuICAgICAgLy8gYnV0IHN0aWxsIHRyeSB0byBjbG9zZSwgYW5kIHJlcG9ydCBjbG9zaW5nIGVycm9ycyBpZiB0aGV5IG9jY3VyLlxuICAgICAgdmFyIHRocmV3ID0gdHJ1ZVxuICAgICAgdmFyIHJldFxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0ID0gZnMuZmNobW9kU3luYyhmZCwgbW9kZSlcbiAgICAgICAgdGhyZXcgPSBmYWxzZVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHRocmV3KSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZzLmNsb3NlU3luYyhmZClcbiAgICAgICAgICB9IGNhdGNoIChlcikge31cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcy5jbG9zZVN5bmMoZmQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaEx1dGltZXMgKGZzKSB7XG4gICAgaWYgKGNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eShcIk9fU1lNTElOS1wiKSkge1xuICAgICAgZnMubHV0aW1lcyA9IGZ1bmN0aW9uIChwYXRoLCBhdCwgbXQsIGNiKSB7XG4gICAgICAgIGZzLm9wZW4ocGF0aCwgY29uc3RhbnRzLk9fU1lNTElOSywgZnVuY3Rpb24gKGVyLCBmZCkge1xuICAgICAgICAgIGlmIChlcikge1xuICAgICAgICAgICAgaWYgKGNiKSBjYihlcilcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBmcy5mdXRpbWVzKGZkLCBhdCwgbXQsIGZ1bmN0aW9uIChlcikge1xuICAgICAgICAgICAgZnMuY2xvc2UoZmQsIGZ1bmN0aW9uIChlcjIpIHtcbiAgICAgICAgICAgICAgaWYgKGNiKSBjYihlciB8fCBlcjIpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGZzLmx1dGltZXNTeW5jID0gZnVuY3Rpb24gKHBhdGgsIGF0LCBtdCkge1xuICAgICAgICB2YXIgZmQgPSBmcy5vcGVuU3luYyhwYXRoLCBjb25zdGFudHMuT19TWU1MSU5LKVxuICAgICAgICB2YXIgcmV0XG4gICAgICAgIHZhciB0aHJldyA9IHRydWVcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXQgPSBmcy5mdXRpbWVzU3luYyhmZCwgYXQsIG10KVxuICAgICAgICAgIHRocmV3ID0gZmFsc2VcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAodGhyZXcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZzLmNsb3NlU3luYyhmZClcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7fVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcy5jbG9zZVN5bmMoZmQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBmcy5sdXRpbWVzID0gZnVuY3Rpb24gKF9hLCBfYiwgX2MsIGNiKSB7IGlmIChjYikgcHJvY2Vzcy5uZXh0VGljayhjYikgfVxuICAgICAgZnMubHV0aW1lc1N5bmMgPSBmdW5jdGlvbiAoKSB7fVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNobW9kRml4IChvcmlnKSB7XG4gICAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZ1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBtb2RlLCBjYikge1xuICAgICAgcmV0dXJuIG9yaWcuY2FsbChmcywgdGFyZ2V0LCBtb2RlLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgaWYgKGNob3duRXJPayhlcikpIGVyID0gbnVsbFxuICAgICAgICBpZiAoY2IpIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2htb2RGaXhTeW5jIChvcmlnKSB7XG4gICAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZ1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBtb2RlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIG1vZGUpXG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICBpZiAoIWNob3duRXJPayhlcikpIHRocm93IGVyXG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICBmdW5jdGlvbiBjaG93bkZpeCAob3JpZykge1xuICAgIGlmICghb3JpZykgcmV0dXJuIG9yaWdcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgdWlkLCBnaWQsIGNiKSB7XG4gICAgICByZXR1cm4gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIHVpZCwgZ2lkLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgaWYgKGNob3duRXJPayhlcikpIGVyID0gbnVsbFxuICAgICAgICBpZiAoY2IpIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hvd25GaXhTeW5jIChvcmlnKSB7XG4gICAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZ1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCB1aWQsIGdpZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9yaWcuY2FsbChmcywgdGFyZ2V0LCB1aWQsIGdpZClcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIGlmICghY2hvd25Fck9rKGVyKSkgdGhyb3cgZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGF0Rml4IChvcmlnKSB7XG4gICAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZ1xuICAgIC8vIE9sZGVyIHZlcnNpb25zIG9mIE5vZGUgZXJyb25lb3VzbHkgcmV0dXJuZWQgc2lnbmVkIGludGVnZXJzIGZvclxuICAgIC8vIHVpZCArIGdpZC5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucywgY2IpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjYiA9IG9wdGlvbnNcbiAgICAgICAgb3B0aW9ucyA9IG51bGxcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrIChlciwgc3RhdHMpIHtcbiAgICAgICAgaWYgKHN0YXRzKSB7XG4gICAgICAgICAgaWYgKHN0YXRzLnVpZCA8IDApIHN0YXRzLnVpZCArPSAweDEwMDAwMDAwMFxuICAgICAgICAgIGlmIChzdGF0cy5naWQgPCAwKSBzdGF0cy5naWQgKz0gMHgxMDAwMDAwMDBcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2IpIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zID8gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgICAgICA6IG9yaWcuY2FsbChmcywgdGFyZ2V0LCBjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGF0Rml4U3luYyAob3JpZykge1xuICAgIGlmICghb3JpZykgcmV0dXJuIG9yaWdcbiAgICAvLyBPbGRlciB2ZXJzaW9ucyBvZiBOb2RlIGVycm9uZW91c2x5IHJldHVybmVkIHNpZ25lZCBpbnRlZ2VycyBmb3JcbiAgICAvLyB1aWQgKyBnaWQuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdGF0cyA9IG9wdGlvbnMgPyBvcmlnLmNhbGwoZnMsIHRhcmdldCwgb3B0aW9ucylcbiAgICAgICAgOiBvcmlnLmNhbGwoZnMsIHRhcmdldClcbiAgICAgIGlmIChzdGF0cy51aWQgPCAwKSBzdGF0cy51aWQgKz0gMHgxMDAwMDAwMDBcbiAgICAgIGlmIChzdGF0cy5naWQgPCAwKSBzdGF0cy5naWQgKz0gMHgxMDAwMDAwMDBcbiAgICAgIHJldHVybiBzdGF0cztcbiAgICB9XG4gIH1cblxuICAvLyBFTk9TWVMgbWVhbnMgdGhhdCB0aGUgZnMgZG9lc24ndCBzdXBwb3J0IHRoZSBvcC4gSnVzdCBpZ25vcmVcbiAgLy8gdGhhdCwgYmVjYXVzZSBpdCBkb2Vzbid0IG1hdHRlci5cbiAgLy9cbiAgLy8gaWYgdGhlcmUncyBubyBnZXR1aWQsIG9yIGlmIGdldHVpZCgpIGlzIHNvbWV0aGluZyBvdGhlclxuICAvLyB0aGFuIDAsIGFuZCB0aGUgZXJyb3IgaXMgRUlOVkFMIG9yIEVQRVJNLCB0aGVuIGp1c3QgaWdub3JlXG4gIC8vIGl0LlxuICAvL1xuICAvLyBUaGlzIHNwZWNpZmljIGNhc2UgaXMgYSBzaWxlbnQgZmFpbHVyZSBpbiBjcCwgaW5zdGFsbCwgdGFyLFxuICAvLyBhbmQgbW9zdCBvdGhlciB1bml4IHRvb2xzIHRoYXQgbWFuYWdlIHBlcm1pc3Npb25zLlxuICAvL1xuICAvLyBXaGVuIHJ1bm5pbmcgYXMgcm9vdCwgb3IgaWYgb3RoZXIgdHlwZXMgb2YgZXJyb3JzIGFyZVxuICAvLyBlbmNvdW50ZXJlZCwgdGhlbiBpdCdzIHN0cmljdC5cbiAgZnVuY3Rpb24gY2hvd25Fck9rIChlcikge1xuICAgIGlmICghZXIpXG4gICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgaWYgKGVyLmNvZGUgPT09IFwiRU5PU1lTXCIpXG4gICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgdmFyIG5vbnJvb3QgPSAhcHJvY2Vzcy5nZXR1aWQgfHwgcHJvY2Vzcy5nZXR1aWQoKSAhPT0gMFxuICAgIGlmIChub25yb290KSB7XG4gICAgICBpZiAoZXIuY29kZSA9PT0gXCJFSU5WQUxcIiB8fCBlci5jb2RlID09PSBcIkVQRVJNXCIpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW1cblxubW9kdWxlLmV4cG9ydHMgPSBsZWdhY3lcblxuZnVuY3Rpb24gbGVnYWN5IChmcykge1xuICByZXR1cm4ge1xuICAgIFJlYWRTdHJlYW06IFJlYWRTdHJlYW0sXG4gICAgV3JpdGVTdHJlYW06IFdyaXRlU3RyZWFtXG4gIH1cblxuICBmdW5jdGlvbiBSZWFkU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRTdHJlYW0pKSByZXR1cm4gbmV3IFJlYWRTdHJlYW0ocGF0aCwgb3B0aW9ucyk7XG5cbiAgICBTdHJlYW0uY2FsbCh0aGlzKTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgdGhpcy5mZCA9IG51bGw7XG4gICAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG4gICAgdGhpcy5wYXVzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuZmxhZ3MgPSAncic7XG4gICAgdGhpcy5tb2RlID0gNDM4OyAvKj0wNjY2Ki9cbiAgICB0aGlzLmJ1ZmZlclNpemUgPSA2NCAqIDEwMjQ7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIE1peGluIG9wdGlvbnMgaW50byB0aGlzXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVuY29kaW5nKSB0aGlzLnNldEVuY29kaW5nKHRoaXMuZW5jb2RpbmcpO1xuXG4gICAgaWYgKHRoaXMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdGhpcy5zdGFydCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3N0YXJ0IG11c3QgYmUgYSBOdW1iZXInKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuZW5kID0gSW5maW5pdHk7XG4gICAgICB9IGVsc2UgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgdGhpcy5lbmQpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdlbmQgbXVzdCBiZSBhIE51bWJlcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdGFydCA+IHRoaXMuZW5kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgbXVzdCBiZSA8PSBlbmQnKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZkICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLl9yZWFkKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmcy5vcGVuKHRoaXMucGF0aCwgdGhpcy5mbGFncywgdGhpcy5tb2RlLCBmdW5jdGlvbiAoZXJyLCBmZCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgc2VsZi5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNlbGYuZmQgPSBmZDtcbiAgICAgIHNlbGYuZW1pdCgnb3BlbicsIGZkKTtcbiAgICAgIHNlbGYuX3JlYWQoKTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gV3JpdGVTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGVTdHJlYW0pKSByZXR1cm4gbmV3IFdyaXRlU3RyZWFtKHBhdGgsIG9wdGlvbnMpO1xuXG4gICAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIHRoaXMuZmQgPSBudWxsO1xuICAgIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gICAgdGhpcy5mbGFncyA9ICd3JztcbiAgICB0aGlzLmVuY29kaW5nID0gJ2JpbmFyeSc7XG4gICAgdGhpcy5tb2RlID0gNDM4OyAvKj0wNjY2Ki9cbiAgICB0aGlzLmJ5dGVzV3JpdHRlbiA9IDA7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIE1peGluIG9wdGlvbnMgaW50byB0aGlzXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuc3RhcnQpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzdGFydCBtdXN0IGJlIGEgTnVtYmVyJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGFydCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBtdXN0IGJlID49IHplcm8nKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0O1xuICAgIH1cblxuICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgIHRoaXMuX3F1ZXVlID0gW107XG5cbiAgICBpZiAodGhpcy5mZCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fb3BlbiA9IGZzLm9wZW47XG4gICAgICB0aGlzLl9xdWV1ZS5wdXNoKFt0aGlzLl9vcGVuLCB0aGlzLnBhdGgsIHRoaXMuZmxhZ3MsIHRoaXMubW9kZSwgdW5kZWZpbmVkXSk7XG4gICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJlYW1cIik7IiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKVxuICAgIHJldHVybiBvYmpcblxuICBpZiAob2JqIGluc3RhbmNlb2YgT2JqZWN0KVxuICAgIHZhciBjb3B5ID0geyBfX3Byb3RvX186IG9iai5fX3Byb3RvX18gfVxuICBlbHNlXG4gICAgdmFyIGNvcHkgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29weSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSlcbiAgfSlcblxuICByZXR1cm4gY29weVxufVxuIiwiLyoqXG4gKiBAcHJlc2VydmVcbiAqIEpTIEltcGxlbWVudGF0aW9uIG9mIGluY3JlbWVudGFsIE11cm11ckhhc2gzIChyMTUwKSAoYXMgb2YgTWF5IDEwLCAyMDEzKVxuICpcbiAqIEBhdXRob3IgPGEgaHJlZj1cIm1haWx0bzpqZW5zeXRAZ21haWwuY29tXCI+SmVucyBUYXlsb3I8L2E+XG4gKiBAc2VlIGh0dHA6Ly9naXRodWIuY29tL2hvbWVicmV3aW5nL2JyYXVoYXVzLWRpZmZcbiAqIEBhdXRob3IgPGEgaHJlZj1cIm1haWx0bzpnYXJ5LmNvdXJ0QGdtYWlsLmNvbVwiPkdhcnkgQ291cnQ8L2E+XG4gKiBAc2VlIGh0dHA6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4gKiBAYXV0aG9yIDxhIGhyZWY9XCJtYWlsdG86YWFwcGxlYnlAZ21haWwuY29tXCI+QXVzdGluIEFwcGxlYnk8L2E+XG4gKiBAc2VlIGh0dHA6Ly9zaXRlcy5nb29nbGUuY29tL3NpdGUvbXVybXVyaGFzaC9cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGNhY2hlO1xuXG4gICAgLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgYG5ld2AgdG8gdXNlIHRoZSBjYWNoZWQgb2JqZWN0IChnb29kIGZvclxuICAgIC8vIHNpbmdsZS10aHJlYWRlZCBlbnZpcm9ubWVudHMpLCBvciB3aXRoIGBuZXdgIHRvIGNyZWF0ZSBhIG5ldyBvYmplY3QuXG4gICAgLy9cbiAgICAvLyBAcGFyYW0ge3N0cmluZ30ga2V5IEEgVVRGLTE2IG9yIEFTQ0lJIHN0cmluZ1xuICAgIC8vIEBwYXJhbSB7bnVtYmVyfSBzZWVkIEFuIG9wdGlvbmFsIHBvc2l0aXZlIGludGVnZXJcbiAgICAvLyBAcmV0dXJuIHtvYmplY3R9IEEgTXVybXVySGFzaDMgb2JqZWN0IGZvciBpbmNyZW1lbnRhbCBoYXNoaW5nXG4gICAgZnVuY3Rpb24gTXVybXVySGFzaDMoa2V5LCBzZWVkKSB7XG4gICAgICAgIHZhciBtID0gdGhpcyBpbnN0YW5jZW9mIE11cm11ckhhc2gzID8gdGhpcyA6IGNhY2hlO1xuICAgICAgICBtLnJlc2V0KHNlZWQpXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbS5oYXNoKGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobSAhPT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gSW5jcmVtZW50YWxseSBhZGQgYSBzdHJpbmcgdG8gdGhpcyBoYXNoXG4gICAgLy9cbiAgICAvLyBAcGFyYW0ge3N0cmluZ30ga2V5IEEgVVRGLTE2IG9yIEFTQ0lJIHN0cmluZ1xuICAgIC8vIEByZXR1cm4ge29iamVjdH0gdGhpc1xuICAgIE11cm11ckhhc2gzLnByb3RvdHlwZS5oYXNoID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBoMSwgazEsIGksIHRvcCwgbGVuO1xuXG4gICAgICAgIGxlbiA9IGtleS5sZW5ndGg7XG4gICAgICAgIHRoaXMubGVuICs9IGxlbjtcblxuICAgICAgICBrMSA9IHRoaXMuazE7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBzd2l0Y2ggKHRoaXMucmVtKSB7XG4gICAgICAgICAgICBjYXNlIDA6IGsxIF49IGxlbiA+IGkgPyAoa2V5LmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmZmZikgOiAwO1xuICAgICAgICAgICAgY2FzZSAxOiBrMSBePSBsZW4gPiBpID8gKGtleS5jaGFyQ29kZUF0KGkrKykgJiAweGZmZmYpIDw8IDggOiAwO1xuICAgICAgICAgICAgY2FzZSAyOiBrMSBePSBsZW4gPiBpID8gKGtleS5jaGFyQ29kZUF0KGkrKykgJiAweGZmZmYpIDw8IDE2IDogMDtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBrMSBePSBsZW4gPiBpID8gKGtleS5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgMjQgOiAwO1xuICAgICAgICAgICAgICAgIGsxIF49IGxlbiA+IGkgPyAoa2V5LmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmYwMCkgPj4gOCA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbSA9IChsZW4gKyB0aGlzLnJlbSkgJiAzOyAvLyAmIDMgaXMgc2FtZSBhcyAlIDRcbiAgICAgICAgbGVuIC09IHRoaXMucmVtO1xuICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgICAgaDEgPSB0aGlzLmgxO1xuICAgICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgICAgICBrMSA9IChrMSAqIDB4MmQ1MSArIChrMSAmIDB4ZmZmZikgKiAweGNjOWUwMDAwKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgICAgICAgICAgazEgPSAoazEgPDwgMTUpIHwgKGsxID4+PiAxNyk7XG4gICAgICAgICAgICAgICAgazEgPSAoazEgKiAweDM1OTMgKyAoazEgJiAweGZmZmYpICogMHgxYjg3MDAwMCkgJiAweGZmZmZmZmZmO1xuXG4gICAgICAgICAgICAgICAgaDEgXj0gazE7XG4gICAgICAgICAgICAgICAgaDEgPSAoaDEgPDwgMTMpIHwgKGgxID4+PiAxOSk7XG4gICAgICAgICAgICAgICAgaDEgPSAoaDEgKiA1ICsgMHhlNjU0NmI2NCkgJiAweGZmZmZmZmZmO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsxID0gKChrZXkuY2hhckNvZGVBdChpKyspICYgMHhmZmZmKSkgXlxuICAgICAgICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpKyspICYgMHhmZmZmKSA8PCA4KSBeXG4gICAgICAgICAgICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KGkrKykgJiAweGZmZmYpIDw8IDE2KTtcbiAgICAgICAgICAgICAgICB0b3AgPSBrZXkuY2hhckNvZGVBdChpKyspO1xuICAgICAgICAgICAgICAgIGsxIF49ICgodG9wICYgMHhmZikgPDwgMjQpIF5cbiAgICAgICAgICAgICAgICAgICAgICAoKHRvcCAmIDB4ZmYwMCkgPj4gOCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGsxID0gMDtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5yZW0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IGsxIF49IChrZXkuY2hhckNvZGVBdChpICsgMikgJiAweGZmZmYpIDw8IDE2O1xuICAgICAgICAgICAgICAgIGNhc2UgMjogazEgXj0gKGtleS5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmZmZikgPDwgODtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IGsxIF49IChrZXkuY2hhckNvZGVBdChpKSAmIDB4ZmZmZik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaDEgPSBoMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuazEgPSBrMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8vIEdldCB0aGUgcmVzdWx0IG9mIHRoaXMgaGFzaFxuICAgIC8vXG4gICAgLy8gQHJldHVybiB7bnVtYmVyfSBUaGUgMzItYml0IGhhc2hcbiAgICBNdXJtdXJIYXNoMy5wcm90b3R5cGUucmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBrMSwgaDE7XG4gICAgICAgIFxuICAgICAgICBrMSA9IHRoaXMuazE7XG4gICAgICAgIGgxID0gdGhpcy5oMTtcblxuICAgICAgICBpZiAoazEgPiAwKSB7XG4gICAgICAgICAgICBrMSA9IChrMSAqIDB4MmQ1MSArIChrMSAmIDB4ZmZmZikgKiAweGNjOWUwMDAwKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgICAgICBrMSA9IChrMSA8PCAxNSkgfCAoazEgPj4+IDE3KTtcbiAgICAgICAgICAgIGsxID0gKGsxICogMHgzNTkzICsgKGsxICYgMHhmZmZmKSAqIDB4MWI4NzAwMDApICYgMHhmZmZmZmZmZjtcbiAgICAgICAgICAgIGgxIF49IGsxO1xuICAgICAgICB9XG5cbiAgICAgICAgaDEgXj0gdGhpcy5sZW47XG5cbiAgICAgICAgaDEgXj0gaDEgPj4+IDE2O1xuICAgICAgICBoMSA9IChoMSAqIDB4Y2E2YiArIChoMSAmIDB4ZmZmZikgKiAweDg1ZWIwMDAwKSAmIDB4ZmZmZmZmZmY7XG4gICAgICAgIGgxIF49IGgxID4+PiAxMztcbiAgICAgICAgaDEgPSAoaDEgKiAweGFlMzUgKyAoaDEgJiAweGZmZmYpICogMHhjMmIyMDAwMCkgJiAweGZmZmZmZmZmO1xuICAgICAgICBoMSBePSBoMSA+Pj4gMTY7XG5cbiAgICAgICAgcmV0dXJuIGgxID4+PiAwO1xuICAgIH07XG5cbiAgICAvLyBSZXNldCB0aGUgaGFzaCBvYmplY3QgZm9yIHJldXNlXG4gICAgLy9cbiAgICAvLyBAcGFyYW0ge251bWJlcn0gc2VlZCBBbiBvcHRpb25hbCBwb3NpdGl2ZSBpbnRlZ2VyXG4gICAgTXVybXVySGFzaDMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oc2VlZCkge1xuICAgICAgICB0aGlzLmgxID0gdHlwZW9mIHNlZWQgPT09ICdudW1iZXInID8gc2VlZCA6IDA7XG4gICAgICAgIHRoaXMucmVtID0gdGhpcy5rMSA9IHRoaXMubGVuID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8vIEEgY2FjaGVkIG9iamVjdCB0byB1c2UuIFRoaXMgY2FuIGJlIHNhZmVseSB1c2VkIGlmIHlvdSdyZSBpbiBhIHNpbmdsZS1cbiAgICAvLyB0aHJlYWRlZCBlbnZpcm9ubWVudCwgb3RoZXJ3aXNlIHlvdSBuZWVkIHRvIGNyZWF0ZSBuZXcgaGFzaGVzIHRvIHVzZS5cbiAgICBjYWNoZSA9IG5ldyBNdXJtdXJIYXNoMygpO1xuXG4gICAgaWYgKHR5cGVvZihtb2R1bGUpICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gTXVybXVySGFzaDM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5NdXJtdXJIYXNoMyA9IE11cm11ckhhc2gzO1xuICAgIH1cbn0oKSk7XG4iLCIvLyBUaGlzIGlzIG5vdCB0aGUgc2V0IG9mIGFsbCBwb3NzaWJsZSBzaWduYWxzLlxuLy9cbi8vIEl0IElTLCBob3dldmVyLCB0aGUgc2V0IG9mIGFsbCBzaWduYWxzIHRoYXQgdHJpZ2dlclxuLy8gYW4gZXhpdCBvbiBlaXRoZXIgTGludXggb3IgQlNEIHN5c3RlbXMuICBMaW51eCBpcyBhXG4vLyBzdXBlcnNldCBvZiB0aGUgc2lnbmFsIG5hbWVzIHN1cHBvcnRlZCBvbiBCU0QsIGFuZFxuLy8gdGhlIHVua25vd24gc2lnbmFscyBqdXN0IGZhaWwgdG8gcmVnaXN0ZXIsIHNvIHdlIGNhblxuLy8gY2F0Y2ggdGhhdCBlYXNpbHkgZW5vdWdoLlxuLy9cbi8vIERvbid0IGJvdGhlciB3aXRoIFNJR0tJTEwuICBJdCdzIHVuY2F0Y2hhYmxlLCB3aGljaFxuLy8gbWVhbnMgdGhhdCB3ZSBjYW4ndCBmaXJlIGFueSBjYWxsYmFja3MgYW55d2F5LlxuLy9cbi8vIElmIGEgdXNlciBkb2VzIGhhcHBlbiB0byByZWdpc3RlciBhIGhhbmRsZXIgb24gYSBub24tXG4vLyBmYXRhbCBzaWduYWwgbGlrZSBTSUdXSU5DSCBvciBzb21ldGhpbmcsIGFuZCB0aGVuXG4vLyBleGl0LCBpdCdsbCBlbmQgdXAgZmlyaW5nIGBwcm9jZXNzLmVtaXQoJ2V4aXQnKWAsIHNvXG4vLyB0aGUgaGFuZGxlciB3aWxsIGJlIGZpcmVkIGFueXdheS5cbi8vXG4vLyBTSUdCVVMsIFNJR0ZQRSwgU0lHU0VHViBhbmQgU0lHSUxMLCB3aGVuIG5vdCByYWlzZWRcbi8vIGFydGlmaWNpYWxseSwgaW5oZXJlbnRseSBsZWF2ZSB0aGUgcHJvY2VzcyBpbiBhXG4vLyBzdGF0ZSBmcm9tIHdoaWNoIGl0IGlzIG5vdCBzYWZlIHRvIHRyeSBhbmQgZW50ZXIgSlNcbi8vIGxpc3RlbmVycy5cbm1vZHVsZS5leHBvcnRzID0gW1xuICAnU0lHQUJSVCcsXG4gICdTSUdBTFJNJyxcbiAgJ1NJR0hVUCcsXG4gICdTSUdJTlQnLFxuICAnU0lHVEVSTSdcbl1cblxuaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicpIHtcbiAgbW9kdWxlLmV4cG9ydHMucHVzaChcbiAgICAnU0lHVlRBTFJNJyxcbiAgICAnU0lHWENQVScsXG4gICAgJ1NJR1hGU1onLFxuICAgICdTSUdVU1IyJyxcbiAgICAnU0lHVFJBUCcsXG4gICAgJ1NJR1NZUycsXG4gICAgJ1NJR1FVSVQnLFxuICAgICdTSUdJT1QnXG4gICAgLy8gc2hvdWxkIGRldGVjdCBwcm9maWxlciBhbmQgZW5hYmxlL2Rpc2FibGUgYWNjb3JkaW5nbHkuXG4gICAgLy8gc2VlICMyMVxuICAgIC8vICdTSUdQUk9GJ1xuICApXG59XG5cbmlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnbGludXgnKSB7XG4gIG1vZHVsZS5leHBvcnRzLnB1c2goXG4gICAgJ1NJR0lPJyxcbiAgICAnU0lHUE9MTCcsXG4gICAgJ1NJR1BXUicsXG4gICAgJ1NJR1NUS0ZMVCcsXG4gICAgJ1NJR1VOVVNFRCdcbiAgKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIik7IiwiLypcbiAqIFRoZSBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNiBKdWFuIENydXogVmlvdHRpLiBodHRwczovL2dpdGh1Yi5jb20vanZpb3R0aVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZWxlY3Ryb24gPSByZXF1aXJlKCdlbGVjdHJvbicpO1xuY29uc3QgYXBwID0gZWxlY3Ryb24uYXBwIHx8IGVsZWN0cm9uLnJlbW90ZS5hcHA7XG5cbi8qKlxuICogQHN1bW1hcnkgR2V0IHRoZSBkZWZhdWx0IGRhdGEgcGF0aFxuICogQGZ1bmN0aW9uXG4gKiBAcHVibGljXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gZGVmYXVsdCBkYXRhIHBhdGhcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgZGVmYXVsdERhdGFQYXRoID0gdXRpbHMuZ2V0RGVmYXVsdERhdGFQYXRoKClcbiAqL1xuZXhwb3J0cy5nZXREZWZhdWx0RGF0YVBhdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHBhdGguam9pbihhcHAuZ2V0UGF0aCgndXNlckRhdGEnKSwgJ3N0b3JhZ2UnKTtcbn07XG5cbi8qKlxuICogQHN1bW1hcnkgVGhlIGN1cnJlbnQgZGF0YSBwYXRoXG4gKiBAdHlwZSB7U3RyaW5nfVxuICovXG52YXIgY3VycmVudERhdGFQYXRoO1xuXG4vKipcbiAqIEBzdW1tYXJ5IFNldCBkZWZhdWx0IGRhdGEgcGF0aFxuICogQGZ1bmN0aW9uXG4gKiBAcHVibGljXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdG9yeSAtIGRpcmVjdG9yeVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG4gKiB1dGlscy5zZXREYXRhUGF0aChvcy50bXBkaXIoKSk7XG4gKi9cbmV4cG9ydHMuc2V0RGF0YVBhdGggPSBmdW5jdGlvbihkaXJlY3RvcnkpIHtcbiAgaWYgKF8uaXNOaWwoZGlyZWN0b3J5KSkge1xuICAgIGN1cnJlbnREYXRhUGF0aCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXBhdGguaXNBYnNvbHV0ZShkaXJlY3RvcnkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdXNlciBkYXRhIHBhdGggc2hvdWxkIGJlIGFuIGFic29sdXRlIGRpcmVjdG9yeScpO1xuICB9XG5cbiAgY3VycmVudERhdGFQYXRoID0gcGF0aC5ub3JtYWxpemUoZGlyZWN0b3J5KTtcbn07XG5cbi8qKlxuICogQHN1bW1hcnkgR2V0IGRhdGEgcGF0aFxuICogQGZ1bmN0aW9uXG4gKiBAcHVibGljXG4gKlxuICogQHJldHVybnMge1N0cmluZ3N9IGRhdGEgcGF0aFxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBkYXRhUGF0aCA9IHV0aWxzLmdldERhdGFQYXRoKCk7XG4gKiBjb25zb2xlLmxvZyhkYXRhUGF0aCk7XG4gKi9cbmV4cG9ydHMuZ2V0RGF0YVBhdGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGN1cnJlbnREYXRhUGF0aCB8fCBleHBvcnRzLmdldERlZmF1bHREYXRhUGF0aCgpO1xufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBHZXQgc3RvcmFnZSBmaWxlIG5hbWUgZm9yIGEga2V5XG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IC0ga2V5XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmRhdGFQYXRoXSAtIGN1c3RvbSBkYXRhIHBhdGhcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZpbGUgbmFtZVxuICpcbiAqIEBleGFtcGxlXG4gKiBsZXQgZmlsZU5hbWUgPSB1dGlscy5nZXRGaWxlTmFtZSgnZm9vJyk7XG4gKiBjb25zb2xlLmxvZyhmaWxlTmFtZSk7XG4gKi9cbmV4cG9ydHMuZ2V0RmlsZU5hbWUgPSBmdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKCFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcga2V5Jyk7XG4gIH1cblxuICBpZiAoIV8uaXNTdHJpbmcoa2V5KSB8fCBrZXkudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBrZXknKTtcbiAgfVxuXG4gIC8vIFRyaWNrIHRvIHByZXZlbnQgYWRkaW5nIHRoZSBgLmpzb25gIHR3aWNlXG4gIC8vIGlmIHRoZSBrZXkgYWxyZWFkeSBjb250YWlucyBpdC5cbiAgY29uc3Qga2V5RmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGtleSwgJy5qc29uJykgKyAnLmpzb24nO1xuXG4gIC8vIFByZXZlbnQgRU5PRU5UIGFuZCBvdGhlciBzaW1pbGFyIGVycm9ycyB3aGVuIHVzaW5nXG4gIC8vIHJlc2VydmVkIGNoYXJhY3RlcnMgaW4gV2luZG93cyBmaWxlbmFtZXMuXG4gIC8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlsZW5hbWUjUmVzZXJ2ZWQlNUZjaGFyYWN0ZXJzJTVGYW5kJTVGd29yZHNcbiAgY29uc3QgZXNjYXBlZEZpbGVOYW1lID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleUZpbGVOYW1lKVxuICAgIC5yZXBsYWNlKC9cXCovZywgJy0nKS5yZXBsYWNlKC8lMjAvZywgJyAnKTtcblxuICByZXR1cm4gcGF0aC5qb2luKG9wdGlvbnMuZGF0YVBhdGggfHwgZXhwb3J0cy5nZXREYXRhUGF0aCgpLCBlc2NhcGVkRmlsZU5hbWUpO1xufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGxvY2sgZmlsZSBvdXQgb2YgYSBmaWxlIG5hbWVcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlTmFtZSAtIGZpbGUgbmFtZVxuICogQHJldHVybnMge1N0cmluZ30gbG9jayBmaWxlIG5hbWVcbiAqXG4gKiBAZXhhbXBsZVxuICogbGV0IGxvY2tGaWxlTmFtZSA9IHV0aWxzLmdldExvY2tGaWxlTmFtZSgnZm9vJyk7XG4gKiBjb25zb2xlLmxvZyhsb2NrRmlsZU5hbWUpO1xuICovXG5leHBvcnRzLmdldExvY2tGaWxlTmFtZSA9IGZ1bmN0aW9uKGZpbGVOYW1lKSB7XG4gIHJldHVybiBmaWxlTmFtZSArICcubG9jayc7XG59O1xuIiwiLypcbiAqIFRoZSBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxOCBKdWFuIENydXogVmlvdHRpLiBodHRwczovL2dpdGh1Yi5jb20vanZpb3R0aVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsb2NrRmlsZSA9IHJlcXVpcmUoJ2xvY2tmaWxlJyk7XG5cbi8qKlxuICogQHN1bW1hcnkgTG9jayBvcHRpb25zXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgbG9ja09wdGlvbnMgPSB7XG4gIHN0YWxlOiAxMDAwMCxcbiAgcmV0cmllczogMTAwMCxcbiAgcmV0cnlXYWl0OiA1MFxufTtcblxuLyoqXG4gKiBAc3VtbWFyeSBDcmVhdGUgYSBsb2NrIGZpbGVcbiAqIEBmdW5jdGlvblxuICogQHB1YmxpY1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlIC0gbG9jayBmaWxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGNhbGxiYWNrIChlcnJvcilcbiAqXG4gKiBAZXhhbXBsZVxuICogbG9jay5sb2NrKCdmb28ubG9jaycsIGZ1bmN0aW9uKGVycm9yKSB7XG4gKiAgIGlmIChlcnJvcikge1xuICogICAgIHRocm93IGVycm9yO1xuICogICB9XG4gKiB9KVxuICovXG5leHBvcnRzLmxvY2sgPSBmdW5jdGlvbihmaWxlLCBjYWxsYmFjaywgdGltZXMpIHtcbiAgdGltZXMgPSB0aW1lcyB8fCAwO1xuXG4gIGxvY2tGaWxlLmxvY2soZmlsZSwgbG9ja09wdGlvbnMsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgaWYgKGVycm9yICYmIGVycm9yLmNvZGUgPT09ICdFUEVSTScgJiYgdGltZXMgPCAxMCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwb3J0cy51bmxvY2soZmlsZSwgY2FsbGJhY2ssIHRpbWVzICsgMSk7XG4gICAgICB9LCAxMDAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHN1bW1hcnkgVW5sb2NrIGEgbG9jayBmaWxlXG4gKiBAZnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmlsZSAtIGxvY2sgZmlsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBjYWxsYmFjayAoZXJyb3IpXG4gKlxuICogQGV4YW1wbGVcbiAqIGxvY2sudW5sb2NrKCdmb28ubG9jaycsIGZ1bmN0aW9uKGVycm9yKSB7XG4gKiAgIGlmIChlcnJvcikge1xuICogICAgIHRocm93IGVycm9yO1xuICogICB9XG4gKiB9KVxuICovXG5leHBvcnRzLnVubG9jayA9IGZ1bmN0aW9uKGZpbGUsIGNhbGxiYWNrLCB0aW1lcykge1xuICB0aW1lcyA9IHRpbWVzIHx8IDA7XG5cbiAgbG9ja0ZpbGUudW5sb2NrKGZpbGUsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgaWYgKGVycm9yICYmIGVycm9yLmNvZGUgPT09ICdFUEVSTScgJiYgdGltZXMgPCAxMCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwb3J0cy51bmxvY2soZmlsZSwgY2FsbGJhY2ssIHRpbWVzICsgMSk7XG4gICAgICB9LCAxMDAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICB9KTtcbn07XG4iLCJ2YXIgZnMgPSByZXF1aXJlKCdmcycpXG5cbnZhciB3eCA9ICd3eCdcbmlmIChwcm9jZXNzLnZlcnNpb24ubWF0Y2goL152MFxcLlswLTZdLykpIHtcbiAgdmFyIGMgPSByZXF1aXJlKCdjb25zdGFudHMnKVxuICB3eCA9IGMuT19UUlVOQyB8IGMuT19DUkVBVCB8IGMuT19XUk9OTFkgfCBjLk9fRVhDTFxufVxuXG52YXIgb3MgPSByZXF1aXJlKCdvcycpXG5leHBvcnRzLmZpbGV0aW1lID0gJ2N0aW1lJ1xuaWYgKG9zLnBsYXRmb3JtKCkgPT0gXCJ3aW4zMlwiKSB7XG4gIGV4cG9ydHMuZmlsZXRpbWUgPSAnbXRpbWUnXG59XG5cbnZhciBkZWJ1Z1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJylcbmlmICh1dGlsLmRlYnVnbG9nKVxuICBkZWJ1ZyA9IHV0aWwuZGVidWdsb2coJ0xPQ0tGSUxFJylcbmVsc2UgaWYgKC9cXGJsb2NrZmlsZVxcYi9pLnRlc3QocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRykpXG4gIGRlYnVnID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1zZyA9IHV0aWwuZm9ybWF0LmFwcGx5KHV0aWwsIGFyZ3VtZW50cylcbiAgICBjb25zb2xlLmVycm9yKCdMT0NLRklMRSAlZCAlcycsIHByb2Nlc3MucGlkLCBtc2cpXG4gIH1cbmVsc2VcbiAgZGVidWcgPSBmdW5jdGlvbigpIHt9XG5cbnZhciBsb2NrcyA9IHt9XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5IChvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApXG59XG5cbnZhciBvbkV4aXQgPSByZXF1aXJlKCdzaWduYWwtZXhpdCcpXG5vbkV4aXQoZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnZXhpdCBsaXN0ZW5lcicpXG4gIC8vIGNsZWFudXBcbiAgT2JqZWN0LmtleXMobG9ja3MpLmZvckVhY2goZXhwb3J0cy51bmxvY2tTeW5jKVxufSlcblxuLy8gWFhYIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMzU1NVxuLy8gUmVtb3ZlIHdoZW4gbm9kZSAwLjggaXMgZGVwcmVjYXRlZC5cbmlmICgvXnYwXFwuWzAtOF1cXC4vLnRlc3QocHJvY2Vzcy52ZXJzaW9uKSkge1xuICBkZWJ1ZygndW5jYXVnaHRFeGNlcHRpb24sIHZlcnNpb24gPSAlcycsIHByb2Nlc3MudmVyc2lvbilcbiAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBmdW5jdGlvbiBIIChlcikge1xuICAgIGRlYnVnKCd1bmNhdWdodEV4Y2VwdGlvbicpXG4gICAgdmFyIGwgPSBwcm9jZXNzLmxpc3RlbmVycygndW5jYXVnaHRFeGNlcHRpb24nKS5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgIHJldHVybiBoICE9PSBIXG4gICAgfSlcbiAgICBpZiAoIWwubGVuZ3RoKSB7XG4gICAgICAvLyBjbGVhbnVwXG4gICAgICB0cnkgeyBPYmplY3Qua2V5cyhsb2NrcykuZm9yRWFjaChleHBvcnRzLnVubG9ja1N5bmMpIH0gY2F0Y2ggKGUpIHt9XG4gICAgICBwcm9jZXNzLnJlbW92ZUxpc3RlbmVyKCd1bmNhdWdodEV4Y2VwdGlvbicsIEgpXG4gICAgICB0aHJvdyBlclxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0cy51bmxvY2sgPSBmdW5jdGlvbiAocGF0aCwgY2IpIHtcbiAgZGVidWcoJ3VubG9jaycsIHBhdGgpXG4gIC8vIGJlc3QtZWZmb3J0LiAgdW5sb2NraW5nIGFuIGFscmVhZHktdW5sb2NrZWQgbG9jayBpcyBhIG5vb3BcbiAgZGVsZXRlIGxvY2tzW3BhdGhdXG4gIGZzLnVubGluayhwYXRoLCBmdW5jdGlvbiAodW5saW5rRXIpIHsgY2IgJiYgY2IoKSB9KVxufVxuXG5leHBvcnRzLnVubG9ja1N5bmMgPSBmdW5jdGlvbiAocGF0aCkge1xuICBkZWJ1ZygndW5sb2NrU3luYycsIHBhdGgpXG4gIC8vIGJlc3QtZWZmb3J0LiAgdW5sb2NraW5nIGFuIGFscmVhZHktdW5sb2NrZWQgbG9jayBpcyBhIG5vb3BcbiAgdHJ5IHsgZnMudW5saW5rU3luYyhwYXRoKSB9IGNhdGNoIChlcikge31cbiAgZGVsZXRlIGxvY2tzW3BhdGhdXG59XG5cblxuLy8gaWYgdGhlIGZpbGUgY2FuIGJlIG9wZW5lZCBpbiByZWFkb25seSBtb2RlLCB0aGVuIGl0J3MgdGhlcmUuXG4vLyBpZiB0aGUgZXJyb3IgaXMgc29tZXRoaW5nIG90aGVyIHRoYW4gRU5PRU5ULCB0aGVuIGl0J3Mgbm90LlxuZXhwb3J0cy5jaGVjayA9IGZ1bmN0aW9uIChwYXRoLCBvcHRzLCBjYikge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIGNiID0gb3B0cywgb3B0cyA9IHt9XG4gIGRlYnVnKCdjaGVjaycsIHBhdGgsIG9wdHMpXG4gIGZzLm9wZW4ocGF0aCwgJ3InLCBmdW5jdGlvbiAoZXIsIGZkKSB7XG4gICAgaWYgKGVyKSB7XG4gICAgICBpZiAoZXIuY29kZSAhPT0gJ0VOT0VOVCcpIHJldHVybiBjYihlcilcbiAgICAgIHJldHVybiBjYihudWxsLCBmYWxzZSlcbiAgICB9XG5cbiAgICBpZiAoIW9wdHMuc3RhbGUpIHtcbiAgICAgIHJldHVybiBmcy5jbG9zZShmZCwgZnVuY3Rpb24gKGVyKSB7XG4gICAgICAgIHJldHVybiBjYihlciwgdHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnMuZnN0YXQoZmQsIGZ1bmN0aW9uIChlciwgc3QpIHtcbiAgICAgIGlmIChlcikgcmV0dXJuIGZzLmNsb3NlKGZkLCBmdW5jdGlvbiAoZXIyKSB7XG4gICAgICAgIHJldHVybiBjYihlcilcbiAgICAgIH0pXG5cbiAgICAgIGZzLmNsb3NlKGZkLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgdmFyIGFnZSA9IERhdGUubm93KCkgLSBzdFtleHBvcnRzLmZpbGV0aW1lXS5nZXRUaW1lKClcbiAgICAgICAgcmV0dXJuIGNiKGVyLCBhZ2UgPD0gb3B0cy5zdGFsZSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0cy5jaGVja1N5bmMgPSBmdW5jdGlvbiAocGF0aCwgb3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fVxuICBkZWJ1ZygnY2hlY2tTeW5jJywgcGF0aCwgb3B0cylcbiAgaWYgKG9wdHMud2FpdCkge1xuICAgIHRocm93IG5ldyBFcnJvcignb3B0cy53YWl0IG5vdCBzdXBwb3J0ZWQgc3luYyBmb3Igb2J2aW91cyByZWFzb25zJylcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGZkID0gZnMub3BlblN5bmMocGF0aCwgJ3InKVxuICB9IGNhdGNoIChlcikge1xuICAgIGlmIChlci5jb2RlICE9PSAnRU5PRU5UJykgdGhyb3cgZXJcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmICghb3B0cy5zdGFsZSkge1xuICAgIHRyeSB7IGZzLmNsb3NlU3luYyhmZCkgfSBjYXRjaCAoZXIpIHt9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIGZpbGUgZXhpc3RzLiAgaG93ZXZlciwgbWlnaHQgYmUgc3RhbGVcbiAgaWYgKG9wdHMuc3RhbGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHN0ID0gZnMuZnN0YXRTeW5jKGZkKVxuICAgIH0gZmluYWxseSB7XG4gICAgICBmcy5jbG9zZVN5bmMoZmQpXG4gICAgfVxuICAgIHZhciBhZ2UgPSBEYXRlLm5vdygpIC0gc3RbZXhwb3J0cy5maWxldGltZV0uZ2V0VGltZSgpXG4gICAgcmV0dXJuIChhZ2UgPD0gb3B0cy5zdGFsZSlcbiAgfVxufVxuXG5cblxudmFyIHJlcSA9IDFcbmV4cG9ydHMubG9jayA9IGZ1bmN0aW9uIChwYXRoLCBvcHRzLCBjYikge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIGNiID0gb3B0cywgb3B0cyA9IHt9XG4gIG9wdHMucmVxID0gb3B0cy5yZXEgfHwgcmVxKytcbiAgZGVidWcoJ2xvY2snLCBwYXRoLCBvcHRzKVxuICBvcHRzLnN0YXJ0ID0gb3B0cy5zdGFydCB8fCBEYXRlLm5vdygpXG5cbiAgaWYgKHR5cGVvZiBvcHRzLnJldHJpZXMgPT09ICdudW1iZXInICYmIG9wdHMucmV0cmllcyA+IDApIHtcbiAgICBkZWJ1ZygnaGFzIHJldHJpZXMnLCBvcHRzLnJldHJpZXMpXG4gICAgdmFyIHJldHJpZXMgPSBvcHRzLnJldHJpZXNcbiAgICBvcHRzLnJldHJpZXMgPSAwXG4gICAgY2IgPSAoZnVuY3Rpb24gKG9yaWcpIHsgcmV0dXJuIGZ1bmN0aW9uIGNiIChlciwgZmQpIHtcbiAgICAgIGRlYnVnKCdyZXRyeS1tdXRhdGVkIGNhbGxiYWNrJylcbiAgICAgIHJldHJpZXMgLT0gMVxuICAgICAgaWYgKCFlciB8fCByZXRyaWVzIDwgMCkgcmV0dXJuIG9yaWcoZXIsIGZkKVxuXG4gICAgICBkZWJ1ZygnbG9jayByZXRyeScsIHBhdGgsIG9wdHMpXG5cbiAgICAgIGlmIChvcHRzLnJldHJ5V2FpdCkgc2V0VGltZW91dChyZXRyeSwgb3B0cy5yZXRyeVdhaXQpXG4gICAgICBlbHNlIHJldHJ5KClcblxuICAgICAgZnVuY3Rpb24gcmV0cnkgKCkge1xuICAgICAgICBvcHRzLnN0YXJ0ID0gRGF0ZS5ub3coKVxuICAgICAgICBkZWJ1ZygncmV0cnlpbmcnLCBvcHRzLnN0YXJ0KVxuICAgICAgICBleHBvcnRzLmxvY2socGF0aCwgb3B0cywgY2IpXG4gICAgICB9XG4gICAgfX0pKGNiKVxuICB9XG5cbiAgLy8gdHJ5IHRvIGVuZ2FnZSB0aGUgbG9jay5cbiAgLy8gaWYgdGhpcyBzdWNjZWVkcywgdGhlbiB3ZSdyZSBpbiBidXNpbmVzcy5cbiAgZnMub3BlbihwYXRoLCB3eCwgZnVuY3Rpb24gKGVyLCBmZCkge1xuICAgIGlmICghZXIpIHtcbiAgICAgIGRlYnVnKCdsb2NrZWQnLCBwYXRoLCBmZClcbiAgICAgIGxvY2tzW3BhdGhdID0gZmRcbiAgICAgIHJldHVybiBmcy5jbG9zZShmZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2IoKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBkZWJ1ZygnZmFpbGVkIHRvIGFjcXVpcmUgbG9jaycsIGVyKVxuXG4gICAgLy8gc29tZXRoaW5nIG90aGVyIHRoYW4gXCJjdXJyZW50bHkgbG9ja2VkXCJcbiAgICAvLyBtYXliZSBlcGVybSBvciBzb21ldGhpbmcuXG4gICAgaWYgKGVyLmNvZGUgIT09ICdFRVhJU1QnKSB7XG4gICAgICBkZWJ1Zygnbm90IEVFWElTVCBlcnJvcicsIGVyKVxuICAgICAgcmV0dXJuIGNiKGVyKVxuICAgIH1cblxuICAgIC8vIHNvbWVvbmUncyBnb3QgdGhpcyBvbmUuICBzZWUgaWYgaXQncyB2YWxpZC5cbiAgICBpZiAoIW9wdHMuc3RhbGUpIHJldHVybiBub3RTdGFsZShlciwgcGF0aCwgb3B0cywgY2IpXG5cbiAgICByZXR1cm4gbWF5YmVTdGFsZShlciwgcGF0aCwgb3B0cywgZmFsc2UsIGNiKVxuICB9KVxuICBkZWJ1ZygnbG9jayByZXR1cm4nKVxufVxuXG5cbi8vIFN0YWxlbmVzcyBjaGVja2luZyBhbGdvcml0aG1cbi8vIDEuIGFjcXVpcmUgJGxvY2ssIGZhaWxcbi8vIDIuIHN0YXQgJGxvY2ssIGZpbmQgdGhhdCBpdCBpcyBzdGFsZVxuLy8gMy4gYWNxdWlyZSAkbG9jay5TVEFMRVxuLy8gNC4gc3RhdCAkbG9jaywgYXNzZXJ0IHRoYXQgaXQgaXMgc3RpbGwgc3RhbGVcbi8vIDUuIHVubGluayAkbG9ja1xuLy8gNi4gbGluayAkbG9jay5TVEFMRSAkbG9ja1xuLy8gNy4gdW5saW5rICRsb2NrLlNUQUxFXG4vLyBPbiBhbnkgZmFpbHVyZSwgY2xlYW4gdXAgd2hhdGV2ZXIgd2UndmUgZG9uZSwgYW5kIHJhaXNlIHRoZSBlcnJvci5cbmZ1bmN0aW9uIG1heWJlU3RhbGUgKG9yaWdpbmFsRXIsIHBhdGgsIG9wdHMsIGhhc1N0YWxlTG9jaywgY2IpIHtcbiAgZnMuc3RhdChwYXRoLCBmdW5jdGlvbiAoc3RhdEVyLCBzdCkge1xuICAgIGlmIChzdGF0RXIpIHtcbiAgICAgIGlmIChzdGF0RXIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgLy8gZXhwaXJlZCBhbHJlYWR5IVxuICAgICAgICBvcHRzLnN0YWxlID0gZmFsc2VcbiAgICAgICAgZGVidWcoJ2xvY2sgc3RhbGUgZW5vZW50IHJldHJ5JywgcGF0aCwgb3B0cylcbiAgICAgICAgZXhwb3J0cy5sb2NrKHBhdGgsIG9wdHMsIGNiKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHJldHVybiBjYihzdGF0RXIpXG4gICAgfVxuXG4gICAgdmFyIGFnZSA9IERhdGUubm93KCkgLSBzdFtleHBvcnRzLmZpbGV0aW1lXS5nZXRUaW1lKClcbiAgICBpZiAoYWdlIDw9IG9wdHMuc3RhbGUpIHJldHVybiBub3RTdGFsZShvcmlnaW5hbEVyLCBwYXRoLCBvcHRzLCBjYilcblxuICAgIGRlYnVnKCdsb2NrIHN0YWxlJywgcGF0aCwgb3B0cylcbiAgICBpZiAoaGFzU3RhbGVMb2NrKSB7XG4gICAgICBleHBvcnRzLnVubG9jayhwYXRoLCBmdW5jdGlvbiAoZXIpIHtcbiAgICAgICAgaWYgKGVyKSByZXR1cm4gY2IoZXIpXG4gICAgICAgIGRlYnVnKCdsb2NrIHN0YWxlIHJldHJ5JywgcGF0aCwgb3B0cylcbiAgICAgICAgZnMubGluayhwYXRoICsgJy5TVEFMRScsIHBhdGgsIGZ1bmN0aW9uIChlcikge1xuICAgICAgICAgIGZzLnVubGluayhwYXRoICsgJy5TVEFMRScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGJlc3QgZWZmb3J0LiAgaWYgdGhlIHVubGluayBmYWlscywgb2ggd2VsbC5cbiAgICAgICAgICAgIGNiKGVyKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnYWNxdWlyZSAuU1RBTEUgZmlsZSBsb2NrJywgb3B0cylcbiAgICAgIGV4cG9ydHMubG9jayhwYXRoICsgJy5TVEFMRScsIG9wdHMsIGZ1bmN0aW9uIChlcikge1xuICAgICAgICBpZiAoZXIpIHJldHVybiBjYihlcilcbiAgICAgICAgbWF5YmVTdGFsZShvcmlnaW5hbEVyLCBwYXRoLCBvcHRzLCB0cnVlLCBjYilcbiAgICAgIH0pXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiBub3RTdGFsZSAoZXIsIHBhdGgsIG9wdHMsIGNiKSB7XG4gIGRlYnVnKCdub3RTdGFsZScsIHBhdGgsIG9wdHMpXG5cbiAgLy8gaWYgd2UgY2FuJ3Qgd2FpdCwgdGhlbiBqdXN0IGNhbGwgaXQgYSBmYWlsdXJlXG4gIGlmICh0eXBlb2Ygb3B0cy53YWl0ICE9PSAnbnVtYmVyJyB8fCBvcHRzLndhaXQgPD0gMCkge1xuICAgIGRlYnVnKCdub3RTdGFsZSwgd2FpdCBpcyBub3QgYSBudW1iZXInKVxuICAgIHJldHVybiBjYihlcilcbiAgfVxuXG4gIC8vIHBvbGwgZm9yIHNvbWUgbXMgZm9yIHRoZSBsb2NrIHRvIGNsZWFyXG4gIHZhciBub3cgPSBEYXRlLm5vdygpXG4gIHZhciBzdGFydCA9IG9wdHMuc3RhcnQgfHwgbm93XG4gIHZhciBlbmQgPSBzdGFydCArIG9wdHMud2FpdFxuXG4gIGlmIChlbmQgPD0gbm93KVxuICAgIHJldHVybiBjYihlcilcblxuICBkZWJ1Zygnbm93PSVkLCB3YWl0IHVudGlsICVkIChkZWx0YT0lZCknLCBzdGFydCwgZW5kLCBlbmQtc3RhcnQpXG4gIHZhciB3YWl0ID0gTWF0aC5taW4oZW5kIC0gc3RhcnQsIG9wdHMucG9sbFBlcmlvZCB8fCAxMDApXG4gIHZhciB0aW1lciA9IHNldFRpbWVvdXQocG9sbCwgd2FpdClcblxuICBmdW5jdGlvbiBwb2xsICgpIHtcbiAgICBkZWJ1Zygnbm90U3RhbGUsIHBvbGxpbmcnLCBwYXRoLCBvcHRzKVxuICAgIGV4cG9ydHMubG9jayhwYXRoLCBvcHRzLCBjYilcbiAgfVxufVxuXG5leHBvcnRzLmxvY2tTeW5jID0gZnVuY3Rpb24gKHBhdGgsIG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge31cbiAgb3B0cy5yZXEgPSBvcHRzLnJlcSB8fCByZXErK1xuICBkZWJ1ZygnbG9ja1N5bmMnLCBwYXRoLCBvcHRzKVxuICBpZiAob3B0cy53YWl0IHx8IG9wdHMucmV0cnlXYWl0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcHRzLndhaXQgbm90IHN1cHBvcnRlZCBzeW5jIGZvciBvYnZpb3VzIHJlYXNvbnMnKVxuICB9XG5cbiAgdHJ5IHtcbiAgICB2YXIgZmQgPSBmcy5vcGVuU3luYyhwYXRoLCB3eClcbiAgICBsb2Nrc1twYXRoXSA9IGZkXG4gICAgdHJ5IHsgZnMuY2xvc2VTeW5jKGZkKSB9IGNhdGNoIChlcikge31cbiAgICBkZWJ1ZygnbG9ja2VkIHN5bmMhJywgcGF0aCwgZmQpXG4gICAgcmV0dXJuXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgaWYgKGVyLmNvZGUgIT09ICdFRVhJU1QnKSByZXR1cm4gcmV0cnlUaHJvdyhwYXRoLCBvcHRzLCBlcilcblxuICAgIGlmIChvcHRzLnN0YWxlKSB7XG4gICAgICB2YXIgc3QgPSBmcy5zdGF0U3luYyhwYXRoKVxuICAgICAgdmFyIGN0ID0gc3RbZXhwb3J0cy5maWxldGltZV0uZ2V0VGltZSgpXG4gICAgICBpZiAoIShjdCAlIDEwMDApICYmIChvcHRzLnN0YWxlICUgMTAwMCkpIHtcbiAgICAgICAgLy8gcHJvYmFibHkgZG9uJ3QgaGF2ZSBzdWJzZWNvbmQgcmVzb2x1dGlvbi5cbiAgICAgICAgLy8gcm91bmQgdXAgdGhlIHN0YWxlbmVzcyBpbmRpY2F0b3IuXG4gICAgICAgIC8vIFllcywgdGhpcyB3aWxsIGJlIHdyb25nIDEvMTAwMCB0aW1lcyBvbiBwbGF0Zm9ybXNcbiAgICAgICAgLy8gd2l0aCBzdWJzZWNvbmQgc3RhdCBwcmVjaXNpb24sIGJ1dCB0aGF0J3MgYWNjZXB0YWJsZVxuICAgICAgICAvLyBpbiBleGNoYW5nZSBmb3Igbm90IG1pc3Rha2VubHkgcmVtb3ZpbmcgbG9ja3Mgb25cbiAgICAgICAgLy8gbW9zdCBvdGhlciBzeXN0ZW1zLlxuICAgICAgICBvcHRzLnN0YWxlID0gMTAwMCAqIE1hdGguY2VpbChvcHRzLnN0YWxlIC8gMTAwMClcbiAgICAgIH1cbiAgICAgIHZhciBhZ2UgPSBEYXRlLm5vdygpIC0gY3RcbiAgICAgIGlmIChhZ2UgPiBvcHRzLnN0YWxlKSB7XG4gICAgICAgIGRlYnVnKCdsb2NrU3luYyBzdGFsZScsIHBhdGgsIG9wdHMsIGFnZSlcbiAgICAgICAgZXhwb3J0cy51bmxvY2tTeW5jKHBhdGgpXG4gICAgICAgIHJldHVybiBleHBvcnRzLmxvY2tTeW5jKHBhdGgsIG9wdHMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmFpbGVkIHRvIGxvY2shXG4gICAgZGVidWcoJ2ZhaWxlZCB0byBsb2NrJywgcGF0aCwgb3B0cywgZXIpXG4gICAgcmV0dXJuIHJldHJ5VGhyb3cocGF0aCwgb3B0cywgZXIpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmV0cnlUaHJvdyAocGF0aCwgb3B0cywgZXIpIHtcbiAgaWYgKHR5cGVvZiBvcHRzLnJldHJpZXMgPT09ICdudW1iZXInICYmIG9wdHMucmV0cmllcyA+IDApIHtcbiAgICB2YXIgbmV3UlQgPSBvcHRzLnJldHJpZXMgLSAxXG4gICAgZGVidWcoJ3JldHJ5VGhyb3cnLCBwYXRoLCBvcHRzLCBuZXdSVClcbiAgICBvcHRzLnJldHJpZXMgPSBuZXdSVFxuICAgIHJldHVybiBleHBvcnRzLmxvY2tTeW5jKHBhdGgsIG9wdHMpXG4gIH1cbiAgdGhyb3cgZXJcbn1cblxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi9hcHBNZW51XCIpO1xyXG52YXIgcGFnZXNCdWlsZGVyXzEgPSByZXF1aXJlKFwiLi9wYWdlc0J1aWxkZXJcIik7XHJcbmZ1bmN0aW9uIGF2YXRhckJ1dHRvbihfYSkge1xyXG4gICAgdmFyIG5ld0F2YXRhclNlbGVjdG9ycyA9IF9hLm5ld0F2YXRhclNlbGVjdG9ycywgZm9ybVN0YXRlID0gX2EuZm9ybVN0YXRlO1xyXG4gICAgdmFyIG1haW5BdmF0YXJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5ld0F2YXRhclNlbGVjdG9ycy5idXR0b25TZWxlY3Rvcik7XHJcbiAgICB2YXIgYXZhdGFyQ2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5ld0F2YXRhclNlbGVjdG9ycy5hdmF0YXJDbG9zZVNlbGVjdG9yKTtcclxuICAgIHZhciBwbGF5ZXJBdmF0YXJMb2FkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuZXdBdmF0YXJTZWxlY3RvcnMucGxheWVyQXZhdGFyTG9hZFNlbGVjdG9yKTtcclxuICAgIHZhciBhdmF0YXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5ld0F2YXRhclNlbGVjdG9ycy5hdmF0YXJCb3hTZWxlY3Rvcik7XHJcbiAgICB2YXIgYXZhdGFySW5uZXJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5ld0F2YXRhclNlbGVjdG9ycy5hdmF0YXJJbm5lckJveFNlbGVjdG9yKTtcclxuICAgIHZhciBkaXNwbGF5U2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5ld0F2YXRhclNlbGVjdG9ycy5kaXNwbGF5U2VsZWN0b3IpO1xyXG4gICAgdmFyIGF2YXRhckFyZWFTZWxlY3RvcnMgPSB7XHJcbiAgICAgICAgbWFpbkF2YXRhckJ1dHRvbjogbWFpbkF2YXRhckJ1dHRvbixcclxuICAgICAgICBhdmF0YXJDbG9zZTogYXZhdGFyQ2xvc2UsXHJcbiAgICAgICAgcGxheWVyQXZhdGFyTG9hZDogcGxheWVyQXZhdGFyTG9hZCxcclxuICAgICAgICBhdmF0YXJCb3g6IGF2YXRhckJveCxcclxuICAgICAgICBhdmF0YXJJbm5lckJveDogYXZhdGFySW5uZXJCb3gsXHJcbiAgICAgICAgZGlzcGxheVNlbGVjdG9yOiBkaXNwbGF5U2VsZWN0b3JcclxuICAgIH07XHJcbiAgICBtYWluQXZhdGFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0b2dnbGVBdmF0YXJBcmVhKHsgYXZhdGFyQm94U2VsZWN0b3I6IGF2YXRhckJveCwgZm9ybVN0YXRlOiBmb3JtU3RhdGUgfSk7XHJcbiAgICAgICAgc2hvd0FsbEF2YXRhcnMoeyBhdmF0YXJJbm5lckJveFNlbGVjdG9yOiBhdmF0YXJBcmVhU2VsZWN0b3JzLCBmb3JtU3RhdGU6IGZvcm1TdGF0ZSxcclxuICAgICAgICAgICAgYXZhdGFyQXJlYVNlbGVjdG9yczogYXZhdGFyQXJlYVNlbGVjdG9ycyB9KTtcclxuICAgIH0pO1xyXG4gICAgYXZhdGFyQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRvZ2dsZUF2YXRhckFyZWEoeyBhdmF0YXJCb3hTZWxlY3RvcjogYXZhdGFyQm94LCBmb3JtU3RhdGU6IGZvcm1TdGF0ZSB9KTtcclxuICAgIH0pO1xyXG4gICAgcGxheWVyQXZhdGFyTG9hZC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29udmVydFBpY3R1cmVUb0RhdGEoe1xyXG4gICAgICAgICAgICBhdmF0YXJBcmVhU2VsZWN0b3JzOiBhdmF0YXJBcmVhU2VsZWN0b3JzLCBwaWN0dXJlOiB0aGlzLCBmb3JtU3RhdGU6IGZvcm1TdGF0ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5hdmF0YXJCdXR0b24gPSBhdmF0YXJCdXR0b247XHJcbmZ1bmN0aW9uIHNob3dBbGxBdmF0YXJzKF9hKSB7XHJcbiAgICB2YXIgYXZhdGFySW5uZXJCb3hTZWxlY3RvciA9IF9hLmF2YXRhcklubmVyQm94U2VsZWN0b3IsIGZvcm1TdGF0ZSA9IF9hLmZvcm1TdGF0ZSwgYXZhdGFyQXJlYVNlbGVjdG9ycyA9IF9hLmF2YXRhckFyZWFTZWxlY3RvcnM7XHJcbiAgICB2YXIgYXZhdGFySW5uZXJCb3ggPSBhdmF0YXJJbm5lckJveFNlbGVjdG9yLmF2YXRhcklubmVyQm94O1xyXG4gICAgdmFyIGF2YXRhclBpY3R1cmVzID0gWydhdjEucG5nJywgJ2F2Mi5wbmcnLCAnYXYzLnBuZycsICdhdjQucG5nJywgJ2F2NS5wbmcnLCAnYXY2LnBuZyddO1xyXG4gICAgdmFyIGltYWdlTG9jYXRpb24gPSAnL3B1YmxpYy9pbWFnZXMvbWlzYy9hdmF0YXJzLyc7XHJcbiAgICBhdmF0YXJJbm5lckJveC5pbm5lckhUTUwgPSAnJztcclxuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICB2YXIgY3VycmVudEltYWdlID0gaW1hZ2VMb2NhdGlvbiArIGl0ZW07XHJcbiAgICAgICAgdmFyIGF2YXRhckVsZW1lbnQgPSBwYWdlc0J1aWxkZXJfMS5jcmVhdGVFbGVtZW50cyh7XHJcbiAgICAgICAgICAgIHRhZ05hbWU6IFwiaW1nXCIsXHJcbiAgICAgICAgICAgIHN0eWxlQ2xhc3M6IFwiYXZhdGFyLWl0ZW1cIixcclxuICAgICAgICAgICAgaW5saW5lU3R5bGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBpY3R1cmVVcmw6IGN1cnJlbnRJbWFnZSxcclxuICAgICAgICAgICAgbGlua1VybDogbnVsbCxcclxuICAgICAgICAgICAgdGV4dDogbnVsbCxcclxuICAgICAgICAgICAgaW5uZXJDb250ZW50OiBcIlwiLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IG51bGwsXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUxOiBudWxsLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGUxOiBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXZhdGFyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb252ZXJ0UGljdHVyZVRvRGF0YSh7IHBpY3R1cmU6IF9fZGlybmFtZSArIGN1cnJlbnRJbWFnZSwgZm9ybVN0YXRlOiBmb3JtU3RhdGUsIGF2YXRhckFyZWFTZWxlY3RvcnM6IGF2YXRhckFyZWFTZWxlY3RvcnMgfSk7XHJcbiAgICAgICAgICAgIHRvZ2dsZUF2YXRhckFyZWEoeyBhdmF0YXJCb3hTZWxlY3RvcjogYXZhdGFySW5uZXJCb3hTZWxlY3Rvci5hdmF0YXJCb3gsIGZvcm1TdGF0ZTogZm9ybVN0YXRlIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF2YXRhcklubmVyQm94LmFwcGVuZENoaWxkKGF2YXRhckVsZW1lbnQpO1xyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgYXZhdGFyUGljdHVyZXNfMSA9IGF2YXRhclBpY3R1cmVzOyBfaSA8IGF2YXRhclBpY3R1cmVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBhdmF0YXJQaWN0dXJlc18xW19pXTtcclxuICAgICAgICBfbG9vcF8xKGl0ZW0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRvZ2dsZUF2YXRhckFyZWEoX2EpIHtcclxuICAgIHZhciBhdmF0YXJCb3hTZWxlY3RvciA9IF9hLmF2YXRhckJveFNlbGVjdG9yLCBmb3JtU3RhdGUgPSBfYS5mb3JtU3RhdGU7XHJcbiAgICB2YXIgYXZhdGFyQm94ID0gYXZhdGFyQm94U2VsZWN0b3I7XHJcbiAgICBmb3JtU3RhdGUuYXZhdGFyU2VjdGlvblNob3dTdGF0ZSA9ICFmb3JtU3RhdGUuYXZhdGFyU2VjdGlvblNob3dTdGF0ZTtcclxuICAgIGlmIChmb3JtU3RhdGUuYXZhdGFyU2VjdGlvblNob3dTdGF0ZSkge1xyXG4gICAgICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3QoYXZhdGFyQm94LCAnb3BlbmVkLWF2YXRhci1ib3gnKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBhcHBNZW51XzEucmVtb3ZlQ2xhc3NMaXN0KGF2YXRhckJveCwgJ29wZW5lZC1hdmF0YXItYm94Jyk7XHJcbn1cclxuZnVuY3Rpb24gZGlzcGxheUN1cnJlbnRBdmF0YXIoX2EpIHtcclxuICAgIHZhciBwaWN0dXJlID0gX2EucGljdHVyZSwgZGlzcGxheVNlbGVjdG9yID0gX2EuZGlzcGxheVNlbGVjdG9yO1xyXG4gICAgdmFyIGF2YXRhclBpY3R1cmUgPSBkaXNwbGF5U2VsZWN0b3I7XHJcbiAgICBpZiAoIXBpY3R1cmUgfHwgIWF2YXRhclBpY3R1cmUpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgYXZhdGFyUGljdHVyZS5zcmMgPSBwaWN0dXJlO1xyXG59XHJcbmZ1bmN0aW9uIGNvbnZlcnRQaWN0dXJlVG9EYXRhKF9hKSB7XHJcbiAgICB2YXIgYXZhdGFyQXJlYVNlbGVjdG9ycyA9IF9hLmF2YXRhckFyZWFTZWxlY3RvcnMsIHBpY3R1cmUgPSBfYS5waWN0dXJlLCBmb3JtU3RhdGUgPSBfYS5mb3JtU3RhdGU7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZFBpY3R1cmUoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlDdXJyZW50QXZhdGFyKHsgcGljdHVyZTogcmVhZGVyLnJlc3VsdCwgZGlzcGxheVNlbGVjdG9yOiBhdmF0YXJBcmVhU2VsZWN0b3JzLmRpc3BsYXlTZWxlY3RvciB9KTtcclxuICAgICAgICAgICAgICAgIHRvZ2dsZUF2YXRhckFyZWEoeyBhdmF0YXJCb3hTZWxlY3RvcjogYXZhdGFyQXJlYVNlbGVjdG9ycy5hdmF0YXJCb3gsIGZvcm1TdGF0ZTogZm9ybVN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgZm9ybVN0YXRlLmF2YXRhclBpY3R1cmUgPSByZWFkZXIucmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZXN1bHQ7XHJcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsZXMpIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKHRoaXMuZmlsZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwaWN0dXJlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhc18xID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNfMS53aWR0aCA9IDEwMDtcclxuICAgICAgICAgICAgICAgIGNhbnZhc18xLmhlaWdodCA9IDEwMDtcclxuICAgICAgICAgICAgICAgIHZhciBjdHhfMSA9IGNhbnZhc18xLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1nXzEgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIGltZ18xLnNyYyA9IHBpY3R1cmU7XHJcbiAgICAgICAgICAgICAgICBpbWdfMS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4XzEuZHJhd0ltYWdlKGltZ18xLCAwLCAwLCBpbWdfMS53aWR0aCwgaW1nXzEuaGVpZ2h0LCAwLCAwLCBjYW52YXNfMS53aWR0aCwgY2FudmFzXzEuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVVSTCA9IGNhbnZhc18xLnRvRGF0YVVSTCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXRQaWN0dXJlQmFzZSA9IGRhdGFVUkwucmVwbGFjZSgvXmRhdGE6aW1hZ2VcXC8ocG5nfGpwZyk7YmFzZTY0LC8sIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwaWN0dXJlQmFzZVVybCA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIGdldFBpY3R1cmVCYXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlDdXJyZW50QXZhdGFyKHsgcGljdHVyZTogcGljdHVyZUJhc2VVcmwsIGRpc3BsYXlTZWxlY3RvcjogYXZhdGFyQXJlYVNlbGVjdG9ycy5kaXNwbGF5U2VsZWN0b3IgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybVN0YXRlLmF2YXRhclBpY3R1cmUgPSBwaWN0dXJlQmFzZVVybDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGljdHVyZUJhc2VVcmw7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgbG9hZFBpY3R1cmUuY2FsbChwaWN0dXJlKTtcclxuICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5jb252ZXJ0UGljdHVyZVRvRGF0YSA9IGNvbnZlcnRQaWN0dXJlVG9EYXRhO1xyXG4iLCIvLyBEZWZhdWx0c1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuXHRmb3JtYXQ6ICdpbWFnZS9wbmcnLFxuXHRxdWFsaXR5OiAwLjkyLFxuXHR3aWR0aDogdW5kZWZpbmVkLFxuXHRoZWlnaHQ6IHVuZGVmaW5lZCxcblx0Q2FudmFzOiB1bmRlZmluZWQsXG5cdGNyb3NzT3JpZ2luOiB1bmRlZmluZWRcbn07XG5cbi8vIFJldHVybiBQcm9taXNlXG52YXIgbWVyZ2VJbWFnZXMgPSBmdW5jdGlvbiAoc291cmNlcywgb3B0aW9ucykge1xuXHRpZiAoIHNvdXJjZXMgPT09IHZvaWQgMCApIHNvdXJjZXMgPSBbXTtcblx0aWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cblx0Ly8gU2V0dXAgYnJvd3Nlci9Ob2RlLmpzIHNwZWNpZmljIHZhcmlhYmxlc1xuXHR2YXIgY2FudmFzID0gb3B0aW9ucy5DYW52YXMgPyBuZXcgb3B0aW9ucy5DYW52YXMoKSA6IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0dmFyIEltYWdlID0gb3B0aW9ucy5JbWFnZSB8fCB3aW5kb3cuSW1hZ2U7XG5cblx0Ly8gTG9hZCBzb3VyY2VzXG5cdHZhciBpbWFnZXMgPSBzb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0Ly8gQ29udmVydCBzb3VyY2VzIHRvIG9iamVjdHNcblx0XHRpZiAoc291cmNlLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRzb3VyY2UgPSB7IHNyYzogc291cmNlIH07XG5cdFx0fVxuXG5cdFx0Ly8gUmVzb2x2ZSBzb3VyY2UgYW5kIGltZyB3aGVuIGxvYWRlZFxuXHRcdHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcblx0XHRpbWcuY3Jvc3NPcmlnaW4gPSBvcHRpb25zLmNyb3NzT3JpZ2luO1xuXHRcdGltZy5vbmVycm9yID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignQ291bGRuXFwndCBsb2FkIGltYWdlJykpOyB9O1xuXHRcdGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZSwgeyBpbWc6IGltZyB9KSk7IH07XG5cdFx0aW1nLnNyYyA9IHNvdXJjZS5zcmM7XG5cdH0pOyB9KTtcblxuXHQvLyBHZXQgY2FudmFzIGNvbnRleHRcblx0dmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG5cdC8vIFdoZW4gc291cmNlcyBoYXZlIGxvYWRlZFxuXHRyZXNvbHZlKFByb21pc2UuYWxsKGltYWdlcylcblx0XHQudGhlbihmdW5jdGlvbiAoaW1hZ2VzKSB7XG5cdFx0XHQvLyBTZXQgY2FudmFzIGRpbWVuc2lvbnNcblx0XHRcdHZhciBnZXRTaXplID0gZnVuY3Rpb24gKGRpbSkgeyByZXR1cm4gb3B0aW9uc1tkaW1dIHx8IE1hdGgubWF4LmFwcGx5KE1hdGgsIGltYWdlcy5tYXAoZnVuY3Rpb24gKGltYWdlKSB7IHJldHVybiBpbWFnZS5pbWdbZGltXTsgfSkpOyB9O1xuXHRcdFx0Y2FudmFzLndpZHRoID0gZ2V0U2l6ZSgnd2lkdGgnKTtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBnZXRTaXplKCdoZWlnaHQnKTtcblxuXHRcdFx0Ly8gRHJhdyBpbWFnZXMgdG8gY2FudmFzXG5cdFx0XHRpbWFnZXMuZm9yRWFjaChmdW5jdGlvbiAoaW1hZ2UpIHtcblx0XHRcdFx0Y3R4Lmdsb2JhbEFscGhhID0gaW1hZ2Uub3BhY2l0eSA/IGltYWdlLm9wYWNpdHkgOiAxO1xuXHRcdFx0XHRyZXR1cm4gY3R4LmRyYXdJbWFnZShpbWFnZS5pbWcsIGltYWdlLnggfHwgMCwgaW1hZ2UueSB8fCAwKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5DYW52YXMgJiYgb3B0aW9ucy5mb3JtYXQgPT09ICdpbWFnZS9qcGVnJykge1xuXHRcdFx0XHQvLyBSZXNvbHZlIGRhdGEgVVJJIGZvciBub2RlLWNhbnZhcyBqcGVnIGFzeW5jXG5cdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdFx0Y2FudmFzLnRvRGF0YVVSTChvcHRpb25zLmZvcm1hdCwge1xuXHRcdFx0XHRcdFx0cXVhbGl0eTogb3B0aW9ucy5xdWFsaXR5LFxuXHRcdFx0XHRcdFx0cHJvZ3Jlc3NpdmU6IGZhbHNlXG5cdFx0XHRcdFx0fSwgZnVuY3Rpb24gKGVyciwganBlZykge1xuXHRcdFx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QoZXJyKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmVzb2x2ZShqcGVnKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgYWxsIG90aGVyIGRhdGEgVVJJcyBzeW5jXG5cdFx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTChvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy5xdWFsaXR5KTtcblx0XHR9KSk7XG59KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlSW1hZ2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMyMDE1LmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gY3JlYXRlV2luZG93KGN0eCwgcHJvcGVydGllcykge1xyXG4gICAgY3R4LmZpbGxSZWN0KHByb3BlcnRpZXMueCwgcHJvcGVydGllcy55LCBwcm9wZXJ0aWVzLndpZHRoLCBwcm9wZXJ0aWVzLmhlaWdodCk7XHJcbiAgICA7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVXaW5kb3cgPSBjcmVhdGVXaW5kb3c7XHJcbmZ1bmN0aW9uIGNyZWF0ZVNoYXBlUm91bmRCb3JkZXIoc2hhcGVQcm9wZXJ0eWVzKSB7XHJcbiAgICB2YXIgcHJvcGVydGllcyA9IHNoYXBlUHJvcGVydHllcy5wcm9wZXJ0aWVzO1xyXG4gICAgcHJvcGVydGllcy5jdHguZmlsbFN0eWxlID0gcHJvcGVydGllcy5iYWNrZ3JvdW5kO1xyXG4gICAgaWYgKHByb3BlcnRpZXMuZ3JhZGllbnQpIHtcclxuICAgICAgICB2YXIgZ3JhZGllbnQgPSBwcm9wZXJ0aWVzLmN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChwcm9wZXJ0aWVzLnRvcFgsIHByb3BlcnRpZXMudG9wWSwgcHJvcGVydGllcy5ib3R0b21YLCBwcm9wZXJ0aWVzLmJvdHRvbVkpO1xyXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBwcm9wZXJ0aWVzLmJhY2tncm91bmQpO1xyXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCBwcm9wZXJ0aWVzLmJhY2tHcm91bmRGaW5hbCk7XHJcbiAgICAgICAgcHJvcGVydGllcy5jdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XHJcbiAgICB9XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5zaGFkb3dDb2xvciA9IHByb3BlcnRpZXMuc2hhZG93Q29sb3I7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5zaGFkb3dCbHVyID0gODtcclxuICAgIHByb3BlcnRpZXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgcHJvcGVydGllcy5jdHgubW92ZVRvKHByb3BlcnRpZXMueCArIHByb3BlcnRpZXMucmFkaXVzLCBwcm9wZXJ0aWVzLnkpO1xyXG4gICAgcHJvcGVydGllcy5jdHgubGluZVRvKHByb3BlcnRpZXMueCArIHByb3BlcnRpZXMud2lkdGggLSBwcm9wZXJ0aWVzLnJhZGl1cywgcHJvcGVydGllcy55KTtcclxuICAgIHByb3BlcnRpZXMuY3R4LnF1YWRyYXRpY0N1cnZlVG8ocHJvcGVydGllcy54ICsgcHJvcGVydGllcy53aWR0aCwgcHJvcGVydGllcy55LCBwcm9wZXJ0aWVzLnggKyBwcm9wZXJ0aWVzLndpZHRoLCBwcm9wZXJ0aWVzLnkgKyBwcm9wZXJ0aWVzLnJhZGl1cyk7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5saW5lVG8ocHJvcGVydGllcy54ICsgcHJvcGVydGllcy53aWR0aCwgcHJvcGVydGllcy55ICsgcHJvcGVydGllcy5oZWlnaHQgLSBwcm9wZXJ0aWVzLnJhZGl1cyk7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHByb3BlcnRpZXMueCArIHByb3BlcnRpZXMud2lkdGgsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0LCBwcm9wZXJ0aWVzLnggKyBwcm9wZXJ0aWVzLndpZHRoIC0gcHJvcGVydGllcy5yYWRpdXMsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0KTtcclxuICAgIHByb3BlcnRpZXMuY3R4LmxpbmVUbyhwcm9wZXJ0aWVzLnggKyBwcm9wZXJ0aWVzLnJhZGl1cywgcHJvcGVydGllcy55ICsgcHJvcGVydGllcy5oZWlnaHQpO1xyXG4gICAgcHJvcGVydGllcy5jdHgucXVhZHJhdGljQ3VydmVUbyhwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0LCBwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0IC0gcHJvcGVydGllcy5yYWRpdXMpO1xyXG4gICAgcHJvcGVydGllcy5jdHgubGluZVRvKHByb3BlcnRpZXMueCwgcHJvcGVydGllcy55ICsgcHJvcGVydGllcy5yYWRpdXMpO1xyXG4gICAgcHJvcGVydGllcy5jdHgucXVhZHJhdGljQ3VydmVUbyhwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSwgcHJvcGVydGllcy54ICsgcHJvcGVydGllcy5yYWRpdXMsIHByb3BlcnRpZXMueSk7IC8qKi9cclxuICAgIGlmIChwcm9wZXJ0aWVzLmlzQm9yZGVyKSB7XHJcbiAgICAgICAgcHJvcGVydGllcy5jdHguc3Ryb2tlU3R5bGUgPSBwcm9wZXJ0aWVzLmJvcmRlckNvbG9yO1xyXG4gICAgICAgIHByb3BlcnRpZXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gICAgcHJvcGVydGllcy5jdHguY2xvc2VQYXRoKCk7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5maWxsKCk7XHJcbn1cclxuZXhwb3J0cy5jcmVhdGVTaGFwZVJvdW5kQm9yZGVyID0gY3JlYXRlU2hhcGVSb3VuZEJvcmRlcjtcclxuZnVuY3Rpb24gY3JlYXRlUm91bmRCdXR0b24oc2hhcGVQcm9wZXJ0eWVzKSB7XHJcbiAgICB2YXIgcHJvcGVydGllcyA9IHNoYXBlUHJvcGVydHllcy5wcm9wZXJ0aWVzO1xyXG4gICAgdmFyIHRleHRXaWR0aCA9IHByb3BlcnRpZXMuY3R4Lm1lYXN1cmVUZXh0KHNoYXBlUHJvcGVydHllcy50ZXh0KS53aWR0aCAvIDMuMjtcclxuICAgIHZhciBidXR0b25XaWR0aCA9IHByb3BlcnRpZXMudGV4dFByb3BlcnR5LmxlZnRQYWRkaW5nICsgdGV4dFdpZHRoICsgcHJvcGVydGllcy50ZXh0UHJvcGVydHkucmlnaHRQYWRkaW5nO1xyXG4gICAgcHJvcGVydGllcy5jdHguc2hhZG93Q29sb3IgPSBwcm9wZXJ0aWVzLnNoYWRvd0NvbG9yO1xyXG4gICAgcHJvcGVydGllcy5jdHguc2hhZG93Qmx1ciA9IDg7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5maWxsU3R5bGUgPSBwcm9wZXJ0aWVzLmJhY2tncm91bmQ7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgIHByb3BlcnRpZXMuY3R4Lm1vdmVUbyhwcm9wZXJ0aWVzLnggKyBwcm9wZXJ0aWVzLnJhZGl1cywgcHJvcGVydGllcy55KTtcclxuICAgIHByb3BlcnRpZXMuY3R4LmxpbmVUbyhwcm9wZXJ0aWVzLnggKyBidXR0b25XaWR0aCAtIHByb3BlcnRpZXMucmFkaXVzLCBwcm9wZXJ0aWVzLnkpO1xyXG4gICAgcHJvcGVydGllcy5jdHgucXVhZHJhdGljQ3VydmVUbyhwcm9wZXJ0aWVzLnggKyBidXR0b25XaWR0aCwgcHJvcGVydGllcy55LCBwcm9wZXJ0aWVzLnggKyBidXR0b25XaWR0aCwgcHJvcGVydGllcy55ICsgcHJvcGVydGllcy5yYWRpdXMpO1xyXG4gICAgcHJvcGVydGllcy5jdHgubGluZVRvKHByb3BlcnRpZXMueCArIGJ1dHRvbldpZHRoLCBwcm9wZXJ0aWVzLnkgKyBwcm9wZXJ0aWVzLmhlaWdodCAtIHByb3BlcnRpZXMucmFkaXVzKTtcclxuICAgIHByb3BlcnRpZXMuY3R4LnF1YWRyYXRpY0N1cnZlVG8ocHJvcGVydGllcy54ICsgYnV0dG9uV2lkdGgsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0LCBwcm9wZXJ0aWVzLnggKyBidXR0b25XaWR0aCAtIHByb3BlcnRpZXMucmFkaXVzLCBwcm9wZXJ0aWVzLnkgKyBwcm9wZXJ0aWVzLmhlaWdodCk7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5saW5lVG8ocHJvcGVydGllcy54ICsgcHJvcGVydGllcy5yYWRpdXMsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0KTtcclxuICAgIHByb3BlcnRpZXMuY3R4LnF1YWRyYXRpY0N1cnZlVG8ocHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnkgKyBwcm9wZXJ0aWVzLmhlaWdodCwgcHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnkgKyBwcm9wZXJ0aWVzLmhlaWdodCAtIHByb3BlcnRpZXMucmFkaXVzKTtcclxuICAgIHByb3BlcnRpZXMuY3R4LmxpbmVUbyhwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMucmFkaXVzKTtcclxuICAgIHByb3BlcnRpZXMuY3R4LnF1YWRyYXRpY0N1cnZlVG8ocHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnksIHByb3BlcnRpZXMueCArIHByb3BlcnRpZXMucmFkaXVzLCBwcm9wZXJ0aWVzLnkpO1xyXG4gICAgcHJvcGVydGllcy5jdHguY2xvc2VQYXRoKCk7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5maWxsKCk7XHJcbiAgICBpZiAocHJvcGVydGllcy5pc0JvcmRlcikge1xyXG4gICAgICAgIHByb3BlcnRpZXMuY3R4LnN0cm9rZVN0eWxlID0gcHJvcGVydGllcy5ib3JkZXJDb2xvcjtcclxuICAgICAgICBwcm9wZXJ0aWVzLmN0eC5saW5lV2lkdGggPSBwcm9wZXJ0aWVzLmJvcmRlclJhZGl1cztcclxuICAgICAgICBwcm9wZXJ0aWVzLmN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuICAgIHByb3BlcnRpZXMuY3R4LmZvbnQgPSBzaGFwZVByb3BlcnR5ZXMuZm9udFNpemU7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5maWxsU3R5bGUgPSBwcm9wZXJ0aWVzLnRleHRQcm9wZXJ0eS50ZXh0Q29sb3I7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5zaGFkb3dDb2xvciA9IHByb3BlcnRpZXMudGV4dFByb3BlcnR5LnNoYWRvd0NvbG9yO1xyXG4gICAgcHJvcGVydGllcy5jdHguc2hhZG93Qmx1ciA9IDg7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5maWxsVGV4dChzaGFwZVByb3BlcnR5ZXMudGV4dCwgcHJvcGVydGllcy54ICsgcHJvcGVydGllcy50ZXh0UHJvcGVydHkubGVmdFBhZGRpbmcsIHByb3BlcnRpZXMueSArIHByb3BlcnRpZXMuaGVpZ2h0IC8gMiArIHByb3BlcnRpZXMudGV4dFByb3BlcnR5LnRvcFBhZGRpbmcpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlUm91bmRCdXR0b24gPSBjcmVhdGVSb3VuZEJ1dHRvbjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy9pbXBvcnQgeyB2aWV3TW9kdWxlcyB9IGZyb20gJy4uL3ZpZXcvZGlzcGxheU1vZHVsZXMnO1xyXG52YXIgcmVndWxhckVuZW15QWlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vYWkvcmVndWxhckVuZW15QWlNb2R1bGVzXCIpO1xyXG52YXIgYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2VuZW1pZXMvYW5pbWF0aW9uSGl0Qm94TW9kdWxlc1wiKTtcclxudmFyIGNoYW5nZUxldmVsc18xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lTW9kdWxlcy9jaGFuZ2VMZXZlbHNcIik7XHJcbnZhciBlbmdpbmVNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2VuZ2luZU1vZHVsZXNcIik7XHJcbnZhciBwbGF5ZXJTaGlwTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL3BsYXllclNoaXBNb2R1bGVcIik7XHJcbnZhciBnYW1lVWlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vdWkvZ2FtZVVpTW9kdWxlc1wiKTtcclxudmFyIHNhdGFydEdhbWVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZ2FtZU1vZHVsZXMvc2F0YXJ0R2FtZVwiKTtcclxudmFyIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lU2lkZU9iamVjdHNNb2R1bGVcIik7XHJcbnZhciBnYW1lR3JhcHBsZU9iamVjdHNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXCIpO1xyXG52YXIgbWVudVNldHRpbmdzXzEgPSByZXF1aXJlKFwiLi4vYXBwTWVudS9tZW51U2V0dGluZ3NcIik7XHJcbnZhciBzb3VuZE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvc291bmRNb2R1bGVzXCIpO1xyXG52YXIgR2FtZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEdhbWUoZ2FtZUluaXREYXRhKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEgPSBnYW1lSW5pdERhdGE7XHJcbiAgICB9XHJcbiAgICBHYW1lLnByb3RvdHlwZS5jaGFuZ2VMZXZlbCA9IGZ1bmN0aW9uIChuZXh0TGV2ZWwpIHtcclxuICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5jdXJyZW50TGV2ZWwgPSBuZXh0TGV2ZWw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmN1cnJlbnRMZXZlbDtcclxuICAgIH07XHJcbiAgICBHYW1lLnByb3RvdHlwZS5zaG93R2FtZUluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGV2ZWxUb0NoYW5nZTogdGhpcy5nYW1lSW5pdERhdGEuZ2FtZURhdGEuY3VycmVudExldmVsLFxyXG4gICAgICAgICAgICBjdXJyZW50UG9pbnQ6IHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmN1cnJlbnRQb2ludCxcclxuICAgICAgICAgICAgZ2FtZURhdGE6IHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogdGhpcy5nYW1lSW5pdERhdGEuZ2FtZURhdGEuZ2FtZVNldGluZ3MsXHJcbiAgICAgICAgICAgIGxldmVsU291bmRzOiB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbFNvdW5kcyxcclxuICAgICAgICAgICAgcGxheWVyT2JqZWN0OiB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5wbGF5ZXJPYmplY3QsXHJcbiAgICAgICAgICAgIGltYWdlRGlycmVjdGlvbjogX19kaXJuYW1lICsgJy9wdWJsaWMvaW1hZ2VzLycsXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBHYW1lLnByb3RvdHlwZS5zaG93TGV2ZWxEYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGF0YS5sZXZlbERhdGE7XHJcbiAgICB9O1xyXG4gICAgR2FtZS5wcm90b3R5cGUucmV0dXJuQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5nYW1lSW5pdERhdGEuZ2FtZUZpZWxkICYmXHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVBY3Rpb25GaWVsZCAmJlxyXG4gICAgICAgICAgICB0aGlzLmdhbWVJbml0RGF0YS5nYW1lRGlhbG9nRmllbGQgJiZcclxuICAgICAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEuZ2FtZVVJRmllbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGdhbWVGaWVsZDogdGhpcy5nYW1lSW5pdERhdGEuZ2FtZUZpZWxkLFxyXG4gICAgICAgICAgICAgICAgZ2FtZUFjdGlvbkZpZWxkOiB0aGlzLmdhbWVJbml0RGF0YS5jdHhBY3Rpb25GaWVsZCxcclxuICAgICAgICAgICAgICAgIGdhbWVEaWFsb2dGaWVsZDogdGhpcy5nYW1lSW5pdERhdGEuY3R4R2FtZURpYWxvZ0ZpZWxkLFxyXG4gICAgICAgICAgICAgICAgZ2FtZVVJRmllbGQ6IHRoaXMuZ2FtZUluaXREYXRhLmdhbWVVSUZpZWxkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBHYW1lO1xyXG59KCkpO1xyXG5leHBvcnRzLkdhbWUgPSBHYW1lO1xyXG5HYW1lLnByb3RvdHlwZS5jcmVhdGVDb250ZXh0ID0gZW5naW5lTW9kdWxlc18xLmNyZWF0ZUNvbnRleHQ7XHJcbkdhbWUucHJvdG90eXBlLmluaXRGaWVsZCA9IGVuZ2luZU1vZHVsZXNfMS5pbml0RmllbGQ7XHJcbkdhbWUucHJvdG90eXBlLmxldmVsSW5pdCA9IGVuZ2luZU1vZHVsZXNfMS5sZXZlbEluaXQ7IC8vIGNyZWF0ZUNvbnRleHQgaW5pdFBsYXllclNoaXBcclxuR2FtZS5wcm90b3R5cGUuc2V0R2FtZUZpZWxkcyA9IGVuZ2luZU1vZHVsZXNfMS5zZXRHYW1lRmllbGRzO1xyXG5HYW1lLnByb3RvdHlwZS53YXJwRWZmZWN0ID0gZW5naW5lTW9kdWxlc18xLndhcnBFZmZlY3Q7IC8vIHdhcnBFZmZlY3RcclxuR2FtZS5wcm90b3R5cGUuZ2V0U2NyZWVuU2l6ZSA9IGVuZ2luZU1vZHVsZXNfMS5nZXRTY3JlZW5TaXplO1xyXG5HYW1lLnByb3RvdHlwZS5nZXRMZXZlbFVzZXJEYXRhID0gZW5naW5lTW9kdWxlc18xLmdldExldmVsVXNlckRhdGE7XHJcbkdhbWUucHJvdG90eXBlLmxldmVsVGltZXIgPSBlbmdpbmVNb2R1bGVzXzEubGV2ZWxUaW1lcjtcclxuR2FtZS5wcm90b3R5cGUuZ2V0U2Vjb25kTWVhc3VyZSA9IGVuZ2luZU1vZHVsZXNfMS5nZXRTZWNvbmRNZWFzdXJlO1xyXG5HYW1lLnByb3RvdHlwZS5nYW1lU2Vjb25kc0luY3JlYXNlID0gZW5naW5lTW9kdWxlc18xLmdhbWVTZWNvbmRzSW5jcmVhc2U7XHJcbkdhbWUucHJvdG90eXBlLmluaXRQbGF5ZXJTaGlwID0gcGxheWVyU2hpcE1vZHVsZV8xLmluaXRQbGF5ZXJTaGlwO1xyXG4vL0dhbWUucHJvdG90eXBlLnBsYWNlUGxheWVyU2hpcCA9IHBsYWNlUGxheWVyU2hpcDtcclxuR2FtZS5wcm90b3R5cGUuZGVsZXRlQnVsbGV0ID0gZW5naW5lTW9kdWxlc18xLmRlbGV0ZUJ1bGxldDtcclxuR2FtZS5wcm90b3R5cGUuZGVsZXRlT2JqZWN0cyA9IGVuZ2luZU1vZHVsZXNfMS5kZWxldGVPYmplY3RzO1xyXG5HYW1lLnByb3RvdHlwZS5kZWxhdGVTaWRlT2JqZWN0ID0gZW5naW5lTW9kdWxlc18xLmRlbGF0ZVNpZGVPYmplY3Q7XHJcbkdhbWUucHJvdG90eXBlLmhpdERldGVjdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5oaXREZXRlY3Rpb247XHJcbkdhbWUucHJvdG90eXBlLmNvbGxlY3RQb2ludHMgPSBlbmdpbmVNb2R1bGVzXzEuY29sbGVjdFBvaW50cztcclxuR2FtZS5wcm90b3R5cGUuc3Bhd25FbmVteUxvZ2ljID0gcmVndWxhckVuZW15QWlNb2R1bGVzXzEuc3Bhd25FbmVteUxvZ2ljO1xyXG5HYW1lLnByb3RvdHlwZS5jcmVhdGVOZXdFbmVteSA9IHJlZ3VsYXJFbmVteUFpTW9kdWxlc18xLmNyZWF0ZU5ld0VuZW15O1xyXG5HYW1lLnByb3RvdHlwZS5nYW1lUmFuZG9taXplciA9IHJlZ3VsYXJFbmVteUFpTW9kdWxlc18xLmdhbWVSYW5kb21pemVyO1xyXG5HYW1lLnByb3RvdHlwZS51aUNvbnRyb2xsZXIgPSBnYW1lVWlNb2R1bGVzXzEudWlDb250cm9sbGVyO1xyXG5HYW1lLnByb3RvdHlwZS5nYW1lVWlQYXVzZSA9IGdhbWVVaU1vZHVsZXNfMS5nYW1lVWlQYXVzZTtcclxuR2FtZS5wcm90b3R5cGUuZ2FtZVVpTWVudSA9IGdhbWVVaU1vZHVsZXNfMS5nYW1lVWlNZW51O1xyXG5HYW1lLnByb3RvdHlwZS5zaG93TWVudVdpbmRvdyA9IGdhbWVVaU1vZHVsZXNfMS5zaG93TWVudVdpbmRvdztcclxuR2FtZS5wcm90b3R5cGUuc2hvd1VpUG9wdXBXaW5kb3cgPSBnYW1lVWlNb2R1bGVzXzEuc2hvd1VpUG9wdXBXaW5kb3c7XHJcbkdhbWUucHJvdG90eXBlLnNob3dTdGFydFdpbmRvdyA9IGdhbWVVaU1vZHVsZXNfMS5zaG93U3RhcnRXaW5kb3c7XHJcbkdhbWUucHJvdG90eXBlLnNob3dQYXVzZVdpbmRvdyA9IGdhbWVVaU1vZHVsZXNfMS5zaG93UGF1c2VXaW5kb3c7XHJcbkdhbWUucHJvdG90eXBlLmxldmVsQ2hhbmdlV2luZG93ID0gZ2FtZVVpTW9kdWxlc18xLmxldmVsQ2hhbmdlV2luZG93O1xyXG5HYW1lLnByb3RvdHlwZS5nYW1lT3ZlcldpbmRvdyA9IGdhbWVVaU1vZHVsZXNfMS5nYW1lT3ZlcldpbmRvdztcclxuR2FtZS5wcm90b3R5cGUuZ2FtZVdpbldpbmRvdyA9IGdhbWVVaU1vZHVsZXNfMS5nYW1lV2luV2luZG93O1xyXG5HYW1lLnByb3RvdHlwZS5zaG93R2FtZVN0YXRzID0gZ2FtZVVpTW9kdWxlc18xLnNob3dHYW1lU3RhdHM7XHJcbkdhbWUucHJvdG90eXBlLmluaXRVaUVsZW1lbnRzID0gZ2FtZVVpTW9kdWxlc18xLmluaXRVaUVsZW1lbnRzO1xyXG5HYW1lLnByb3RvdHlwZS5tYXBTb3VuZENoYW5nZXIgPSBzYXRhcnRHYW1lXzEubWFwU291bmRDaGFuZ2VyO1xyXG5HYW1lLnByb3RvdHlwZS5nYW1lU3RhcnQgPSBzYXRhcnRHYW1lXzEuZ2FtZVN0YXJ0O1xyXG5HYW1lLnByb3RvdHlwZS5iYWNrVG9TdGFydFNjcmVlbiA9IHNhdGFydEdhbWVfMS5iYWNrVG9TdGFydFNjcmVlbjtcclxuR2FtZS5wcm90b3R5cGUuZXhpdFRoZUdhbWUgPSBzYXRhcnRHYW1lXzEuZXhpdFRoZUdhbWU7XHJcbkdhbWUucHJvdG90eXBlLm5leHRMZXZlbERhdGFSZWxvYWQgPSBjaGFuZ2VMZXZlbHNfMS5uZXh0TGV2ZWxEYXRhUmVsb2FkO1xyXG5HYW1lLnByb3RvdHlwZS5jaGFuZ2VMZXZlbFByb2NlZHVyZSA9IGVuZ2luZU1vZHVsZXNfMS5jaGFuZ2VMZXZlbFByb2NlZHVyZTtcclxuR2FtZS5wcm90b3R5cGUuZ2V0UmFuZG9tQ29sb3IgPSBlbmdpbmVNb2R1bGVzXzEuZ2V0UmFuZG9tQ29sb3I7XHJcbkdhbWUucHJvdG90eXBlLm1hcFJhbmRvbU9iamVjdFNwYXduID0gZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEubWFwUmFuZG9tT2JqZWN0U3Bhd247XHJcbkdhbWUucHJvdG90eXBlLmluaXRHcmFwcGxlT2JqZWN0ID0gZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXzEuaW5pdEdyYXBwbGVPYmplY3Q7XHJcbkdhbWUucHJvdG90eXBlLmdhbWVTZXR0aW5nc01lbnVJbml0ID0gbWVudVNldHRpbmdzXzEuZ2FtZVNldHRpbmdzTWVudUluaXQ7XHJcbkdhbWUucHJvdG90eXBlLmNyZWF0ZVNvdW5kID0gc291bmRNb2R1bGVzXzEuY3JlYXRlU291bmQ7XHJcbkdhbWUucHJvdG90eXBlLmdldEltYWdlRnJvbUZpZWxkcyA9IGVuZ2luZU1vZHVsZXNfMS5nZXRJbWFnZUZyb21GaWVsZHM7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vYXBwTWVudS9hcHBNZW51XCIpO1xyXG52YXIgZ2FtZUludmVudG9yeU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9nYW1lSW52ZW50b3J5TW9kdWxlc1wiKTtcclxudmFyIGdhbWVIYW5nYXJNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZ2FtZUhhbmdhck1vZHVsZXNcIik7XHJcbnZhciBnYW1lU2hvcE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL2dhbWVTaG9wTW9kdWxlXCIpO1xyXG5mdW5jdGlvbiBzaG9wRGlhbG9nQWN0aXZpdHkoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBzaG9wQXJlYSA9IF9hLnNob3BBcmVhO1xyXG4gICAgaWYgKHByb2Nlc3MuZW52LlNIT1BfQUNUSVZFX1dJTkRPVyA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICAgIHByb2Nlc3MuZW52LlNIT1BfU0FMRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgICAgIHByb2Nlc3MuZW52LlNIT1BfQUNUSVZFX1dJTkRPVyA9ICdmYWxzZSc7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSA9ICghbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVVaVBhdXNlKSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5nYW1lSW5pdERhdGEuaW52ZW50b3J5QWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLnNob3BBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogXCJcIixcclxuICAgICAgICAgICAgcHJpY2U6IFwiXCIsXHJcbiAgICAgICAgICAgIGludmVudG9yeVNlbGVjdGVkSXRlbTogbnVsbCxcclxuICAgICAgICAgICAgaGFuZ2FyU2VsZWN0ZWRJdGVtOiBudWxsLFxyXG4gICAgICAgICAgICBoYW5nYXJFbGVtZW50czogW10sXHJcbiAgICAgICAgICAgIHRyYWRlUHJvcGVydHllczogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYXBwTWVudV8xLmhpZGUoc2hvcEFyZWEuc2hvcFdyYXBwZXIpO1xyXG4gICAgICAgIGFwcE1lbnVfMS5oaWRlKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuU0hPUF9BQ1RJVkVfV0lORE9XID09PSAndHJ1ZSdcclxuICAgICAgICAmJiBwcm9jZXNzLmVudi5TSE9QX1NBTEVfV0lORE9XID09PSAnZmFsc2UnXHJcbiAgICAgICAgJiYgcHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9BQ1RJVkVfV0lORE9XID09PSAnZmFsc2UnICYmIHByb2Nlc3MuZW52LlNIT1BfU1RPUkVfV0lORE9XID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5idXlJdGVtKHsgdXJsOiBwcm9jZXNzLmVudi5TSE9QX0dVTlNfVVJMLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5TSE9QX1NBTEVfV0lORE9XID09PSAndHJ1ZScgJiYgcHJvY2Vzcy5lbnYuU0hPUF9BQ1RJVkVfV0lORE9XID09PSAndHJ1ZScpIHtcclxuICAgICAgICBwcm9jZXNzLmVudi5TSE9QX1NBTEVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgICAgICBwcm9jZXNzLmVudi5TSE9QX0FDVElWRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgICAgIGdhbWVJbnZlbnRvcnlNb2R1bGVzXzEuc2FsZUl0ZW0oeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgZ2FtZUludmVudG9yeU1vZHVsZXNfMS5zaG9wSW52ZW50b3J5KHsgZWxlbWVudDogc2hvcEFyZWEsIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCB9KTtcclxuICAgICAgICBnYW1lSGFuZ2FyTW9kdWxlc18xLmxvYWRIYW5nYXIoeyBlbGVtZW50OiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0IH0pO1xyXG4gICAgICAgIGFwcE1lbnVfMS5oaWRlKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9BQ1RJVkVfV0lORE9XID09PSAndHJ1ZScgJiYgcHJvY2Vzcy5lbnYuU0hPUF9BQ1RJVkVfV0lORE9XID09PSAndHJ1ZScpIHtcclxuICAgICAgICBnYW1lU2hvcE1vZHVsZV8xLmJ1eVNoaXAoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIHVybDogcHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9VUkwgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5TSE9QX1NUT1JFX1dJTkRPVyA9PT0gJ3RydWUnICYmIHByb2Nlc3MuZW52LlNIT1BfU0hJUFlBUkRfQUNUSVZFX1dJTkRPVyA9PT0gJ2ZhbHNlJyAmJlxyXG4gICAgICAgIHByb2Nlc3MuZW52LlNIT1BfQUNUSVZFX1dJTkRPVyA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgZ2FtZVNob3BNb2R1bGVfMS5idXlJdGVtKHsgdXJsOiBwcm9jZXNzLmVudi5TSE9QX1NUT1JFX0lURU1TLCBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5zaG9wRGlhbG9nQWN0aXZpdHkgPSBzaG9wRGlhbG9nQWN0aXZpdHk7XHJcbmZ1bmN0aW9uIHNob3BXZWFwb25zQWN0aXZpdHkoX2EpIHtcclxuICAgIHZhciBtYWluR2FtZU9iamVjdCA9IF9hLm1haW5HYW1lT2JqZWN0LCBzaG9wQXJlYSA9IF9hLnNob3BBcmVhO1xyXG4gICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5pbnZlbnRvcnlTZWxlY3RlZEl0ZW0gPSBudWxsO1xyXG4gICAgbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2VsZWN0ZWRTaG9wSXRlbS5oYW5nYXJTZWxlY3RlZEl0ZW0gPSBudWxsO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9BQ1RJVkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU1RPUkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgZ2FtZVNob3BNb2R1bGVfMS5zaG93U2hvcERhdGEoeyBlbGVtZW50OiBzaG9wQXJlYSwgdXJsOiBwcm9jZXNzLmVudi5TSE9QX0dVTlNfVVJMLFxyXG4gICAgICAgIG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCxcclxuICAgICAgICBjdXN0b21XcmFwcGVyQ2xhc3M6IG51bGwsXHJcbiAgICAgICAgc2hvcFBhZ2VJbmZvcm1hdGlvbjogbWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2hvcFBhZ2VJbmZvcm1hdGlvbiB9KTtcclxufVxyXG5leHBvcnRzLnNob3BXZWFwb25zQWN0aXZpdHkgPSBzaG9wV2VhcG9uc0FjdGl2aXR5O1xyXG5mdW5jdGlvbiBzaG9wU2hpcEFjdGl2aXR5KF9hKSB7XHJcbiAgICB2YXIgbWFpbkdhbWVPYmplY3QgPSBfYS5tYWluR2FtZU9iamVjdCwgc2hvcEFyZWEgPSBfYS5zaG9wQXJlYTtcclxuICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaW52ZW50b3J5U2VsZWN0ZWRJdGVtID0gbnVsbDtcclxuICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNlbGVjdGVkU2hvcEl0ZW0uaGFuZ2FyU2VsZWN0ZWRJdGVtID0gbnVsbDtcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU0hJUFlBUkRfQUNUSVZFX1dJTkRPVyA9ICd0cnVlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU1RPUkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BQYWdlSW5mb3JtYXRpb24uY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgZ2FtZVNob3BNb2R1bGVfMS5zaG93U2hvcERhdGEoeyBlbGVtZW50OiBzaG9wQXJlYSwgdXJsOiBwcm9jZXNzLmVudi5TSE9QX1NISVBZQVJEX1VSTCxcclxuICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgY3VzdG9tV3JhcHBlckNsYXNzOiBcInNoaXB5YXJkLWl0ZW1cIixcclxuICAgICAgICBzaG9wUGFnZUluZm9ybWF0aW9uOiBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zaG9wUGFnZUluZm9ybWF0aW9uIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHNob3BNYXJrZXRBY3Rpdml0eShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHNob3BBcmVhID0gX2Euc2hvcEFyZWE7XHJcbiAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbSA9IG51bGw7XHJcbiAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmhhbmdhclNlbGVjdGVkSXRlbSA9IG51bGw7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX1NUT1JFX1dJTkRPVyA9ICd0cnVlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU0hJUFlBUkRfQUNUSVZFX1dJTkRPVyA9ICdmYWxzZSc7XHJcbiAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zaG9wUGFnZUluZm9ybWF0aW9uLmN1cnJlbnRQYWdlID0gMTtcclxuICAgIGdhbWVTaG9wTW9kdWxlXzEuc2hvd1Nob3BEYXRhKHsgZWxlbWVudDogc2hvcEFyZWEsIHVybDogcHJvY2Vzcy5lbnYuU0hPUF9TVE9SRV9JVEVNUyxcclxuICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsXHJcbiAgICAgICAgY3VzdG9tV3JhcHBlckNsYXNzOiBudWxsLFxyXG4gICAgICAgIHNob3BQYWdlSW5mb3JtYXRpb246IG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BQYWdlSW5mb3JtYXRpb24gfSk7XHJcbn1cclxuZnVuY3Rpb24gc2hvcEV4aXRBY3Rpdml0eShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHNob3BBcmVhID0gX2Euc2hvcEFyZWE7XHJcbiAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmludmVudG9yeVNlbGVjdGVkSXRlbSA9IG51bGw7XHJcbiAgICBtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zZWxlY3RlZFNob3BJdGVtLmhhbmdhclNlbGVjdGVkSXRlbSA9IG51bGw7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX0FDVElWRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgZ2FtZVNob3BNb2R1bGVfMS5sZWF2ZVNob3AoeyBlbGVtZW50OiBzaG9wQXJlYSwgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCB0ZXh0OiAnYmFjayB0byB0aGUgZ2FtZScgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2hvcE1lbnVPcGVyYXRpb20ocHJvcHMsIGNhbGxiYWNrLCBtYWluR2FtZU9iamVjdCkge1xyXG4gICAgYXBwTWVudV8xLmhpZGUobWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2hvcERpYWxvZyk7XHJcbiAgICBjYWxsYmFjayhwcm9wcyk7XHJcbn1cclxuZnVuY3Rpb24gdG9nZ2xlU2hvcEJ1dHRvblN0eWxlKGN1cnJlbnRCdXR0b24pIHtcclxuICAgIHZhciBidXR0b25zID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2hvcC11cHBlci1idXR0b25cIikpO1xyXG4gICAgYnV0dG9uU3R5bGVPcGVyYXRpb24oYXBwTWVudV8xLnJlbW92ZUNsYXNzTGlzdCwgXCJzZWxlY3RlZC1zaG9wLWJ0blwiKTtcclxuICAgIGlmIChjdXJyZW50QnV0dG9uKSB7XHJcbiAgICAgICAgYXBwTWVudV8xLmFkZENsYXNzTGlzdChjdXJyZW50QnV0dG9uLCBcInNlbGVjdGVkLXNob3AtYnRuXCIpO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIGFwcE1lbnVfMS5hZGRDbGFzc0xpc3QoYnV0dG9uc1swXSwgXCJzZWxlY3RlZC1zaG9wLWJ0blwiKTtcclxuICAgIGZ1bmN0aW9uIGJ1dHRvblN0eWxlT3BlcmF0aW9uKGNhbGxiYWNrLCBjbGFzc0xpc3QpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGJ1dHRvbnNfMSA9IGJ1dHRvbnM7IF9pIDwgYnV0dG9uc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gYnV0dG9uc18xW19pXTtcclxuICAgICAgICAgICAgY2FsbGJhY2soYnV0dG9uLCBjbGFzc0xpc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLnRvZ2dsZVNob3BCdXR0b25TdHlsZSA9IHRvZ2dsZVNob3BCdXR0b25TdHlsZTtcclxuZnVuY3Rpb24gc2hvcE1lbnVBY3Rpdml0eShfYSkge1xyXG4gICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3QsIHNob3BBcmVhID0gX2Euc2hvcEFyZWE7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LnRhcmdldFsnZGF0YXNldCddLnRhcmdldEJ0bklkKSB7XHJcbiAgICAgICAgY2FzZSAnd2VhcG9ucyc6XHJcbiAgICAgICAgICAgIHRvZ2dsZVNob3BCdXR0b25TdHlsZShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICBzaG9wTWVudU9wZXJhdGlvbSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgc2hvcEFyZWE6IHNob3BBcmVhIH0sIHNob3BXZWFwb25zQWN0aXZpdHksIG1haW5HYW1lT2JqZWN0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc2hpcCc6XHJcbiAgICAgICAgICAgIHRvZ2dsZVNob3BCdXR0b25TdHlsZShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICBzaG9wTWVudU9wZXJhdGlvbSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgc2hvcEFyZWE6IHNob3BBcmVhIH0sIHNob3BTaGlwQWN0aXZpdHksIG1haW5HYW1lT2JqZWN0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnbWFya2V0JzpcclxuICAgICAgICAgICAgdG9nZ2xlU2hvcEJ1dHRvblN0eWxlKGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHNob3BNZW51T3BlcmF0aW9tKHsgbWFpbkdhbWVPYmplY3Q6IG1haW5HYW1lT2JqZWN0LCBzaG9wQXJlYTogc2hvcEFyZWEgfSwgc2hvcE1hcmtldEFjdGl2aXR5LCBtYWluR2FtZU9iamVjdCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3RvLWhhbmdhcic6XHJcbiAgICAgICAgICAgIHNob3BNZW51T3BlcmF0aW9tKHsgc3RhdGU6ICd0by1oYW5nYXInLCBlbGVtZW50OiBzaG9wQXJlYSB9LCBnYW1lU2hvcE1vZHVsZV8xLnN3aXRjaFNob3BIYW5nYXIsIG1haW5HYW1lT2JqZWN0KTtcclxuICAgICAgICAgICAgZ2FtZUhhbmdhck1vZHVsZXNfMS5sb2FkSGFuZ2FyKHsgZWxlbWVudDogc2hvcEFyZWEsXHJcbiAgICAgICAgICAgICAgICBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3RvLXNob3AnOlxyXG4gICAgICAgICAgICBzaG9wTWVudU9wZXJhdGlvbSh7IHN0YXRlOiAndG8tc2hvcCcsIGVsZW1lbnQ6IHNob3BBcmVhIH0sIGdhbWVTaG9wTW9kdWxlXzEuc3dpdGNoU2hvcEhhbmdhciwgbWFpbkdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdwcmV2aW91cy1pdGVtcyc6XHJcbiAgICAgICAgICAgIGFwcE1lbnVfMS5oaWRlKG1haW5HYW1lT2JqZWN0LnNob3BBcmVhLnNob3BEaWFsb2cpO1xyXG4gICAgICAgICAgICBnYW1lU2hvcE1vZHVsZV8xLmNoYW5nZVBhZ2UoeyBtYWluR2FtZU9iamVjdDogbWFpbkdhbWVPYmplY3QsIGZsYWc6IFwiYmFja1wiIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICduZXh0LWl0ZW1zJzpcclxuICAgICAgICAgICAgYXBwTWVudV8xLmhpZGUobWFpbkdhbWVPYmplY3Quc2hvcEFyZWEuc2hvcERpYWxvZyk7XHJcbiAgICAgICAgICAgIGdhbWVTaG9wTW9kdWxlXzEuY2hhbmdlUGFnZSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgZmxhZzogXCJuZXh0XCIgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2V4aXQnOlxyXG4gICAgICAgICAgICBhcHBNZW51XzEuaGlkZShtYWluR2FtZU9iamVjdC5zaG9wQXJlYS5zaG9wRGlhbG9nKTtcclxuICAgICAgICAgICAgc2hvcEV4aXRBY3Rpdml0eSh7IG1haW5HYW1lT2JqZWN0OiBtYWluR2FtZU9iamVjdCwgc2hvcEFyZWE6IHNob3BBcmVhIH0pO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBmYWxzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLnNob3BNZW51QWN0aXZpdHkgPSBzaG9wTWVudUFjdGl2aXR5O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fc3ByZWFkQXJyYXlzID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5cykgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGRpc3BsYXlNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vdmlldy9kaXNwbGF5TW9kdWxlc1wiKTtcclxudmFyIGdhbWVVaUxvYWRNZW51XzEgPSByZXF1aXJlKFwiLi9nYW1lVWlNb2RlbHMvZ2FtZVVpTG9hZE1lbnVcIik7XHJcbnZhciBnYW1lVWlTZXR0aW5nc01lbnVfMSA9IHJlcXVpcmUoXCIuL2dhbWVVaU1vZGVscy9nYW1lVWlTZXR0aW5nc01lbnVcIik7XHJcbnZhciBnYW1lUGF1c2VTY3JlZW5fMSA9IHJlcXVpcmUoXCIuL2dhbWVVaU1vZGVscy9nYW1lUGF1c2VTY3JlZW5cIik7XHJcbnZhciBnYW1lU3RhdHNTY3JlZW5fMSA9IHJlcXVpcmUoXCIuL2dhbWVVaU1vZGVscy9nYW1lU3RhdHNTY3JlZW5cIik7XHJcbnZhciBnYW1lR2FtZU92ZXJTY3JlZW5fMSA9IHJlcXVpcmUoXCIuL2dhbWVVaU1vZGVscy9nYW1lR2FtZU92ZXJTY3JlZW5cIik7XHJcbnZhciBnYW1lV2luU2NyZWVuXzEgPSByZXF1aXJlKFwiLi9nYW1lVWlNb2RlbHMvZ2FtZVdpblNjcmVlblwiKTtcclxudmFyIHVpRWxlbWVudE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi92aWV3L2VsZW1lbnRzL3VpRWxlbWVudE1vZHVsZXNcIik7XHJcbnZhciBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5lbWllcy9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpO1xyXG52YXIgbGV2ZWxDaGFuZ2VTY3JlZW5fMSA9IHJlcXVpcmUoXCIuL2dhbWVVaU1vZGVscy9sZXZlbENoYW5nZVNjcmVlblwiKTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9wbGF5ZXJVbml0TW9kdWxlXCIpO1xyXG5mdW5jdGlvbiBnYW1lVWlQYXVzZSgpIHtcclxuICAgIGlmICh0aGlzLmdhbWVJbml0RGF0YS5zaG9wQWN0aXZlIHx8IHRoaXMuZ2FtZUluaXREYXRhLmludmVudG9yeUFjdGl2ZSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoIXRoaXMuZ2FtZUluaXREYXRhLmdhbWVVaVBhdXNlICYmIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVTdGF0dXMpXHJcbiAgICAgICAgdGhpcy5nYW1lSW5pdERhdGEuZ2FtZVBhdXNlID0gIXRoaXMuZ2FtZUluaXREYXRhLmdhbWVQYXVzZTtcclxufVxyXG5leHBvcnRzLmdhbWVVaVBhdXNlID0gZ2FtZVVpUGF1c2U7XHJcbmZ1bmN0aW9uIGdhbWVVaU1lbnUoZ2FtZVVpUGF1c2UpIHtcclxuICAgIHZhciBpbnZlbnRvcnlXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2JhY2twYWNrLXdyYXBwZXInKTtcclxuICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVVaVBhdXNlID0gIXRoaXMuZ2FtZUluaXREYXRhLmdhbWVVaVBhdXNlO1xyXG4gICAgcGxheWVyVW5pdE1vZHVsZV8xLmhpZGVJbnZlbnRvcnkoKTtcclxuICAgIHByb2Nlc3MuZW52LkdST1VORF9DSEFSQUNURVJTX0lOVkVOVE9SWSA9ICdmYWxzZSc7XHJcbiAgICBpZiAodGhpcy5nYW1lSW5pdERhdGEuc2hvcEFjdGl2ZSAmJiB0aGlzLmdhbWVJbml0RGF0YS5pbnZlbnRvcnlBY3RpdmUgfHwgdGhpcy5nYW1lSW5pdERhdGEuaW52ZW50b3J5QWN0aXZlKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHRoaXMuZ2FtZUluaXREYXRhLmdhbWVQYXVzZSA9IChnYW1lVWlQYXVzZSkgPyBmYWxzZSA6IHRydWU7XHJcbn1cclxuZXhwb3J0cy5nYW1lVWlNZW51ID0gZ2FtZVVpTWVudTtcclxuZnVuY3Rpb24gdWlDb250cm9sbGVyKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgIHZhciBjb250cm9sS2V5cyA9IHRoaXMuZ2FtZUluaXREYXRhLmdhbWVEYXRhLmdhbWVTZXRpbmdzLmtleUNvbnRyb2xzO1xyXG4gICAgdmFyIGdhbWVPYmplY3QgPSB0aGlzO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LkdST1VORF9QTEFZRVJfQUxMT1dfTU9WRSA9PT0gJ2ZhbHNlJylcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChjb250cm9sS2V5cy5lc2NhcGUuc29tZShmdW5jdGlvbiAobykgeyByZXR1cm4gZXZlbnQua2V5Q29kZSA9PSBvOyB9KSlcclxuICAgICAgICAgICAgZ2FtZU9iamVjdC5nYW1lVWlNZW51KF90aGlzLmdhbWVJbml0RGF0YS5nYW1lVWlQYXVzZSk7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xLZXlzLnBhdXNlLnNvbWUoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIGV2ZW50LmtleUNvZGUgPT0gbzsgfSkpXHJcbiAgICAgICAgICAgIGdhbWVPYmplY3QuZ2FtZVVpUGF1c2UoKTtcclxuICAgIH0pO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX3RoaXMuZ2V0TGV2ZWxVc2VyRGF0YSgpO1xyXG4gICAgICAgIGNhbnZhc01lbnVDbGlja0V2ZW50LmNhbGwoX3RoaXMsIHtcclxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0LFxyXG4gICAgICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnVpQ29udHJvbGxlciA9IHVpQ29udHJvbGxlcjtcclxuZnVuY3Rpb24gY2FudmFzTWVudUNsaWNrRXZlbnQoX2EpIHtcclxuICAgIHZhciBldmVudCA9IF9hLmV2ZW50LCBnYW1lT2JqZWN0ID0gX2EuZ2FtZU9iamVjdCwgZGF0YSA9IF9hLmRhdGE7XHJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgPT09IFwiQ0FOVkFTXCIpIHtcclxuICAgICAgICB2YXIgeCA9IGV2ZW50LmNsaWVudFggLSBldmVudC50YXJnZXQub2Zmc2V0TGVmdCwgeSA9IGV2ZW50LmNsaWVudFkgLSBldmVudC50YXJnZXQub2Zmc2V0VG9wO1xyXG4gICAgICAgIHZhciBlbGVtZW50c09uU2NyZWVuID0gbnVsbDtcclxuICAgICAgICB2YXIgY3R4ID0gdGhpcy5nYW1lSW5pdERhdGEuY3R4VUlGaWVsZCwgc2NyZWVuU2l6ZSA9IHsgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCB9O1xyXG4gICAgICAgIGlmICghdGhpcy5nYW1lSW5pdERhdGEuZ2FtZVN0YXR1cykge1xyXG4gICAgICAgICAgICBlbGVtZW50c09uU2NyZWVuID0gZ2FtZVVpTG9hZE1lbnVfMS5nYW1lTG9hZE1lbnUobnVsbCwgY3R4LCBzY3JlZW5TaXplLndpZHRoLCBzY3JlZW5TaXplLmhlaWdodCwgbnVsbCk7XHJcbiAgICAgICAgICAgIGNsaWNrRGV0ZWN0aW9uLmNhbGwodGhpcywgeyB4OiB4LCB5OiB5LCBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0LCBlbGVtZW50c09uU2NyZWVuOiBlbGVtZW50c09uU2NyZWVuIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nYW1lSW5pdERhdGEuZ2FtZVVpUGF1c2UpIHtcclxuICAgICAgICAgICAgZWxlbWVudHNPblNjcmVlbiA9IGdhbWVVaVNldHRpbmdzTWVudV8xLmdhbWVTZXR0aW5nc01lbnUobnVsbCwgY3R4LCBzY3JlZW5TaXplLndpZHRoLCBzY3JlZW5TaXplLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGNsaWNrRGV0ZWN0aW9uLmNhbGwodGhpcywgeyB4OiB4LCB5OiB5LCBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0LCBlbGVtZW50c09uU2NyZWVuOiBlbGVtZW50c09uU2NyZWVuIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5nYW1lSW5pdERhdGEuZ2FtZVdpbikge1xyXG4gICAgICAgICAgICBlbGVtZW50c09uU2NyZWVuID0gZ2FtZVdpblNjcmVlbl8xLmdhbWVXaW5TY3JlZW4obnVsbCwgY3R4LCBzY3JlZW5TaXplLndpZHRoLCBzY3JlZW5TaXplLmhlaWdodCwgbnVsbCwgZGF0YSk7XHJcbiAgICAgICAgICAgIGNsaWNrRGV0ZWN0aW9uLmNhbGwodGhpcywgeyB4OiB4LCB5OiB5LCBnYW1lT2JqZWN0OiBnYW1lT2JqZWN0LCBlbGVtZW50c09uU2NyZWVuOiBlbGVtZW50c09uU2NyZWVuIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjbGlja0RldGVjdGlvbihfYSkge1xyXG4gICAgdmFyIHggPSBfYS54LCB5ID0gX2EueSwgZ2FtZU9iamVjdCA9IF9hLmdhbWVPYmplY3QsIGVsZW1lbnRzT25TY3JlZW4gPSBfYS5lbGVtZW50c09uU2NyZWVuO1xyXG4gICAgZm9yICh2YXIgaXRlbSBpbiBlbGVtZW50c09uU2NyZWVuKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5oaXREZXRlY3Rpb24oe1xyXG4gICAgICAgICAgICBvYmplY3QxOiBlbGVtZW50c09uU2NyZWVuW2l0ZW1dLFxyXG4gICAgICAgICAgICBvYmplY3RzQXJyOiBbXS5jb25jYXQoeyB4OiB4LCB5OiB5LCB3aWR0aDogMTAsIGhlaWdodDogMTAsIG5hbWU6IFwiY3Vyc29yXCIgfSksXHJcbiAgICAgICAgICAgIG1haW5HYW1lT2JqZWN0OiB0aGlzLFxyXG4gICAgICAgICAgICBHcmFwcGxlT2JqZWN0OiBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHJlcyAmJiBlbGVtZW50c09uU2NyZWVuW2l0ZW1dLmFjdGlvbikge1xyXG4gICAgICAgICAgICBlbGVtZW50c09uU2NyZWVuW2l0ZW1dLmFjdGlvbi5jYWxsKHRoaXMsIGdhbWVPYmplY3QpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2hvd1VpUG9wdXBXaW5kb3coKSB7XHJcbiAgICBkaXNwbGF5TW9kdWxlc18xLmNyZWF0ZVdpbmRvdy5jYWxsKHRoaXMpO1xyXG59XHJcbmV4cG9ydHMuc2hvd1VpUG9wdXBXaW5kb3cgPSBzaG93VWlQb3B1cFdpbmRvdztcclxuZnVuY3Rpb24gc2hvd1N0YXJ0V2luZG93KCkge1xyXG4gICAgdmFyIGRyYXdNZXRob2RzID0gW1xyXG4gICAgICAgIGRpc3BsYXlNb2R1bGVzXzEuY3JlYXRlUm91bmRCdXR0b24sXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpSW1hZ2UsXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dCxcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0XHJcbiAgICBdO1xyXG4gICAgdGhpcy5pbml0VWlFbGVtZW50cyhkcmF3TWV0aG9kcywgZ2FtZVVpTG9hZE1lbnVfMS5nYW1lTG9hZE1lbnUpO1xyXG59XHJcbmV4cG9ydHMuc2hvd1N0YXJ0V2luZG93ID0gc2hvd1N0YXJ0V2luZG93O1xyXG5mdW5jdGlvbiBzaG93TWVudVdpbmRvdygpIHtcclxuICAgIHZhciBkcmF3TWV0aG9kcyA9IFtcclxuICAgICAgICBkaXNwbGF5TW9kdWxlc18xLmNyZWF0ZVNoYXBlUm91bmRCb3JkZXIsXHJcbiAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jcmVhdGVSb3VuZEJ1dHRvbixcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0XHJcbiAgICBdO1xyXG4gICAgdGhpcy5pbml0VWlFbGVtZW50cyhkcmF3TWV0aG9kcywgZ2FtZVVpU2V0dGluZ3NNZW51XzEuZ2FtZVNldHRpbmdzTWVudSk7XHJcbn1cclxuZXhwb3J0cy5zaG93TWVudVdpbmRvdyA9IHNob3dNZW51V2luZG93O1xyXG5mdW5jdGlvbiBzaG93UGF1c2VXaW5kb3coKSB7XHJcbiAgICB2YXIgZHJhd01ldGhvZHMgPSBbXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dFxyXG4gICAgXTtcclxuICAgIHRoaXMuaW5pdFVpRWxlbWVudHMoZHJhd01ldGhvZHMsIGdhbWVQYXVzZVNjcmVlbl8xLmdhbWVQYXVzZSk7XHJcbn1cclxuZXhwb3J0cy5zaG93UGF1c2VXaW5kb3cgPSBzaG93UGF1c2VXaW5kb3c7XHJcbmZ1bmN0aW9uIHNob3dHYW1lU3RhdHMoX2EpIHtcclxuICAgIHZhciBwbGF5ZXJPYmplY3QgPSBfYS5wbGF5ZXJPYmplY3QsIG1haW5HYW1lT2JqZWN0ID0gX2EubWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0TGV2ZWxVc2VyRGF0YSgpO1xyXG4gICAgZGF0YS5wbGF5ZXJPYmplY3QgPSBwbGF5ZXJPYmplY3Q7XHJcbiAgICBkYXRhLm1haW5HYW1lT2JqZWN0ID0gbWFpbkdhbWVPYmplY3Q7XHJcbiAgICB2YXIgZHJhd01ldGhvZHMgPSBbXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpSW1hZ2UsXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dCxcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0LFxyXG4gICAgICAgIHVpRWxlbWVudE1vZHVsZXNfMS51aVRleHQsXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpSW1hZ2UsXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dCxcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlJbWFnZSxcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0LFxyXG4gICAgICAgIHVpRWxlbWVudE1vZHVsZXNfMS51aVRleHRcclxuICAgIF07XHJcbiAgICB0aGlzLmluaXRVaUVsZW1lbnRzKGRyYXdNZXRob2RzLCBnYW1lU3RhdHNTY3JlZW5fMS5nYW1lSW5mb3JtYXRpb25TY3JlZW4sIGRhdGEpO1xyXG59XHJcbmV4cG9ydHMuc2hvd0dhbWVTdGF0cyA9IHNob3dHYW1lU3RhdHM7XHJcbmZ1bmN0aW9uIGxldmVsQ2hhbmdlV2luZG93KCkge1xyXG4gICAgdmFyIGRhdGEgPSB0aGlzLmdldExldmVsVXNlckRhdGEoKTtcclxuICAgIHZhciBkcmF3TWV0aG9kcyA9IFtcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0LFxyXG4gICAgICAgIHVpRWxlbWVudE1vZHVsZXNfMS51aVRleHQsXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dFxyXG4gICAgXTtcclxuICAgIHRoaXMuaW5pdFVpRWxlbWVudHMoZHJhd01ldGhvZHMsIGxldmVsQ2hhbmdlU2NyZWVuXzEubGV2ZWxDaGFuZ2VTY3JlZW4sIGRhdGEpO1xyXG59XHJcbmV4cG9ydHMubGV2ZWxDaGFuZ2VXaW5kb3cgPSBsZXZlbENoYW5nZVdpbmRvdztcclxuZnVuY3Rpb24gZ2FtZU92ZXJXaW5kb3coKSB7XHJcbiAgICB2YXIgZHJhd01ldGhvZHMgPSBbXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dCxcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0LFxyXG4gICAgICAgIHVpRWxlbWVudE1vZHVsZXNfMS51aVRleHRcclxuICAgIF07XHJcbiAgICB0aGlzLmluaXRVaUVsZW1lbnRzKGRyYXdNZXRob2RzLCBnYW1lR2FtZU92ZXJTY3JlZW5fMS5nYW1lT3ZlclNjcmVlbik7XHJcbn1cclxuZXhwb3J0cy5nYW1lT3ZlcldpbmRvdyA9IGdhbWVPdmVyV2luZG93O1xyXG5mdW5jdGlvbiBnYW1lV2luV2luZG93KCkge1xyXG4gICAgdmFyIGRhdGEgPSB0aGlzLmdldExldmVsVXNlckRhdGEoKTtcclxuICAgIHZhciBkcmF3TWV0aG9kcyA9IFtcclxuICAgICAgICB1aUVsZW1lbnRNb2R1bGVzXzEudWlUZXh0LFxyXG4gICAgICAgIHVpRWxlbWVudE1vZHVsZXNfMS51aVRleHQsXHJcbiAgICAgICAgdWlFbGVtZW50TW9kdWxlc18xLnVpVGV4dCxcclxuICAgICAgICBkaXNwbGF5TW9kdWxlc18xLmNyZWF0ZVJvdW5kQnV0dG9uLFxyXG4gICAgICAgIGRpc3BsYXlNb2R1bGVzXzEuY3JlYXRlUm91bmRCdXR0b24sXHJcbiAgICAgICAgZGlzcGxheU1vZHVsZXNfMS5jcmVhdGVSb3VuZEJ1dHRvblxyXG4gICAgXTtcclxuICAgIHRoaXMuaW5pdFVpRWxlbWVudHMoZHJhd01ldGhvZHMsIGdhbWVXaW5TY3JlZW5fMS5nYW1lV2luU2NyZWVuLCBkYXRhKTtcclxufVxyXG5leHBvcnRzLmdhbWVXaW5XaW5kb3cgPSBnYW1lV2luV2luZG93O1xyXG5mdW5jdGlvbiBpbml0VWlFbGVtZW50cyhkcmF3TWV0aG9kcywgY2FsbGJhY2spIHtcclxuICAgIHZhciBwcm9wcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBwcm9wc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBjdHggPSB0aGlzLmdhbWVJbml0RGF0YS5jdHhVSUZpZWxkLCBzY3JlZW5TaXplID0geyB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IH0sIHBpY0RpcmVjdGlvbiA9IHRoaXMuc2hvd0dhbWVJbmZvKCkuaW1hZ2VEaXJyZWN0aW9uO1xyXG4gICAgdmFyIHNjcmVlbk9iamVjdHMgPSBjYWxsYmFjay5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXlzKFtudWxsLCBjdHgsIHNjcmVlblNpemUud2lkdGgsIHNjcmVlblNpemUuaGVpZ2h0LCBwaWNEaXJlY3Rpb25dLCBwcm9wcykpO1xyXG4gICAgZm9yICh2YXIgaXRlbUluZGV4ID0gMDsgaXRlbUluZGV4IDwgc2NyZWVuT2JqZWN0cy5sZW5ndGg7IGl0ZW1JbmRleCsrKSB7XHJcbiAgICAgICAgaWYgKHNjcmVlbk9iamVjdHNbaXRlbUluZGV4XS5oYXNPd25Qcm9wZXJ0eSgnbG9hZFBpY3R1cmUnKSlcclxuICAgICAgICAgICAgc2NyZWVuT2JqZWN0c1tpdGVtSW5kZXhdLmxvYWRQaWN0dXJlKCk7XHJcbiAgICAgICAgc2NyZWVuT2JqZWN0c1tpdGVtSW5kZXhdLmluaXQoZHJhd01ldGhvZHNbaXRlbUluZGV4XSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5pbml0VWlFbGVtZW50cyA9IGluaXRVaUVsZW1lbnRzO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgdWlNb2RlbE1ldGhvZHNfMSA9IHJlcXVpcmUoXCIuL3VpTW9kZWxNZXRob2RzXCIpO1xyXG5mdW5jdGlvbiBnYW1lTG9hZE1lbnUoZGF0YSwgY3R4LCB3aWR0aCwgaGVpZ2h0LCBwaWN0dXJlRGlyZWN0aW9uKSB7XHJcbiAgICByZXR1cm4gZGF0YSB8fCBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIlN0YXJ0IGJ1dHRvblwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIlByZXNzIFN0YXJ0IHRvIGJlZ2luXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1haW4gc3RhcnQgZ2FtZSBidXR0b24gaW4gdGhlIG1haW4gbG9hZCBzY3JlZW5cIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMzBweCBBcmlhbFwiLFxyXG4gICAgICAgICAgICBjbGlja2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgY3R4OiBjdHgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA5MCxcclxuICAgICAgICAgICAgICAgIHg6IHdpZHRoIC8gMiAtIDE2NSxcclxuICAgICAgICAgICAgICAgIHk6IGhlaWdodCAvIDIgKyAxNTAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMixcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzI1MTUzNicsXHJcbiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMzcsIDIxLCA1NCwgMCknLFxyXG4gICAgICAgICAgICAgICAgdGV4dFByb3BlcnR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dENvbG9yOiAnIzI1MTUzNicsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wUGFkZGluZzogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRQYWRkaW5nOiA0MCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21QYWRkaW5nOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0UGFkZGluZzogNDAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA0NSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGFydCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiTG9nb3R5cGVcIixcclxuICAgICAgICAgICAgdGV4dDogXCJcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiR2FtZSBsb2dvdHlwZVwiLFxyXG4gICAgICAgICAgICBjbGlja2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgY3R4OiBjdHgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMTUwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXHJcbiAgICAgICAgICAgICAgICBzV2lkdGg6IDEwMjQsXHJcbiAgICAgICAgICAgICAgICBzSGVpZ2h0OiAxMDI0LFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gNzUsXHJcbiAgICAgICAgICAgICAgICB5OiA5MCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG5ldyBJbWFnZSgpLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9hZFBpY3R1cmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5iYWNrZ3JvdW5kLnNyYyA9IHBpY3R1cmVEaXJlY3Rpb24gKyAnbWlzYy9sb2dvLTEwMjR4MTAyNC5wbmcnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiR2FtZSBuYW1lXCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiU3BhY2VcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiR2FtZSBwYXJ0IHRoZSBuYW1lXCIsXHJcbiAgICAgICAgICAgIGNsaWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogXCJib2xkIDEwMHB4IFJvYm90b1wiLFxyXG4gICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAtMjkwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICAgeTogMzcwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkdhbWUgbmFtZVwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIkF0dGFja1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJHYW1lIHBhcnQgdGhlIG5hbWVcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcImxpZ2h0ZXIgMTAwcHggUm9ib3RvXCIsXHJcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDIsXHJcbiAgICAgICAgICAgICAgICB5OiAzNzAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoODksIDAsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9XHJcbiAgICBdO1xyXG59XHJcbmV4cG9ydHMuZ2FtZUxvYWRNZW51ID0gZ2FtZUxvYWRNZW51O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciB1aU1vZGVsTWV0aG9kc18xID0gcmVxdWlyZShcIi4vdWlNb2RlbE1ldGhvZHNcIik7XHJcbnZhciBjb25zdHJ1Y3RvcnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL2NvbnN0cnVjdG9yc1wiKSk7XHJcbnZhciBhcHBNZW51XzEgPSByZXF1aXJlKFwiLi4vLi4vYXBwTWVudS9hcHBNZW51XCIpO1xyXG5mdW5jdGlvbiBnYW1lU2V0dGluZ3NNZW51KGRhdGEsIGN0eCwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgcmV0dXJuIGRhdGEgfHwgW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCJtZW51IGJhY2tncm91bmRcIixcclxuICAgICAgICAgICAgdGV4dDogXCJcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiYmFjayBwYXJ0IG9mIG1lbnUgXCIsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjMwcHggQXJpYWxcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0NTAsXHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogMTAwLFxyXG4gICAgICAgICAgICAgICAgZ3JhZGllbnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBiYWNrR3JvdW5kRmluYWw6IFwicmdiYSg1NiwgMiwgNjQsIC4xKVwiLFxyXG4gICAgICAgICAgICAgICAgdG9wWDogMCxcclxuICAgICAgICAgICAgICAgIHRvcFk6IDAsXHJcbiAgICAgICAgICAgICAgICBib3R0b21YOiB3aWR0aCxcclxuICAgICAgICAgICAgICAgIGJvdHRvbVk6IDEwMCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwicmdiYSg0NywgMzQsIDQ5LCAuNylcIixcclxuICAgICAgICAgICAgICAgIGlzQm9yZGVyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMixcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiMyNTE1MzZcIixcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiBcInJnYmEoMCwgMCwgMCwgMSlcIixcclxuICAgICAgICAgICAgICAgIHJhZGl1czogNSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkJ1dHRvbiBlbmQgZ2FtZVwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIlJlc3RhcnQgdGhlIGdhbWVcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiYmFjayB0byBzdGFydCBzY3JlZW5cIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMjBweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXHJcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDIgLSAxNTAsXHJcbiAgICAgICAgICAgICAgICB5OiBoZWlnaHQgLyAyICsgNTAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcclxuICAgICAgICAgICAgICAgIHRleHRQcm9wZXJ0eToge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogJyMyNTE1MzYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcFBhZGRpbmc6IDcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRQYWRkaW5nOiA1MCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21QYWRkaW5nOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0UGFkZGluZzogNDAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiAxNSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuZGlhbG9nV2luZG93KHsgdGV4dERhdGE6ICdyZXN0YXJ0IHRoZSBnYW1lPycsIHJlamVjdFRleHQ6ICdjYW5jZWwnLCBhY2NlcHRUZXh0OiAncmVzdGFydCcgfSwgdGhpcy5iYWNrVG9TdGFydFNjcmVlbiwgbnVsbCwgdGhpcywgY29uc3RydWN0b3JzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiBcIk1haW4gZ2FtZSBtZW51IG5hbWVcIixcclxuICAgICAgICAgICAgdGV4dDogXCJNZW51XCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRleHQgaW4gbWFpbiB0b3BcIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMjVweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IC00NSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIHg6IHdpZHRoIC8gMixcclxuICAgICAgICAgICAgICAgIHk6IDE1MCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn1cclxuZXhwb3J0cy5nYW1lU2V0dGluZ3NNZW51ID0gZ2FtZVNldHRpbmdzTWVudTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHVpTW9kZWxNZXRob2RzXzEgPSByZXF1aXJlKFwiLi91aU1vZGVsTWV0aG9kc1wiKTtcclxuZnVuY3Rpb24gZ2FtZVBhdXNlKGRhdGEsIGN0eCwgd2lkdGgsIGhlaWdodCwgcGljdHVyZURpcnJlY3Rpb24pIHtcclxuICAgIHJldHVybiBkYXRhIHx8IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiUGF1c2UgdGV4dFwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIlBhdXNlXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInBhcnQgb2YgcGF1c2Ugd2luZG93XCIsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjYwcHggQXJpYWxcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogOTAsXHJcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDIgLSAxNTAsXHJcbiAgICAgICAgICAgICAgICB5OiAxMDAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogNDUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn1cclxuZXhwb3J0cy5nYW1lUGF1c2UgPSBnYW1lUGF1c2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vICBwb2ludHMgICBsaWZlLCB0aW1lIHRvIGVuZHMsIGxldmVsXHJcbnZhciB1aU1vZGVsTWV0aG9kc18xID0gcmVxdWlyZShcIi4vdWlNb2RlbE1ldGhvZHNcIik7XHJcbmZ1bmN0aW9uIGdhbWVJbmZvcm1hdGlvblNjcmVlbihleHRyYSwgY3R4LCB3aWR0aCwgaGVpZ2h0LCBwaWN0dXJlRGlycmVjdGlvbiwgaW5mbykge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwibGlmZVBvaW50XCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiXCIsXHJcbiAgICAgICAgICAgIG51bWJlcjogaW5mby5saWZlLFxyXG4gICAgICAgICAgICBzdGVwOiBbaW5mby5saWZlXS5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkgKiA1MDsgfSksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkdhbWUgbG9nb3R5cGVcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDcwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA3MCxcclxuICAgICAgICAgICAgICAgIHNXaWR0aDogNTAwLFxyXG4gICAgICAgICAgICAgICAgc0hlaWdodDogNTAwLFxyXG4gICAgICAgICAgICAgICAgeDogMTAsXHJcbiAgICAgICAgICAgICAgICB5OiAyMCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG5ldyBJbWFnZSgpLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9hZFBpY3R1cmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5iYWNrZ3JvdW5kLnNyYyA9IHBpY3R1cmVEaXJyZWN0aW9uICsgJ21pc2MvcnVieS5wbmcnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSAoZGF0YSkgPyBkYXRhIDogdGhpcztcclxuICAgICAgICAgICAgICAgIGlmICghaW5mby5saWZlIHx8IGluZm8ubGlmZSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzID0gQXJyYXkoaW5mby5saWZlKS5maWxsKDApLm1hcChmdW5jdGlvbiAobywgaSkgeyByZXR1cm4gaSAqIDMwOyB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXJnaW5MZWZ0ID0gMzA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubnVtYmVyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMueCA9IChpID09IDApID8gbWFyZ2luTGVmdCA6IDAgKyBzdGVwc1tpXSArICgoaSAhPSAwKSA/IG1hcmdpbkxlZnQgOiAwKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbmFtZTogXCJsZXZlbFwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIiBcIiArICgoaW5mby5jdXJyZW50TGV2ZWwgPD0gaW5mby5hbGxMZXZlbHMpID8gJ0N1cnJlbnQgTGV2ZWwgJyArIGluZm8uY3VycmVudExldmVsIDogJ2VuZCBvZiB0aGUgZ2FtZScpICsgXCIgXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkdhbWUgcGFydCB0aGUgbmFtZVwiLFxyXG4gICAgICAgICAgICBjbGlja2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiYm9sZCAxNnB4IFJvYm90b1wiLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgeDogMzAsXHJcbiAgICAgICAgICAgICAgICB5OiA3MCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAxKScsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbmFtZTogXCJUaW1lIHRvIGVuZCBsZXZlbFwiLFxyXG4gICAgICAgICAgICB0ZXh0OiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1haW5HYW1lT2JqZWN0ID0gaW5mby5tYWluR2FtZU9iamVjdDtcclxuICAgICAgICAgICAgICAgIHZhciBkeW5hbWljTGV2ZWxzQWN0aXZlID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmU7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNCb3NzTGV2ZWwgPSAocHJvY2Vzcy5lbnYuQk9TU19MT0FEX0FUX0xFVkVMID09PSAndHJ1ZScpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5mby5taW51dGVzIHx8IGluZm8ubWludXRlcyA9PT0gMCB8fCBpbmZvLnNlY29uZHMgfHwgaW5mby5zZWNvbmRzID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbnV0ZXMgPSAoaW5mby5taW51dGVzIC0gMTAgPj0gMCkgPyAnJyA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlY29uZHMgPSAoaW5mby5zZWNvbmRzIC0gMTAgPj0gMCkgPyAnJyA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVRleHQgPSBcIlRpbWUgdG8gbGV2ZWwgZW5kIFwiICsgbWludXRlcyArIGluZm8ubWludXRlcyArIFwiOlwiICsgc2Vjb25kcyArIGluZm8uc2Vjb25kcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc0Jvc3NMZXZlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0ID0gXCJCb3NzIGxldmVsXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZHluYW1pY0xldmVsc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0ID0gXCJcIiArIGluZm8uc291cmNlLmxldmVsRGF0YS5kZXNjcmlwdGlvbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXlUZXh0O1xyXG4gICAgICAgICAgICB9KSgpLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJHYW1lIHBhcnQgdGhlIG5hbWVcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcImxpZ2h0IDE2cHggUm9ib3RvXCIsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDUwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLSAzMDAsXHJcbiAgICAgICAgICAgICAgICB5OiAzMCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAxKScsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IG51bGwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbmFtZTogXCJHYW1lIHBvaW50c1wiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcInNjb3JlOiBcIiArIGluZm8ucG9pbnRzLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJHYW1lIHBhcnQgdGhlIG5hbWVcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcImxpZ2h0IDE4cHggUm9ib3RvXCIsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IC01MCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMCxcclxuICAgICAgICAgICAgICAgIHg6IHdpZHRoIC8gMixcclxuICAgICAgICAgICAgICAgIHk6IDcwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiBcImNvaW5zXCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiXCIsXHJcbiAgICAgICAgICAgIG51bWJlcjogaW5mby5zb3VyY2UuZ2FtZUNvaW5zLFxyXG4gICAgICAgICAgICBzdGVwOiBbaW5mby5saWZlXS5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkgKiA1MDsgfSksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkdhbWUgbG9nb3R5cGVcIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwLFxyXG4gICAgICAgICAgICAgICAgc1dpZHRoOiA1MDAsXHJcbiAgICAgICAgICAgICAgICBzSGVpZ2h0OiA1MDAsXHJcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDIgLSA1MCxcclxuICAgICAgICAgICAgICAgIHk6IDI1LFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbmV3IEltYWdlKCksXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMCknLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2FkUGljdHVyZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmJhY2tncm91bmQuc3JjID0gcGljdHVyZURpcnJlY3Rpb24gKyAnbWlzYy9ncmFwcGxlLW9iamVjdHMvY29pbi5wbmcnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSAoZGF0YSkgPyBkYXRhIDogdGhpcztcclxuICAgICAgICAgICAgICAgIHZhciBjb2ludEluZGV4ID0gTWF0aC5mbG9vcih0aGlzLm51bWJlciAvIDUwMDApLCBudW1iZXJPZkNvaW4gPSAoY29pbnRJbmRleCA+IDAgJiYgY29pbnRJbmRleCA8IDEwKSA/IGNvaW50SW5kZXggOiAoY29pbnRJbmRleCA+PSAxMCkgPyAxMCA6IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSBBcnJheShudW1iZXJPZkNvaW4pLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiBpICogNTsgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IHRoaXMucHJvcGVydGllcy54O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkNvaW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy54ID0gKGkgPT0gMCkgPyBtYXJnaW5MZWZ0IDogMCArIHN0ZXBzW2ldICsgKChpICE9IDApID8gbWFyZ2luTGVmdCA6IDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkdhbWUgY29pbnNcIixcclxuICAgICAgICAgICAgdGV4dDogXCJYXCIgKyBpbmZvLnNvdXJjZS5nYW1lQ29pbnMsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkdhbWUgcGFydCB0aGUgbmFtZVwiLFxyXG4gICAgICAgICAgICBjbGlja2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgZm9udFNpemU6IFwibGlnaHQgMThweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgY3R4OiBjdHgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogLTUwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICAgeTogMjAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMSknLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCJvYmplY3RcIixcclxuICAgICAgICAgICAgdGV4dDogXCJcIixcclxuICAgICAgICAgICAgaW5mbzogaW5mbyxcclxuICAgICAgICAgICAgc3RlcDogW2luZm8ubGlmZV0ubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpICogNTA7IH0pLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJHYW1lIGxvZ290eXBlXCIsXHJcbiAgICAgICAgICAgIGNsaWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCxcclxuICAgICAgICAgICAgICAgIHNXaWR0aDogNTAwLFxyXG4gICAgICAgICAgICAgICAgc0hlaWdodDogNTAwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gNTAsXHJcbiAgICAgICAgICAgICAgICB5OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSA1MCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG5ldyBJbWFnZSgpLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDApJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9hZFBpY3R1cmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydGllcy5iYWNrZ3JvdW5kLnNyYyA9IHBpY3R1cmVEaXJyZWN0aW9uICsgJ21pc2MvZ3JhcHBsZS1vYmplY3RzL2NvaW4ucG5nJztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNhbGxiYWNrLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gKGRhdGEpID8gZGF0YSA6IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW52ZW50b3J5ID0gZGF0YS5pbmZvLnBsYXllck9iamVjdC5kYXRhLmludmVudG9yeS5maWx0ZXIoZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5zdGF0dXMgPT09IFwiaW52ZW50b3J5IHN0YXRpY1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpbnZlbnRvcnkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdHNXaXRoUHJvcGVydGllcyA9IGludmVudG9yeS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaW1nLnNyYyA9IHByb2Nlc3MuZW52LkhPU1QgKyBpdGVtLmRpc3BsYXlJbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA1MCAqIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2YXRlQnV0dG9uOiBpdGVtLmdyYXBwbGVQb3dlci52YWx1ZS5hY3RpdmF0ZUJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBtYWluR2FtZU9iamVjdCA9IGluZm8ubWFpbkdhbWVPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICBpZiAobWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmR5bmFtaWNMZXZlbHNBY3RpdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzV2l0aFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9iamVjdHNXaXRoUHJvcGVydGllc1tpXS5kYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZE9iamVjdCA9IG9iamVjdHNXaXRoUHJvcGVydGllc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZE9iamVjdC5kYXRhLnN0YXR1cyA9PT0gXCJpbnZlbnRvcnkgc3RhdGljXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmJhY2tncm91bmQgPSBjYXJkT2JqZWN0LmRhdGEuaW1nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMueCArPSA1MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChjYXJkT2JqZWN0LmRhdGEuZ3JhcHBsZVBvd2VyLm51bWJlciwgdGhpcy5wcm9wZXJ0aWVzLngsIHdpbmRvdy5pbm5lckhlaWdodCAtIDQwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGNhcmRPYmplY3QuYWN0aXZhdGVCdXR0b24sIHRoaXMucHJvcGVydGllcy54ICsgMzAsIHdpbmRvdy5pbm5lckhlaWdodCAtIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiR2FtZSBjb250cm9scyBwYXJ0IDFcIixcclxuICAgICAgICAgICAgdGV4dDogKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYWluR2FtZU9iamVjdCA9IGluZm8ubWFpbkdhbWVPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICB2YXIgZHluYW1pY0xldmVsc0FjdGl2ZSA9IG1haW5HYW1lT2JqZWN0LmdhbWVJbml0RGF0YS5keW5hbWljTGV2ZWxzQWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxldmVsQ2hhbmdlID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmxldmVsQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgLy9sZXZlbENoYW5nZVxyXG4gICAgICAgICAgICAgICAgdmFyIHBhdXNlID0gbWFpbkdhbWVPYmplY3QuZ2FtZUluaXREYXRhLmdhbWVQYXVzZTtcclxuICAgICAgICAgICAgICAgIHZhciBnYW1lQ29udHJvbHMgPSAoZHluYW1pY0xldmVsc0FjdGl2ZSAmJiAhcGF1c2UpID9cclxuICAgICAgICAgICAgICAgICAgICBcImVzYyAtIG1lbnUgUCAtIHBhdXNlIExNQihob2xkKSAtIHNob3QgIFcgLSBqdW1wICBEIC0gcmlnaHQgIFMgLSBkb3duICBBIC0gbGVmdFwiIDogKCFwYXVzZSkgP1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZXNjIC0gbWVudSBQIC0gcGF1c2UgIExNQiAtIHNob3QgIEkgLSBpbnZlbnRvcnkgIEogLWpvdXJuYWxcIiA6IChkeW5hbWljTGV2ZWxzQWN0aXZlICYmIHBhdXNlKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgXCJlc2MgLSBiYWNrIHRvIGdhbWUgUCAtIHBhdXNlICBXIC0ganVtcCAgRCAtIHJpZ2h0ICBTIC0gZG93biAgQSAtIGxlZnQgIEogLSBqb3VybmFsICBNIC0gbWFwICBJIC0gaW52ZW50b3J5XCIgOlxyXG4gICAgICAgICAgICAgICAgICAgIFwiZXNjIC0gbWVudSAgIFAgLSBwYXVzZSAgSSAtIGludmVudG9yeSAgSiAtIGpvdXJuYWxcIjtcclxuICAgICAgICAgICAgICAgIGlmICghbGV2ZWxDaGFuZ2UgJiYgIXBhdXNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgICAgIHJldHVybiBnYW1lQ29udHJvbHM7XHJcbiAgICAgICAgICAgIH0pKCksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkdhbWUgY29udHJvbGwgYnV0dG9uIHRpcHMgcGFydCAxXCIsXHJcbiAgICAgICAgICAgIGNsaWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogXCJ0aGluIDEycHggUm9ib3RvXCIsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDUwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IGhlaWdodCAtIDUwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMTk2LCAxOTgsIDIwMSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSxcclxuICAgIF07XHJcbn1cclxuZXhwb3J0cy5nYW1lSW5mb3JtYXRpb25TY3JlZW4gPSBnYW1lSW5mb3JtYXRpb25TY3JlZW47XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciB1aU1vZGVsTWV0aG9kc18xID0gcmVxdWlyZShcIi4vdWlNb2RlbE1ldGhvZHNcIik7XHJcbmZ1bmN0aW9uIGdhbWVPdmVyU2NyZWVuKGRhdGEsIGN0eCwgd2lkdGgsIGhlaWdodCwgcGljdHVyZURpcnJlY3Rpb24pIHtcclxuICAgIHJldHVybiBkYXRhIHx8IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiUGF1c2UgdGV4dFwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIkdhbWUgT3ZlclwiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJ0ZXh0IGZvciBnYW1lIG92ZXIgd2luZG93XCIsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIjExMHB4IEFyaWFsXCIsXHJcbiAgICAgICAgICAgIGNsaWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA5MCxcclxuICAgICAgICAgICAgICAgIHg6IHdpZHRoIC8gMiAtIDI1MCxcclxuICAgICAgICAgICAgICAgIHk6IGhlaWdodCAvIDIgLSA1MCxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIGlzQm9yZGVyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMixcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA0NSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxufVxyXG5leHBvcnRzLmdhbWVPdmVyU2NyZWVuID0gZ2FtZU92ZXJTY3JlZW47XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0W1wiZGVmYXVsdFwiXSA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHVpTW9kZWxNZXRob2RzXzEgPSByZXF1aXJlKFwiLi91aU1vZGVsTWV0aG9kc1wiKTtcclxudmFyIGNvbnN0cnVjdG9ycyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vY29uc3RydWN0b3JzXCIpKTtcclxudmFyIGFwcE1lbnVfMSA9IHJlcXVpcmUoXCIuLi8uLi9hcHBNZW51L2FwcE1lbnVcIik7XHJcbnZhciBnYW1lUmVzdWx0TW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vYXBwTWVudS9nYW1lUmVzdWx0TW9kdWxlXCIpO1xyXG5mdW5jdGlvbiBnYW1lV2luU2NyZWVuKGRhdGEsIGN0eCwgd2lkdGgsIGhlaWdodCwgcGljdHVyZURpcnJlY3Rpb24sIGluZm8pIHtcclxuICAgIHJldHVybiBkYXRhIHx8IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwic2NyZWVuIHRpdGxlXCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiWU9VIFdJTiBcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwidGV4dCBmb3IgZ2FtZSBvdmVyIHdpbmRvd1wiLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogXCIgYm9sZCAxMjBweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gMjUwLFxyXG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gMiAtIGhlaWdodCAvIDQsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogNDUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcInNjcmVlbiB0ZXh0XCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiQ29uZ3JhdHVsYXRpb24gXCIsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInRleHQgZm9yIGdhbWUgb3ZlciB3aW5kb3dcIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiIGJvbGQgMzBweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gMjUwLFxyXG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gMiAtIDUwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgaXNCb3JkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgzNywgMjEsIDU0LCAxKScsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IDQ1LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCJzY29yZVwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIllvdSBzY29yZSBpcyBcIiArIGluZm8ucG9pbnRzLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJ0ZXh0IGZvciBnYW1lIG92ZXIgd2luZG93XCIsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiBcIiBib2xkIDMwcHggUm9ib3RvXCIsXHJcbiAgICAgICAgICAgIGNsaWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgICAgICAgICBjdHg6IGN0eCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA5MCxcclxuICAgICAgICAgICAgICAgIHg6IHdpZHRoIC8gMiAtIDI1MCxcclxuICAgICAgICAgICAgICAgIHk6IGhlaWdodCAvIDIsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogNDUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbmFtZTogXCJCdXR0b24gZW5kIGdhbWVcIixcclxuICAgICAgICAgICAgdGV4dDogXCJTYXZlIHJlc3VsdHNcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiYmFjayB0byBzdGFydCBzY3JlZW5cIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMjVweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMwMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXHJcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDIgKyB3aWR0aCAvIDMsXHJcbiAgICAgICAgICAgICAgICB5OiBoZWlnaHQgLyAyICsgMTUwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyMyNTE1MzYnLFxyXG4gICAgICAgICAgICAgICAgaXNCb3JkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMjUxNTM2JyxcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgzNywgMjEsIDU0LCAxKScsXHJcbiAgICAgICAgICAgICAgICB0ZXh0UHJvcGVydHk6IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcFBhZGRpbmc6IDcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRQYWRkaW5nOiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tUGFkZGluZzogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdFBhZGRpbmc6IDIwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogMTUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZVJlc3VsdE1vZHVsZV8xLmluaXRSZXN1bHRTY3JlZW4odGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVVaU1lbnUodGhpcy5nYW1lSW5pdERhdGEuZ2FtZVVpUGF1c2UpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiQnV0dG9uIGVuZCBnYW1lXCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwidG8gc3RhcnRcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiYmFjayB0byBzdGFydCBzY3JlZW5cIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMjVweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXHJcbiAgICAgICAgICAgICAgICB4OiAyMCxcclxuICAgICAgICAgICAgICAgIHk6IGhlaWdodCAvIDIgKyAxNTAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnIzI1MTUzNicsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyMyNTE1MzYnLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDM3LCAyMSwgNTQsIDEpJyxcclxuICAgICAgICAgICAgICAgIHRleHRQcm9wZXJ0eToge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wUGFkZGluZzogNyxcclxuICAgICAgICAgICAgICAgICAgICByaWdodFBhZGRpbmc6IDEwMCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21QYWRkaW5nOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0UGFkZGluZzogMjAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiAxNSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuZGlhbG9nV2luZG93KHsgdGV4dERhdGE6ICdyZXN0YXJ0IHRoZSBnYW1lPycsIHJlamVjdFRleHQ6ICdjYW5jZWwnLCBhY2NlcHRUZXh0OiAncmVzdGFydCcgfSwgdGhpcy5iYWNrVG9TdGFydFNjcmVlbiwgbnVsbCwgdGhpcywgY29uc3RydWN0b3JzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVVpTWVudSh0aGlzLmdhbWVJbml0RGF0YS5nYW1lVWlQYXVzZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn1cclxuZXhwb3J0cy5nYW1lV2luU2NyZWVuID0gZ2FtZVdpblNjcmVlbjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gdWlJbWFnZShzaGFwZVByb3BlcnR5ZXMpIHtcclxuICAgIHZhciBwcm9wZXJ0aWVzID0gc2hhcGVQcm9wZXJ0eWVzLnByb3BlcnRpZXM7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5zaGFkb3dDb2xvciA9IHByb3BlcnRpZXMuc2hhZG93Q29sb3I7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5zaGFkb3dCbHVyID0gODtcclxuICAgIHByb3BlcnRpZXMuY3R4LmRyYXdJbWFnZShwcm9wZXJ0aWVzLmJhY2tncm91bmQsIDAsIDAsIHByb3BlcnRpZXMuc1dpZHRoLCBwcm9wZXJ0aWVzLnNIZWlnaHQsIHByb3BlcnRpZXMueCwgcHJvcGVydGllcy55LCBwcm9wZXJ0aWVzLndpZHRoLCBwcm9wZXJ0aWVzLmhlaWdodCk7XHJcbn1cclxuZXhwb3J0cy51aUltYWdlID0gdWlJbWFnZTtcclxuZnVuY3Rpb24gdWlUZXh0KHNoYXBlUHJvcGVydHllcykge1xyXG4gICAgdmFyIHByb3BlcnRpZXMgPSBzaGFwZVByb3BlcnR5ZXMucHJvcGVydGllcztcclxuICAgIHByb3BlcnRpZXMuY3R4LnNoYWRvd0NvbG9yID0gcHJvcGVydGllcy5zaGFkb3dDb2xvcjtcclxuICAgIHByb3BlcnRpZXMuY3R4LnNoYWRvd0JsdXIgPSA4O1xyXG4gICAgcHJvcGVydGllcy5jdHguZm9udCA9IHNoYXBlUHJvcGVydHllcy5mb250U2l6ZTtcclxuICAgIHByb3BlcnRpZXMuY3R4LmZpbGxTdHlsZSA9IHByb3BlcnRpZXMuYm9yZGVyQ29sb3I7XHJcbiAgICBwcm9wZXJ0aWVzLmN0eC5maWxsVGV4dChzaGFwZVByb3BlcnR5ZXMudGV4dCwgcHJvcGVydGllcy54ICsgcHJvcGVydGllcy53aWR0aCwgcHJvcGVydGllcy55ICsgcHJvcGVydGllcy5oZWlnaHQpO1xyXG59XHJcbmV4cG9ydHMudWlUZXh0ID0gdWlUZXh0O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgdWlNb2RlbE1ldGhvZHNfMSA9IHJlcXVpcmUoXCIuL3VpTW9kZWxNZXRob2RzXCIpO1xyXG5mdW5jdGlvbiBsZXZlbENoYW5nZVNjcmVlbihkYXRhLCBjdHgsIHdpZHRoLCBoZWlnaHQsIHBpY3R1cmVEaXJyZWN0aW9uLCBpbmZvKSB7XHJcbiAgICB2YXIgbGV2ZWxEYXRhID0gaW5mby5zb3VyY2UubGV2ZWxEYXRhO1xyXG4gICAgcmV0dXJuIGRhdGEgfHwgW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCJTY3JlZW4gbmFtZVwiLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIldhcnAgdG8gdGhlIG5leHQgbGV2ZWxcIixcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwidGV4dCBmb3IgZ2FtZSBvdmVyIHdpbmRvd1wiLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogXCIzMHB4IFJvYm90b1wiLFxyXG4gICAgICAgICAgICBjbGlja2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgICAgICAgICAgY3R4OiBjdHgsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXHJcbiAgICAgICAgICAgICAgICB4OiB3aWR0aCAvIDIgLSAyNTAsXHJcbiAgICAgICAgICAgICAgICB5OiBoZWlnaHQgLyAzIC0gNTAsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBpc0JvcmRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgc2hhZG93Q29sb3I6ICdyZ2JhKDAsIDAsIDAsIC40KScsXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IDQ1LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbml0OiB1aU1vZGVsTWV0aG9kc18xLmluaXQsXHJcbiAgICAgICAgICAgIGdldE9iamVjdFBvc2l0aW9uOiB1aU1vZGVsTWV0aG9kc18xLmdldFVJT2JqZWN0UG9zaXRpb25cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCJ3cmFwIGhlYWRcIixcclxuICAgICAgICAgICAgdGV4dDogKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gKGxldmVsRGF0YS5kZXNjcmlwdGlvbikgPyBsZXZlbERhdGEuZGVzY3JpcHRpb24ubmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRleHRTcGxpdCA9IHRleHQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0ZXh0U3BsaXQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIiArIHRleHQ7XHJcbiAgICAgICAgICAgIH0pKCksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInRleHQgZm9yIGdhbWUgb3ZlciB3aW5kb3dcIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiNzBweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gMjUwLFxyXG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gMiAtIDUwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknLFxyXG4gICAgICAgICAgICAgICAgaXNCb3JkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAyLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIHNoYWRvd0NvbG9yOiAncmdiYSgwLCAwLCAwLCAuNCknLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA0NSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5pdDogdWlNb2RlbE1ldGhvZHNfMS5pbml0LFxyXG4gICAgICAgICAgICBnZXRPYmplY3RQb3NpdGlvbjogdWlNb2RlbE1ldGhvZHNfMS5nZXRVSU9iamVjdFBvc2l0aW9uXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBuYW1lOiBcInJ3YXJwIGRlc2NyaXB0aW9uXCIsXHJcbiAgICAgICAgICAgIHRleHQ6IFwiXCIgKyAoKGxldmVsRGF0YS5kZXNjcmlwdGlvbikgPyBsZXZlbERhdGEuZGVzY3JpcHRpb24uZGVzY3JpcHRpb24gOiAnJyksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInRleHQgZm9yIGdhbWUgb3ZlciB3aW5kb3dcIixcclxuICAgICAgICAgICAgZm9udFNpemU6IFwiMjBweCBSb2JvdG9cIixcclxuICAgICAgICAgICAgY2xpY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwLFxyXG4gICAgICAgICAgICAgICAgeDogd2lkdGggLyAyIC0gMjUwLFxyXG4gICAgICAgICAgICAgICAgeTogaGVpZ2h0IC8gMixcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJyxcclxuICAgICAgICAgICAgICAgIGlzQm9yZGVyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogMixcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXHJcbiAgICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJ3JnYmEoMCwgMCwgMCwgLjQpJyxcclxuICAgICAgICAgICAgICAgIHJhZGl1czogNDUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluaXQ6IHVpTW9kZWxNZXRob2RzXzEuaW5pdCxcclxuICAgICAgICAgICAgZ2V0T2JqZWN0UG9zaXRpb246IHVpTW9kZWxNZXRob2RzXzEuZ2V0VUlPYmplY3RQb3NpdGlvblxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn1cclxuZXhwb3J0cy5sZXZlbENoYW5nZVNjcmVlbiA9IGxldmVsQ2hhbmdlU2NyZWVuO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn07XHJcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL3NlcnZlci9zZXJ2ZXJSZXF1ZXN0TW9kdWxlc1wiKTtcclxudmFyIGFwcE1lbnVfMSA9IHJlcXVpcmUoXCIuL2FwcE1lbnVcIik7XHJcbnZhciBlbmdpbmVNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2VuZ2luZU1vZHVsZXNcIik7XHJcbnZhciBsb2FkU2NyZWVuXzEgPSByZXF1aXJlKFwiLi4vdWkvbG9hZFNjcmVlblwiKTtcclxuZnVuY3Rpb24gZ2FtZVNldHRpbmdzTWVudShfYSkge1xyXG4gICAgdmFyIGRhdGEgPSBfX3Jlc3QoX2EsIFtdKTtcclxuICAgIHZhciBzZXR0aW5nc01lbnUgPSB7XHJcbiAgICAgICAgdm9sdW1lRGlzcGxheTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ZvbHVtZS1kaXNwbGF5JyksXHJcbiAgICAgICAgc291bmRMZXZlbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NvdW5kTGV2ZWwnKSxcclxuICAgICAgICB2b2x1bWVFZmZlY3REaXNwbGF5OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdm9sdW1lLWVmZmVjdC1kaXNwbGF5JyksXHJcbiAgICAgICAgc291bmRFZmZlY3RMZXZlbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NvdW5kRWZmZWN0JyksXHJcbiAgICAgICAgc291bmRPblN3aXRjaGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc291bmRPbicpLFxyXG4gICAgICAgIGZ1bGxTY3JlZW5Td2l0Y2hlcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Z1bGxTY3JlZW4nKVxyXG4gICAgfTtcclxuICAgIHNldHRpbmdzTWVudS52b2x1bWVEaXNwbGF5LmlubmVySFRNTCA9IChkYXRhLnNvdW5kTGV2ZWwpID8gZGF0YS5zb3VuZExldmVsIDogXCJcIjtcclxuICAgIHNldHRpbmdzTWVudS5zb3VuZExldmVsWyd2YWx1ZSddID0gKGRhdGEuc291bmRMZXZlbCkgPyBkYXRhLnNvdW5kTGV2ZWwgOiAwO1xyXG4gICAgc2V0dGluZ3NNZW51LnZvbHVtZUVmZmVjdERpc3BsYXkuaW5uZXJIVE1MID0gKGRhdGEuc291bmRFZmZlY3QpID8gZGF0YS5zb3VuZEVmZmVjdCA6IFwiXCI7XHJcbiAgICBzZXR0aW5nc01lbnUuc291bmRFZmZlY3RMZXZlbFsndmFsdWUnXSA9IChkYXRhLnNvdW5kRWZmZWN0KSA/IGRhdGEuc291bmRFZmZlY3QgOiAwO1xyXG4gICAgc2V0dGluZ3NNZW51LnNvdW5kT25Td2l0Y2hlclsnY2hlY2tlZCddID0gZGF0YS5zb3VuZE9uO1xyXG4gICAgc2V0dGluZ3NNZW51LmZ1bGxTY3JlZW5Td2l0Y2hlclsnY2hlY2tlZCddID0gZGF0YS5mdWxsU2NyZWVuO1xyXG4gICAgZW5naW5lTW9kdWxlc18xLmZ1bGxTY3JlZW5Td2l0Y2goeyBmdWxsc2NyZWVuOiBkYXRhLmZ1bGxTY3JlZW4gfSk7XHJcbiAgICBwcm9jZXNzLmVudi5NQUlOX0dBTUVfU09VTkRfT04gPSBkYXRhLnNvdW5kT24udG9TdHJpbmcoKTtcclxuICAgIHByb2Nlc3MuZW52Lk1BSU5fR0FNRV9TT1VORCA9IGRhdGEuc291bmRMZXZlbC50b1N0cmluZygpO1xyXG4gICAgcHJvY2Vzcy5lbnYuTUFJTl9HQU1FX1NPVU5EX0VGRkVDVFMgPSBkYXRhLnNvdW5kRWZmZWN0LnRvU3RyaW5nKCk7XHJcbn1cclxuZXhwb3J0cy5nYW1lU2V0dGluZ3NNZW51ID0gZ2FtZVNldHRpbmdzTWVudTtcclxuZnVuY3Rpb24gZ2FtZVNldHRpbmdzTWVudUluaXQoKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZVNldHRpbmdzVGV4dChfYSkge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IF9hLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHZhciBzZXR0aW5nc01lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2V0dGluZ3MtbWVzc2FnZScpO1xyXG4gICAgICAgICAgICBzZXR0aW5nc01lc3NhZ2VbJ2lubmVyVGV4dCddID0gbWVzc2FnZTtcclxuICAgICAgICAgICAgYXBwTWVudV8xLnNob3coc2V0dGluZ3NNZXNzYWdlKTtcclxuICAgICAgICAgICAgYXBwTWVudV8xLnJlbW92ZUNsYXNzTGlzdChzZXR0aW5nc01lc3NhZ2UsICdzaG93LW1lc3NhZ2UnKTtcclxuICAgICAgICAgICAgYXBwTWVudV8xLmFkZENsYXNzTGlzdChzZXR0aW5nc01lc3NhZ2UsICdzaG93LW1lc3NhZ2UnKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nc01lc3NhZ2VbJ2lubmVyVGV4dCddID0gJyc7XHJcbiAgICAgICAgICAgICAgICBhcHBNZW51XzEuaGlkZShzZXR0aW5nc01lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9LCA1MDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1lbnVTZXR0aW5nc0Zvcm0sIGNvbnRleHQsIHByZXZpdXNTZXR0aW5ncywgZ2FtZURhdGEsIHNldHRpbmdzRGF0YSwgZGF0YTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBtZW51U2V0dGluZ3NGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lbnUtc2V0dGluZ3MtZm9ybScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc2hvd0dhbWVJbmZvKCldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGdhbWVEYXRhID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzRGF0YSA9IGdhbWVEYXRhLnNldHRpbmdzO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kTGV2ZWw6IHNldHRpbmdzRGF0YS5zb3VuZExldmVsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZEVmZmVjdDogc2V0dGluZ3NEYXRhLnNvdW5kRWZmZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZE9uOiBzZXR0aW5nc0RhdGEuc291bmRPbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3Nob290OiBzZXR0aW5nc0RhdGEuYXV0b3Nob290LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsU2NyZWVuOiBzZXR0aW5nc0RhdGEuZnVsbFNjcmVlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Q29udHJvbHM6IHNldHRpbmdzRGF0YS5rZXlDb250cm9scyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuUmVzb2x1dGlvbjogc2V0dGluZ3NEYXRhLnNjcmVlblJlc29sdXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlblZhcmlhdG9uOiBzZXR0aW5nc0RhdGEuc2NyZWVuVmFyaWF0b25cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpdXNTZXR0aW5ncyA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FtZVNldHRpbmdzTWVudShkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBtZW51U2V0dGluZ3NGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybU1lbnVEYXRhKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lU2V0dGluZ3NNZW51KGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lRGF0YS5nYW1lRGF0YS5sZXZlbFNvdW5kcy5jaGFuZ2VWb2x1bWUoeyB2b2x1bWU6IHByb2Nlc3MuZW52Lk1BSU5fR0FNRV9TT1VORCB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZURhdGEuZ2FtZURhdGEubGV2ZWxTb3VuZHMudHVyblNvdW5kT2ZmKHsgdmFsdWU6IGRhdGEuc291bmRPbiB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtZW51U2V0dGluZ3NGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVudURhdGEsIHNldHRpbmdzUmVzdWx0LCBzZXJ2ZXJSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudURhdGEgPSB0cmFuc2Zvcm1NZW51RGF0YSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzUmVzdWx0ID0gcmVwbGFjZURhdGEoeyBuZXdEYXRhOiBtZW51RGF0YSwgc2V0dGluZ3NEYXRhOiBkYXRhIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldml1c1NldHRpbmdzID0gc2V0dGluZ3NSZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzZXJ2ZXJSZXF1ZXN0TW9kdWxlc18xLndyaXRlRWxlY3Ryb25Mb2NhbERhdGEoeyBmaWxlTmFtZTogJ2dhbWUtc2V0dGluZ3MuanNvbicsIGRhdGE6IEpTT04uc3RyaW5naWZ5KHNldHRpbmdzUmVzdWx0KSB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclJlc3VsdCA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVTZXR0aW5nc1RleHQoeyBtZXNzYWdlOiBzZXJ2ZXJSZXN1bHRbJ21lc3NhZ2UnXSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVudVNldHRpbmdzRm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0WydkYXRhc2V0J10uYnV0dG9uSWQgPT09ICdjYW5jZWwtc2V0dGluZ3MnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVNldHRpbmdzTWVudShwcmV2aXVzU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZURhdGEuZ2FtZURhdGEubGV2ZWxTb3VuZHMuY2hhbmdlVm9sdW1lKHsgdm9sdW1lOiBwcm9jZXNzLmVudi5NQUlOX0dBTUVfU09VTkQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lRGF0YS5nYW1lRGF0YS5sZXZlbFNvdW5kcy50dXJuU291bmRPZmYoeyB2YWx1ZTogcHJldml1c1NldHRpbmdzLnNvdW5kT24gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlU2V0dGluZ3NUZXh0KHsgbWVzc2FnZTogJ1JldHVybiB0byBwcmV2aXVzIHNldHRpbmdzJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiByZWxvYWRHYW1lQXBwKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkU2NyZWVuXzEucmVsb2FkUGFnZSgnI3NldHRpbmdzLXJlbG9hZC1idG4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5nYW1lU2V0dGluZ3NNZW51SW5pdCA9IGdhbWVTZXR0aW5nc01lbnVJbml0O1xyXG5mdW5jdGlvbiByZXBsYWNlRGF0YShfYSkge1xyXG4gICAgdmFyIG5ld0RhdGEgPSBfYS5uZXdEYXRhLCBzZXR0aW5nc0RhdGEgPSBfYS5zZXR0aW5nc0RhdGE7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gT2JqZWN0LmVudHJpZXMobmV3RGF0YSk7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9jID0gX2JbX2ldLCBrZXkgPSBfY1swXSwgdmFsdWUgPSBfY1sxXTtcclxuICAgICAgICBpZiAoa2V5ICYmIHZhbHVlIHx8IGtleSAmJiB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzRGF0YVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNldHRpbmdzRGF0YTtcclxufVxyXG5mdW5jdGlvbiB0cmFuc2Zvcm1NZW51RGF0YShkYXRhKSB7XHJcbiAgICBpZiAoIWRhdGEpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJObyBkYXRhIHRvIHRyYW5zZm9ybVwiKTtcclxuICAgIHZhciBvYmogPSB7IHNvdW5kTGV2ZWw6IG51bGwsIHNvdW5kT246IG51bGwsIHNvdW5kRWZmZWN0OiBudWxsLCBmdWxsU2NyZWVuOiBudWxsIH07XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGRhdGFfMSA9IGRhdGE7IF9pIDwgZGF0YV8xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gZGF0YV8xW19pXTtcclxuICAgICAgICBpZiAoaXRlbS5uYW1lICYmIGl0ZW0udmFsdWUpIHtcclxuICAgICAgICAgICAgKGl0ZW0udmFsdWUgPT09IFwib25cIikgPyBvYmpbaXRlbS5uYW1lXSA9IGl0ZW0uY2hlY2tlZCA6IG9ialtpdGVtLm5hbWVdID0gaXRlbS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZW5naW5lTW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9lbmdpbmVNb2R1bGVzXCIpO1xyXG52YXIgYmFja2dyb3VuZE1vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9iYWNrZ3JvdW5kTW9kdWxlXCIpO1xyXG52YXIgYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2VuZW1pZXMvYW5pbWF0aW9uSGl0Qm94TW9kdWxlc1wiKTtcclxudmFyIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lU2lkZU9iamVjdHNNb2R1bGVcIik7XHJcbnZhciBHYW1lQmFja2dyb3VuZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEdhbWVCYWNrZ3JvdW5kKF9hKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBfX3Jlc3QoX2EsIFtdKTtcclxuICAgICAgICB0aGlzLnggPSAwO1xyXG4gICAgICAgIHRoaXMueSA9IDA7XHJcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gX19kaXJuYW1lICsgZGF0YS50ZXh0dXJlO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBkYXRhLnNwZWVkO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFNwZWVkID0gZGF0YS5zcGVlZDtcclxuICAgICAgICB0aGlzLnNjcmVlbkRhdGEgPSBkYXRhLnNjcmVlbkRhdGE7XHJcbiAgICAgICAgdGhpcy5jdHggPSBkYXRhLmN0eDtcclxuICAgICAgICB0aGlzLnggPSAoZGF0YS5wYXJ0T2ZTY3JlZW5TdGF0dXMpID8gMCAtIDEgOiB3aW5kb3cuaW5uZXJXaWR0aCArIDE7XHJcbiAgICAgICAgdGhpcy55ID0gKGRhdGEueSkgPyBkYXRhLnkgOiAwO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFkgPSAoZGF0YS55KSA/IGRhdGEueSA6IDA7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0WCA9IChkYXRhLngpID8gZGF0YS54IDogMDtcclxuICAgICAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuZXh0cmFNYXAgPSBkYXRhLmV4dHJhTWFwO1xyXG4gICAgICAgIHRoaXMudGltZVRvRXJlc3NMZXZlbCA9IDQ7XHJcbiAgICAgICAgdGhpcy53YXJwT2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMudGltZVRvRXh0cmFNYXBTZWNvbmRzID0gZGF0YS50aW1lVG9FeHRyYU1hcFNlY29uZHM7XHJcbiAgICAgICAgdGhpcy50aW1lVG9FeHRyYU1hcE1pbnV0ZXMgPSBkYXRhLnRpbWVUb0V4dHJhTWFwTWludXRlcztcclxuICAgICAgICB0aGlzLnBhcnRPZlNjcmVlblN0YXR1cyA9IChkYXRhLnBhcnRPZlNjcmVlblN0YXR1cykgPyBkYXRhLnBhcnRPZlNjcmVlblN0YXR1cyA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5hbHdheXNNb3ZlID0gKGRhdGEuYWx3YXlzTW92ZSkgPyBkYXRhLmFsd2F5c01vdmUgOiBmYWxzZTtcclxuICAgICAgICB0aGlzLnBpY3R1cmVzV2lkdGggPSBkYXRhLmltYWdlV2lkdGg7XHJcbiAgICAgICAgdGhpcy5pbWFnZUhlaWdodCA9IGRhdGEuaW1hZ2VIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25TdGVwcyA9IGRhdGEuYW5pbWF0aW9uU3RlcHM7XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZkl0ZW1zID0gZGF0YS5udW1iZXJPZkl0ZW1zO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zID0gZGF0YS5udW1iZXJPZlZlcnRpY2FsSXRlbXM7XHJcbiAgICAgICAgdGhpcy5kZXRlY3RGcmFtZSA9IDA7XHJcbiAgICAgICAgdGhpcy5zeCA9IDA7XHJcbiAgICAgICAgdGhpcy5zeSA9IDA7XHJcbiAgICAgICAgdGhpcy5zV2lkdGggPSBkYXRhLmltYWdlV2lkdGggLyBkYXRhLm51bWJlck9mSXRlbXM7XHJcbiAgICAgICAgdGhpcy5zSGVpZ2h0ID0gZGF0YS5pbWFnZUhlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoID0gKGRhdGEucGFydE9mU2NyZWVuU3RhdHVzKSA/IHdpbmRvdy5pbm5lcldpZHRoICsgMiA6IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gKGRhdGEuaGVpZ2h0KSA/IGRhdGEuaGVpZ2h0IDogd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEdhbWVCYWNrZ3JvdW5kO1xyXG59KCkpO1xyXG5leHBvcnRzLkdhbWVCYWNrZ3JvdW5kID0gR2FtZUJhY2tncm91bmQ7XHJcbkdhbWVCYWNrZ3JvdW5kLnByb3RvdHlwZS51cGRhdGVNYXAgPSBiYWNrZ3JvdW5kTW9kdWxlXzEudXBkYXRlTWFwO1xyXG5HYW1lQmFja2dyb3VuZC5wcm90b3R5cGUud2FycEVmZmVjdCA9IGVuZ2luZU1vZHVsZXNfMS53YXJwRWZmZWN0O1xyXG5HYW1lQmFja2dyb3VuZC5wcm90b3R5cGUuY2hhbmdlUGFydE9mVGV4dHVyZSA9IGJhY2tncm91bmRNb2R1bGVfMS5jaGFuZ2VQYXJ0T2ZUZXh0dXJlO1xyXG5HYW1lQmFja2dyb3VuZC5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5HYW1lQmFja2dyb3VuZC5wcm90b3R5cGUubW92ZUVuZW15ZXMgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEubW92ZUVuZW15ZXM7XHJcbkdhbWVCYWNrZ3JvdW5kLnByb3RvdHlwZS5wbGFjZUJhY2tncm91bmQgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEucGxhY2VCYWNrZ3JvdW5kO1xyXG5HYW1lQmFja2dyb3VuZC5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5sb2FkVGV4dHVyZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciByZWd1bGFyRW5lbXlBaU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9haS9yZWd1bGFyRW5lbXlBaU1vZHVsZXNcIik7XHJcbnZhciBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5lbWllcy9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpO1xyXG52YXIgZW5naW5lXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lXCIpO1xyXG52YXIgZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2dhbWVTaWRlT2JqZWN0c01vZHVsZVwiKTtcclxudmFyIEVuZW15T2JqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW5lbXlPYmplY3QoX2EpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IF9fcmVzdChfYSwgW10pO1xyXG4gICAgICAgIHRoaXMuaWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB0aGlzLnggPSBkYXRhLng7XHJcbiAgICAgICAgdGhpcy55ID0gZGF0YS55O1xyXG4gICAgICAgIHRoaXMuc3ggPSBkYXRhLnN4O1xyXG4gICAgICAgIHRoaXMuc3kgPSBkYXRhLnN5O1xyXG4gICAgICAgIHRoaXMuc1dpZHRoID0gZGF0YS5zV2lkdGg7XHJcbiAgICAgICAgdGhpcy5zSGVpZ2h0ID0gZGF0YS5zSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMucGljdHVyZXNXaWR0aCA9IGRhdGEucGljdHVyZXNXaWR0aDtcclxuICAgICAgICB0aGlzLm51bWJlck9mSXRlbXMgPSBkYXRhLm51bWJlck9mSXRlbXM7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBkYXRhLmhlaWdodDtcclxuICAgICAgICB0aGlzLnRleHR1cmUgPSBfX2Rpcm5hbWUgKyBkYXRhLnRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnNwZWVkID0gZGF0YS5zcGVlZDtcclxuICAgICAgICB0aGlzLmRlZmF1bHRTcGVlZCA9IGRhdGEuc3BlZWQ7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBkYXRhLnN0YXR1cztcclxuICAgICAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5idWxsZXRUeXBlTnVtYmVyID0gZGF0YS5idWxsZXRUeXBlTnVtYmVyO1xyXG4gICAgICAgIHRoaXMucmFwaWRGaXJlID0gZGF0YS5yYXBpZEZpcmU7XHJcbiAgICAgICAgdGhpcy5wb2ludHNQZXJVbml0ID0gZGF0YS5wb2ludHNQZXJVbml0O1xyXG4gICAgICAgIHRoaXMuaGVhbHRoUG9pbnQgPSBkYXRhLmhlYWx0aFBvaW50O1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RlcHMgPSBkYXRhLmFuaW1hdGlvblN0ZXBzO1xyXG4gICAgICAgIHRoaXMuZGFtYWdlID0gZGF0YS5kYW1hZ2U7XHJcbiAgICAgICAgdGhpcy5ndW5zID0gZGF0YS5ndW5zO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0RnJhbWUgPSAwO1xyXG4gICAgICAgIHRoaXMub2JqZWN0UHJlc2VudCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5vYmplY3RPd25lciA9IGRhdGEub2JqZWN0T3duZXI7XHJcbiAgICAgICAgdGhpcy5ndW5zID0gZGF0YS5ndW5zO1xyXG4gICAgICAgIHRoaXMuZXhwbG9zaW9uID0gZGF0YS5leHBsb3Npb247XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZlZlcnRpY2FsSXRlbXMgPSBkYXRhLm51bWJlck9mVmVydGljYWxJdGVtcztcclxuICAgICAgICB0aGlzLm9yaWdpbmFsSGVhbHRoUG9pbnQgPSBkYXRhLmhlYWx0aFBvaW50O1xyXG4gICAgICAgIHRoaXMuaXNNb3ZlID0gZGF0YS5pc01vdmU7XHJcbiAgICAgICAgdGhpcy5pc1Nob3QgPSBkYXRhLmlzU2hvdDtcclxuICAgICAgICB0aGlzLnZlcnRpY2FsU3BlZWQgPSAoZGF0YS52ZXJ0aWNhbFNwZWVkKSA/IGRhdGEudmVydGljYWxTcGVlZCA6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRhdGEuc3BlZWQgKyAxKTtcclxuICAgICAgICB0aGlzLnNwb3REaXN0YW5jZSA9IChkYXRhLmlzQm9zcykgPyBkYXRhLnNwb3REaXN0YW5jZSA6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRhdGEuc3BvdERpc3RhbmNlKTtcclxuICAgICAgICB0aGlzLnlGaW5hbCA9IDA7XHJcbiAgICAgICAgdGhpcy54RmluYWwgPSAwO1xyXG4gICAgICAgIHRoaXMuYmVoYXZpb3IgPSBkYXRhLmJlaGF2aW9yO1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLmlzQm9zcyA9IGRhdGEuaXNCb3NzO1xyXG4gICAgICAgIHRoaXMuaXNTdWJCb3NzID0gKGRhdGEuaXNTdWJCb3NzKSA/IGRhdGEuaXNTdWJCb3NzIDogZmFsc2U7XHJcbiAgICAgICAgdGhpcy5leHRyYU9iamVjdHMgPSBkYXRhLmV4dHJhT2JqZWN0cztcclxuICAgICAgICB0aGlzLmNvbGxpZGVFeHBsb3Npb25BbmltYXRpb24gPSBkYXRhLmNvbGxpZGVFeHBsb3Npb25BbmltYXRpb247XHJcbiAgICAgICAgdGhpcy5zaG90QW5nbGUgPSAxODA7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0QW5nbGUgPSAoZGF0YS5kZWZhdWx0QW5nbGUpID8gZGF0YS5kZWZhdWx0QW5nbGUgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuaGl0U2hhcGUgPSAoZGF0YS5oaXRTaGFwZSkgPyBkYXRhLmhpdFNoYXBlIDogbnVsbDtcclxuICAgICAgICB0aGlzLmF0QmFja2dyb3VuZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVuZW15T2JqZWN0O1xyXG59KCkpO1xyXG5leHBvcnRzLkVuZW15T2JqZWN0ID0gRW5lbXlPYmplY3Q7XHJcbkVuZW15T2JqZWN0LnByb3RvdHlwZS5kaXNwbGF5T2JqZWN0QXRTY2VuZSA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5kaXNwbGF5T2JqZWN0QXRTY2VuZTtcclxuRW5lbXlPYmplY3QucHJvdG90eXBlLm1vdmVFbmVteWVzID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLm1vdmVFbmVteWVzO1xyXG5FbmVteU9iamVjdC5wcm90b3R5cGUuc2hvdCA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zaG90O1xyXG5FbmVteU9iamVjdC5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5FbmVteU9iamVjdC5wcm90b3R5cGUuZ2V0T2JqZWN0UG9zaXRpb24gPSBlbmdpbmVfMS5nZXRPYmplY3RQb3NpdGlvbjtcclxuRW5lbXlPYmplY3QucHJvdG90eXBlLmVuZW15RGFtYWdlQW5pbWF0aW9uID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLmVuZW15RGFtYWdlQW5pbWF0aW9uO1xyXG5FbmVteU9iamVjdC5wcm90b3R5cGUuZW5lbXlTaGlwTG9naWNWZXJ0aWNhbCA9IHJlZ3VsYXJFbmVteUFpTW9kdWxlc18xLmVuZW15U2hpcExvZ2ljVmVydGljYWw7XHJcbkVuZW15T2JqZWN0LnByb3RvdHlwZS5lbmVteVZlcnRpY2FsTW92ZUNhbGN1bGF0aW9uID0gcmVndWxhckVuZW15QWlNb2R1bGVzXzEuZW5lbXlWZXJ0aWNhbE1vdmVDYWxjdWxhdGlvbjtcclxuRW5lbXlPYmplY3QucHJvdG90eXBlLnRha2VEYW1hZ2UgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEudGFrZURhbWFnZTtcclxuRW5lbXlPYmplY3QucHJvdG90eXBlLnNwYXduQ29pbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zcGF3bkNvaW47XHJcbkVuZW15T2JqZWN0LnByb3RvdHlwZS5idWxsZXRTcGVlZCA9IGVuZ2luZV8xLmJ1bGxldFNwZWVkO1xyXG5FbmVteU9iamVjdC5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5sb2FkVGV4dHVyZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2dhbWVTaWRlT2JqZWN0c01vZHVsZVwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL3BsYXllclNoaXBNb2R1bGVcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9lbmdpbmVNb2R1bGVzXCIpKTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vYnVsbGV0c01vZHVsZVwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2JhY2tncm91bmRNb2R1bGVcIikpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9nYW1lR3JhcHBsZU9iamVjdHNNb2R1bGVcIikpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIHBsYXllclNoaXBNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvcGxheWVyU2hpcE1vZHVsZVwiKTtcclxudmFyIGVuZ2luZU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZW5naW5lTW9kdWxlc1wiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbnZhciBidWxsZXRzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2J1bGxldHNNb2R1bGVcIik7XHJcbnZhciBQbGF5ZXJTaGlwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGxheWVyU2hpcChfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YS5kYXRhO1xyXG4gICAgICAgIHRoaXMucG9pbnRzID0gZGF0YS5wb2ludHM7XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZmxpZmUgPSBkYXRhLm51bWJlck9mbGlmZTtcclxuICAgICAgICB0aGlzLm1heE9mTGlmZSA9IGRhdGEubnVtYmVyT2ZsaWZlO1xyXG4gICAgICAgIHRoaXMuaGVhbHRoUG9pbnQgPSBkYXRhLmhlYWx0aFBvaW50ICsgZGF0YS5hcm1vcjtcclxuICAgICAgICB0aGlzLm1heEhlYWx0aCA9IGRhdGEuaGVhbHRoUG9pbnQgKyBkYXRhLmFybW9yO1xyXG4gICAgICAgIHRoaXMueCA9IGRhdGEueCAtIChkYXRhLndpZHRoIC8gMik7XHJcbiAgICAgICAgdGhpcy55ID0gZGF0YS55IC0gKGRhdGEuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgdGhpcy54RmluYWwgPSBkYXRhLng7XHJcbiAgICAgICAgdGhpcy55RmluYWwgPSBkYXRhLnk7XHJcbiAgICAgICAgdGhpcy5jb2xsaXNpb25BbGxvdyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5vYmplY3RPd25lciA9IFwicGxheWVyXCI7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBkYXRhLmhlaWdodDtcclxuICAgICAgICB0aGlzLnhBZGogPSAwO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBkYXRhLnNwZWVkO1xyXG4gICAgICAgIHRoaXMuZXhwbG9zaW9uID0gZGF0YS5leHBsb3Npb247XHJcbiAgICAgICAgdGhpcy5kYW1hZ2UgPSBkYXRhLmRhbWFnZTtcclxuICAgICAgICB0aGlzLnN4ID0gZGF0YS5zeDtcclxuICAgICAgICB0aGlzLnN5ID0gZGF0YS5zeTtcclxuICAgICAgICB0aGlzLnBpY3R1cmVzV2lkdGggPSBkYXRhLnBpY3R1cmVzV2lkdGg7XHJcbiAgICAgICAgdGhpcy5pbWFnZUhlaWdodCA9IGRhdGEuaW1hZ2VIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5zV2lkdGggPSBkYXRhLnNXaWR0aDtcclxuICAgICAgICB0aGlzLnNIZWlnaHQgPSBkYXRhLnNIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25TdGVwcyA9IGRhdGEuYW5pbWF0aW9uU3RlcHM7XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZkl0ZW1zID0gZGF0YS5udW1iZXJPZkl0ZW1zO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zID0gZGF0YS5udW1iZXJPZlZlcnRpY2FsSXRlbXM7XHJcbiAgICAgICAgdGhpcy5kZXRlY3RGcmFtZSA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRlRXhwbG9zaW9uQW5pbWF0aW9uID0gZGF0YS5jb2xsaWRlRXhwbG9zaW9uQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMuaXNTaG90ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNob3RBbmdsZSA9IDA7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0U3BlZWQgPSBkYXRhLmRhdGEubWluU3BlZWQ7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmpvdXJuYWwgPSB7XHJcbiAgICAgICAgICAgIGRlZmF1bHREYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXJGbHlPZkVuZW15OiAwLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZHcm91bmRFbmVteTogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZXZlbFRhc2tzOiBbXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBQbGF5ZXJTaGlwLnByb3RvdHlwZS5nZXRQbGF5ZXJJbmZvcm1hdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoZWFsdGg6IHRoaXMuaGVhbHRoUG9pbnQsXHJcbiAgICAgICAgICAgIG1heEhlYWx0aFBvaW50OiB0aGlzLm1heEhlYWx0aFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFBsYXllclNoaXA7XHJcbn0oKSk7XHJcbmV4cG9ydHMuUGxheWVyU2hpcCA9IFBsYXllclNoaXA7XHJcblBsYXllclNoaXAucHJvdG90eXBlLmluaXRQbGF5ZXJTaGlwID0gcGxheWVyU2hpcE1vZHVsZV8xLmluaXRQbGF5ZXJTaGlwO1xyXG5QbGF5ZXJTaGlwLnByb3RvdHlwZS5zaGlwQ29udHJvbCA9IHBsYXllclNoaXBNb2R1bGVfMS5zaGlwQ29udHJvbDtcclxuUGxheWVyU2hpcC5wcm90b3R5cGUubW92ZVNoaXAgPSBwbGF5ZXJTaGlwTW9kdWxlXzEubW92ZVNoaXA7XHJcblBsYXllclNoaXAucHJvdG90eXBlLnBsYWNlU2hpcCA9IHBsYXllclNoaXBNb2R1bGVfMS5wbGFjZVNoaXA7XHJcblBsYXllclNoaXAucHJvdG90eXBlLnNldENvbnRleHQgPSBwbGF5ZXJTaGlwTW9kdWxlXzEuc2V0Q29udGV4dDtcclxuUGxheWVyU2hpcC5wcm90b3R5cGUuZ2V0T2JqZWN0UG9zaXRpb24gPSBlbmdpbmVNb2R1bGVzXzEuZ2V0T2JqZWN0UG9zaXRpb247XHJcblBsYXllclNoaXAucHJvdG90eXBlLnRha2VEYW1hZ2UgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEudGFrZURhbWFnZTtcclxuUGxheWVyU2hpcC5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5QbGF5ZXJTaGlwLnByb3RvdHlwZS5kaXNwbGF5T2JqZWN0QXRTY2VuZSA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5kaXNwbGF5T2JqZWN0QXRTY2VuZTtcclxuUGxheWVyU2hpcC5wcm90b3R5cGUuYnVsbGV0U3BlZWQgPSBidWxsZXRzTW9kdWxlXzEuYnVsbGV0U3BlZWQ7XHJcblBsYXllclNoaXAucHJvdG90eXBlLnBsYXllclNoaXBUZXh0dXJlQ2hhbmdlID0gcGxheWVyU2hpcE1vZHVsZV8xLnBsYXllclNoaXBUZXh0dXJlQ2hhbmdlO1xyXG5QbGF5ZXJTaGlwLnByb3RvdHlwZS5hZGRWZWhpY2xlU3BlZWQgPSBwbGF5ZXJTaGlwTW9kdWxlXzEuYWRkVmVoaWNsZVNwZWVkO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGJ1bGxldHNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvYnVsbGV0c01vZHVsZVwiKTtcclxudmFyIGVuZ2luZU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZW5naW5lTW9kdWxlc1wiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbnZhciBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZ2FtZVNpZGVPYmplY3RzTW9kdWxlXCIpO1xyXG52YXIgQnVsbGV0Q29uc3RydWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQnVsbGV0Q29uc3RydWN0KF9hKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBfX3Jlc3QoX2EsIFtdKTtcclxuICAgICAgICB0aGlzLnggPSBkYXRhLng7XHJcbiAgICAgICAgdGhpcy55ID0gZGF0YS55O1xyXG4gICAgICAgIHRoaXMuYnVsbGV0VHlwZSA9IGRhdGEuYnVsbGV0VHlwZTtcclxuICAgICAgICB0aGlzLmJ1bGxldFRleHR1cmUgPSBkYXRhLmJ1bGxldFRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5vYmplY3RPd25lciA9IGRhdGEub2JqZWN0T3duZXI7XHJcbiAgICAgICAgdGhpcy5idWxsZXRTcGVlZCA9IGRhdGEuYnVsbGV0U3BlZWQ7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0U3BlZWQgPSBkYXRhLnNwZWVkO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBkYXRhLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5kYW1hZ2UgPSBkYXRhLmRhbWFnZTtcclxuICAgICAgICB0aGlzLmlkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgdGhpcy5vYmplY3RQcmVzZW50ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnRleHR1cmUgPSBfX2Rpcm5hbWUgKyBkYXRhLnRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5zeCA9IGRhdGEuc3g7XHJcbiAgICAgICAgdGhpcy5zeSA9IGRhdGEuc3k7XHJcbiAgICAgICAgdGhpcy5leHBsb3Npb24gPSBkYXRhLmV4cGxvc2lvbjtcclxuICAgICAgICB0aGlzLnNtb2tlID0gKGRhdGEuc21va2UpID8gZGF0YS5zbW9rZSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5waWN0dXJlc1dpZHRoID0gZGF0YS5pbWFnZVdpZHRoO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VIZWlnaHQgPSBkYXRhLmltYWdlSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uU3RlcHMgPSBkYXRhLmFuaW1hdGlvblN0ZXBzO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZJdGVtcyA9IGRhdGEubnVtYmVyT2ZJdGVtcztcclxuICAgICAgICB0aGlzLm51bWJlck9mVmVydGljYWxJdGVtcyA9IGRhdGEubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0RnJhbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuYXRCYWNrZ3JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zV2lkdGggPSBkYXRhLnNXaWR0aDtcclxuICAgICAgICB0aGlzLnNIZWlnaHQgPSBkYXRhLnNIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5zb3VuZCA9IChkYXRhLnNvdW5kKSA/IGRhdGEuc291bmQgOiBudWxsO1xyXG4gICAgICAgIHRoaXMudmVydGljYWxTcGVlZCA9IChkYXRhLnZlcnRpY2FsU3BlZWQpID8gZGF0YS52ZXJ0aWNhbFNwZWVkIDogMDtcclxuICAgICAgICB0aGlzLmRlZ3JlZSA9IChkYXRhLmRlZ3JlZSkgPyBkYXRhLmRlZ3JlZSA6IDA7XHJcbiAgICAgICAgdGhpcy5vYmplY3ROYW1lRmxhZyA9IFwiYnVsbGV0XCI7XHJcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAoZGF0YS5yYWRpdXMpID8gZGF0YS5yYWRpdXMgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuYnVsbGV0T3JpZ2luT3duZXIgPSB7XHJcbiAgICAgICAgICAgIG9iamVjdE93bmVyOiAoZGF0YS5vcmlnaW5Pd25lcikgPyBkYXRhLm9yaWdpbk93bmVyLm9iamVjdE93bmVyIDogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy90aGlzLnBpY3R1cmVzV2lkdGggPSBkYXRhLnBpY3R1cmVzV2lkdGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gQnVsbGV0Q29uc3RydWN0O1xyXG59KCkpO1xyXG5leHBvcnRzLkJ1bGxldENvbnN0cnVjdCA9IEJ1bGxldENvbnN0cnVjdDtcclxuQnVsbGV0Q29uc3RydWN0LnByb3RvdHlwZS5tb3ZlQnVsbGV0cyA9IGJ1bGxldHNNb2R1bGVfMS5tb3ZlQnVsbGV0cztcclxuQnVsbGV0Q29uc3RydWN0LnByb3RvdHlwZS5nZXRPYmplY3RQb3NpdGlvbiA9IGVuZ2luZU1vZHVsZXNfMS5nZXRPYmplY3RQb3NpdGlvbjtcclxuQnVsbGV0Q29uc3RydWN0LnByb3RvdHlwZS50YWtlRGFtYWdlID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLnRha2VEYW1hZ2U7XHJcbkJ1bGxldENvbnN0cnVjdC5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5CdWxsZXRDb25zdHJ1Y3QucHJvdG90eXBlLmRpc3BsYXlPYmplY3RBdFNjZW5lID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLmRpc3BsYXlPYmplY3RBdFNjZW5lO1xyXG5CdWxsZXRDb25zdHJ1Y3QucHJvdG90eXBlLmxvYWRUZXh0dXJlID0gZ2FtZVNpZGVPYmplY3RzTW9kdWxlXzEubG9hZFRleHR1cmU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBnYW1lU2lkZU9iamVjdENvbnN0cnVjdG9yXzEgPSByZXF1aXJlKFwiLi9nYW1lU2lkZU9iamVjdENvbnN0cnVjdG9yXCIpO1xyXG52YXIgZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL2dhbWVHcmFwcGxlT2JqZWN0c01vZHVsZVwiKTtcclxudmFyIHBsYXllclVuaXRNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9wbGF5ZXJVbml0TW9kdWxlXCIpO1xyXG52YXIgR3JhcHBsZU9iamVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhHcmFwcGxlT2JqZWN0LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gR3JhcHBsZU9iamVjdChfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oe30sIGRhdGEpKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmlzR3JhcHBsZSA9IGRhdGEuaXNHcmFwcGxlO1xyXG4gICAgICAgIF90aGlzLmdyYXBwbGVQb3dlciA9IGRhdGEuZ3JhcHBsZVBvd2VyO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBHcmFwcGxlT2JqZWN0O1xyXG59KGdhbWVTaWRlT2JqZWN0Q29uc3RydWN0b3JfMS5TaWRlT2JqZWN0KSk7XHJcbmV4cG9ydHMuR3JhcHBsZU9iamVjdCA9IEdyYXBwbGVPYmplY3Q7XHJcbkdyYXBwbGVPYmplY3QucHJvdG90eXBlLmFkZFBsYXllckxpZmUgPSBnYW1lR3JhcHBsZU9iamVjdHNNb2R1bGVfMS5hZGRQbGF5ZXJMaWZlO1xyXG5HcmFwcGxlT2JqZWN0LnByb3RvdHlwZS5jb2xsZWN0Q29pbiA9IGdhbWVHcmFwcGxlT2JqZWN0c01vZHVsZV8xLmNvbGxlY3RDb2luO1xyXG5HcmFwcGxlT2JqZWN0LnByb3RvdHlwZS5jb2xsZWN0T2JqZWN0c1RvSW52ZW50b3J5ID0gZ2FtZUdyYXBwbGVPYmplY3RzTW9kdWxlXzEuY29sbGVjdE9iamVjdHNUb0ludmVudG9yeTtcclxuR3JhcHBsZU9iamVjdC5wcm90b3R5cGUuZ3JvdW5kUGxheWVyQ29sbGVjdGFibGUgPSBwbGF5ZXJVbml0TW9kdWxlXzEuZ3JvdW5kUGxheWVyQ29sbGVjdGFibGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgc291bmRNb2R1bGVzXzEgPSByZXF1aXJlKFwiLi4vZW5naW5lL3NvdW5kTW9kdWxlc1wiKTtcclxudmFyIFNvdW5kQ3JlYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNvdW5kQ3JlYXRvcihfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdGhpcy5zb3VuZE9iamVjdCA9IG5ldyBBdWRpbygpO1xyXG4gICAgICAgIHRoaXMuc291bmRVcmwgPSBfX2Rpcm5hbWUgKyBkYXRhLnNvdW5kVXJsO1xyXG4gICAgICAgIHRoaXMuc291bmRMb29wID0gZGF0YS5zb3VuZExvb3A7XHJcbiAgICAgICAgdGhpcy5zb3VuZE9uID0gZGF0YS5zb3VuZE9uO1xyXG4gICAgICAgIHRoaXMudm9sdW1lID0gcHJvY2Vzcy5lbnYuTUFJTl9HQU1FX1NPVU5EO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdFVybCA9IChkYXRhLmRlZmF1bHRVcmwpID8gZGF0YS5kZWZhdWx0VXJsIDogbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBTb3VuZENyZWF0b3I7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU291bmRDcmVhdG9yID0gU291bmRDcmVhdG9yO1xyXG5Tb3VuZENyZWF0b3IucHJvdG90eXBlLmNoYW5nZVZvbHVtZSA9IHNvdW5kTW9kdWxlc18xLmNoYW5nZVZvbHVtZTtcclxuU291bmRDcmVhdG9yLnByb3RvdHlwZS5jaGFuZ2VUcmFjayA9IHNvdW5kTW9kdWxlc18xLmNoYW5nZVRyYWNrO1xyXG5Tb3VuZENyZWF0b3IucHJvdG90eXBlLmluaXRTb3VuZCA9IHNvdW5kTW9kdWxlc18xLmluaXRTb3VuZDtcclxuU291bmRDcmVhdG9yLnByb3RvdHlwZS5zb3VuZFBsYXkgPSBzb3VuZE1vZHVsZXNfMS5zb3VuZFBsYXk7XHJcblNvdW5kQ3JlYXRvci5wcm90b3R5cGUuc291bmRQYXVzZSA9IHNvdW5kTW9kdWxlc18xLnNvdW5kUGF1c2U7XHJcblNvdW5kQ3JlYXRvci5wcm90b3R5cGUubWFrZUxvb3AgPSBzb3VuZE1vZHVsZXNfMS5tYWtlTG9vcDtcclxuU291bmRDcmVhdG9yLnByb3RvdHlwZS50dXJuU291bmRPZmYgPSBzb3VuZE1vZHVsZXNfMS50dXJuU291bmRPZmY7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xID0gcmVxdWlyZShcIi4uL2VuZW1pZXMvYW5pbWF0aW9uSGl0Qm94TW9kdWxlc1wiKTtcclxudmFyIGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xID0gcmVxdWlyZShcIi4uL2VuZ2luZS9nYW1lU2lkZU9iamVjdHNNb2R1bGVcIik7XHJcbnZhciBkeW5hbWljTGV2ZWxNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxNb2R1bGVcIik7XHJcbnZhciBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzIgPSByZXF1aXJlKFwiLi4vZW5lbWllcy9hbmltYXRpb25IaXRCb3hNb2R1bGVzXCIpO1xyXG52YXIgRHluYW1pY0Jsb2NrQ29uc3RydWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEeW5hbWljQmxvY2tDb25zdHJ1Y3RvcihfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdGhpcy54ID0gZGF0YS54O1xyXG4gICAgICAgIHRoaXMueSA9IGRhdGEueTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRNYXBYID0gZGF0YS5kZWZhdWx0TWFwWDtcclxuICAgICAgICB0aGlzLmRlZmF1bHRNYXBZID0gZGF0YS5kZWZhdWx0TWFwWTtcclxuICAgICAgICB0aGlzLnhUYXJnZXQgPSBkYXRhLng7XHJcbiAgICAgICAgdGhpcy55VGFyZ2V0ID0gZGF0YS55O1xyXG4gICAgICAgIHRoaXMubWFwU2l6ZUhvcml6b250YWwgPSAoZGF0YS5tYXBTaXplSG9yaXpvbnRhbCkgPyBkYXRhLm1hcFNpemVIb3Jpem9udGFsIDogMDtcclxuICAgICAgICB0aGlzLm1hcFNpemVWZXJ0aWNhbCA9IChkYXRhLm1hcFNpemVWZXJ0aWNhbCkgPyBkYXRhLm1hcFNpemVWZXJ0aWNhbCA6IDA7XHJcbiAgICAgICAgdGhpcy54TW92ZSA9IGRhdGEueDtcclxuICAgICAgICB0aGlzLnlNb3ZlID0gZGF0YS55O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBwYXJzZUludChkYXRhLndpZHRoKTtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHBhcnNlSW50KGRhdGEuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmRldGFpbHMgPSBkYXRhLmRldGFpbHM7XHJcbiAgICAgICAgdGhpcy5kZWdyZWUgPSAoZGF0YS5kZXRhaWxzLmRlZ3JlZSkgPyBkYXRhLmRldGFpbHMuZGVncmVlIDogMDtcclxuICAgICAgICB0aGlzLnRleHR1cmUgPSBwcm9jZXNzLmVudi5IT1NUICsgZGF0YS5kZXRhaWxzLnRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmltZy5zcmMgPSBwcm9jZXNzLmVudi5IT1NUICsgZGF0YS5kZXRhaWxzLnRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVGV4dHVyZUltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltYWdlTGluayA9IChkYXRhLmJhY2tncm91bmRUZXh0dXJlKSA/IHByb2Nlc3MuZW52LkhPU1QgKyBkYXRhLmJhY2tncm91bmRUZXh0dXJlLnRleHR1cmUgOiBmYWxzZTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmRUZXh0dXJlSW1nLnNyYyA9IChkYXRhLmJhY2tncm91bmRUZXh0dXJlKSA/IHByb2Nlc3MuZW52LkhPU1QgKyBkYXRhLmJhY2tncm91bmRUZXh0dXJlLnRleHR1cmUgOiAnIyc7XHJcbiAgICAgICAgdGhpcy5zeCA9IDA7XHJcbiAgICAgICAgdGhpcy5zeSA9IDA7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kU3ggPSAwO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZFN5ID0gMDtcclxuICAgICAgICB0aGlzLnNXaWR0aCA9IChkYXRhLmRldGFpbHMuc1dpZHRoKSA/IGRhdGEuZGV0YWlscy5zV2lkdGggOiBkYXRhLmRldGFpbHMuaW1hZ2VXaWR0aDtcclxuICAgICAgICB0aGlzLnNIZWlnaHQgPSAoZGF0YS5kZXRhaWxzLnNIZWlnaHQpID8gZGF0YS5kZXRhaWxzLnNIZWlnaHQgOiBkYXRhLmRldGFpbHMuaW1hZ2VIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy52ZXJ0aWNhbFNwZWVkID0gMDtcclxuICAgICAgICB0aGlzLmhvcml6b250YWxTcGVlZCA9IDA7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0U3BlZWQgPSBkYXRhLnNwZWVkO1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhLmluZGV4O1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZFRleHR1cmUgPSAoZGF0YS5iYWNrZ3JvdW5kVGV4dHVyZSkgPyBkYXRhLmJhY2tncm91bmRUZXh0dXJlIDogbnVsbDtcclxuICAgICAgICB0aGlzLmJsb2NrUmVsYXRpdmVYUG9zID0gKGRhdGEuYmxvY2tSZWxhdGl2ZVhQb3MpID8gcGFyc2VJbnQoZGF0YS5ibG9ja1JlbGF0aXZlWFBvcykgOiAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tSZWxhdGl2ZVlQb3MgPSAoZGF0YS5ibG9ja1JlbGF0aXZlWVBvcykgPyBwYXJzZUludChkYXRhLmJsb2NrUmVsYXRpdmVZUG9zKSA6IDA7XHJcbiAgICAgICAgdGhpcy5kZXRlY3RGcmFtZSA9IDA7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25TdGVwcyA9IChkYXRhLmRldGFpbHMuYW5pbWF0aW9uU3RlcHMpID8gZGF0YS5kZXRhaWxzLmFuaW1hdGlvblN0ZXBzIDogMDtcclxuICAgICAgICB0aGlzLm51bWJlck9mVmVydGljYWxJdGVtcyA9IChkYXRhLmRldGFpbHMubnVtYmVyT2ZWZXJ0aWNhbEl0ZW1zKSA/IGRhdGEuZGV0YWlscy5udW1iZXJPZlZlcnRpY2FsSXRlbXMgOiAwO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZJdGVtcyA9IChkYXRhLmRldGFpbHMubnVtYmVyT2ZJdGVtcykgPyBkYXRhLmRldGFpbHMubnVtYmVyT2ZJdGVtcyA6IDA7XHJcbiAgICAgICAgdGhpcy5waWN0dXJlc1dpZHRoID0gKGRhdGEuZGV0YWlscy5waWN0dXJlc1dpZHRoKSA/IGRhdGEuZGV0YWlscy5waWN0dXJlc1dpZHRoIDogMDtcclxuICAgICAgICB0aGlzLmV4cGxvc2lvbkFuaW1hdGlvbiA9IChkYXRhLmRldGFpbHMuZXhwbG9zaW9uQW5pbWF0aW9uKSA/IGRhdGEuZGV0YWlscy5leHBsb3Npb25BbmltYXRpb24gOiBudWxsO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEhlYWx0aCA9IChkYXRhLmRldGFpbHMuaGVhbHRoUG9pbnQpID8gZGF0YS5kZXRhaWxzLmhlYWx0aFBvaW50IDogbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBEeW5hbWljQmxvY2tDb25zdHJ1Y3RvcjtcclxufSgpKTtcclxuZXhwb3J0cy5EeW5hbWljQmxvY2tDb25zdHJ1Y3RvciA9IER5bmFtaWNCbG9ja0NvbnN0cnVjdG9yO1xyXG5EeW5hbWljQmxvY2tDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZGlzcGxheU9iamVjdEF0U2NlbmUgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzEuZGlzcGxheU9iamVjdEF0U2NlbmU7XHJcbkR5bmFtaWNCbG9ja0NvbnN0cnVjdG9yLnByb3RvdHlwZS5sb2FkVGV4dHVyZSA9IGdhbWVTaWRlT2JqZWN0c01vZHVsZV8xLmxvYWRUZXh0dXJlO1xyXG5EeW5hbWljQmxvY2tDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZWxldmF0b3JNb3ZlID0gZHluYW1pY0xldmVsTW9kdWxlXzEuZWxldmF0b3JNb3ZlO1xyXG5EeW5hbWljQmxvY2tDb25zdHJ1Y3Rvci5wcm90b3R5cGUuc3ByaXRlT2JqZWN0c0FuaW1hdGlvbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMi5zcHJpdGVPYmplY3RzQW5pbWF0aW9uO1xyXG5EeW5hbWljQmxvY2tDb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZURhbWFnZSA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS50YWtlRGFtYWdlO1xyXG5EeW5hbWljQmxvY2tDb25zdHJ1Y3Rvci5wcm90b3R5cGUuc29saWRDb2xvckZpbGwgPSBhbmltYXRpb25IaXRCb3hNb2R1bGVzXzIuc29saWRDb2xvckZpbGw7XHJcbi8qXHJcblwiaW1hZ2VIZWlnaHRcIjogNTgsXHJcbiAgICAgICAgXCJwaWN0dXJlc1dpZHRoXCI6IDU5LFxyXG4gICAgICAgIFwiYW5pbWF0aW9uU3RlcHNcIjogMTAsXHJcbiAgICAgICAgXCJzeFwiOiAwLFxyXG4gICAgICAgIFwic3lcIjogMCxcclxuICAgICAgICBcInNXaWR0aFwiOiA1OSxcclxuICAgICAgICBcInNIZWlnaHRcIjogNTgsXHJcbiAgICAgICAgXCJudW1iZXJPZkl0ZW1zXCI6IDEsXHJcbiAgICAgICAgXCJudW1iZXJPZlZlcnRpY2FsSXRlbXNcIjogMSxcclxuICAgICAgICBcImRldGVjdEZyYW1lXCI6IDBcclxuKi8gXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZHluYW1pY1VzZXJDb25zdHJ1Y3Rvcl8xID0gcmVxdWlyZShcIi4vZHluYW1pY1VzZXJDb25zdHJ1Y3RvclwiKTtcclxudmFyIGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmVtaWVzL2FuaW1hdGlvbkhpdEJveE1vZHVsZXNcIik7XHJcbnZhciBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxFbmVteU1vZHVsZXNcIik7XHJcbnZhciBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMiA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZHluYW1pY0xldmVscy9keW5hbWljTGV2ZWxFbmVteU1vZHVsZXNcIik7XHJcbnZhciBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMSA9IHJlcXVpcmUoXCIuLi9lbmdpbmUvZ2FtZVNpZGVPYmplY3RzTW9kdWxlXCIpO1xyXG52YXIgRHluYW1pY0VuZW15Q29uc3RydWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoRHluYW1pY0VuZW15Q29uc3RydWN0b3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEeW5hbWljRW5lbXlDb25zdHJ1Y3RvcihfYSkge1xyXG4gICAgICAgIHZhciBkYXRhID0gX19yZXN0KF9hLCBbXSk7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oe30sIGRhdGEpKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLm9iamVjdE93bmVyID0gKGRhdGEuZGV0YWlscy50eXBlID09PSBcImVuZW15X3NwYXduZXJcIiB8fCBkYXRhLmRldGFpbHMudHlwZSA9PT0gXCJoaWRkZW5fZW5lbXlfc3Bhd25lclwiKSA/IFwiZ3JvdW5kRW5lbXlcIiA6IFwiZ3JvdW5kTlBDXCI7XHJcbiAgICAgICAgX3RoaXMuZGV0ZWN0UmFuZ2UgPSBkYXRhLmRldGVjdFJhbmdlO1xyXG4gICAgICAgIF90aGlzLmJlaGF2aW9yID0gKGRhdGEuZGV0YWlscy5iZWhhdmlvcikgPyBkYXRhLmRldGFpbHMuYmVoYXZpb3IgOiBkYXRhLmJlaGF2aW9yW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGRhdGEuYmVoYXZpb3IubGVuZ3RoKV07XHJcbiAgICAgICAgX3RoaXMuY3VycmVudEJlaGF2aW9yID0gX3RoaXMuYmVoYXZpb3I7XHJcbiAgICAgICAgX3RoaXMuZGVmYXVsdFNwZWVkID0gZGF0YS5zcGVlZDtcclxuICAgICAgICBfdGhpcy51bml0UmFuZG9taXplID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTAgKyAxMCk7XHJcbiAgICAgICAgX3RoaXMuY2hhbmdlTW9kZVJhbmRvbWl6ZXIgPSAxMDtcclxuICAgICAgICBfdGhpcy5qdW1wU3BlZWQgPSBkYXRhLmp1bXBTcGVlZDtcclxuICAgICAgICBfdGhpcy5kZXRhaWxzID0gZGF0YS5kZXRhaWxzO1xyXG4gICAgICAgIF90aGlzLnNob3RQcm9iYWJpbGl0eSA9IGRhdGEuc2hvdFByb2JhYmlsaXR5O1xyXG4gICAgICAgIF90aGlzLm9iamVjdFByZXNlbnQgPSB0cnVlO1xyXG4gICAgICAgIF90aGlzLmlzSnVtcCA9IGZhbHNlO1xyXG4gICAgICAgIF90aGlzLmlzSnVtcERvd24gPSBmYWxzZTtcclxuICAgICAgICBfdGhpcy5leHRyYU9iamVjdHMgPSAoZGF0YS5leHRyYU9iamVjdHMpID8gZGF0YS5leHRyYU9iamVjdHMgOiBudWxsO1xyXG4gICAgICAgIF90aGlzLmRhbWFnZSA9IChkYXRhLmRhbWFnZSkgPyBkYXRhLmRhbWFnZSA6IDA7XHJcbiAgICAgICAgX3RoaXMuZXhwbG9zaW9uQW5pbWF0aW9uID0gKGRhdGEuZXhwbG9zaW9uQW5pbWF0aW9uKSA/IGRhdGEuZXhwbG9zaW9uQW5pbWF0aW9uIDogbnVsbDtcclxuICAgICAgICBfdGhpcy5wb2ludHNQZXJVbml0ID0gKGRhdGEucG9pbnRzUGVyVW5pdCkgPyBkYXRhLnBvaW50c1BlclVuaXQgOiBudWxsO1xyXG4gICAgICAgIF90aGlzLmlkU3RhcnREaWFsb2cgPSAwO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBEeW5hbWljRW5lbXlDb25zdHJ1Y3RvcjtcclxufShkeW5hbWljVXNlckNvbnN0cnVjdG9yXzEuRHluYW1pY1VzZXJDb25zdHJ1Y3RvcikpO1xyXG5leHBvcnRzLkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yID0gRHluYW1pY0VuZW15Q29uc3RydWN0b3I7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5ncm91bmRFbmVteU1vdmUgPSBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMS5ncm91bmRFbmVteU1vdmU7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5kZXRlY3RQbGF5ZXIgPSBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMi5kZXRlY3RQbGF5ZXI7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5kQW5nbGVUb1NoaXAgPSBnYW1lU2lkZU9iamVjdHNNb2R1bGVfMS5maW5kQW5nbGVUb1NoaXA7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5ncm91bmRFbmVteURlY2lkZWQgPSBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMi5ncm91bmRFbmVteURlY2lkZWQ7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5ncm91bmRFbmVteVBhdGhGaW5kZXIgPSBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMi5ncm91bmRFbmVteVBhdGhGaW5kZXI7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5ncm91bmRFbmVteVNob3QgPSBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMi5ncm91bmRFbmVteVNob3Q7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlRGFtYWdlID0gYW5pbWF0aW9uSGl0Qm94TW9kdWxlc18xLnRha2VEYW1hZ2U7XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5ncm91bmRQbGF5ZXJKdW1wID0gZHluYW1pY0xldmVsRW5lbXlNb2R1bGVzXzIuZ3JvdW5kUGxheWVySnVtcDtcclxuRHluYW1pY0VuZW15Q29uc3RydWN0b3IucHJvdG90eXBlLnNwYXduQ29pbiA9IGFuaW1hdGlvbkhpdEJveE1vZHVsZXNfMS5zcGF3bkNvaW47XHJcbkR5bmFtaWNFbmVteUNvbnN0cnVjdG9yLnByb3RvdHlwZS5lbmVteURldGVjdE5wYyA9IGR5bmFtaWNMZXZlbEVuZW15TW9kdWxlc18yLmVuZW15RGV0ZWN0TnBjO1xyXG5EeW5hbWljRW5lbXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUuanVtcERvd24gPSBkeW5hbWljTGV2ZWxFbmVteU1vZHVsZXNfMi5qdW1wRG93bjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZnVuY3Rpb24gaW5pdEFwcEdsb2JhbFZhcmlhYmxlKCkge1xyXG4gICAgcHJvY2Vzcy5lbnYuTUFYX05VTUJFUl9PRl9FWFBMT1NJT04gPSAnMjAnO1xyXG4gICAgcHJvY2Vzcy5lbnYuTUFYX05VTUJFUl9PRl9CVUxMRVRTID0gJzE1MCc7XHJcbiAgICBwcm9jZXNzLmVudi5TQVZFX0RBVEFfRklMRSA9ICdnYW1lLXNhdmVzJztcclxuICAgIHByb2Nlc3MuZW52LkxFVkVMX0RBVEFfVVJMID0gJ2FwaS9sZXZlbC1kYXRhJztcclxuICAgIHByb2Nlc3MuZW52LkxFVkVMX09CSkVDVF9VUkwgPSAnYXBpL2xldmVsLW9iamVjdHMnO1xyXG4gICAgcHJvY2Vzcy5lbnYuTEVWRUxfR1JBUFBMRV9PQkpFQ1RTX1VSTCA9ICdhcGkvZ3JhcHBsZS1vYmplY3RzJztcclxuICAgIHByb2Nlc3MuZW52LkdBTUVfU0VUVElOR1NfVVJMID0gJ2FwaS9nYW1lLXNldHRpbmdzJztcclxuICAgIHByb2Nlc3MuZW52LlVTRVJfU0hJUF9VUkwgPSAnYXBpL3VzZXItc2hpcCc7XHJcbiAgICBwcm9jZXNzLmVudi5FTkVNWV9TSElQX1VSTCA9ICdhcGkvZW5lbXktc2hpcCc7XHJcbiAgICBwcm9jZXNzLmVudi5EWU5BTUlDX0xFVkVMX0JMT0NLUyA9ICdsZXZlbC1jcmVhdG9yL2NvbXBsZXRlLW1hcHMnO1xyXG4gICAgcHJvY2Vzcy5lbnYuR1JPVU5EX0NIQVJBQ1RFUlNfVVJMID0gJ2FwaS9nZXQtZ3JvdW5kLWNoYXJhY3RlcnMnO1xyXG4gICAgcHJvY2Vzcy5lbnYuRFlOQU1JQ19MRVZFTF9FTkVNWV9DT0xMRUNUSU9OX1VSTCA9ICdhcGkvZ2V0LWNvbnN0cnVjdG9yLWdyb3VuZC1lbmVteSc7XHJcbiAgICBwcm9jZXNzLmVudi5HUk9VTkRfQ0hBUkFDVEVSU19JTlZFTlRPUlkgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuR1JPVU5EX0FDVElWRV9CTE9DS19JTl9SQU5HRSA9ICdmYWxzZSc7XHJcbiAgICBwcm9jZXNzLmVudi5HUk9VTkRfTlBDX0RJQUxPR19BQ1RJVkUgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuR1JPVU5EX1BMQVlFUl9BTExPV19NT1ZFID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfR1VOU19VUkwgPSAnYXBpL3Nob3AvZ3Vucyc7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX1NISVBZQVJEX1VSTCA9ICdhcGkvc2hvcC9zaGlweWFyZCc7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX1NUT1JFX0lURU1TID0gXCJhcGkvc2hvcC9zdG9yZS1pdGVtc1wiO1xyXG4gICAgcHJvY2Vzcy5lbnYuQVBQX1NBVkVfRElSRUNUT1JZID0gJy9hcHBEYXRhL3NhdmVzJztcclxuICAgIHByb2Nlc3MuZW52LkFQUF9TQ1JFRU5TSE9UU19ESVJFQ1RPUlkgPSAnL2FwcERhdGEvc2F2ZXMvc2NyZWVuc2hvdHMnO1xyXG4gICAgcHJvY2Vzcy5lbnYuTUFJTl9HQU1FX1NPVU5EID0gJyc7XHJcbiAgICBwcm9jZXNzLmVudi5NQUlOX0dBTUVfU09VTkRfRUZGRUNUUyA9ICcnO1xyXG4gICAgcHJvY2Vzcy5lbnYuTUFJTl9HQU1FX1NPVU5EX09OID0gJyc7XHJcbiAgICBwcm9jZXNzLmVudi5TSE9QX0FDVElWRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9TSElQWUFSRF9BQ1RJVkVfV0lORE9XID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNIT1BfU0FMRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUF9TVE9SRV9XSU5ET1cgPSAnZmFsc2UnO1xyXG4gICAgcHJvY2Vzcy5lbnYuQk9TU19MT0FEX0FUX0xFVkVMID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52LlNVQl9MT0FEX0FUX0xFVkVMID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52Lk9WRVJXUklURV9TQVZFID0gJ2ZhbHNlJztcclxuICAgIHByb2Nlc3MuZW52Lk5VTUJFUl9PRl9TQVZFUyA9IFwiMFwiO1xyXG4gICAgcHJvY2Vzcy5lbnYuR1JPVU5EX1BMQVlFUl9TVEFJUlNfR1JPVU5EX1RPVUNIID0gJ2ZhbHNlJztcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JylcclxuICAgICAgICBwcm9jZXNzLmVudi5IT1NUID0gX19kaXJuYW1lICsgJy8nO1xyXG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIHByb2Nlc3MuZW52LkhPU1QgPSBfX2Rpcm5hbWUgKyAnLyc7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwcm9kdWN0aW9uIG1vZGUgY2hlY2sgSE9TVFwiKTtcclxuICAgIH1cclxuICAgIDtcclxufVxyXG5leHBvcnRzLmluaXRBcHBHbG9iYWxWYXJpYWJsZSA9IGluaXRBcHBHbG9iYWxWYXJpYWJsZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==