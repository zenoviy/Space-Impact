!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/public/dist",n(n.s=4)}([function(e,t,n){var i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],r=0,l=o.length;r<l;r++,a++)i[a]=o[r];return i};n(9).ERROR_LIST;function a(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];e[t].apply(e,n)}function o(e,t,n){a(e,"clearRect",0,0,t,n)}e.exports.viewModules={clearField:o,draw:a,createLaserBullet:function(e){if(!e.ctx)return new Error("no context");e.ctx.fillStyle="rgba(255, 255, 255)",a(e.ctx,"beginPath"),a(e.ctx,"moveTo",e.x,e.y),a(e.ctx,"lineTo",e.x+e.width,e.y),a(e.ctx,"lineTo",e.x+e.width,e.y+e.height),a(e.ctx,"lineTo",e.x,e.y+e.height),a(e.ctx,"lineTo",e.x,e.y),a(e.ctx,"closePath"),a(e.ctx,"fill"),e.ctx.lineWidth=2,e.ctx.strokeStyle=e.color,a(e.ctx,"stroke")},clear:o,createImage:function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];a.apply(void 0,i([e,"drawImage",t],n))}}},function(e,t,n){n(0).viewModules,n(3).levelConstructor;e.exports.gameMethods={initField:function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var n=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!n)throw Error(ERROR_LIST.noObject);for(var i=0,a=n;i<a.length;i++){var o=a[i];o.width=e-4,o.height=t-4}},setGameFields:function(){this.initField(),this.createContext(),this.initPlayerShip()},levelInit:function(e,t,n){var i=new e(this.showLevelData().levelMap,1,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);i.parrent=n,this.gameInitData.mapBackgroundObjects=this.gameInitData.mapBackgroundObjects.concat(i)},createContext:function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},delateBullet:function(e){if(e.x>this.gameInitData.screen.width||e.x<-100){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}}}},function(e,t,n){var i=n(0).viewModules,a=(n(3).levelConstructor,n(10).bulletModule);e.exports.playerShipModule={displayPlayerShip:function(){this.img&&this.ctx&&this.img&&i.createImage(this.ctx,this.img,this.x-30,this.y-30)},initPlayerShip:function(){var e=this;if(this.ctx){var t=this.data.texture,n=this.parrent.serverLocation.picturesDirection;this.img=new Image,this.img.onload=function(){return e.placePlayerShip&&e.placePlayerShip(),e.img},this.img.src=n+t}},shipControl:function(e){var t=this,n=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(e){n.down.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:0,yPos:t.data.speed}),n.left.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),n.right.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:t.data.speed,yPos:0}),n.up.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(e){if("CANVAS"===e.target.tagName){var n=e.clientX-e.target.offsetLeft,i=e.clientY-e.target.offsetTop;t.xFinal=n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed),t.yFinal=i%t.data.speed==0?i:t.data.speed*Math.floor(i/t.data.speed)}})),document.addEventListener("click",(function(n){t.ctx.width,t.ctx.height;for(var i=0,o=t.data.guns;i<o.length;i++){var r=o[i],l=new a.BulletConstruct(t.xFinal,t.yFinal,r.name,r.color,"player",r.speed,r.width,r.height);e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(l)}}))},moveShip:function(e){var t=e.xPos,n=void 0===t?0:t,i=e.yPos,a=void 0===i?0:i;this.x+=n,this.y+=a},placeShip:function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},setContext:function(e){this.ctx=e},showInformation:function(){console.log(this)}}},function(e,t,n){n(0).viewModules,n(1).gameMethods,n(2).playerShipModule;var i=n(12).backgroundMapModule,a=function(){function e(e,t,n,i,a){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=n,this.ctx=i,this.x=a?0:n.width,this.y=0,this.img=new Image,this.img.src=location.origin+"/images/locations/"+this.backgroundTexture}return e.prototype.setContext=function(e){this.ctx=e},e}();a.prototype.updateMap=i.updateMap,e.exports.levelConstructor={GameBackground:a}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(a,o){function r(e){try{s(i.next(e))}catch(e){o(e)}}function l(e){try{s(i.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,l)}s((i=i.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,i,a,o,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(a=2&o[0]?i.return:o[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,o[1])).done)return a;switch(i=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,i=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(a=(a=r.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){r.label=o[1];break}if(6===o[0]&&r.label<a[1]){r.label=a[1],a=o;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(o);break}a[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],i=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),n(5);var o=n(3).levelConstructor,r=n(13).playerModules,l=n(14).gameModule,s=(n(1).engineModule,n(15).serverModules),c=(n(16).enemies,n(0).viewModules);!function(){i(this,void 0,void 0,(function(){function e(){return i(this,void 0,void 0,(function(){var e,n,i,o,l,c,u;return a(this,(function(a){switch(a.label){case 0:return e=document.querySelector("#gamefield"),n=document.querySelector("#gameObjectsfield"),i=document.querySelector("#gameUifield"),o={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},enemylData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"}},[4,s.getData({url:o.host+o.levelData.url,method:o.levelData.method,data:null,headers:{maplevel:2}})];case 1:return l=a.sent(),[4,s.getData({url:o.host+o.gameSetings.url,method:o.gameSetings.method,data:null,headers:null})];case 2:return c=a.sent(),[4,s.getData({url:o.host+o.userShip.url,method:o.userShip.method,data:null,headers:{usership:1}})];case 3:return u=a.sent(),[2,{data:{ctx:null,gameField:e||null,gameActionField:n||null,gameUIField:i||null,gameData:{currentLevel:2,currentPoint:0,playerObject:new r.PlayerShip(u,0,3,0,0),gameSetings:c,constrollers:null},screen:{width:window.innerWidth,height:window.innerHeight},allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],gamePause:!1,backScreenPause:!0,gameStatus:!1,gameEngine:setInterval(t,20),levelData:l},locations:o}]}}))}))}function t(){if(u.gameInitData.ctxActionField&&c.clearField(u.gameInitData.ctxActionField,u.gameInitData.screen.width,u.gameInitData.screen.height),u.gameInitData.backScreenPause&&(u.gameInitData.backScreenPause=!1,u.levelInit(o.GameBackground,u.gameInitData.ctx,u),u.levelInit(o.GameBackground,u.gameInitData.ctx,u)),!u.gameInitData.backScreenPause)for(var e=0,t=u.gameInitData.mapBackgroundObjects;e<t.length;e++){t[e].updateMap()}if(u.gameInitData.allGameBullets.length>0)for(var n=0,i=u.gameInitData.allGameBullets;n<i.length;n++){var a=i[n];a.moveBullets(),a.createBullets(u),u.delateBullet(a)}h.placeShip(),h.displayPlayerShip(),h.parrent=u}var n,u,h,d;return a(this,(function(t){switch(t.label){case 0:return[4,e()];case 1:return n=t.sent(),u=new l.Game(n.data,n.locations),h=u.gameInitData.gameData.playerObject,u.setGameFields(),d=u.returnContext(),h.ctx=d.gameActionField,h.parrent=u,h.initPlayerShip(),h.shipControl(u),[2]}}))}))}()},function(e,t,n){var i=n(6),a=n(7);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},r=(i(a,o),a.locals?a.locals:{});e.exports=r},function(e,t,n){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function l(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},i=[],a=0;a<e.length;a++){var o=e[a],s=t.base?o[0]+t.base:o[0],c=n[s]||0,u="".concat(s," ").concat(c);n[s]=c+1;var h=l(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(r[h].references++,r[h].updater(d)):r.push({identifier:u,updater:g(d,t),references:1}),i.push(u)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var a=n.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,i){var a=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=h(t,a);else{var o=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function p(e,t,n){var i=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,m=0;function g(e,t){var n,i,a;if(t.singleton){var o=m++;n=f||(f=c(t)),i=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=c(t),i=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var a=l(n[i]);r[a].references--}for(var o=s(e,t),c=0;c<n.length;c++){var u=l(n[c]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=o}}}},function(e,t,n){(t=n(8)(!1)).push([e.i,"body{color:orange;background:#333;margin:0;padding:0}canvas{cursor:none}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var a=(r=i,l=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),o=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([a]).join("\n")}var r,l,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(a[r]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);i&&a[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},function(e,t){e.exports.ERROR_LIST={noData:"There is no data",noObject:"There is no Object"}},function(e,t,n){var i=n(11).bulletsModule,a=function(e,t,n,i,a,o,r,l){this.x=e,this.y=t,this.bulletType=n,this.bulletTexture=i,this.bulletDirection=a,this.bulletSpeed=o,this.width=r,this.height=l,this.id=(new Date).getTime()};a.prototype.createBullets=i.createBullets,a.prototype.placeBullets=i.placeBullets,a.prototype.moveBullets=i.moveBullets,e.exports.bulletModule={BulletConstruct:a}},function(e,t,n){var i=n(0).viewModules;e.exports.bulletsModule={createBullets:function(e){i.createLaserBullet({ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height})},placeBullets:function(){},moveBullets:function(){"player"==this.bulletDirection?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,n){var i=n(0).viewModules;n(1).gameMethods,n(2).playerShipModule;e.exports.backgroundMapModule={updateMap:function(){this.img=this.img||new Image;var e=this;this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),this.img.onload=function(){i.createImage(e.ctx,e.img,e.x,0,e.screenData.width+2,e.screenData.height)},this.img.src=this.img.src||location.origin+"/images/locations/"+this.backgroundTexture}}},function(e,t,n){n(0).viewModules;var i=n(2).playerShipModule,a=function(e,t,n,i,a){void 0===i&&(i=0),void 0===a&&(a=0),this.data=e,this.points=t,this.lifePoints=n,this.x=i,this.y=a};a.prototype.initPlayerShip=i.initPlayerShip,a.prototype.displayPlayerShip=i.displayPlayerShip,a.prototype.shipControl=i.shipControl,a.prototype.moveShip=i.moveShip,a.prototype.placeShip=i.placeShip,a.prototype.setContext=i.setContext,e.exports.playerModules={PlayerShip:a}},function(e,t,n){n(0).viewModules;var i=n(1).gameMethods,a=n(2).playerShipModule,o=function(){function e(e,t){this.gameInitData=e,this.serverLocation=t,this.gameInitData=e,this.serverLocation=t}return e.prototype.changeLevel=function(e){this.gameInitData.gameData.currentLevel=e},e.prototype.showGameInfo=function(){return{currentLevel:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint}},e.prototype.showLevelData=function(){return this.gameInitData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();o.prototype.createContext=i.createContext,o.prototype.initField=i.initField,o.prototype.levelInit=i.levelInit,o.prototype.setGameFields=i.setGameFields,o.prototype.initPlayerShip=a.initPlayerShip,o.prototype.placePlayerShip=a.placePlayerShip,o.prototype.delateBullet=i.delateBullet,e.exports.gameModule={Game:o}},function(e,t){e.exports.serverModules={getData:function(e){var t=e.url,n=e.method,i=e.data,a=e.headers,o=Object.assign({"Content-Type":"application/json"},a||!1);return fetch(t,{method:n,mode:"cors",headers:o,body:i?JSON.stringify(i):null}).then((function(e){return e.json()})).then((function(e){return e}))}}},function(e,t){e.exports.enemies=function(){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,