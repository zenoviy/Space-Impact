!function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=13)}([function(e,t,i){var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,a++)n[a]=o[r];return n},a=(i(18).ERROR_LIST,i(19).uiWindowModules);function o(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];e[t].apply(e,i)}function r(e,t,i){o(e,"clearRect",0,0,t,i)}e.exports.viewModules={clearField:r,draw:o,createLaserBullet:function(e){if(!e.ctx)return new Error("no context");e.ctx.fillStyle="rgba(255, 255, 255)",o(e.ctx,"beginPath"),o(e.ctx,"moveTo",e.x+e.radius,e.y+e.height/2),o(e.ctx,"lineTo",e.x+e.radius,e.y),o(e.ctx,"lineTo",e.x+e.width-e.radius,e.y),o(e.ctx,"quadraticCurveTo",e.x+e.width,e.y,e.x+e.width,e.y+e.radius),o(e.ctx,"lineTo",e.x+e.width,e.y+e.height-e.radius),o(e.ctx,"quadraticCurveTo",e.x+e.width,e.y+e.height,e.x+e.width-e.radius,e.y+e.height),o(e.ctx,"closePath"),o(e.ctx,"fill"),e.ctx.lineWidth=2,e.ctx.strokeStyle=e.color,o(e.ctx,"stroke")},clear:r,createImage:function(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];o.apply(void 0,n([e,"drawImage",t],i))},createWindow:a.createWindow,createShapeRoundBorder:a.createShapeRoundBorder}},function(e,t,i){i(0).viewModules,i(3).levelConstructor;e.exports.gameMethods={initField:function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error(ERROR_LIST.noObject);for(var n=0,a=i;n<a.length;n++){var o=a[n];o=Object.assign(o,{width:e-4,height:t-4})}},setGameFields:function(){this.initField(),this.createContext(),this.initPlayerShip()},levelInit:function(e,t,i){var n=new e(this.showLevelData().levelMap,1,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);n.parrent=i,this.gameInitData.mapBackgroundObjects=this.gameInitData.mapBackgroundObjects.concat(n)},createContext:function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},getScreenSize:function(){return{width:this.gameInitData.screen.width,height:this.gameInitData.screen.height}},getLevelUserData:function(){var e=this.gameInitData.gameData;return e.levelData.levelDetails.levelTime,this.gameInitData.intervalCount,{level:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,life:e.playerObject.numberOflife}},deleteBullet:function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},deleteObjects:function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},getObjectPosition:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},collectPoints:function(e){this.gameInitData.gameData.currentPoint+=e}}},function(e,t,i){var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,o,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(a=(a=r.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){r.label=o[1];break}if(6===o[0]&&r.label<a[1]){r.label=a[1],a=o;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(o);break}a[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],n=0}finally{i=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=i(0).viewModules;i(6).bulletModule,i(8).regularAiModule;e.exports.enemiesModel={placeEnemyes:function(e){o.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},moveEnemyes:function(e,t){void 0===t&&(t=0),this.x-=this.enemySpeed,this.y-=t},loadEnemyes:function(){this.img=new Image,this.img.src=this.shipTexture},shoot:function(){},enemyAnimation:function(){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},hitDetection:function(e,t,i){for(var n=null,a=0,o=t;a<o.length;a++){var r=o[a],s=e.getObjectPosition.call(e),l=Math.max(s.x,r.x),c=Math.max(s.y,r.y),u=Math.min(s.x+(e.width||s.width),r.x+r.width)-l,h=Math.min(s.y+(e.height||s.height),r.y+r.height)-c;if("collision"==(n=!(Math.sign(u)<0||Math.sign(h)<0)&&"collision")){e.takeDamage&&r.takeDamage&&(e.takeDamage(r.damage?r.damage:0,r,i),r.takeDamage(e.damage?e.damage:0,e,i));break}}return"collision"==n&&e},takeDamage:function(e,t,i){return n(this,void 0,void 0,(function(){return a(this,(function(n){return this.hasOwnProperty("bulletType")?[2,this.objectPresent=!1]:this.hasOwnProperty("healthPoint")?(this.healthPoint-=e,this.healthPoint<=0?("player"==t.objectOwner&&i.collectPoints(this.pointsPerUnit),[2,this.objectPresent=!1]):[2]):[2,console.log("no Object")]}))}))},enemyShoot:function(e){if(e.gameInitData.gamePause)return!1}}},function(e,t,i){i(0).viewModules,i(1).gameMethods,i(4).playerShipModule;var n=i(22).backgroundMapModule,a=function(e,t,i,n,a){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=n,this.x=a?0:i.width,this.y=0,this.img=new Image,this.img.src=location.origin+"/images/locations/"+this.backgroundTexture};a.prototype.updateMap=n.updateMap,e.exports.levelConstructor={GameBackground:a}},function(e,t,i){var n=i(0).viewModules,a=(i(3).levelConstructor,i(6).bulletModule);e.exports.playerShipModule={movePlayerShip:function(){this.img&&this.ctx&&this.img&&n.createImage(this.ctx,this.img,this.x-30,this.y-30)},initPlayerShip:function(e){var t=this;if(this.ctx){var i=this.data.texture,n=e.serverLocation.picturesDirection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=n+i}},shipControl:function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(n){if(e.gameInitData.gamePause)return!1;i.down.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(i){if(e.gameInitData.gamePause)return!1;if("CANVAS"===i.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var n=i.clientX-i.target.offsetLeft,a=i.clientY-i.target.offsetTop;t.xFinal=n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed),t.yFinal=a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed)}})),document.addEventListener("click",(function(i){if(e.gameInitData.gamePause)return!1;for(var n=0,o=t.data.guns;n<o.length;n++){var r=o[n],s=new a.BulletConstruct(t.x,t.y,r.name,r.color,"player",r.speed,r.width,r.height,r.damage);e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(s)}}))},moveShip:function(e){var t=e.xPos,i=void 0===t?0:t,n=e.yPos,a=void 0===n?0:n;this.x+=i,this.y+=a},placeShip:function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},setContext:function(e){this.ctx=e},showInformation:function(){console.log(this)}}},function(e,t){e.exports.uiModelsMethods={init:function(e,t){e(t=t||this)},getUIObjectPosition:function(){return{x:this.propertyes.x,y:this.propertyes.y,width:this.propertyes.width,height:this.propertyes.height}}}},function(e,t,i){var n=i(20).bulletsModule,a=i(1).gameMethods,o=i(2).enemiesModel,r=function(e,t,i,n,a,o,r,s,l){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=n,this.objectOwner=a,this.bulletSpeed=o,this.width=r,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0};r.prototype.createBullets=n.createBullets,r.prototype.initBullets=n.initBullets,r.prototype.moveBullets=n.moveBullets,r.prototype.getObjectPosition=a.getObjectPosition,r.prototype.takeDamage=o.takeDamage,e.exports.bulletModule={BulletConstruct:r}},function(e,t,i){var n=i(5).uiModelsMethods;e.exports.uiStateModules={gameLoadMenu:function(e,t,i,a,o){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:45},action:function(){this.gameStart()},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:100,height:140,sWidth:503,sHeight:669,x:i/2-50,y:50,background:new Image,borderColor:!1,radius:null},loadPicture:function(){this.propertyes.background.src=o+"misc/logo-half-white_1.png"},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",propertyes:{ctx:t,width:-240,height:0,x:i/2,y:300,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",propertyes:{ctx:t,width:50,height:0,x:i/2,y:300,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Start button",text:"Press Start to begin",description:"Text in main button",fontSize:"30px Roboto",clicked:!1,propertyes:{ctx:t,width:-90,height:105,x:i/2,y:a/2,background:!1,borderColor:"#007BD1",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}}},function(e,t,i){var n=i(21).objectConstructor;e.exports.regularAiModule={dartShipLogic:function(){},spawnEnemyLogic:function(e){var t=this.gameInitData.gameData,i=t.levelData,n=t.enemyData;if(!this.gameInitData.gameData.levelChange&&this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var a=this.gameRandomizer(i.enemyMaxNumber);a<i.enemyMaxNumber;a++){var o=n[this.gameRandomizer(n.length)],r=this.createNewEnemy(o);r.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}},createNewEnemy:function(e){var t=this.gameInitData.screen.width+300,i=this.gameRandomizer(this.gameInitData.screen.height-200,100),a=e.details;return new n.EnemyObject(t,i,a.sx,a.sy,a.imageWidth/a.numberOfItems,a.imageHeight,a.imageWidth,a.numberOfItems,a.width,a.height,a.skinName,a.speed,a.status,a.name,a.bulletType,a.rapidFire,a.pointsPerUnit,a.healthPoint,a.animationSteps,a.damage,a.objectOwner,a.guns)},gameRandomizer:function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}}},function(e,t,i){i(0).viewModules;var n=i(4).playerShipModule,a=i(1).gameMethods,o=i(2).enemiesModel,r=function(e,t,i,n,a,o){void 0===a&&(a=100),void 0===o&&(o=100),this.data=e,this.points=t,this.numberOflife=n,this.healthPoint=i,this.x=a,this.y=o,this.xFinal=a,this.yFinal=o};r.prototype.initPlayerShip=n.initPlayerShip,r.prototype.movePlayerShip=n.movePlayerShip,r.prototype.shipControl=n.shipControl,r.prototype.moveShip=n.moveShip,r.prototype.placeShip=n.placeShip,r.prototype.setContext=n.setContext,r.prototype.getObjectPosition=a.getObjectPosition,r.prototype.takeDamage=o.takeDamage,e.exports.playerModules={PlayerShip:r}},function(e,t,i){i(0).viewModules;var n=i(1).gameMethods,a=i(4).playerShipModule,o=i(8).regularAiModule,r=i(2).enemiesModel,s=i(23).uiModules,l=i(11).startGameModules,c=function(){function e(e,t){this.gameInitData=e,this.serverLocation=t,this.gameInitData=e,this.serverLocation=t}return e.prototype.changeLevel=function(e){this.gameInitData.gameData.levelData.currentLevel=e},e.prototype.showGameInfo=function(){return{currentLevel:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();c.prototype.createContext=n.createContext,c.prototype.initField=n.initField,c.prototype.levelInit=n.levelInit,c.prototype.setGameFields=n.setGameFields,c.prototype.getScreenSize=n.getScreenSize,c.prototype.getLevelUserData=n.getLevelUserData,c.prototype.initPlayerShip=a.initPlayerShip,c.prototype.placePlayerShip=a.placePlayerShip,c.prototype.deleteBullet=n.deleteBullet,c.prototype.deleteObjects=n.deleteObjects,c.prototype.hitDetection=r.hitDetection,c.prototype.collectPoints=n.collectPoints,c.prototype.spawnEnemyLogic=o.spawnEnemyLogic,c.prototype.createNewEnemy=o.createNewEnemy,c.prototype.gameRandomizer=o.gameRandomizer,c.prototype.uiController=s.uiController,c.prototype.gameUiPause=s.gameUiPause,c.prototype.gameUiMenu=s.gameUiMenu,c.prototype.showMenuWindow=s.showMenuWindow,c.prototype.showUiPopupWindow=s.showUiPopupWindow,c.prototype.showStartWindow=s.showStartWindow,c.prototype.showPauseWindow=s.showPauseWindow,c.prototype.showGameStats=s.showGameStats,c.prototype.initUiElements=s.initUiElements,c.prototype.gameStart=l.gameStart,c.prototype.backToStartScreen=l.backToStartScreen,e.exports.gameModule={Game:c}},function(e,t,i){var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,o,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(a=(a=r.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){r.label=o[1];break}if(6===o[0]&&r.label<a[1]){r.label=a[1],a=o;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(o);break}a[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],n=0}finally{i=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=(i(3).levelConstructor,i(9).playerModules),r=(i(10).gameModule,i(1).engineModule,i(12).serverModules);i(2).enemies,i(0).viewModules,i(7).uiStateModules;function s(){return n(this,void 0,void 0,(function(){var e,t,i,n,s,l,c,u;return a(this,(function(a){switch(a.label){case 0:return e=document.querySelector("#gamefield"),t=document.querySelector("#gameObjectsfield"),i=document.querySelector("#gameUifield"),n={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,r.getData({url:n.host+n.levelData.url,method:n.levelData.method,data:null,headers:{maplevel:1}})];case 1:return s=a.sent(),[4,r.getData({url:n.host+n.gameSetings.url,method:n.gameSetings.method,data:null,headers:null})];case 2:return l=a.sent(),[4,r.getData({url:n.host+n.userShip.url,method:n.userShip.method,data:null,headers:{usership:1}})];case 3:return c=a.sent(),[4,r.getData({url:n.host+n.enemylData.url,method:n.enemylData.method,data:null,headers:{"ship-type-number":1}})];case 4:return u=a.sent(),[2,{data:{ctx:null,gameField:e||null,gameActionField:t||null,gameUIField:i||null,gameData:{currentLevel:1,currentPoint:0,playerObject:new o.PlayerShip(c,0,300,5,100,100),levelData:s,gameSetings:l,enemyData:u,controllers:null},screen:{width:window.innerWidth,height:window.innerHeight},intervalCount:20,enemyType:null,allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],levelChange:!1,gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameStatus:!1},locations:n}]}}))}))}e.exports.startGameModules={gameDataInit:s,gameEngine:function(e){return n(this,void 0,void 0,(function(){return a(this,(function(e){return[2]}))}))},gameStart:function(){this.gameInitData.gameStatus=!0},backToStartScreen:function(){return n(this,void 0,void 0,(function(){var e,t,i,n,o,r;return a(this,(function(a){switch(a.label){case 0:return[4,s()];case 1:for(e=a.sent(),t=0,i=Object.entries(e.data);t<i.length;t++)n=i[t],o=n[0],null!==(r=n[1])&&(this.gameInitData[o]=r);return this.gameInitData.gameStatus=!1,[2]}}))}))}}},function(e,t){e.exports.serverModules={getData:function(e){var t=e.url,i=e.method,n=e.data,a=e.headers,o=Object.assign({"Content-Type":"application/json"},a||!1);return fetch(t,{method:i,mode:"cors",headers:o,body:n?JSON.stringify(n):null}).then((function(e){return e.json()})).then((function(e){return e}))}}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,o,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,n&&(a=2&o[0]?n.return:o[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,o[1])).done)return a;switch(n=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(a=(a=r.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){r.label=o[1];break}if(6===o[0]&&r.label<a[1]){r.label=a[1],a=o;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(o);break}a[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],n=0}finally{i=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),i(14);var o=i(3).levelConstructor,r=(i(9).playerModules,i(10).gameModule),s=(i(1).engineModule,i(12).serverModules,i(2).enemies,i(0).viewModules),l=(i(7).uiStateModules,i(11).startGameModules);!function(){n(this,void 0,void 0,(function(){function e(){return n(this,void 0,void 0,(function(){var e,t,n,r,l,u,h,d;return a(this,(function(a){if(i.gameInitData.ctxUIField&&s.clearField(i.gameInitData.ctxUIField,i.gameInitData.screen.width,i.gameInitData.screen.height),i.gameInitData.ctxActionField&&!i.gameInitData.gamePause&&s.clearField(i.gameInitData.ctxActionField,i.gameInitData.screen.width,i.gameInitData.screen.height),i.gameInitData.backScreenPause&&(i.gameInitData.backScreenPause=!1,i.levelInit(o.GameBackground,i.gameInitData.ctx,i),i.levelInit(o.GameBackground,i.gameInitData.ctx,i)),!(i.gameInitData.backScreenPause&&i.gameInitData.gamePause&&i.gameInitData.gameStatus||i.gameInitData.gamePause&&i.gameInitData.gameStatus))for(e=0,t=i.gameInitData.mapBackgroundObjects;e<t.length;e++)t[e].updateMap();if(!i.gameInitData.gamePause&&i.gameInitData.gameStatus)if(1==i.gameInitData.gameStatus){if(i.spawnEnemyLogic(i),i.gameInitData.allGameBullets.length>0)for(n=0,r=i.gameInitData.allGameBullets;n<r.length;n++)(l=r[n]).moveBullets(),l.createBullets(i),i.deleteBullet(l),i.hitDetection(l,i.gameInitData.allGameEnemies,i);if(i.gameInitData.allGameEnemies.length>0)for(u=0,h=i.gameInitData.allGameEnemies;u<h.length;u++)(d=h[u]).placeEnemyes(i),d.moveEnemyes(),d.enemyAnimation(),d.enemyShoot(i),i.deleteObjects(d);c.placeShip(),c.movePlayerShip()}else i.gameInitData.gameStatus;return i.gameInitData.gameStatus||i.showStartWindow(),i.gameInitData.gameStatus&&i.showGameStats(),i.gameInitData.gamePause&&i.showPauseWindow(),i.gameInitData.gameUiPause&&(i.showMenuWindow(),i.showPauseWindow()),[2]}))}))}var t,i,c,u;return a(this,(function(n){switch(n.label){case 0:return[4,l.gameDataInit()];case 1:return t=n.sent(),i=new r.Game(t.data,t.locations),c=i.gameInitData.gameData.playerObject,setInterval(e,i.gameInitData.intervalCount),i.uiController(),i.setGameFields(),i.getScreenSize(),u=i.returnContext(),c.ctx=u.gameActionField,c.initPlayerShip(i),c.shipControl(i),[2]}}))}))}()},function(e,t,i){var n=i(15),a=i(16);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},r=(n(a,o),a.locals?a.locals:{});e.exports=r},function(e,t,i){"use strict";var n,a=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function s(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],a=0;a<e.length;a++){var o=e[a],l=t.base?o[0]+t.base:o[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var h=s(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(r[h].references++,r[h].updater(d)):r.push({identifier:u,updater:f(d,t),references:1}),n.push(u)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var a=i.nc;a&&(n.nonce=a)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,i,n){var a=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=h(t,a);else{var o=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,i){var n=i.css,a=i.media,o=i.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var g=null,p=0;function f(e,t){var i,n,a;if(t.singleton){var o=p++;i=g||(g=c(t)),n=d.bind(null,i,o,!1),a=d.bind(null,i,o,!0)}else i=c(t),n=m.bind(null,i,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var a=s(i[n]);r[a].references--}for(var o=l(e,t),c=0;c<i.length;c++){var u=s(i[c]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}i=o}}}},function(e,t,i){(t=i(17)(!1)).push([e.i,"body{font-family:'Roboto';color:orange;background:#333;margin:0;padding:0}canvas{cursor:crosshair}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var a=(r=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[i].concat(o).concat([a]).join("\n")}var r,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(a[r]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&a[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports.ERROR_LIST={noData:"There is no data",noObject:"There is no Object"}},function(e,t,i){i(0).viewModules;e.exports.uiWindowModules={createWindow:function(){var e=this.getScreenSize();e.width,e.height,this.gameInitData.ctxUIField},createShapeRoundBorder:function(e){var t=e.propertyes;t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill()}}},function(e,t,i){var n=i(0).viewModules;e.exports.bulletsModule={createBullets:function(e){n.createLaserBullet({ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5})},initBullets:function(){},moveBullets:function(){"player"==this.objectOwner?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,i){var n=i(2).enemiesModel,a=i(1).gameMethods,o=(i(6).bulletModule,function(e,t,i,n,a,o,r,s,l,c,u,h,d,m,g,p,f,y,x,b,v,w){this.shipPresent=!0,this.id=(new Date).getTime(),this.x=e,this.y=t,this.sx=i,this.sy=n,this.sWidth=a,this.sHeight=o,this.picturesWidth=r,this.numberOfItems=s,this.width=l,this.height=c,this.shipTexture=location.origin+"/images/spaceShips/"+u,this.enemySpeed=h,this.status=d,this.name=m,this.bulletTypeNumber=g,this.rapidFire=p,this.pointsPerUnit=f,this.healthPoint=y,this.animationSteps=x,this.damage=b,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=v,this.guns=w});o.prototype.placeEnemyes=n.placeEnemyes,o.prototype.moveEnemyes=n.moveEnemyes,o.prototype.loadEnemyes=n.loadEnemyes,o.prototype.shoot=n.shoot,o.prototype.enemyAnimation=n.enemyAnimation,o.prototype.getObjectPosition=a.getObjectPosition,o.prototype.takeDamage=n.takeDamage,o.prototype.enemyShoot=n.enemyShoot,e.exports.objectConstructor={EnemyObject:o}},function(e,t,i){var n=i(0).viewModules;i(1).gameMethods,i(4).playerShipModule;e.exports.backgroundMapModule={updateMap:function(){this.img=this.img||new Image;var e=this;this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),this.img.onload=function(){n.createImage(e.ctx,e.img,e.x,0,e.screenData.width+2,e.screenData.height)},this.img.src=this.img.src||location.origin+"/images/locations/"+this.backgroundTexture}}},function(e,t,i){var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,a++)n[a]=o[r];return n},a=i(0).viewModules,o=i(7).uiStateModules,r=i(24).uiSettingsMenu,s=i(25).gamePauseModule,l=i(26).gameStatsScreens,c=i(27).uiElements,u=i(2).enemiesModel;e.exports.uiModules={gameUiPause:function(){!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},gameUiMenu:function(e){this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,this.gameInitData.gamePause=!e},uiController:function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,i=this;document.addEventListener("keydown",(function(n){t.escape.some((function(e){return n.keyCode==e}))&&i.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return n.keyCode==e}))&&i.gameUiPause()})),document.addEventListener("click",(function(t){if("CANVAS"===t.target.tagName){var i=t.clientX-t.target.offsetLeft,n=t.clientY-t.target.offsetTop,a=null,s=e.gameInitData.ctxUIField,l=e.getScreenSize();for(var c in 0==e.gameInitData.gameStatus&&(a=o.gameLoadMenu(null,s,l.width,l.height)),e.gameInitData.gameUiPause&&(a=r.gameSettingsMenu(null,s,l.width,l.height)),a){if(u.hitDetection(a[c],[].concat({x:i,y:n,width:10,height:10,name:"cursor"}))&&a[c].action){a[c].action.call(e);break}}}}))},showUiPopupWindow:function(){a.createWindow.call(this)},showStartWindow:function(){var e=[a.createShapeRoundBorder,c.uiImage,c.uiText,c.uiText,c.uiText];this.initUiElements(e,o.gameLoadMenu)},showMenuWindow:function(){var e=[a.createShapeRoundBorder,a.createShapeRoundBorder,c.uiText,c.uiText];this.initUiElements(e,r.gameSettingsMenu)},showPauseWindow:function(){var e=[c.uiText];this.initUiElements(e,s.gamePause)},showGameStats:function(){var e=this.getLevelUserData(),t=[c.uiImage,c.uiText,c.uiText,c.uiText];this.initUiElements(t,l.gameInformationScreen,e)},initUiElements:function(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];for(var o=this.gameInitData.ctxUIField,r=this.getScreenSize(),s=this.serverLocation.picturesDirection,l=t.apply(void 0,n([null,o,r.width,r.height,s],i)),c=0;c<l.length;c++)l[c].hasOwnProperty("loadPicture")&&l[c].loadPicture(),l[c].init(e[c])}}},function(e,t,i){var n=i(5).uiModelsMethods;e.exports.uiSettingsMenu={gameSettingsMenu:function(e,t,i,a){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:i,height:a/2,x:0,y:a/4,background:"rgba(38, 38, 86, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:5},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"",description:"back to start screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:200,height:50,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:15},action:function(){this.backToStartScreen.call(this)},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"textin button",text:"go to start",description:"Text in the menu button",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:45,height:0,x:i/2-150,y:a/2+80,background:!1,borderColor:"#007BD1",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:-45,height:0,x:i/2,y:a/3,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}}},function(e,t,i){var n=i(5).uiModelsMethods;e.exports.gamePauseModule={gamePause:function(e,t,i,a,o){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition}]}}},function(e,t,i){var n=i(5).uiModelsMethods;e.exports.gameStatsScreens={gameInformationScreen:function(e,t,i,a,o,r){return[{name:"lifePoint",text:"",number:r.life,step:[r.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,radius:null},loadPicture:function(){this.propertyes.background.src=o+"misc/ruby.png"},init:function(e,t){t=t||this;for(var i=Array(r.life).fill(0).map((function(e,t){return 30*t})),n=0;n<this.number;n++)this.propertyes.x=0==n?30:0+i[n]+(0!=n?30:0),e(t)},getObjectPosition:n.getUIObjectPosition},{name:"level",text:"Current Level "+r.level+"/"+r.allLevels,description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",propertyes:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Time to end f level",text:"Time to end "+r.minutes+":"+r.secons,description:"Game part the name",clicked:!1,fontSize:"lighter 16px Roboto",propertyes:{ctx:t,width:50,height:0,x:i-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game points",text:r.points,description:"Game part the name",clicked:!1,fontSize:"lighter 18px Roboto",propertyes:{ctx:t,width:-50,height:0,x:i/2,y:50,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}}},function(e,t){e.exports.uiElements={uiImage:function(e){var t=e.propertyes;t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},uiText:function(e){var t=e.propertyes;t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)},uiRepeatImage:function(e){var t=e.propertyes,i=t.ctx.createPattern(t.background,"repeat-x");t.ctx.rect(t.x,t.y,t.width,t.height),t.ctx.fillStyle=i,t.ctx.fill()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,