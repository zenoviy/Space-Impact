!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/public/dist",n(n.s=3)}([function(e,t,n){var i=n(1).viewModules,a=n(2).gameMethods,o=function(){function e(e,t,n,i,a){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=n,this.ctx=i,this.x=a?0:n.width,this.y=0,this.img=new Image,this.img.src=location.origin+"/images/locations/"+this.backgroundTexture}return e.prototype.setContext=function(e){this.ctx=e},e.prototype.updateMap=function(){this.img=this.img||new Image;var e=this;this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),this.img.onload=function(){i.createImage(e.ctx,e.img,e.x,0,e.screenData.width+2,e.screenData.height)},this.img.src=this.img.src||location.origin+"/images/locations/"+this.backgroundTexture},e}(),r=function(){function e(e,t){this.gameInitData=e,this.serverLocation=t,this.gameInitData=e,this.serverLocation=t}return e.prototype.changeLevel=function(e){this.gameInitData.gameData.currentLevel=e},e.prototype.showGameInfo=function(){return{currentLevel:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint}},e.prototype.showLevelData=function(){return this.gameInitData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();r.prototype.initField=a.initField,r.prototype.levelInit=a.levelInit,r.prototype.initPlayerShip=a.initPlayerShip,r.prototype.setGameFields=a.setGameFields,r.prototype.placePlayerShip=a.placePlayerShip,r.prototype.createContext=a.createContext,e.exports.levelConstructor={Game:r,GameBackground:o}},function(e,t,n){var i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,a++)i[a]=o[r];return i};n(8).ERROR_LIST;function a(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];e[t].apply(e,n)}function o(e,t,n){a(e,"clearRect",0,0,t,n)}e.exports.viewModules={clearField:o,draw:a,clear:o,createImage:function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];a.apply(void 0,i([e,"drawImage",t],n))}}},function(e,t,n){var i=n(1).viewModules;n(0).levelConstructor;e.exports.engineModule={stopEngine:function(e){clearInterval(e)}},e.exports.gameMethods={initField:function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var n=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!n)throw Error(ERROR_LIST.noObject);for(var i=0,a=n;i<a.length;i++){var o=a[i];o.width=e-4,o.height=t-4}},displayPlayerShip:function(){if(this.img&&this.ctx&&this.img){this.ctx.width,this.ctx.height;i.createImage(this.ctx,this.img,this.x,this.y)}},initPlayerShip:function(){var e=this;if(this.ctx){this.ctx.width,this.ctx.height;var t=this.data.texture,n=this.parrent.serverLocation.picturesDirection;this.img=new Image,this.img.onload=function(){return e.placePlayerShip(),e.img},this.img.src=n+t}},setGameFields:function(){this.initField(),this.createContext(),this.initPlayerShip()},levelInit:function(e,t,n){var i=new e(this.showLevelData().levelMap,1,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);i.parrent=n,this.gameInitData.mapBackgroundObjects=this.gameInitData.mapBackgroundObjects.concat(i)},createContext:function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},shipControl:function(){var e=this,t=this.parrent.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(n){console.log(n.key),t.down.some((function(e){return n.keyCode==e}))&&e.moveShip({xPos:0,yPos:e.data.speed}),t.left.some((function(e){return n.keyCode==e}))&&e.moveShip({xPos:-1*e.data.speed,yPos:0}),t.right.some((function(e){return n.keyCode==e}))&&e.moveShip({xPos:e.data.speed,yPos:0}),t.up.some((function(e){return n.keyCode==e}))&&e.moveShip({xPos:0,yPos:-1*e.data.speed})})),document.addEventListener("mousemove",(function(t){e.xFinal=t.clientX%e.data.speed==0?t.clientX:e.data.speed*Math.floor(t.clientX/e.data.speed),e.yFinal=t.clientY%e.data.speed==0?t.clientY:e.data.speed*Math.floor(t.clientY/e.data.speed)}))}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(a,o){function r(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}c((i=i.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,i,a,o,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(a=2&o[0]?i.return:o[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,o[1])).done)return a;switch(i=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,i=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(a=(a=r.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){r.label=o[1];break}if(6===o[0]&&r.label<a[1]){r.label=a[1],a=o;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(o);break}a[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],i=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),n(4);var o=n(0).levelConstructor,r=n(9).playerModules,s=(n(2).engineModule,n(10).serverModules),c=(n(11).enemies,n(1).viewModules);!function(){i(this,void 0,void 0,(function(){function e(){return i(this,void 0,void 0,(function(){var e,n,i,o,c,l,u;return a(this,(function(a){switch(a.label){case 0:return e=document.querySelector("#gamefield"),n=document.querySelector("#gameObjectsfield"),i=document.querySelector("#gameUifield"),o={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},enemylData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"}},[4,s.getData({url:o.host+o.levelData.url,method:o.levelData.method,data:null,headers:{maplevel:2}})];case 1:return c=a.sent(),[4,s.getData({url:o.host+o.gameSetings.url,method:o.gameSetings.method,data:null,headers:null})];case 2:return l=a.sent(),[4,s.getData({url:o.host+o.userShip.url,method:o.userShip.method,data:null,headers:{usership:1}})];case 3:return u=a.sent(),[2,{data:{ctx:null,gameField:e||null,gameActionField:n||null,gameUIField:i||null,gameData:{currentLevel:2,currentPoint:0,playerObject:new r.PlayerShip(u,0,3,0,0),gameSetings:l,constrollers:null},screen:{width:window.innerWidth,height:window.innerHeight},allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],gamePause:!1,backScreenPause:!0,gameStatus:!1,gameEngine:setInterval(t,20),levelData:c},locations:o}]}}))}))}function t(){if(l.gameInitData.ctxActionField&&c.clearField(l.gameInitData.ctxActionField,l.gameInitData.screen.width,l.gameInitData.screen.height),u.placeShip(),u.displayPlayerShip(),l.gameInitData.backScreenPause&&(l.gameInitData.backScreenPause=!1,l.levelInit(o.GameBackground,l.gameInitData.ctx,l),l.levelInit(o.GameBackground,l.gameInitData.ctx,l)),!l.gameInitData.backScreenPause)for(var e=0,t=l.gameInitData.mapBackgroundObjects;e<t.length;e++){t[e].updateMap()}}var n,l,u,h;return a(this,(function(t){switch(t.label){case 0:return[4,e()];case 1:return n=t.sent(),l=new o.Game(n.data,n.locations),u=l.gameInitData.gameData.playerObject,l.setGameFields(),l.setGameFields(),h=l.returnContext(),u.ctx=h.gameActionField,u.parrent=l,u.initPlayerShip(),u.shipControl(),[2]}}))}))}()},function(e,t,n){var i=n(5),a=n(6);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},r=(i(a,o),a.locals?a.locals:{});e.exports=r},function(e,t,n){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function s(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},i=[],a=0;a<e.length;a++){var o=e[a],c=t.base?o[0]+t.base:o[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var h=s(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(r[h].references++,r[h].updater(d)):r.push({identifier:u,updater:g(d,t),references:1}),i.push(u)}return i}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var a=n.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,i){var a=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=h(t,a);else{var o=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function p(e,t,n){var i=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,m=0;function g(e,t){var n,i,a;if(t.singleton){var o=m++;n=f||(f=l(t)),i=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=l(t),i=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var a=s(n[i]);r[a].references--}for(var o=c(e,t),l=0;l<n.length;l++){var u=s(n[l]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=o}}}},function(e,t,n){(t=n(7)(!1)).push([e.i,"body{color:orange;background:#333;margin:0;padding:0;cursor:none}.gameBackground{background:#000}.game-fields{position:absolute}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var a=(r=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),o=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([a]).join("\n")}var r,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(a[r]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);i&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t){e.exports.ERROR_LIST={noData:"There is no data",noObject:"There is no Object"}},function(e,t,n){n(1).viewModules;var i=n(2).gameMethods,a=function(){function e(e,t,n,i,a){this.data=e,this.points=t,this.lifePoints=n,this.x=i,this.y=a}return e.prototype.showInformation=function(){console.log(this)},e.prototype.setContext=function(e){this.ctx=e},e.prototype.placeShip=function(){this.x=this.x>this.xFinal?this.x-this.data.speed:this.x<this.xFinal?this.x+this.data.speed:this.xFinal,this.y=this.y>this.yFinal?this.y-this.data.speed:this.y<this.yFinal?this.y+this.data.speed:this.yFinal},e.prototype.moveShip=function(e){var t=e.xPos,n=void 0===t?0:t,i=e.yPos,a=void 0===i?0:i;this.x+=n,this.y+=a},e}();a.prototype.initPlayerShip=i.initPlayerShip,a.prototype.displayPlayerShip=i.displayPlayerShip,a.prototype.shipControl=i.shipControl,e.exports.playerModules={PlayerShip:a}},function(e,t){e.exports.serverModules={getData:function(e){var t=e.url,n=e.method,i=e.data,a=e.headers,o=Object.assign({"Content-Type":"application/json"},a||!1);return fetch(t,{method:n,mode:"cors",headers:o,body:i?JSON.stringify(i):null}).then((function(e){return e.json()})).then((function(e){return e}))}}},function(e,t){e.exports.enemies=function(e){return e+" My World 111"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,