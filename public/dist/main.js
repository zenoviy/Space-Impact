!function(e){var t={};function i(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=12)}([function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,a++)n[a]=r[o];return n};Object.defineProperty(t,"__esModule",{value:!0});var a=i(18);t.createWindow=a.createWindow,t.createShapeRoundBorder=a.createShapeRoundBorder;var r=i(19);function o(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];e[t].apply(e,i)}t.draw=o,t.createLaserBullet=function(e){if(!e.ctx)return new Error("no context");"player"==e.objectOwner&&1==e.type&&r.weapon1(e,o),"enemy"==e.objectOwner&&1==e.type&&r.weapon1(e,o)},t.createImage=function(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];o.apply(void 0,n([e,"drawImage",t],i))},t.clearField=function(e,t,i){o(e,"clearRect",0,0,t,i)}},function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,a++)n[a]=r[o];return n};Object.defineProperty(t,"__esModule",{value:!0});var a=i(0);t.initField=function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error("Error");for(var n=0,a=i;n<a.length;n++){var r=a[n];r=Object.assign(r,{width:e-4,height:t-4})}},t.setGameFields=function(){this.initField(),this.createContext(),this.initPlayerShip()},t.warpEffect=function(){var e=this.getScreenSize(),t=this.gameInitData.ctx,i=this.gameInitData.warpObjects;if(this.getSecondMeasure((function(e){var t=!(this.gameInitData.timeToEressLevel>=0);this.gameInitData.timeToEressLevel>=0&&!t&&(this.gameInitData.timeToEressLevel-=1);this.gameInitData.timeToEressLevel<0&&!t&&this.changeLevelProcedure()}),{timeToEressLevel:this.gameInitData.timeToEressLevel,ctx:t,screenSiz:this.getScreenSize()}),this.gameInitData.warpObjects=i.length<350?this.gameInitData.warpObjects.concat({x:e.width,y:this.gameRandomizer(e.height),height:this.gameRandomizer(20,10),width:10,speed:this.gameRandomizer(10,5),background:this.getRandomColor()}):this.gameInitData.warpObjects,i.length>0)for(var n=0,r=i;n<r.length;n++){var o=r[n];o.x-=o.x>0?o.speed:0,o.width=i.length<150?o.width-o.speed:i.length>150&&i.length<350?o.width+o.speed:o.width-o.speed,t.fillStyle=o.background,a.draw(t,"fillRect",o.x,o.y,o.width,o.height),t.fill()}},t.levelInit=function(e,t,i){var n=this.showLevelData(),a=(n.levelMap,n.levelBackgroundElements);i.gameInitData.backScreenPause=!1;for(var r=0,o=a;r<o.length;r++){var s=o[r],l=new e(s.levelMap,s.speed,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);i.gameInitData.mapBackgroundObjects=i.gameInitData.mapBackgroundObjects.concat(l),l.img.src=this.showGameInfo().imageDirrection+l.backgroundTexture}},t.createContext=function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},t.getScreenSize=function(){return{width:this.gameInitData.screen.width,height:this.gameInitData.screen.height}},t.changeLevelProcedure=function(){var e=this.showGameInfo();this.changeLevel(e.gameData.currentLevel+1)<=e.gameData.levelData.allLevels?this.nextLevelDataReload(e):alert("Win Game Screen ")},t.levelTimer=function(){var e=this.getLevelUserData();e.sourse.levelData.levelDetails,this.gameInitData.levelChange||this.getSecondMeasure((function(e){e.levelSeconds<=0&&(0==e.levelMinutes&&0==e.levelSeconds&&(e.levelSeconds=0,this.gameInitData.levelChange=!0),e.levelMinutes=e.levelMinutes>0?e.levelMinutes-1:0);e.levelSeconds=e.levelSeconds>0?e.levelSeconds-1:this.gameInitData.levelChange?0:59}),e.sourse.levelData.levelDetails)},t.getSecondMeasure=function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];this.gameInitData.gemeExtraSeconds+=1;var a=1e3/this.gameInitData.intervalCount;if(this.gameInitData.gemeExtraSeconds%a==0)return this.gameInitData.gemeExtraSeconds=0,e?e.call.apply(e,n([this],t)):a},t.getLevelUserData=function(){var e=this.gameInitData.gameData,t=e.levelData.levelDetails;return{sourse:e,currentLevel:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,life:e.playerObject.numberOflife,minutes:t.levelMinutes,seconds:t.levelSeconds}},t.deleteBullet=function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},t.deleteObjects=function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},t.collectPoints=function(e){this.gameInitData.gameData.currentPoint+=e},t.getObjectPosition=function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},t.getRandomColor=function(){for(var e="#",t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e},t.fireAnimationEnded=function(e){console.log("fire")}},function(e,t,i){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=i(0),r=i(21),o=n(i(32));t.placeEnemyes=function(e){a.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},t.moveEnemyes=function(e,t){void 0===t&&(t=0),this.x-=this.enemySpeed,this.y-=t},t.loadEnemyes=function(){this.img=new Image,this.img.src=this.shipTexture},t.shoot=function(e,t){if(t.gameInitData.gamePause)return!1;if(t.gameRandomizer(Math.pow(this.rapidFire,2))<t.gameRandomizer(this.rapidFire))for(var i=this.guns,n=function(i){var n=new e(a.x,a.y+i.firePosition,i.name,i.color,"enemy",i.speed+a.enemySpeed,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);n.img.src=n.texture,n.img.onload=function(){t.gameInitData.allGameBullets=t.gameInitData.allGameBullets.concat(n)}},a=this,r=0,o=i;r<o.length;r++){n(o[r])}},t.enemyAnimation=function(e){void 0===e&&(e=!0),this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&e&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},t.takeDamage=function(e,t,i){if(this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"enemy"==t.objectOwner)return r.explosionFire(this,i,t,o.SideObject),this.objectPresent=!1;if(this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"player"==t.objectOwner)n.call(this);else{if(!this.hasOwnProperty("healthPoint")||"player"!=this.objectOwner||"enemy"!=t.objectOwner)return!1;this.collisionAllow&&n.call(this,i.getLevelUserData())}function n(t){if(this.healthPoint-=e,this.healthPoint<=0)return t&&t.life>0?(t.sourse.playerObject.numberOflife-=1,t.sourse.playerObject.numberOflife<=0&&(alert("Game Over"),i.backToStartScreen()),this.healthPoint=t.sourse.playerObject.maxHealth,!1):(i.collectPoints(this.pointsPerUnit),this.objectPresent=!1)}},t.hitDetection=function(e,t,i){for(var n=null,a=0,r=t;a<r.length;a++){var o=r[a],s=e.getObjectPosition.call(e),l=Math.max(s.x,o.x),c=Math.max(s.y,o.y),u=Math.min(s.x+(e.width||s.width),o.x+o.width)-l,h=Math.min(s.y+(e.height||s.height),o.y+o.height)-c;if("collision"==(n=!(Math.sign(u)<0||Math.sign(h)<0)&&"collision")){e.takeDamage&&o.takeDamage&&(e.takeDamage(o.damage?o.damage:0,o,i),o.takeDamage(e.damage?e.damage:0,e,i));break}}return"collision"==n&&e}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(1),a=i(23),r=function(e,t,i,n,a,r){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=n,this.x=a?0:i.width,this.y=0,this.img=new Image,this.timeToEressLevel=4,this.warpObjects=[]};t.GameBackground=r,r.prototype.updateMap=a.updateMap,r.prototype.warpEffect=n.warpEffect},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(0),a=i(6);t.initPlayerShip=function(e){var t=this;if(this.ctx){var i=this.data.texture,n=e.showGameInfo().imageDirrection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=n+i}},t.movePlayerShip=function(){this.img&&this.ctx&&this.img&&n.createImage(this.ctx,this.img,this.x-this.width/2,this.y-this.height/2,this.width,this.height)},t.shipControl=function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(n){if(e.gameInitData.gamePause)return!1;i.down.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(e){return n.keyCode==e}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(i){if(e.gameInitData.gamePause)return!1;if("CANVAS"===i.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var n=i.clientX-i.target.offsetLeft,a=i.clientY-i.target.offsetTop;t.xFinal=n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed),t.yFinal=a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed)}})),document.addEventListener("click",(function(i){if(e.gameInitData.gamePause)return!1;for(var n=function(i){var n=new a.BulletConstruct(t.x,t.y+i.firePosition,i.name,i.color,"player",i.speed+t.xAdj,i.width,i.height,i.damage,i.type,i.texture,i.sx,i.sy,i.sWidth,i.sHeight,i.explosionAnimation);n.img.src=n.texture,n.img.onload=function(){e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(n)}},r=0,o=t.data.guns;r<o.length;r++){n(o[r])}}))},t.showInformation=function(){console.log(this)},t.setContext=function(e){this.ctx=e},t.placeShip=function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.xAdj=this.x>this.xFinal?0:e,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},t.moveShip=function(e){var t=e.xPos,i=void 0===t?0:t,n=e.yPos,a=void 0===n?0:n;this.x+=i,this.y+=a},alert(1)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.init=function(e,t){e(t=t||this)},t.getUIObjectPosition=function(){return{x:this.propertyes.x,y:this.propertyes.y,width:this.propertyes.width,height:this.propertyes.height}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(20),a=i(1),r=i(2),o=function(e,t,i,n,a,r,o,s,l,c,u,h,d,m,g,p){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=n,this.objectOwner=a,this.bulletSpeed=r,this.width=o,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0,this.type=c,this.img=new Image,this.texture=location.origin+"/images/"+u,this.sx=h,this.sy=d,this.sWidth=m,this.sHeight=g,this.explosion=p};t.BulletConstruct=o,o.prototype.createBullets=n.createBullets,o.prototype.initBullets=n.initBullets,o.prototype.moveBullets=n.moveBullets,o.prototype.getObjectPosition=a.getObjectPosition,o.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5);t.gameLoadMenu=function(e,t,i,a,r){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-200,y:a/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:45},action:function(){this.gameStart()},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:100,height:140,sWidth:503,sHeight:669,x:i/2-80,y:50,background:new Image,borderColor:!1,radius:null},loadPicture:function(){this.propertyes.background.src=r+"misc/logo-half-white_1.png"},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",propertyes:{ctx:t,width:-290,height:0,x:i/2,y:300,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",propertyes:{ctx:t,width:0,height:0,x:i/2,y:300,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Start button",text:"Press Start to begin",description:"Text in main button",fontSize:"30px Roboto",clicked:!1,propertyes:{ctx:t,width:-130,height:105,x:i/2,y:a/2,background:!1,borderColor:"#007BD1",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(9),o=i(11);function s(e){return n(this,void 0,void 0,(function(){var t,i,n,r,s;return a(this,(function(a){switch(a.label){case 0:return t={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,o.getData({url:t.host+t.levelData.url,method:t.levelData.method,data:null,headers:{maplevel:e.level}})];case 1:return i=a.sent(),[4,o.getData({url:t.host+t.gameSetings.url,method:t.gameSetings.method,data:null,headers:null})];case 2:return n=a.sent(),[4,o.getData({url:t.host+t.userShip.url,method:t.userShip.method,data:null,headers:{usership:e.shipConfiguration}})];case 3:return r=a.sent(),[4,o.getData({url:t.host+t.enemylData.url,method:t.enemylData.method,data:null,headers:{"ship-type-number":e.enemyType}})];case 4:return s=a.sent(),[2,{levelData:i,gameSetings:n,userData:r,enemyData:s}]}}))}))}function l(){return n(this,void 0,void 0,(function(){var e,t,i,n,o,l,c,u,h;return a(this,(function(a){switch(a.label){case 0:return e=document.querySelector("#gamefield"),t=document.querySelector("#gameObjectsfield"),i=document.querySelector("#gameUifield"),1,1,[4,s({level:n=1,shipConfiguration:1,enemyType:1})];case 1:return o=a.sent(),l=o.levelData,c=o.gameSetings,u=o.userData,h=o.enemyData,[2,{data:{ctx:null,gameField:e||null,gameActionField:t||null,gameUIField:i||null,gameData:{currentLevel:n,currentPoint:0,playerObject:new r.PlayerShip(u,0,300,5,100,100,u.size.width,u.size.height),levelData:l,gameSetings:c,enemyData:h,controllers:null},screen:{width:window.innerWidth,height:window.innerHeight},intervalCount:20,enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],warpObjects:[],timeToEressLevel:6,levelChange:!1,gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameStatus:!1,gemeExtraSeconds:0}}]}}))}))}t.serverRequest=s,t.gameDataInit=l,t.gameEngine=function(e){return n(this,void 0,void 0,(function(){return a(this,(function(e){return[2]}))}))},t.gameStart=function(){this.gameInitData.gameStatus=!0},t.backToStartScreen=function(){return n(this,void 0,void 0,(function(){var e,t,i,n,r,o;return a(this,(function(a){switch(a.label){case 0:return[4,l()];case 1:for(e=a.sent(),t=0,i=Object.entries(e.data);t<i.length;t++)n=i[t],r=n[0],null!==(o=n[1])&&(this.gameInitData[r]=o);return this.gameInitData.gameStatus=!1,[2]}}))}))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(4),a=i(1),r=i(2),o=function(e,t,i,n,a,r,o,s){void 0===a&&(a=100),void 0===r&&(r=100),this.data=e,this.points=t,this.numberOflife=n,this.healthPoint=i+e.armor,this.maxHealth=i+e.armor,this.x=a,this.y=r,this.xFinal=a,this.yFinal=r,this.collisionAllow=!0,this.objectOwner="player",this.width=o,this.height=s,this.xAdj=0};t.PlayerShip=o,o.prototype.initPlayerShip=n.initPlayerShip,o.prototype.movePlayerShip=n.movePlayerShip,o.prototype.shipControl=n.shipControl,o.prototype.moveShip=n.moveShip,o.prototype.placeShip=n.placeShip,o.prototype.setContext=n.setContext,o.prototype.getObjectPosition=a.getObjectPosition,o.prototype.takeDamage=r.takeDamage},function(e,t,i){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=i(1),r=n(i(17)),o=i(24),s=i(2),l=i(26),c=i(8),u=i(31);console.log(r);var h=function(){function e(e){this.gameInitData=e}return e.prototype.changeLevel=function(e){return this.gameInitData.gameData.currentLevel=e,this.gameInitData.gameData.currentLevel},e.prototype.showGameInfo=function(){return{levelToChange:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint,gameData:this.gameInitData.gameData,imageDirrection:location.origin+"/images/"}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();t.Game=h,h.prototype.createContext=a.createContext,h.prototype.initField=a.initField,h.prototype.levelInit=a.levelInit,h.prototype.setGameFields=a.setGameFields,h.prototype.warpEffect=a.warpEffect,h.prototype.getScreenSize=a.getScreenSize,h.prototype.getLevelUserData=a.getLevelUserData,h.prototype.levelTimer=a.levelTimer,h.prototype.getSecondMeasure=a.getSecondMeasure,h.prototype.initPlayerShip=r.initPlayerShip,h.prototype.deleteBullet=a.deleteBullet,h.prototype.deleteObjects=a.deleteObjects,h.prototype.hitDetection=s.hitDetection,h.prototype.collectPoints=a.collectPoints,h.prototype.spawnEnemyLogic=o.spawnEnemyLogic,h.prototype.createNewEnemy=o.createNewEnemy,h.prototype.gameRandomizer=o.gameRandomizer,h.prototype.uiController=l.uiController,h.prototype.gameUiPause=l.gameUiPause,h.prototype.gameUiMenu=l.gameUiMenu,h.prototype.showMenuWindow=l.showMenuWindow,h.prototype.showUiPopupWindow=l.showUiPopupWindow,h.prototype.showStartWindow=l.showStartWindow,h.prototype.showPauseWindow=l.showPauseWindow,h.prototype.showGameStats=l.showGameStats,h.prototype.initUiElements=l.initUiElements,h.prototype.gameStart=c.gameStart,h.prototype.backToStartScreen=c.backToStartScreen,h.prototype.nextLevelDataReload=u.nextLevelDataReload,h.prototype.changeLevelProcedure=a.changeLevelProcedure,h.prototype.getRandomColor=a.getRandomColor},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getData=function(e){var t=e.url,i=e.method,n=e.data,a=e.headers,r=Object.assign({"Content-Type":"application/json"},a||!1);return fetch(t,{method:i,mode:"cors",headers:r,body:n?JSON.stringify(n):null}).then((function(e){return e.json()})).then((function(e){return e}))}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}},r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0}),i(13);var o=r(i(33)),s=r(i(32));!function(){n(this,void 0,void 0,(function(){function e(){return n(this,void 0,void 0,(function(){return a(this,(function(e){return[2]}))}))}var t,i;return a(this,(function(n){switch(n.label){case 0:return[4,o.gameDataInit()];case 1:return t=n.sent(),[4,new s.Game(t.data)];case 2:return i=n.sent(),console.log(i),i.gameInitData.gameData.playerObject,setInterval(e,i.gameInitData.intervalCount),[2]}}))}))}()},function(e,t,i){var n=i(14),a=i(15);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var r={insert:"head",singleton:!1},o=(n(a,r),a.locals?a.locals:{});e.exports=o},function(e,t,i){"use strict";var n,a=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},r=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),o=[];function s(e){for(var t=-1,i=0;i<o.length;i++)if(o[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},n=[],a=0;a<e.length;a++){var r=e[a],l=t.base?r[0]+t.base:r[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var h=s(u),d={css:r[1],media:r[2],sourceMap:r[3]};-1!==h?(o[h].references++,o[h].updater(d)):o.push({identifier:u,updater:f(d,t),references:1}),n.push(u)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var a=i.nc;a&&(n.nonce=a)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=r(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,i,n){var a=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=h(t,a);else{var r=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}function m(e,t,i){var n=i.css,a=i.media,r=i.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),r&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var g=null,p=0;function f(e,t){var i,n,a;if(t.singleton){var r=p++;i=g||(g=c(t)),n=d.bind(null,i,r,!1),a=d.bind(null,i,r,!0)}else i=c(t),n=m.bind(null,i,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<i.length;n++){var a=s(i[n]);o[a].references--}for(var r=l(e,t),c=0;c<i.length;c++){var u=s(i[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}i=r}}}},function(e,t,i){(t=i(16)(!1)).push([e.i,"body{font-family:'Roboto';color:orange;background:#333;margin:0;padding:0}canvas{cursor:crosshair}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",n=e[3];if(!n)return i;if(t&&"function"==typeof btoa){var a=(o=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[i].concat(r).concat([a]).join("\n")}var o,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(a[o]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&a[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(21)),n(i(4)),n(i(1)),n(i(20)),n(i(23)),n(i(34))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createWindow=function(e,t){var i=this.getScreenSize();i.width,i.height,e.fillRect(t.x,t.y,t.width,t.height)},t.createShapeRoundBorder=function(e){var t=e.propertyes;t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill()}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.weapon1=function(e,t){t(e.ctx,"drawImage",e.img,e.sx,e.sy,e.sWidth,e.sHeight,e.x,e.y,e.width+10,e.height+10)},t.weapon1backward=function(e,t){t(e.ctx,"drawImage",e.img,0,0,e.width,e.height,e.x,e.y,e.width+10,e.height+10)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(0);t.createBullets=function(e){n.createLaserBullet({source:this,objectOwner:this.objectOwner,ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5,type:this.type,img:this.img,sx:this.sx,sy:this.sy,sWidth:this.sWidth,sHeight:this.sHeight})},t.initBullets=function(){},t.moveBullets=function(){"player"==this.objectOwner?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}},function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var a in t=arguments[i])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.explosionFire=function(e,t,i,a){var r={x:e.x,y:e.y,sx:0,sy:0,picturesWidth:e.explosion.imageWidth,sHeight:e.explosion.height,width:e.explosion.imageWidth/e.explosion.numberOfItems,height:e.explosion.height,animationSteps:e.explosion.animationSteps,target:i.objectOwner,numberOfItems:e.explosion.imageWidth/e.explosion.numberOfItems,texture:e.explosion.texture},o=new a(n({},r));o.img.src=o.texture,o.img.onload=function(){t.gameInitData.allGameSideObjects=t.gameInitData.allGameSideObjects.concat(o)},console.log(t.gameInitData.allGameSideObjects)};t.test="test"},function(e,t,i){"use strict";var n=this&&this.__rest||function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(i[n[a]]=e[n[a]])}return i},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var r=a(i(35)),o=i(1),s=function(e){var t=n(e,[]);this.x=t.x,this.y=t.y,this.sx=t.sx,this.sy=t.sy,this.picturesWidth=t.picturesWidth,this.sHeight=t.sHeight,this.width=t.width,this.height=t.height,this.img=new Image,this.texture=location.origin+"/images/"+t.texture,this.animationSteps=t.animationSteps,this.numberOfItems=t.numberOfItems,this.target=t.target,this.animationState=!0};t.SideObject=s,s.prototype.enemyAnimation=r.enemyAnimation,s.prototype.placeEnemyes=r.placeEnemyes,s.prototype.fireAnimationEnded=o.fireAnimationEnded},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(0);t.updateMap=function(){this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),n.createImage(this.ctx,this.img,this.x,0,this.screenData.width+2,this.screenData.height)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(25);t.dartShipLogic=function(){},t.spawnEnemyLogic=function(e){var t=this.gameInitData.gameData,i=t.levelData,n=t.enemyData;if(!this.gameInitData.gameData.levelChange&&this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var a=this.gameRandomizer(i.enemyMaxNumber);a<i.enemyMaxNumber;a++){var r=n[this.gameRandomizer(n.length)],o=this.createNewEnemy(r);o.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(o)}},t.createNewEnemy=function(e){var t=this.gameInitData.screen.width+300,i=this.gameRandomizer(this.gameInitData.screen.height-200,100),a=e.details;return new n.EnemyObject(t,i,a.sx,a.sy,a.imageWidth/a.numberOfItems,a.imageHeight,a.imageWidth,a.numberOfItems,a.width,a.height,a.skinName,a.speed,a.status,a.name,a.bulletType,a.rapidFire,a.pointsPerUnit,a.healthPoint,a.animationSteps,a.damage,a.objectOwner,a.guns)},t.gameRandomizer=function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(2),a=i(1),r=function(e,t,i,n,a,r,o,s,l,c,u,h,d,m,g,p,f,y,v,b,x,w){this.id=(new Date).getTime(),this.x=e,this.y=t,this.sx=i,this.sy=n,this.sWidth=a,this.sHeight=r,this.picturesWidth=o,this.numberOfItems=s,this.width=l,this.height=c,this.shipTexture=location.origin+"/images/spaceShips/"+u,this.enemySpeed=h,this.status=d,this.name=m,this.bulletTypeNumber=g,this.rapidFire=p,this.pointsPerUnit=f,this.healthPoint=y,this.animationSteps=v,this.damage=b,this.guns=w,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=x,this.guns=w};t.EnemyObject=r,r.prototype.placeEnemyes=n.placeEnemyes,r.prototype.moveEnemyes=n.moveEnemyes,r.prototype.loadEnemyes=n.loadEnemyes,r.prototype.shoot=n.shoot,r.prototype.enemyAnimation=n.enemyAnimation,r.prototype.getObjectPosition=a.getObjectPosition,r.prototype.takeDamage=n.takeDamage},function(e,t,i){"use strict";var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var n=Array(e),a=0;for(t=0;t<i;t++)for(var r=arguments[t],o=0,s=r.length;o<s;o++,a++)n[a]=r[o];return n};Object.defineProperty(t,"__esModule",{value:!0});var a=i(0),r=i(7),o=i(27),s=i(28),l=i(29),c=i(30),u=i(2);t.gameUiPause=function(){!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},t.gameUiMenu=function(e){this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,this.gameInitData.gamePause=!e},t.uiController=function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,i=this;document.addEventListener("keydown",(function(n){t.escape.some((function(e){return n.keyCode==e}))&&i.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return n.keyCode==e}))&&i.gameUiPause()})),document.addEventListener("click",(function(t){if("CANVAS"===t.target.tagName){var i=t.clientX-t.target.offsetLeft,n=t.clientY-t.target.offsetTop,a=null,s=e.gameInitData.ctxUIField,l=e.getScreenSize();for(var c in 0==e.gameInitData.gameStatus&&(a=r.gameLoadMenu(null,s,l.width,l.height,null)),e.gameInitData.gameUiPause&&(a=o.gameSettingsMenu(null,s,l.width,l.height)),a){if(u.hitDetection(a[c],[].concat({x:i,y:n,width:10,height:10,name:"cursor"}),e)&&a[c].action){a[c].action.call(e);break}}}}))},t.showUiPopupWindow=function(){a.createWindow.call(this)},t.showStartWindow=function(){var e=[a.createShapeRoundBorder,c.uiImage,c.uiText,c.uiText,c.uiText];this.initUiElements(e,r.gameLoadMenu)},t.showMenuWindow=function(){var e=[a.createShapeRoundBorder,a.createShapeRoundBorder,c.uiText,c.uiText];this.initUiElements(e,o.gameSettingsMenu)},t.showPauseWindow=function(){var e=[c.uiText];this.initUiElements(e,s.gamePause)},t.showGameStats=function(){var e=this.getLevelUserData(),t=[c.uiImage,c.uiText,c.uiText,c.uiText];this.initUiElements(t,l.gameInformationScreen,e)},t.initUiElements=function(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];for(var r=this.gameInitData.ctxUIField,o=this.getScreenSize(),s=this.showGameInfo().imageDirrection,l=t.apply(void 0,n([null,r,o.width,o.height,s],i)),c=0;c<l.length;c++)l[c].hasOwnProperty("loadPicture")&&l[c].loadPicture(),l[c].init(e[c])}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5);t.gameSettingsMenu=function(e,t,i,a){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:i,height:a/2,x:0,y:a/4,background:"rgba(38, 38, 86, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:5},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Button end game",text:"",description:"back to start screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:200,height:50,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:15},action:function(){this.backToStartScreen.call(this)},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"textin button",text:"go to start",description:"Text in the menu button",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:45,height:0,x:i/2-150,y:a/2+80,background:!1,borderColor:"#007BD1",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:-45,height:0,x:i/2,y:a/3,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5);t.gamePause=function(e,t,i,a,r){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"60px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:a/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:45},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=i(5);t.gameInformationScreen=function(e,t,i,a,r,o){return[{name:"lifePoint",text:"",number:o.life,step:[o.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,radius:null},loadPicture:function(){this.propertyes.background.src=r+"misc/ruby.png"},init:function(e,t){t=t||this;for(var i=Array(o.life).fill(0).map((function(e,t){return 30*t})),n=0;n<this.number;n++)this.propertyes.x=0==n?30:0+i[n]+(0!=n?30:0),e(t)},getObjectPosition:n.getUIObjectPosition},{name:"level",text:"Current Level "+o.currentLevel+"/"+o.allLevels+" ",description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",propertyes:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Time to end f level",text:"Time to end "+(o.minutes-10>=0?"":0)+o.minutes+":"+(o.seconds-10>=0?"":0)+o.seconds,description:"Game part the name",clicked:!1,fontSize:"lighter 16px Roboto",propertyes:{ctx:t,width:50,height:0,x:i-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition},{name:"Game points",text:o.points,description:"Game part the name",clicked:!1,fontSize:"lighter 18px Roboto",propertyes:{ctx:t,width:-50,height:0,x:i/2,y:50,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:n.init,getObjectPosition:n.getUIObjectPosition}]}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uiImage=function(e){var t=e.propertyes;t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},t.uiText=function(e){var t=e.propertyes;t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)},t.uiRepeatImage=function(e){var t=e.propertyes,i=t.ctx.createPattern(t.background,"repeat-x");t.ctx.rect(t.x,t.y,t.width,t.height),t.ctx.fillStyle=i,t.ctx.fill()}},function(e,t,i){"use strict";var n=this&&this.__awaiter||function(e,t,i,n){return new(i||(i=Promise))((function(a,r){function o(e){try{l(n.next(e))}catch(e){r(e)}}function s(e){try{l(n.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,n,a,r,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;o;)try{if(i=1,n&&(a=2&r[0]?n.return:r[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,r[1])).done)return a;switch(n=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===r[0]||2===r[0])){o=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){o.label=r[1];break}if(6===r[0]&&o.label<a[1]){o.label=a[1],a=r;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(r);break}a[2]&&o.ops.pop(),o.trys.pop();continue}r=t.call(e,o)}catch(e){r=[6,e],n=0}finally{i=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var r=i(8);t.nextLevelDataReload=function(e){return n(this,void 0,void 0,(function(){function t(e){for(var n=0,a=Object.entries(e);n<a.length;n++){var r=a[n],o=r[0],s=r[1];"object"!=typeof e[o]||null==s||e[o].length||t(e[o]),i.call(this,o,e)}}function i(e,t){for(var i=0,n=Object.entries(l);i<n.length;i++){var a=n[i],r=a[0],o=a[1];r==e&&null!=o&&(this.gameInitData[r]=o)}}var n,o,s,l;return a(this,(function(i){switch(i.label){case 0:return n=e.gameData.currentLevel,[4,r.serverRequest({level:n,shipConfiguration:1,enemyType:1})];case 1:return o=i.sent(),l={gameData:{currentLevel:n,currentPoint:(s=this).gameInitData.gameData.currentPoint,playerObject:s.gameInitData.gameData.playerObject,levelData:o.levelData,gameSetings:s.gameInitData.gameData.gameSetings,enemyData:o.enemyData,controllers:s.gameInitData.gameData.controllers},enemyType:null,allGameSideObjects:[],allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],gamePause:!1,gameUiPause:!1,backScreenPause:!0,gemeExtraSeconds:0},setTimeout((function(){s.gameInitData.warpObjects=[],s.gameInitData.timeToEressLevel=6,s.gameInitData.levelChange=!1}),5e3),t.call(this,this.gameInitData),[2]}}))}))}},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(10)),n(i(3)),n(i(25)),n(i(9)),n(i(6)),n(i(22))},function(e,t,i){"use strict";function n(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}Object.defineProperty(t,"__esModule",{value:!0}),n(i(8)),n(i(31))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.noData="There is no data",t.noObject="There is no Object"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var i in e)t.hasOwnProperty(i)||(t[i]=e[i])}(i(2))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,