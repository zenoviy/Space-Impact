!function(e){var t={};function i(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(a,n,function(t){return e[t]}.bind(null,n));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=13)}([function(e,t,i){var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a},n=(i(18).ERROR_LIST,i(19).uiWindowModules),o=i(28).weaponModules;function r(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];e[t].apply(e,i)}function s(e,t,i){r(e,"clearRect",0,0,t,i)}e.exports.viewModules={clearField:s,draw:r,createLaserBullet:function(e){if(!e.ctx)return new Error("no context");"player"==e.objectOwner&&1==e.type&&o.weapon1forward(e,r),"enemy"==e.objectOwner&&1==e.type&&o.weapon1backward(e,r)},clear:s,createImage:function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];r.apply(void 0,a([e,"drawImage",t],i))},createWindow:n.createWindow,createShapeRoundBorder:n.createShapeRoundBorder}},function(e,t,i){var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a};i(0).viewModules,i(3).levelConstructor;e.exports.gameMethods={initField:function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error(ERROR_LIST.noObject);for(var a=0,n=i;a<n.length;a++){var o=n[a];o=Object.assign(o,{width:e-4,height:t-4})}},setGameFields:function(){this.initField(),this.createContext(),this.initPlayerShip()},levelInit:function(e,t,i){var a=new e(this.showLevelData().levelMap,1,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);a.parrent=i,this.gameInitData.mapBackgroundObjects=this.gameInitData.mapBackgroundObjects.concat(a)},createContext:function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},getScreenSize:function(){return{width:this.gameInitData.screen.width,height:this.gameInitData.screen.height}},getLevelUserData:function(){var e=this.gameInitData.gameData,t=e.levelData.levelDetails;return this.getSecondMeasure(),{sourse:e,currentLevel:e.currentLevel,allLevels:e.levelData.allLevels,points:e.currentPoint,life:e.playerObject.numberOflife,minutes:t.levelMinutes,seconds:t.levelSeconds}},changeLevelProcedure:function(){var e=this.showLevelData();this.changeLevel(e.level+1)<=e.allLevels?this.nextLevelDataReload(e):alert("Win Game Screen ")},levelTimer:function(){var e=this.getLevelUserData();e.sourse.levelData.levelDetails,this.gameInitData.levelChange||this.getSecondMeasure((function(e){e.levelSeconds<=0&&(e.levelMinutes=e.levelMinutes>0?e.levelMinutes-1:0,0==e.levelMinutes&&0==e.levelSeconds&&(e.levelSeconds=0,this.gameInitData.levelChange=!0,this.changeLevelProcedure()));e.levelSeconds=e.levelSeconds>0?e.levelSeconds-1:this.gameInitData.levelChange?0:59}),e.sourse.levelData.levelDetails)},getSecondMeasure:function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];this.gameInitData.gemeExtraSeconds+=1;var n=1e3/this.gameInitData.intervalCount;if(this.gameInitData.gemeExtraSeconds%n==0)return this.gameInitData.gemeExtraSeconds=0,e&&e.call.apply(e,a([this],t)),n},deleteBullet:function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},deleteObjects:function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},getObjectPosition:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}},collectPoints:function(e){this.gameInitData.gameData.currentPoint+=e}}},function(e,t,i){var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=i(0).viewModules;i(6).bulletModule;e.exports.enemiesModel={placeEnemyes:function(e){o.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},moveEnemyes:function(e,t){void 0===t&&(t=0),this.x-=this.enemySpeed,this.y-=t},loadEnemyes:function(){this.img=new Image,this.img.src=this.shipTexture},shoot:function(e,t){if(t.gameInitData.gamePause)return!1;if(t.gameRandomizer(Math.pow(this.rapidFire,2))<t.gameRandomizer(this.rapidFire))for(var i=0,a=this.guns;i<a.length;i++){var n=a[i],o=new e(this.x,this.y+n.firePosition,n.name,n.color,"enemy",n.speed+this.enemySpeed,n.width,n.height,n.damage,n.type);t.gameInitData.allGameBullets=t.gameInitData.allGameBullets.concat(o)}},enemyAnimation:function(){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},hitDetection:function(e,t,i){for(var a=null,n=0,o=t;n<o.length;n++){var r=o[n],s=e.getObjectPosition.call(e),l=Math.max(s.x,r.x),c=Math.max(s.y,r.y),u=Math.min(s.x+(e.width||s.width),r.x+r.width)-l,h=Math.min(s.y+(e.height||s.height),r.y+r.height)-c;if("collision"==(a=!(Math.sign(u)<0||Math.sign(h)<0)&&"collision")){e.takeDamage&&r.takeDamage&&(e.takeDamage(r.damage?r.damage:0,r,i),r.takeDamage(e.damage?e.damage:0,e,i));break}}return"collision"==a&&e},takeDamage:function(e,t,i){return a(this,void 0,void 0,(function(){function a(t){if(this.healthPoint-=e,this.healthPoint<=0)return t&&t.life>0?(t.sourse.playerObject.numberOflife-=1,t.sourse.playerObject.numberOflife<=0&&(alert("Game Over"),i.backToStartScreen()),this.healthPoint=t.sourse.playerObject.maxHealth,!1):(i.collectPoints(this.pointsPerUnit),this.objectPresent=!1)}return n(this,(function(e){if(this.hasOwnProperty("bulletType")&&"enemy"==this.objectOwner&&"player"==t.objectOwner||this.hasOwnProperty("bulletType")&&"player"==this.objectOwner&&"enemy"==t.objectOwner)return[2,this.objectPresent=!1];if(this.hasOwnProperty("healthPoint")&&"enemy"==this.objectOwner&&"player"==t.objectOwner)a.call(this);else{if(!this.hasOwnProperty("healthPoint")||"player"!=this.objectOwner||"enemy"!=t.objectOwner)return[2,!1];this.collisionAllow&&a.call(this,i.getLevelUserData())}return[2]}))}))}}},function(e,t,i){i(0).viewModules,i(1).gameMethods,i(4).playerShipModule;var a=i(22).backgroundMapModule,n=function(e,t,i,a,n){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=a,this.x=n?0:i.width,this.y=0,this.img=new Image,this.img.src=location.origin+"/images/locations/"+this.backgroundTexture};n.prototype.updateMap=a.updateMap,n.prototype.warpEffect=a.warpEffect,e.exports.levelConstructor={GameBackground:n}},function(e,t,i){var a=i(0).viewModules,n=(i(3).levelConstructor,i(6).bulletModule);e.exports.playerShipModule={movePlayerShip:function(){this.img&&this.ctx&&this.img&&a.createImage(this.ctx,this.img,this.x-this.width/2,this.y-this.height/2,this.width,this.height)},initPlayerShip:function(e){var t=this;if(this.ctx){var i=this.data.texture,a=e.serverLocation.picturesDirection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=a+i}},shipControl:function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(a){if(e.gameInitData.gamePause)return!1;i.down.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(e){return a.keyCode==e}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(i){if(e.gameInitData.gamePause)return!1;if("CANVAS"===i.target.tagName&&!e.gameInitData.gamePause&&e.gameInitData.gameStatus){var a=i.clientX-i.target.offsetLeft,n=i.clientY-i.target.offsetTop;t.xFinal=a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed),t.yFinal=n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed)}})),document.addEventListener("click",(function(i){if(e.gameInitData.gamePause)return!1;for(var a=0,o=t.data.guns;a<o.length;a++){var r=o[a],s=new n.BulletConstruct(t.x,t.y+r.firePosition,r.name,r.color,"player",r.speed+t.xAdj,r.width,r.height,r.damage,r.type);e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(s)}}))},moveShip:function(e){var t=e.xPos,i=void 0===t?0:t,a=e.yPos,n=void 0===a?0:a;this.x+=i,this.y+=n},placeShip:function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.xAdj=this.x>this.xFinal?0:e,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},setContext:function(e){this.ctx=e},showInformation:function(){console.log(this)}}},function(e,t){e.exports.uiModelsMethods={init:function(e,t){e(t=t||this)},getUIObjectPosition:function(){return{x:this.propertyes.x,y:this.propertyes.y,width:this.propertyes.width,height:this.propertyes.height}}}},function(e,t,i){var a=i(20).bulletsModule,n=i(1).gameMethods,o=i(2).enemiesModel,r=function(e,t,i,a,n,o,r,s,l,c){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=a,this.objectOwner=n,this.bulletSpeed=o,this.width=r,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0,this.type=c};r.prototype.createBullets=a.createBullets,r.prototype.initBullets=a.initBullets,r.prototype.moveBullets=a.moveBullets,r.prototype.getObjectPosition=n.getObjectPosition,r.prototype.takeDamage=o.takeDamage,e.exports.bulletModule={BulletConstruct:r}},function(e,t,i){var a=i(5).uiModelsMethods;e.exports.uiStateModules={gameLoadMenu:function(e,t,i,n,o){return e||[{name:"Start button",text:"Press Start to begin",description:"Main start game button in the main load screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:n/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:45},action:function(){this.gameStart()},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Logotype",text:"",description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:100,height:140,sWidth:503,sHeight:669,x:i/2-50,y:50,background:new Image,borderColor:!1,radius:null},loadPicture:function(){this.propertyes.background.src=o+"misc/logo-half-white_1.png"},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game name",text:"Space",description:"Game part the name",clicked:!1,fontSize:"bold 100px Roboto",propertyes:{ctx:t,width:-240,height:0,x:i/2,y:300,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game name",text:"Attack",description:"Game part the name",clicked:!1,fontSize:"lighter 100px Roboto",propertyes:{ctx:t,width:50,height:0,x:i/2,y:300,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Start button",text:"Press Start to begin",description:"Text in main button",fontSize:"30px Roboto",clicked:!1,propertyes:{ctx:t,width:-90,height:105,x:i/2,y:n/2,background:!1,borderColor:"#007BD1",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}}},function(e,t,i){var a=i(21).objectConstructor;e.exports.regularAiModule={dartShipLogic:function(){},spawnEnemyLogic:function(e){var t=this.gameInitData.gameData,i=t.levelData,a=t.enemyData;if(!this.gameInitData.gameData.levelChange&&this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var n=this.gameRandomizer(i.enemyMaxNumber);n<i.enemyMaxNumber;n++){var o=a[this.gameRandomizer(a.length)],r=this.createNewEnemy(o);r.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}},createNewEnemy:function(e){var t=this.gameInitData.screen.width+300,i=this.gameRandomizer(this.gameInitData.screen.height-200,100),n=e.details;return new a.EnemyObject(t,i,n.sx,n.sy,n.imageWidth/n.numberOfItems,n.imageHeight,n.imageWidth,n.numberOfItems,n.width,n.height,n.skinName,n.speed,n.status,n.name,n.bulletType,n.rapidFire,n.pointsPerUnit,n.healthPoint,n.animationSteps,n.damage,n.objectOwner,n.guns)},gameRandomizer:function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}}},function(e,t,i){i(0).viewModules;var a=i(4).playerShipModule,n=i(1).gameMethods,o=i(2).enemiesModel,r=function(e,t,i,a,n,o,r,s){void 0===n&&(n=100),void 0===o&&(o=100),this.data=e,this.points=t,this.numberOflife=a,this.healthPoint=i+e.armor,this.maxHealth=i+e.armor,this.x=n,this.y=o,this.xFinal=n,this.yFinal=o,this.collisionAllow=!0,this.objectOwner="player",this.width=r,this.height=s,this.xAdj=0};r.prototype.initPlayerShip=a.initPlayerShip,r.prototype.movePlayerShip=a.movePlayerShip,r.prototype.shipControl=a.shipControl,r.prototype.moveShip=a.moveShip,r.prototype.placeShip=a.placeShip,r.prototype.setContext=a.setContext,r.prototype.getObjectPosition=n.getObjectPosition,r.prototype.takeDamage=o.takeDamage,e.exports.playerModules={PlayerShip:r}},function(e,t,i){i(0).viewModules;var a=i(1).gameMethods,n=i(4).playerShipModule,o=i(8).regularAiModule,r=i(2).enemiesModel,s=i(23).uiModules,l=i(11).startGameModules,c=i(29).levelDataReload,u=function(){function e(e,t){this.gameInitData=e,this.serverLocation=t,this.gameInitData=e,this.serverLocation=t}return e.prototype.changeLevel=function(e){return this.gameInitData.gameData.currentLevel=e,this.gameInitData.gameData.currentLevel},e.prototype.showGameInfo=function(){return{currentLevel:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();u.prototype.createContext=a.createContext,u.prototype.initField=a.initField,u.prototype.levelInit=a.levelInit,u.prototype.setGameFields=a.setGameFields,u.prototype.getScreenSize=a.getScreenSize,u.prototype.getLevelUserData=a.getLevelUserData,u.prototype.levelTimer=a.levelTimer,u.prototype.getSecondMeasure=a.getSecondMeasure,u.prototype.changeLevelProcedure=a.changeLevelProcedure,u.prototype.initPlayerShip=n.initPlayerShip,u.prototype.placePlayerShip=n.placePlayerShip,u.prototype.deleteBullet=a.deleteBullet,u.prototype.deleteObjects=a.deleteObjects,u.prototype.hitDetection=r.hitDetection,u.prototype.collectPoints=a.collectPoints,u.prototype.spawnEnemyLogic=o.spawnEnemyLogic,u.prototype.createNewEnemy=o.createNewEnemy,u.prototype.gameRandomizer=o.gameRandomizer,u.prototype.uiController=s.uiController,u.prototype.gameUiPause=s.gameUiPause,u.prototype.gameUiMenu=s.gameUiMenu,u.prototype.showMenuWindow=s.showMenuWindow,u.prototype.showUiPopupWindow=s.showUiPopupWindow,u.prototype.showStartWindow=s.showStartWindow,u.prototype.showPauseWindow=s.showPauseWindow,u.prototype.showGameStats=s.showGameStats,u.prototype.initUiElements=s.initUiElements,u.prototype.gameStart=l.gameStart,u.prototype.backToStartScreen=l.backToStartScreen,u.prototype.nextLevelDataReload=c.nextLevelDataReload,e.exports.gameModule={Game:u}},function(e,t,i){var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=(i(3).levelConstructor,i(9).playerModules),r=(i(10).gameModule,i(1).engineModule,i(12).serverModules);i(2).enemies,i(0).viewModules,i(7).uiStateModules;function s(){return a(this,void 0,void 0,(function(){var e,t,i,a,s,l,c,u;return n(this,(function(n){switch(n.label){case 0:return e=document.querySelector("#gamefield"),t=document.querySelector("#gameObjectsfield"),i=document.querySelector("#gameUifield"),a={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,r.getData({url:a.host+a.levelData.url,method:a.levelData.method,data:null,headers:{maplevel:1}})];case 1:return s=n.sent(),[4,r.getData({url:a.host+a.gameSetings.url,method:a.gameSetings.method,data:null,headers:null})];case 2:return l=n.sent(),[4,r.getData({url:a.host+a.userShip.url,method:a.userShip.method,data:null,headers:{usership:1}})];case 3:return c=n.sent(),[4,r.getData({url:a.host+a.enemylData.url,method:a.enemylData.method,data:null,headers:{"ship-type-number":1}})];case 4:return u=n.sent(),[2,{data:{ctx:null,gameField:e||null,gameActionField:t||null,gameUIField:i||null,gameData:{currentLevel:1,currentPoint:0,playerObject:new o.PlayerShip(c,0,300,5,100,100,c.size.width,c.size.height),levelData:s,gameSetings:l,enemyData:u,controllers:null},screen:{width:window.innerWidth,height:window.innerHeight},intervalCount:20,enemyType:null,allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],levelChange:!1,gamePause:!1,gameUiPause:!1,backScreenPause:!0,gameStatus:!1,gemeExtraSeconds:0},locations:a}]}}))}))}e.exports.startGameModules={gameDataInit:s,gameEngine:function(e){return a(this,void 0,void 0,(function(){return n(this,(function(e){return[2]}))}))},gameStart:function(){this.gameInitData.gameStatus=!0},backToStartScreen:function(){return a(this,void 0,void 0,(function(){var e,t,i,a,o,r;return n(this,(function(n){switch(n.label){case 0:return[4,s()];case 1:for(e=n.sent(),t=0,i=Object.entries(e.data);t<i.length;t++)a=i[t],o=a[0],null!==(r=a[1])&&(this.gameInitData[o]=r);return this.gameInitData.gameStatus=!1,[2]}}))}))}}},function(e,t){e.exports.serverModules={getData:function(e){var t=e.url,i=e.method,a=e.data,n=e.headers,o=Object.assign({"Content-Type":"application/json"},n||!1);return fetch(t,{method:i,mode:"cors",headers:o,body:a?JSON.stringify(a):null}).then((function(e){return e.json()})).then((function(e){return e}))}}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),i(14);var o=i(3).levelConstructor,r=(i(9).playerModules,i(10).gameModule),s=(i(1).engineModule,i(12).serverModules,i(2).enemies,i(0).viewModules),l=(i(7).uiStateModules,i(11).startGameModules),c=i(6).bulletModule;!function(){a(this,void 0,void 0,(function(){function e(){return a(this,void 0,void 0,(function(){var e,t,a,r,l,h,d,g,m;return n(this,(function(n){if(i.gameInitData.ctxUIField&&s.clearField(i.gameInitData.ctxUIField,i.gameInitData.screen.width,i.gameInitData.screen.height),i.gameInitData.ctxActionField&&!i.gameInitData.gamePause&&s.clearField(i.gameInitData.ctxActionField,i.gameInitData.screen.width,i.gameInitData.screen.height),i.gameInitData.backScreenPause&&(i.gameInitData.backScreenPause=!1,i.levelInit(o.GameBackground,i.gameInitData.ctx,i),i.levelInit(o.GameBackground,i.gameInitData.ctx,i)),!(i.gameInitData.backScreenPause&&i.gameInitData.gamePause&&i.gameInitData.gameStatus||i.gameInitData.gamePause&&i.gameInitData.gameStatus))for(e=0,t=i.gameInitData.mapBackgroundObjects;e<t.length;e++)(a=t[e]).updateMap(),i.gameInitData.levelChange&&a.warpEffect(i);if(!i.gameInitData.gamePause&&i.gameInitData.gameStatus)if(1==i.gameInitData.gameStatus){if(i.gameInitData.levelChange||i.spawnEnemyLogic(i),i.gameInitData.allGameBullets.length>0)for(r=0,l=i.gameInitData.allGameBullets;r<l.length;r++)(h=l[r]).moveBullets(),h.createBullets(i),i.deleteBullet(h),i.hitDetection(h,i.gameInitData.allGameEnemies,i),i.hitDetection(u,[h],i);if(i.gameInitData.allGameEnemies.length>0)for(d=0,g=i.gameInitData.allGameEnemies;d<g.length;d++)(m=g[d]).placeEnemyes(i),m.moveEnemyes(),m.enemyAnimation(),m.shoot(c.BulletConstruct,i),i.deleteObjects(m);i.levelTimer(),u.placeShip(),u.movePlayerShip()}else i.gameInitData.gameStatus;return i.gameInitData.gameStatus||i.showStartWindow(),i.gameInitData.gameStatus&&i.showGameStats(),i.gameInitData.gamePause&&i.showPauseWindow(),i.gameInitData.gameUiPause&&(i.showMenuWindow(),i.showPauseWindow()),[2]}))}))}var t,i,u,h;return n(this,(function(a){switch(a.label){case 0:return[4,l.gameDataInit()];case 1:return t=a.sent(),i=new r.Game(t.data,t.locations),u=i.gameInitData.gameData.playerObject,setInterval(e,i.gameInitData.intervalCount),i.uiController(),i.setGameFields(),i.getScreenSize(),h=i.returnContext(),u.ctx=h.gameActionField,u.initPlayerShip(i),u.shipControl(i),[2]}}))}))}()},function(e,t,i){var a=i(15),n=i(16);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var o={insert:"head",singleton:!1},r=(a(n,o),n.locals?n.locals:{});e.exports=r},function(e,t,i){"use strict";var a,n=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function s(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},a=[],n=0;n<e.length;n++){var o=e[n],l=t.base?o[0]+t.base:o[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var h=s(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(r[h].references++,r[h].updater(d)):r.push({identifier:u,updater:f(d,t),references:1}),a.push(u)}return a}function c(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var n=i.nc;n&&(a.nonce=n)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,i,a){var n=i?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=h(t,n);else{var o=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function g(e,t,i){var a=i.css,n=i.media,o=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),o&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var m=null,p=0;function f(e,t){var i,a,n;if(t.singleton){var o=p++;i=m||(m=c(t)),a=d.bind(null,i,o,!1),n=d.bind(null,i,o,!0)}else i=c(t),a=g.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<i.length;a++){var n=s(i[a]);r[n].references--}for(var o=l(e,t),c=0;c<i.length;c++){var u=s(i[c]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}i=o}}}},function(e,t,i){(t=i(17)(!1)).push([e.i,"body{font-family:'Roboto';color:orange;background:#333;margin:0;padding:0}canvas{cursor:crosshair}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var n=(r=a,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(o).concat([n]).join("\n")}var r,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,a){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(a)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(n[r]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);a&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports.ERROR_LIST={noData:"There is no data",noObject:"There is no Object"}},function(e,t,i){i(0).viewModules;e.exports.uiWindowModules={createWindow:function(){var e=this.getScreenSize();e.width,e.height,this.gameInitData.ctxUIField},createShapeRoundBorder:function(e){var t=e.propertyes;t.ctx.fillStyle=t.background,t.ctx.beginPath(),t.ctx.moveTo(t.x+t.radius,t.y),t.ctx.lineTo(t.x+t.width-t.radius,t.y),t.ctx.quadraticCurveTo(t.x+t.width,t.y,t.x+t.width,t.y+t.radius),t.ctx.lineTo(t.x+t.width,t.y+t.height-t.radius),t.ctx.quadraticCurveTo(t.x+t.width,t.y+t.height,t.x+t.width-t.radius,t.y+t.height),t.ctx.lineTo(t.x+t.radius,t.y+t.height),t.ctx.quadraticCurveTo(t.x,t.y+t.height,t.x,t.y+t.height-t.radius),t.ctx.lineTo(t.x,t.y+t.radius),t.ctx.quadraticCurveTo(t.x,t.y,t.x+t.radius,t.y),t.ctx.closePath(),t.ctx.fill()}}},function(e,t,i){var a=i(0).viewModules;e.exports.bulletsModule={createBullets:function(e){a.createLaserBullet({source:this,objectOwner:this.objectOwner,ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5,type:this.type})},initBullets:function(){},moveBullets:function(){"player"==this.objectOwner?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,i){var a=i(2).enemiesModel,n=i(1).gameMethods,o=function(e,t,i,a,n,o,r,s,l,c,u,h,d,g,m,p,f,y,v,x,b,w){this.id=(new Date).getTime(),this.x=e,this.y=t,this.sx=i,this.sy=a,this.sWidth=n,this.sHeight=o,this.picturesWidth=r,this.numberOfItems=s,this.width=l,this.height=c,this.shipTexture=location.origin+"/images/spaceShips/"+u,this.enemySpeed=h,this.status=d,this.name=g,this.bulletTypeNumber=m,this.rapidFire=p,this.pointsPerUnit=f,this.healthPoint=y,this.animationSteps=v,this.damage=x,this.guns=w,this.detectFrame=0,this.objectPresent=!0,this.objectOwner=b,this.guns=w};o.prototype.placeEnemyes=a.placeEnemyes,o.prototype.moveEnemyes=a.moveEnemyes,o.prototype.loadEnemyes=a.loadEnemyes,o.prototype.shoot=a.shoot,o.prototype.enemyAnimation=a.enemyAnimation,o.prototype.getObjectPosition=n.getObjectPosition,o.prototype.takeDamage=a.takeDamage,e.exports.objectConstructor={EnemyObject:o}},function(e,t,i){var a=i(0).viewModules;i(1).gameMethods,i(4).playerShipModule;e.exports.backgroundMapModule={updateMap:function(){this.img=this.img||new Image;var e=this;this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),this.img.onload=function(){a.createImage(e.ctx,e.img,e.x,0,e.screenData.width+2,e.screenData.height)},this.img.src=this.img.src||location.origin+"/images/locations/"+this.backgroundTexture},warpEffect:function(e){var t=e.gameRandomizer(100);e.getSecondMeasure((function(e){console.log(e)}),t)}}},function(e,t,i){var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a},n=i(0).viewModules,o=i(7).uiStateModules,r=i(24).uiSettingsMenu,s=i(25).gamePauseModule,l=i(26).gameStatsScreens,c=i(27).uiElements,u=i(2).enemiesModel;e.exports.uiModules={gameUiPause:function(){!this.gameInitData.gameUiPause&&this.gameInitData.gameStatus&&(this.gameInitData.gamePause=!this.gameInitData.gamePause)},gameUiMenu:function(e){this.gameInitData.gameUiPause=!this.gameInitData.gameUiPause,this.gameInitData.gamePause=!e},uiController:function(){var e=this,t=this.gameInitData.gameData.gameSetings.keyControls,i=this;document.addEventListener("keydown",(function(a){t.escape.some((function(e){return a.keyCode==e}))&&i.gameUiMenu(e.gameInitData.gameUiPause),t.pause.some((function(e){return a.keyCode==e}))&&i.gameUiPause()})),document.addEventListener("click",(function(t){if("CANVAS"===t.target.tagName){var i=t.clientX-t.target.offsetLeft,a=t.clientY-t.target.offsetTop,n=null,s=e.gameInitData.ctxUIField,l=e.getScreenSize();for(var c in 0==e.gameInitData.gameStatus&&(n=o.gameLoadMenu(null,s,l.width,l.height)),e.gameInitData.gameUiPause&&(n=r.gameSettingsMenu(null,s,l.width,l.height)),n){if(u.hitDetection(n[c],[].concat({x:i,y:a,width:10,height:10,name:"cursor"}))&&n[c].action){n[c].action.call(e);break}}}}))},showUiPopupWindow:function(){n.createWindow.call(this)},showStartWindow:function(){var e=[n.createShapeRoundBorder,c.uiImage,c.uiText,c.uiText,c.uiText];this.initUiElements(e,o.gameLoadMenu)},showMenuWindow:function(){var e=[n.createShapeRoundBorder,n.createShapeRoundBorder,c.uiText,c.uiText];this.initUiElements(e,r.gameSettingsMenu)},showPauseWindow:function(){var e=[c.uiText];this.initUiElements(e,s.gamePause)},showGameStats:function(){var e=this.getLevelUserData(),t=[c.uiImage,c.uiText,c.uiText,c.uiText];this.initUiElements(t,l.gameInformationScreen,e)},initUiElements:function(e,t){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];for(var o=this.gameInitData.ctxUIField,r=this.getScreenSize(),s=this.serverLocation.picturesDirection,l=t.apply(void 0,a([null,o,r.width,r.height,s],i)),c=0;c<l.length;c++)l[c].hasOwnProperty("loadPicture")&&l[c].loadPicture(),l[c].init(e[c])}}},function(e,t,i){var a=i(5).uiModelsMethods;e.exports.uiSettingsMenu={gameSettingsMenu:function(e,t,i,n){return e||[{name:"menu background",text:"",description:"back part of menu ",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:i,height:n/2,x:0,y:n/4,background:"rgba(38, 38, 86, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:5},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Button end game",text:"",description:"back to start screen",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:200,height:50,x:i/2-150,y:n/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:15},action:function(){this.backToStartScreen.call(this)},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"textin button",text:"go to start",description:"Text in the menu button",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:45,height:0,x:i/2-150,y:n/2+80,background:!1,borderColor:"#007BD1",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Main game menu name",text:"Menu",description:"Text in main top",fontSize:"25px Roboto",clicked:!1,propertyes:{ctx:t,width:-45,height:0,x:i/2,y:n/3,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}}},function(e,t,i){var a=i(5).uiModelsMethods;e.exports.gamePauseModule={gamePause:function(e,t,i,n,o){return e||[{name:"Pause text",text:"Pause",description:"part of pause window",fontSize:"30px Arial",clicked:!1,propertyes:{ctx:t,width:400,height:90,x:i/2-150,y:n/2+50,background:"rgba(255, 255, 255, 1)",borderColor:"rgba(255, 255, 255, 1)",radius:45},init:a.init,getObjectPosition:a.getUIObjectPosition}]}}},function(e,t,i){var a=i(5).uiModelsMethods;e.exports.gameStatsScreens={gameInformationScreen:function(e,t,i,n,o,r){return[{name:"lifePoint",text:"",number:r.life,step:[r.life].map((function(e){return 50*e})),description:"Game logotype",clicked:!1,propertyes:{ctx:t,width:70,height:70,sWidth:500,sHeight:500,x:10,y:20,background:new Image,borderColor:!1,radius:null},loadPicture:function(){this.propertyes.background.src=o+"misc/ruby.png"},init:function(e,t){t=t||this;for(var i=Array(r.life).fill(0).map((function(e,t){return 30*t})),a=0;a<this.number;a++)this.propertyes.x=0==a?30:0+i[a]+(0!=a?30:0),e(t)},getObjectPosition:a.getUIObjectPosition},{name:"level",text:"Current Level "+r.currentLevel+"/"+r.allLevels+" ",description:"Game part the name",clicked:!1,fontSize:"bold 16px Roboto",propertyes:{ctx:t,width:0,height:0,x:30,y:70,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Time to end f level",text:"Time to end "+(r.minutes-10>=0?"":0)+r.minutes+":"+(r.seconds-10>=0?"":0)+r.seconds,description:"Game part the name",clicked:!1,fontSize:"lighter 16px Roboto",propertyes:{ctx:t,width:50,height:0,x:i-300,y:30,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition},{name:"Game points",text:r.points,description:"Game part the name",clicked:!1,fontSize:"lighter 18px Roboto",propertyes:{ctx:t,width:-50,height:0,x:i/2,y:50,background:!1,borderColor:"rgba(255, 255, 255, 1)",radius:null},init:a.init,getObjectPosition:a.getUIObjectPosition}]}}},function(e,t){e.exports.uiElements={uiImage:function(e){var t=e.propertyes;t.ctx.drawImage(t.background,0,0,t.sWidth,t.sHeight,t.x,t.y,t.width,t.height)},uiText:function(e){var t=e.propertyes;t.ctx.font=e.fontSize,t.ctx.fillStyle=t.borderColor,t.ctx.fillText(e.text,t.x+t.width,t.y+t.height)},uiRepeatImage:function(e){var t=e.propertyes,i=t.ctx.createPattern(t.background,"repeat-x");t.ctx.rect(t.x,t.y,t.width,t.height),t.ctx.fillStyle=i,t.ctx.fill()}}},function(e,t,i){i(0).viewModules;e.exports.weaponModules={weapon1forward:function(e,t){e.ctx.fillStyle="rgba(255, 255, 255)",t(e.ctx,"beginPath"),t(e.ctx,"moveTo",e.x,e.y+e.height/2),t(e.ctx,"lineTo",e.x+e.width-e.radius,e.y-0),t(e.ctx,"quadraticCurveTo",e.x+e.width,e.y,e.x+e.width,e.y+e.radius),t(e.ctx,"lineTo",e.x+e.width,e.y+e.height+0-e.radius),t(e.ctx,"quadraticCurveTo",e.x+e.width,e.y+e.height+0,e.x+e.width-e.radius,e.y+0+e.height),t(e.ctx,"lineTo",e.x,e.y+e.height/2),t(e.ctx,"closePath"),t(e.ctx,"fill"),e.ctx.lineWidth=2,e.ctx.strokeStyle=e.color,t(e.ctx,"stroke")},weapon1backward:function(e,t){e.ctx.fillStyle="rgba(255, 255, 255)",t(e.ctx,"beginPath"),t(e.ctx,"moveTo",e.x+e.width,e.y+e.height/2),t(e.ctx,"lineTo",e.x+e.radius,e.y-0),t(e.ctx,"quadraticCurveTo",e.x,e.y-0,e.x,e.y-0+e.radius),t(e.ctx,"lineTo",e.x,e.y+(e.height-e.radius)+0),t(e.ctx,"quadraticCurveTo",e.x,e.y+e.height+0,e.x+e.radius,e.y+e.height+0),t(e.ctx,"lineTo",e.x+e.width,e.y+e.height/2),t(e.ctx,"closePath"),t(e.ctx,"fill"),e.ctx.lineWidth=2,e.ctx.strokeStyle=e.color,t(e.ctx,"stroke")}}},function(e,t){e.exports.levelDataReload={nextLevelDataReload:function(e){console.log(e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,