!function(e){var t={};function a(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(n,i,function(t){return e[t]}.bind(null,i));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="/public/dist",a(a.s=4)}([function(e,t,a){var n=this&&this.__spreadArrays||function(){for(var e=0,t=0,a=arguments.length;t<a;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<a;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,i++)n[i]=o[r];return n};a(9).ERROR_LIST;function i(e,t){for(var a=[],n=2;n<arguments.length;n++)a[n-2]=arguments[n];e[t].apply(e,a)}function o(e,t,a){i(e,"clearRect",0,0,t,a)}e.exports.viewModules={clearField:o,draw:i,createLaserBullet:function(e){if(!e.ctx)return new Error("no context");e.ctx.fillStyle="rgba(255, 255, 255)",i(e.ctx,"beginPath"),i(e.ctx,"moveTo",e.x+e.radius,e.y+e.height/2),i(e.ctx,"lineTo",e.x+e.radius,e.y),i(e.ctx,"lineTo",e.x+e.width-e.radius,e.y),i(e.ctx,"quadraticCurveTo",e.x+e.width,e.y,e.x+e.width,e.y+e.radius),i(e.ctx,"lineTo",e.x+e.width,e.y+e.height-e.radius),i(e.ctx,"quadraticCurveTo",e.x+e.width,e.y+e.height,e.x+e.width-e.radius,e.y+e.height),i(e.ctx,"closePath"),i(e.ctx,"fill"),e.ctx.lineWidth=2,e.ctx.strokeStyle=e.color,i(e.ctx,"stroke")},clear:o,createImage:function(e,t){for(var a=[],o=2;o<arguments.length;o++)a[o-2]=arguments[o];i.apply(void 0,n([e,"drawImage",t],a))}}},function(e,t,a){a(0).viewModules,a(3).levelConstructor;e.exports.gameMethods={initField:function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var a=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!a)throw Error(ERROR_LIST.noObject);for(var n=0,i=a;n<i.length;n++){var o=i[n];o=Object.assign(o,{width:e-4,height:t-4})}},setGameFields:function(){this.initField(),this.createContext(),this.initPlayerShip()},levelInit:function(e,t,a){var n=new e(this.showLevelData().levelMap,1,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);n.parrent=a,this.gameInitData.mapBackgroundObjects=this.gameInitData.mapBackgroundObjects.concat(n)},createContext:function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},delateBullet:function(e){if(e.x>this.gameInitData.screen.width||e.x<-100){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}}}},function(e,t,a){var n=a(0).viewModules,i=(a(3).levelConstructor,a(10).bulletModule);e.exports.playerShipModule={movePlayerShip:function(){this.img&&this.ctx&&this.img&&n.createImage(this.ctx,this.img,this.x-30,this.y-30)},initPlayerShip:function(e){var t=this;if(this.ctx){var a=this.data.texture,n=e.serverLocation.picturesDirection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=n+a}},shipControl:function(e){var t=this,a=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(e){a.down.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:0,yPos:t.data.speed}),a.left.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),a.right.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:t.data.speed,yPos:0}),a.up.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(e){if("CANVAS"===e.target.tagName){var a=e.clientX-e.target.offsetLeft,n=e.clientY-e.target.offsetTop;t.xFinal=a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed),t.yFinal=n%t.data.speed==0?n:t.data.speed*Math.floor(n/t.data.speed)}})),document.addEventListener("click",(function(a){t.ctx.width,t.ctx.height;for(var n=0,o=t.data.guns;n<o.length;n++){var r=o[n],s=new i.BulletConstruct(t.x,t.y,r.name,r.color,"player",r.speed,r.width,r.height);e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(s)}console.log(e.gameInitData)}))},moveShip:function(e){var t=e.xPos,a=void 0===t?0:t,n=e.yPos,i=void 0===n?0:n;this.x+=a,this.y+=i},placeShip:function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},setContext:function(e){this.ctx=e},showInformation:function(){console.log(this)}}},function(e,t,a){a(0).viewModules,a(1).gameMethods,a(2).playerShipModule;var n=a(12).backgroundMapModule,i=function(e,t,a,n,i){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=a,this.ctx=n,this.x=i?0:a.width,this.y=0,this.img=new Image,this.img.src=location.origin+"/images/locations/"+this.backgroundTexture};i.prototype.updateMap=n.updateMap,e.exports.levelConstructor={GameBackground:i}},function(e,t,a){"use strict";var n=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(i,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,s)}l((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var a,n,i,o,r={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;r;)try{if(a=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,n=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(i=(i=r.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){r.label=o[1];break}if(6===o[0]&&r.label<i[1]){r.label=i[1],i=o;break}if(i&&r.label<i[2]){r.label=i[2],r.ops.push(o);break}i[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],n=0}finally{a=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),a(5);var o=a(3).levelConstructor,r=a(13).playerModules,s=a(14).gameModule,l=(a(1).engineModule,a(15).serverModules),c=(a(16).enemies,a(0).viewModules);!function(){n(this,void 0,void 0,(function(){function e(){return n(this,void 0,void 0,(function(){var e,a,n,o,s,c,u,h;return i(this,(function(i){switch(i.label){case 0:return e=document.querySelector("#gamefield"),a=document.querySelector("#gameObjectsfield"),n=document.querySelector("#gameUifield"),o={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,l.getData({url:o.host+o.levelData.url,method:o.levelData.method,data:null,headers:{maplevel:1}})];case 1:return s=i.sent(),[4,l.getData({url:o.host+o.gameSetings.url,method:o.gameSetings.method,data:null,headers:null})];case 2:return c=i.sent(),[4,l.getData({url:o.host+o.userShip.url,method:o.userShip.method,data:null,headers:{usership:1}})];case 3:return u=i.sent(),[4,l.getData({url:o.host+o.enemylData.url,method:o.enemylData.method,data:null,headers:{"ship-type-number":1}})];case 4:return h=i.sent(),[2,{data:{ctx:null,gameField:e||null,gameActionField:a||null,gameUIField:n||null,gameData:{currentLevel:1,currentPoint:0,playerObject:new r.PlayerShip(u,0,3,100,100),levelData:s,gameSetings:c,enemyData:h,constrollers:null},screen:{width:window.innerWidth,height:window.innerHeight},enemyType:null,allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],levelChange:!1,gamePause:!1,backScreenPause:!0,gameStatus:!1,gameEngine:setInterval(t,20)},locations:o}]}}))}))}function t(){if(u.spawnEnemyLogic(u),u.gameInitData.ctxActionField&&c.clearField(u.gameInitData.ctxActionField,u.gameInitData.screen.width,u.gameInitData.screen.height),u.gameInitData.backScreenPause&&(u.gameInitData.backScreenPause=!1,u.levelInit(o.GameBackground,u.gameInitData.ctx,u),u.levelInit(o.GameBackground,u.gameInitData.ctx,u)),!u.gameInitData.backScreenPause)for(var e=0,t=u.gameInitData.mapBackgroundObjects;e<t.length;e++){t[e].updateMap()}if(u.gameInitData.allGameBullets.length>0)for(var a=0,n=u.gameInitData.allGameBullets;a<n.length;a++){var i=n[a];i.moveBullets(),i.createBullets(u),u.delateBullet(i)}if(u.gameInitData.allGameEnemies.length>0)for(var r=0,s=u.gameInitData.allGameEnemies;r<s.length;r++)s[r];h.placeShip(),h.movePlayerShip()}var a,u,h,d;return i(this,(function(t){switch(t.label){case 0:return[4,e()];case 1:return a=t.sent(),u=new s.Game(a.data,a.locations),h=u.gameInitData.gameData.playerObject,u.setGameFields(),d=u.returnContext(),h.ctx=d.gameActionField,h.initPlayerShip(u),h.shipControl(u),[2]}}))}))}()},function(e,t,a){var n=a(6),i=a(7);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1},r=(n(i,o),i.locals?i.locals:{});e.exports=r},function(e,t,a){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},o=function(){var e={};return function(t){if(void 0===e[t]){var a=document.querySelector(t);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(e){a=null}e[t]=a}return e[t]}}(),r=[];function s(e){for(var t=-1,a=0;a<r.length;a++)if(r[a].identifier===e){t=a;break}return t}function l(e,t){for(var a={},n=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],c=a[l]||0,u="".concat(l," ").concat(c);a[l]=c+1;var h=s(u),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(r[h].references++,r[h].updater(d)):r.push({identifier:u,updater:f(d,t),references:1}),n.push(u)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=a.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,h=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,a,n){var i=a?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=h(t,i);else{var o=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,a){var n=a.css,i=a.media,o=a.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,g=0;function f(e,t){var a,n,i;if(t.singleton){var o=g++;a=p||(p=c(t)),n=d.bind(null,a,o,!1),i=d.bind(null,a,o,!0)}else a=c(t),n=m.bind(null,a,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(a)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var a=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<a.length;n++){var i=s(a[n]);r[i].references--}for(var o=l(e,t),c=0;c<a.length;c++){var u=s(a[c]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}a=o}}}},function(e,t,a){(t=a(8)(!1)).push([e.i,"body{color:orange;background:#333;margin:0;padding:0}canvas{cursor:crosshair}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}\n",""]),e.exports=t},function(e,t,a){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var a=function(e,t){var a=e[1]||"",n=e[3];if(!n)return a;if(t&&"function"==typeof btoa){var i=(r=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[a].concat(o).concat([i]).join("\n")}var r,s,l;return[a].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(a,"}"):a})).join("")},t.i=function(e,a,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(i[r]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);n&&i[l[0]]||(a&&(l[2]?l[2]="".concat(a," and ").concat(l[2]):l[2]=a),t.push(l))}},t}},function(e,t){e.exports.ERROR_LIST={noData:"There is no data",noObject:"There is no Object"}},function(e,t,a){var n=a(11).bulletsModule,i=function(e,t,a,n,i,o,r,s){this.x=e,this.y=t,this.bulletType=a,this.bulletTexture=n,this.bulletDirection=i,this.bulletSpeed=o,this.width=r,this.height=s,this.id=(new Date).getTime()};i.prototype.createBullets=n.createBullets,i.prototype.placeBullets=n.placeBullets,i.prototype.moveBullets=n.moveBullets,e.exports.bulletModule={BulletConstruct:i}},function(e,t,a){var n=a(0).viewModules;e.exports.bulletsModule={createBullets:function(e){n.createLaserBullet({ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5})},placeBullets:function(){},moveBullets:function(){"player"==this.bulletDirection?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,a){var n=a(0).viewModules;a(1).gameMethods,a(2).playerShipModule;e.exports.backgroundMapModule={updateMap:function(){this.img=this.img||new Image;var e=this;this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),this.img.onload=function(){n.createImage(e.ctx,e.img,e.x,0,e.screenData.width+2,e.screenData.height)},this.img.src=this.img.src||location.origin+"/images/locations/"+this.backgroundTexture}}},function(e,t,a){a(0).viewModules;var n=a(2).playerShipModule,i=function(e,t,a,n,i){void 0===n&&(n=100),void 0===i&&(i=100),this.data=e,this.points=t,this.lifePoints=a,this.x=n,this.y=i,this.xFinal=n,this.yFinal=i};i.prototype.initPlayerShip=n.initPlayerShip,i.prototype.movePlayerShip=n.movePlayerShip,i.prototype.shipControl=n.shipControl,i.prototype.moveShip=n.moveShip,i.prototype.placeShip=n.placeShip,i.prototype.setContext=n.setContext,e.exports.playerModules={PlayerShip:i}},function(e,t,a){a(0).viewModules;var n=a(1).gameMethods,i=a(2).playerShipModule,o=a(17).regularAiModule,r=function(){function e(e,t){this.gameInitData=e,this.serverLocation=t,this.gameInitData=e,this.serverLocation=t}return e.prototype.changeLevel=function(e){this.gameInitData.gameData.levelData.currentLevel=e},e.prototype.showGameInfo=function(){return{currentLevel:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();r.prototype.createContext=n.createContext,r.prototype.initField=n.initField,r.prototype.levelInit=n.levelInit,r.prototype.setGameFields=n.setGameFields,r.prototype.initPlayerShip=i.initPlayerShip,r.prototype.placePlayerShip=i.placePlayerShip,r.prototype.delateBullet=n.delateBullet,r.prototype.spawnEnemyLogic=o.spawnEnemyLogic,r.prototype.createNewEnemy=o.createNewEnemy,r.prototype.gameRandomizer=o.gameRandomizer,e.exports.gameModule={Game:r}},function(e,t){e.exports.serverModules={getData:function(e){var t=e.url,a=e.method,n=e.data,i=e.headers,o=Object.assign({"Content-Type":"application/json"},i||!1);return fetch(t,{method:a,mode:"cors",headers:o,body:n?JSON.stringify(n):null}).then((function(e){return e.json()})).then((function(e){return e}))}}},function(e,t){e.exports.enemiesModel={placeEnemyes:function(){},moveEnemyes:function(e,t){this.x+=e,this.y+=e},loadEnemyes:function(){},shoot:function(){}}},function(e,t,a){var n=a(18).objectConstructor;e.exports.regularAiModule={dartShipLogic:function(){},spawnEnemyLogic:function(e){var t=this.gameInitData.gameData,a=t.levelData,n=t.enemyData;if(!this.gameInitData.gameData.levelChange&&this.gameRandomizer(a.enemyProbability)<=a.enemyRandomizerIndex){for(var i=this.gameRandomizer(a.enemyMaxNumber);i<a.enemyMaxNumber;i++){var o=n[this.gameRandomizer(n.length)],r=this.createNewEnemy(o);this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}console.log(this.gameInitData.allGameEnemies)}},createNewEnemy:function(e){var t=this.gameInitData.screen.width+300,a=this.gameRandomizer(this.gameInitData.screen.height),i=e.details;return console.log(e),new n.EnemyObject(t,a,i.sx,i.sy,i.imageWidth,i.imageHeight,i.imageWidth/i.numberOfItems,i.width,i.height,e.details.skinName)},gameRandomizer:function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}}},function(e,t){var a=function(e,t,a,n,i,o,r,s,l,c){this.shipPresent=!0,this.x=e,this.y=t,this.sx=a,this.sy=n,this.sWidth=i,this.sHeight=o,this.singleFrame=r,this.shipwidth=s,this.shipHeight=l,this.shipTexture=c,this.shipDirectory=""};e.exports.objectConstructor={EnemyObject:a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,