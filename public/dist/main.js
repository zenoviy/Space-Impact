!function(e){var t={};function i(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(a,n,function(t){return e[t]}.bind(null,n));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/dist",i(i.s=4)}([function(e,t,i){var a=this&&this.__spreadArrays||function(){for(var e=0,t=0,i=arguments.length;t<i;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<i;t++)for(var o=arguments[t],r=0,s=o.length;r<s;r++,n++)a[n]=o[r];return a};i(9).ERROR_LIST;function n(e,t){for(var i=[],a=2;a<arguments.length;a++)i[a-2]=arguments[a];e[t].apply(e,i)}function o(e,t,i){n(e,"clearRect",0,0,t,i)}e.exports.viewModules={clearField:o,draw:n,createLaserBullet:function(e){if(!e.ctx)return new Error("no context");e.ctx.fillStyle="rgba(255, 255, 255)",n(e.ctx,"beginPath"),n(e.ctx,"moveTo",e.x+e.radius,e.y+e.height/2),n(e.ctx,"lineTo",e.x+e.radius,e.y),n(e.ctx,"lineTo",e.x+e.width-e.radius,e.y),n(e.ctx,"quadraticCurveTo",e.x+e.width,e.y,e.x+e.width,e.y+e.radius),n(e.ctx,"lineTo",e.x+e.width,e.y+e.height-e.radius),n(e.ctx,"quadraticCurveTo",e.x+e.width,e.y+e.height,e.x+e.width-e.radius,e.y+e.height),n(e.ctx,"closePath"),n(e.ctx,"fill"),e.ctx.lineWidth=2,e.ctx.strokeStyle=e.color,n(e.ctx,"stroke")},clear:o,createImage:function(e,t){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];n.apply(void 0,a([e,"drawImage",t],i))}}},function(e,t,i){i(0).viewModules,i(3).levelConstructor;e.exports.gameMethods={initField:function(e,t){void 0===e&&(e=window.innerWidth),void 0===t&&(t=window.innerHeight);var i=[].concat(this.gameInitData.gameField,this.gameInitData.gameActionField,this.gameInitData.gameUIField);if(!i)throw Error(ERROR_LIST.noObject);for(var a=0,n=i;a<n.length;a++){var o=n[a];o=Object.assign(o,{width:e-4,height:t-4})}},setGameFields:function(){this.initField(),this.createContext(),this.initPlayerShip()},levelInit:function(e,t,i){var a=new e(this.showLevelData().levelMap,1,this.gameInitData.screen,t,this.gameInitData.mapBackgroundObjects.length%2==0||null);a.parrent=i,this.gameInitData.mapBackgroundObjects=this.gameInitData.mapBackgroundObjects.concat(a)},createContext:function(){this.gameInitData.ctx=this.gameInitData.gameField.getContext("2d"),this.gameInitData.ctxActionField=this.gameInitData.gameActionField.getContext("2d"),this.gameInitData.ctxUIField=this.gameInitData.gameUIField.getContext("2d")},deleteBullet:function(e){if(e.x>this.gameInitData.screen.width||e.x<-1*e.width||!e.objectPresent){var t=this.gameInitData.allGameBullets.indexOf(e);this.gameInitData.allGameBullets.splice(t,1)}},deleteObjects:function(e){if(e.x+e.sWidth<0||!e.objectPresent){var t=this.gameInitData.allGameEnemies.indexOf(e);this.gameInitData.allGameEnemies.splice(t,1)}},getObjectPosition:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}}},function(e,t,i){var a=i(0).viewModules,n=(i(3).levelConstructor,i(10).bulletModule);e.exports.playerShipModule={movePlayerShip:function(){this.img&&this.ctx&&this.img&&a.createImage(this.ctx,this.img,this.x-30,this.y-30)},initPlayerShip:function(e){var t=this;if(this.ctx){var i=this.data.texture,a=e.serverLocation.picturesDirection;this.img=new Image,this.img.onload=function(){return t.placePlayerShip&&t.placePlayerShip(),t.img},this.img.src=a+i}},shipControl:function(e){var t=this,i=e.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(e){i.down.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:0,yPos:t.data.speed}),i.left.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:-1*t.data.speed,yPos:0}),i.right.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:t.data.speed,yPos:0}),i.up.some((function(t){return e.keyCode==t}))&&t.moveShip({xPos:0,yPos:-1*t.data.speed})})),document.addEventListener("mousemove",(function(e){if("CANVAS"===e.target.tagName){var i=e.clientX-e.target.offsetLeft,a=e.clientY-e.target.offsetTop;t.xFinal=i%t.data.speed==0?i:t.data.speed*Math.floor(i/t.data.speed),t.yFinal=a%t.data.speed==0?a:t.data.speed*Math.floor(a/t.data.speed)}})),document.addEventListener("click",(function(i){t.ctx.width,t.ctx.height;for(var a=0,o=t.data.guns;a<o.length;a++){var r=o[a],s=new n.BulletConstruct(t.x,t.y,r.name,r.color,"player",r.speed,r.width,r.height,r.damage);e.gameInitData.allGameBullets=e.gameInitData.allGameBullets.concat(s)}}))},moveShip:function(e){var t=e.xPos,i=void 0===t?0:t,a=e.yPos,n=void 0===a?0:a;this.x+=i,this.y+=n},placeShip:function(){var e=(this.xFinal-this.x)/this.data.speed,t=(this.yFinal-this.y)/this.data.speed;e=Math.sign(e)>0?e:-1*e,t=Math.sign(t)>0?t:-1*t,e=e>this.data.minSpeed?this.data.minSpeed:e,t=t>this.data.minSpeed?this.data.minSpeed:t,this.x=this.x>this.xFinal?this.x-e:this.x<this.xFinal?this.x+e:this.xFinal,this.y=this.y>this.yFinal?this.y-t:this.y<this.yFinal?this.y+t:this.yFinal},setContext:function(e){this.ctx=e},showInformation:function(){console.log(this)}}},function(e,t,i){i(0).viewModules,i(1).gameMethods,i(2).playerShipModule;var a=i(12).backgroundMapModule,n=function(e,t,i,a,n){this.x=0,this.y=0,this.backgroundTexture=e,this.backgroundSpeed=t,this.screenData=i,this.ctx=a,this.x=n?0:i.width,this.y=0,this.img=new Image,this.img.src=location.origin+"/images/locations/"+this.backgroundTexture};n.prototype.updateMap=a.updateMap,e.exports.levelConstructor={GameBackground:n}},function(e,t,i){"use strict";var a=this&&this.__awaiter||function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function r(e){try{l(a.next(e))}catch(e){o(e)}}function s(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,s)}l((a=a.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var i,a,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(i)throw new TypeError("Generator is already executing.");for(;r;)try{if(i=1,a&&(n=2&o[0]?a.return:o[0]?a.throw||((n=a.return)&&n.call(a),0):a.next)&&!(n=n.call(a,o[1])).done)return n;switch(a=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,a=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(n=(n=r.trys).length>0&&n[n.length-1])&&(6===o[0]||2===o[0])){r=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){r.label=o[1];break}if(6===o[0]&&r.label<n[1]){r.label=n[1],n=o;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(o);break}n[2]&&r.ops.pop(),r.trys.pop();continue}o=t.call(e,r)}catch(e){o=[6,e],a=0}finally{i=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),i(5);var o=i(3).levelConstructor,r=i(13).playerModules,s=i(14).gameModule,l=(i(1).engineModule,i(15).serverModules),c=(i(16).enemies,i(0).viewModules);!function(){a(this,void 0,void 0,(function(){function e(){return a(this,void 0,void 0,(function(){var e,i,a,o,s,c,h,u;return n(this,(function(n){switch(n.label){case 0:return e=document.querySelector("#gamefield"),i=document.querySelector("#gameObjectsfield"),a=document.querySelector("#gameUifield"),o={host:"localhost"===document.location.hostname?"http://localhost:3000/":"",picturesDirection:location.origin+"/images/",levelData:{method:"GET",url:"api/level-data"},gameSetings:{method:"GET",url:"api/game-ettings"},userShip:{method:"GET",url:"api/user-ship"},enemylData:{method:"GET",url:"api/enemy-ship"}},[4,l.getData({url:o.host+o.levelData.url,method:o.levelData.method,data:null,headers:{maplevel:1}})];case 1:return s=n.sent(),[4,l.getData({url:o.host+o.gameSetings.url,method:o.gameSetings.method,data:null,headers:null})];case 2:return c=n.sent(),[4,l.getData({url:o.host+o.userShip.url,method:o.userShip.method,data:null,headers:{usership:1}})];case 3:return h=n.sent(),[4,l.getData({url:o.host+o.enemylData.url,method:o.enemylData.method,data:null,headers:{"ship-type-number":1}})];case 4:return u=n.sent(),[2,{data:{ctx:null,gameField:e||null,gameActionField:i||null,gameUIField:a||null,gameData:{currentLevel:1,currentPoint:0,playerObject:new r.PlayerShip(h,0,3,100,100),levelData:s,gameSetings:c,enemyData:u,constrollers:null},screen:{width:window.innerWidth,height:window.innerHeight},enemyType:null,allGameEnemies:[],allGameBullets:[],allGameMapOBjects:[],mapBackgroundObjects:[],levelChange:!1,gamePause:!1,backScreenPause:!0,gameStatus:!1,gameEngine:setInterval(t,20)},locations:o}]}}))}))}function t(){if(h.spawnEnemyLogic(h),h.gameInitData.ctxActionField&&c.clearField(h.gameInitData.ctxActionField,h.gameInitData.screen.width,h.gameInitData.screen.height),h.gameInitData.backScreenPause&&(h.gameInitData.backScreenPause=!1,h.levelInit(o.GameBackground,h.gameInitData.ctx,h),h.levelInit(o.GameBackground,h.gameInitData.ctx,h)),!h.gameInitData.backScreenPause)for(var e=0,t=h.gameInitData.mapBackgroundObjects;e<t.length;e++){t[e].updateMap()}if(h.gameInitData.allGameBullets.length>0)for(var i=0,a=h.gameInitData.allGameBullets;i<a.length;i++){var n=a[i];n.moveBullets(),n.createBullets(h),h.deleteBullet(n),h.hitDetection(n,h.gameInitData.allGameEnemies)}if(!h.gamePause){if(h.gameInitData.allGameEnemies.length>0)for(var r=0,s=h.gameInitData.allGameEnemies;r<s.length;r++){var l=s[r];l.placeEnemyes(h),l.moveEnemyes(),l.enemyAnimation(),h.deleteObjects(l)}u.placeShip(),u.movePlayerShip()}}var i,h,u,d;return n(this,(function(t){switch(t.label){case 0:return[4,e()];case 1:return i=t.sent(),h=new s.Game(i.data,i.locations),u=h.gameInitData.gameData.playerObject,h.uiController(),h.setGameFields(),d=h.returnContext(),u.ctx=d.gameActionField,u.initPlayerShip(h),u.shipControl(h),[2]}}))}))}()},function(e,t,i){var a=i(6),n=i(7);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var o={insert:"head",singleton:!1},r=(a(n,o),n.locals?n.locals:{});e.exports=r},function(e,t,i){"use strict";var a,n=function(){return void 0===a&&(a=Boolean(window&&document&&document.all&&!window.atob)),a},o=function(){var e={};return function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}e[t]=i}return e[t]}}(),r=[];function s(e){for(var t=-1,i=0;i<r.length;i++)if(r[i].identifier===e){t=i;break}return t}function l(e,t){for(var i={},a=[],n=0;n<e.length;n++){var o=e[n],l=t.base?o[0]+t.base:o[0],c=i[l]||0,h="".concat(l," ").concat(c);i[l]=c+1;var u=s(h),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(r[u].references++,r[u].updater(d)):r.push({identifier:h,updater:f(d,t),references:1}),a.push(h)}return a}function c(e){var t=document.createElement("style"),a=e.attributes||{};if(void 0===a.nonce){var n=i.nc;n&&(a.nonce=n)}if(Object.keys(a).forEach((function(e){t.setAttribute(e,a[e])})),"function"==typeof e.insert)e.insert(t);else{var r=o(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var h,u=(h=[],function(e,t){return h[e]=t,h.filter(Boolean).join("\n")});function d(e,t,i,a){var n=i?"":a.media?"@media ".concat(a.media," {").concat(a.css,"}"):a.css;if(e.styleSheet)e.styleSheet.cssText=u(t,n);else{var o=document.createTextNode(n),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function m(e,t,i){var a=i.css,n=i.media,o=i.sourceMap;if(n?e.setAttribute("media",n):e.removeAttribute("media"),o&&btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}var p=null,g=0;function f(e,t){var i,a,n;if(t.singleton){var o=g++;i=p||(p=c(t)),a=d.bind(null,i,o,!1),n=d.bind(null,i,o,!0)}else i=c(t),a=m.bind(null,i,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(i)};return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=n());var i=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var a=0;a<i.length;a++){var n=s(i[a]);r[n].references--}for(var o=l(e,t),c=0;c<i.length;c++){var h=s(i[c]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}i=o}}}},function(e,t,i){(t=i(8)(!1)).push([e.i,"body{color:orange;background:#333;margin:0;padding:0}canvas{cursor:crosshair}.gameBackground{background:#000}.game-fields{position:absolute}.game-field-wrapper{display:flex;justify-content:center;height:100vh;align-items:center}\n",""]),e.exports=t},function(e,t,i){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var i=function(e,t){var i=e[1]||"",a=e[3];if(!a)return i;if(t&&"function"==typeof btoa){var n=(r=a,s=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(o).concat([n]).join("\n")}var r,s,l;return[i].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(i,"}"):i})).join("")},t.i=function(e,i,a){"string"==typeof e&&(e=[[null,e,""]]);var n={};if(a)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(n[r]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);a&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),t.push(l))}},t}},function(e,t){e.exports.ERROR_LIST={noData:"There is no data",noObject:"There is no Object"}},function(e,t,i){var a=i(11).bulletsModule,n=i(1).gameMethods,o=i(16).enemiesModel,r=function(e,t,i,a,n,o,r,s,l){this.x=e,this.y=t,this.bulletType=i,this.bulletTexture=a,this.bulletDirection=n,this.bulletSpeed=o,this.width=r,this.height=s,this.damage=l,this.id=(new Date).getTime(),this.objectPresent=!0};r.prototype.createBullets=a.createBullets,r.prototype.placeBullets=a.placeBullets,r.prototype.moveBullets=a.moveBullets,r.prototype.getObjectPosition=n.getObjectPosition,r.prototype.takeDamage=o.takeDamage,e.exports.bulletModule={BulletConstruct:r}},function(e,t,i){var a=i(0).viewModules;e.exports.bulletsModule={createBullets:function(e){a.createLaserBullet({ctx:e.gameInitData.ctxActionField,x:this.x,y:this.y,color:this.bulletTexture,width:this.width,height:this.height,radius:5})},placeBullets:function(){},moveBullets:function(){"player"==this.bulletDirection?this.x+=this.bulletSpeed:this.x-=this.bulletSpeed}}},function(e,t,i){var a=i(0).viewModules;i(1).gameMethods,i(2).playerShipModule;e.exports.backgroundMapModule={updateMap:function(){this.img=this.img||new Image;var e=this;this.x-=this.backgroundSpeed,this.x+this.screenData.width<0&&(this.x=this.screenData.width),this.img.onload=function(){a.createImage(e.ctx,e.img,e.x,0,e.screenData.width+2,e.screenData.height)},this.img.src=this.img.src||location.origin+"/images/locations/"+this.backgroundTexture}}},function(e,t,i){i(0).viewModules;var a=i(2).playerShipModule,n=i(1).gameMethods,o=i(16).enemiesModel,r=function(e,t,i,a,n){void 0===a&&(a=100),void 0===n&&(n=100),this.data=e,this.points=t,this.healthPoint=i,this.x=a,this.y=n,this.xFinal=a,this.yFinal=n};r.prototype.initPlayerShip=a.initPlayerShip,r.prototype.movePlayerShip=a.movePlayerShip,r.prototype.shipControl=a.shipControl,r.prototype.moveShip=a.moveShip,r.prototype.placeShip=a.placeShip,r.prototype.setContext=a.setContext,r.prototype.getObjectPosition=n.getObjectPosition,r.prototype.takeDamage=o.takeDamage,e.exports.playerModules={PlayerShip:r}},function(e,t,i){i(0).viewModules;var a=i(1).gameMethods,n=i(2).playerShipModule,o=i(17).regularAiModule,r=i(16).enemiesModel,s=i(19).uiModules,l=function(){function e(e,t){this.gameInitData=e,this.serverLocation=t,this.gameInitData=e,this.serverLocation=t}return e.prototype.changeLevel=function(e){this.gameInitData.gameData.levelData.currentLevel=e},e.prototype.showGameInfo=function(){return{currentLevel:this.gameInitData.gameData.currentLevel,currentPoint:this.gameInitData.gameData.currentPoint}},e.prototype.showLevelData=function(){return this.gameInitData.gameData.levelData},e.prototype.getServerLevelData=function(){},e.prototype.returnContext=function(){return this.gameInitData.gameField&&this.gameInitData.gameActionField&&this.gameInitData.gameUIField?{gameField:this.gameInitData.gameField,gameActionField:this.gameInitData.ctxActionField,gameUIField:this.gameInitData.gameUIField}:null},e}();l.prototype.createContext=a.createContext,l.prototype.initField=a.initField,l.prototype.levelInit=a.levelInit,l.prototype.setGameFields=a.setGameFields,l.prototype.initPlayerShip=n.initPlayerShip,l.prototype.placePlayerShip=n.placePlayerShip,l.prototype.deleteBullet=a.deleteBullet,l.prototype.deleteObjects=a.deleteObjects,l.prototype.hitDetection=r.hitDetection,l.prototype.spawnEnemyLogic=o.spawnEnemyLogic,l.prototype.createNewEnemy=o.createNewEnemy,l.prototype.gameRandomizer=o.gameRandomizer,l.prototype.uiController=s.uiController,e.exports.gameModule={Game:l}},function(e,t){e.exports.serverModules={getData:function(e){var t=e.url,i=e.method,a=e.data,n=e.headers,o=Object.assign({"Content-Type":"application/json"},n||!1);return fetch(t,{method:i,mode:"cors",headers:o,body:a?JSON.stringify(a):null}).then((function(e){return e.json()})).then((function(e){return e}))}}},function(e,t,i){var a=i(0).viewModules;e.exports.enemiesModel={placeEnemyes:function(e){a.createImage(e.gameInitData.ctxActionField,this.img,this.sx,this.sy,this.sWidth,this.sHeight,this.x,this.y,this.width,this.height)},moveEnemyes:function(e,t){void 0===t&&(t=0),this.x-=this.enemySpeed,this.y-=t},loadEnemyes:function(){this.img=new Image,this.img.src=this.shipTexture},shoot:function(){},enemyAnimation:function(){this.detectFrame+=1,this.detectFrame%this.animationSteps==0&&(this.detectFrame=0,this.sx+=this.sWidth,this.sx>=this.picturesWidth&&(this.sx=0))},hitDetection:function(e,t){for(var i=0,a=t;i<a.length;i++){var n=a[i],o=e.getObjectPosition(),r=Math.max(o.x,n.x),s=Math.max(o.y,n.y),l=Math.min(o.x+o.width,n.x+n.width)-r,c=Math.min(o.y+e.height,n.y+n.height)-s;if("collision"==(!(Math.sign(l)<0||Math.sign(c)<0)&&"collision")){e.takeDamage(n.damage?n.damage:0),n.takeDamage(e.damage?e.damage:0);break}}},takeDamage:function(e){return void 0===e&&(e=0),this.hasOwnProperty("bulletType")?this.objectPresent=!1:this.hasOwnProperty("healthPoint")?(this.healthPoint-=e,this.healthPoint<=0?this.objectPresent=!1:void 0):console.log("no Object")}}},function(e,t,i){var a=i(18).objectConstructor;e.exports.regularAiModule={dartShipLogic:function(){},spawnEnemyLogic:function(e){var t=this.gameInitData.gameData,i=t.levelData,a=t.enemyData;if(!this.gameInitData.gameData.levelChange&&this.gameRandomizer(i.enemyProbability)<=i.enemyRandomizerIndex)for(var n=this.gameRandomizer(i.enemyMaxNumber);n<i.enemyMaxNumber;n++){var o=a[this.gameRandomizer(a.length)],r=this.createNewEnemy(o);r.loadEnemyes(),this.gameInitData.allGameEnemies=this.gameInitData.allGameEnemies.concat(r)}},createNewEnemy:function(e){var t=this.gameInitData.screen.width+300,i=this.gameRandomizer(this.gameInitData.screen.height),n=e.details;return new a.EnemyObject(t,i,n.sx,n.sy,n.imageWidth/n.numberOfItems,n.imageHeight,n.imageWidth,n.numberOfItems,n.width,n.height,n.skinName,n.speed,n.status,n.name,n.bulletType,n.rapidFire,n.pointsPerUnit,n.healthPoint,n.animationSteps,n.damage)},gameRandomizer:function(e,t){return void 0===t&&(t=0),Math.floor(Math.random()*e+t)}}},function(e,t,i){var a=i(16).enemiesModel,n=i(1).gameMethods,o=function(e,t,i,a,n,o,r,s,l,c,h,u,d,m,p,g,f,y,v,x){this.shipPresent=!0,this.id=(new Date).getTime(),this.x=e,this.y=t,this.sx=i,this.sy=a,this.sWidth=n,this.sHeight=o,this.picturesWidth=r,this.numberOfItems=s,this.width=l,this.height=c,this.shipTexture=location.origin+"/images/spaceShips/"+h,this.enemySpeed=u,this.status=d,this.name=m,this.bulletTypeNumber=p,this.rapidFire=g,this.pointsPerUnit=f,this.healthPoint=y,this.animationSteps=v,this.damage=x,this.detectFrame=0,this.objectPresent=!0};o.prototype.placeEnemyes=a.placeEnemyes,o.prototype.moveEnemyes=a.moveEnemyes,o.prototype.loadEnemyes=a.loadEnemyes,o.prototype.shoot=a.shoot,o.prototype.enemyAnimation=a.enemyAnimation,o.prototype.getObjectPosition=n.getObjectPosition,o.prototype.takeDamage=a.takeDamage,e.exports.objectConstructor={EnemyObject:o}},function(e,t){e.exports.uiModules={gamePause:function(){},uiController:function(){var e=this.gameInitData.gameData.gameSetings.keyControls;document.addEventListener("keydown",(function(t){e.escape.some((function(e){return t.keyCode==e}))&&console.log("escape"),e.pause.some((function(e){return t.keyCode==e}))&&console.log("pause")}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,